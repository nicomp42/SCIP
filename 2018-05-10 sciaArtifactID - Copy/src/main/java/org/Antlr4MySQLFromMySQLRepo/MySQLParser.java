// Generated from MySQLParser.g4 by ANTLR 4.7.1
package org.Antlr4MySQLFromMySQLRepo;
/*
 * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0,
 * as published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms, as
 * designated in a particular file or component or in included license
 * documentation. The authors of MySQL hereby grant you an additional
 * permission to link the program and your derivative works with the
 * separately licensed software that they have included with MySQL.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MySQLParser extends MySQLBaseRecognizer {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ACCOUNT_SYMBOL=1, ASCII_SYMBOL=2, ALWAYS_SYMBOL=3, BACKUP_SYMBOL=4, BEGIN_SYMBOL=5, 
		BYTE_SYMBOL=6, CACHE_SYMBOL=7, CHARSET_SYMBOL=8, CHECKSUM_SYMBOL=9, CLOSE_SYMBOL=10, 
		COMMENT_SYMBOL=11, COMMIT_SYMBOL=12, CONTAINS_SYMBOL=13, DEALLOCATE_SYMBOL=14, 
		DO_SYMBOL=15, END_SYMBOL=16, EXECUTE_SYMBOL=17, FLUSH_SYMBOL=18, FOLLOWS_SYMBOL=19, 
		FORMAT_SYMBOL=20, GROUP_REPLICATION_SYMBOL=21, HANDLER_SYMBOL=22, HELP_SYMBOL=23, 
		HOST_SYMBOL=24, INSTALL_SYMBOL=25, LANGUAGE_SYMBOL=26, NO_SYMBOL=27, OPEN_SYMBOL=28, 
		OPTIONS_SYMBOL=29, OWNER_SYMBOL=30, PARSER_SYMBOL=31, PARTITION_SYMBOL=32, 
		PORT_SYMBOL=33, PRECEDES_SYMBOL=34, PREPARE_SYMBOL=35, REMOVE_SYMBOL=36, 
		REPAIR_SYMBOL=37, RESET_SYMBOL=38, RESTORE_SYMBOL=39, ROLLBACK_SYMBOL=40, 
		SAVEPOINT_SYMBOL=41, SECURITY_SYMBOL=42, SERVER_SYMBOL=43, SIGNED_SYMBOL=44, 
		SLAVE_SYMBOL=45, SOCKET_SYMBOL=46, SONAME_SYMBOL=47, START_SYMBOL=48, 
		STOP_SYMBOL=49, TRUNCATE_SYMBOL=50, UNICODE_SYMBOL=51, UNINSTALL_SYMBOL=52, 
		UPGRADE_SYMBOL=53, WRAPPER_SYMBOL=54, XA_SYMBOL=55, SHUTDOWN_SYMBOL=56, 
		ACTION_SYMBOL=57, ADDDATE_SYMBOL=58, AFTER_SYMBOL=59, AGAINST_SYMBOL=60, 
		AGGREGATE_SYMBOL=61, ALGORITHM_SYMBOL=62, ANALYZE_SYMBOL=63, ANY_SYMBOL=64, 
		AT_SYMBOL=65, AUTHORS_SYMBOL=66, AUTO_INCREMENT_SYMBOL=67, AUTOEXTEND_SIZE_SYMBOL=68, 
		AVG_ROW_LENGTH_SYMBOL=69, AVG_SYMBOL=70, BINLOG_SYMBOL=71, BIT_SYMBOL=72, 
		BLOCK_SYMBOL=73, BOOL_SYMBOL=74, BOOLEAN_SYMBOL=75, BTREE_SYMBOL=76, CASCADED_SYMBOL=77, 
		CATALOG_NAME_SYMBOL=78, CHAIN_SYMBOL=79, CHANGED_SYMBOL=80, CHANNEL_SYMBOL=81, 
		CIPHER_SYMBOL=82, CLIENT_SYMBOL=83, CLASS_ORIGIN_SYMBOL=84, COALESCE_SYMBOL=85, 
		CODE_SYMBOL=86, COLLATION_SYMBOL=87, COLUMN_NAME_SYMBOL=88, COLUMN_FORMAT_SYMBOL=89, 
		COLUMNS_SYMBOL=90, COMMITTED_SYMBOL=91, COMPACT_SYMBOL=92, COMPLETION_SYMBOL=93, 
		COMPRESSED_SYMBOL=94, COMPRESSION_SYMBOL=95, ENCRYPTION_SYMBOL=96, CONCURRENT_SYMBOL=97, 
		CONNECTION_SYMBOL=98, CONSISTENT_SYMBOL=99, CONSTRAINT_CATALOG_SYMBOL=100, 
		CONSTRAINT_SCHEMA_SYMBOL=101, CONSTRAINT_NAME_SYMBOL=102, CONTEXT_SYMBOL=103, 
		CONTRIBUTORS_SYMBOL=104, CPU_SYMBOL=105, CUBE_SYMBOL=106, CURRENT_SYMBOL=107, 
		CURSOR_NAME_SYMBOL=108, DATA_SYMBOL=109, DATAFILE_SYMBOL=110, DATETIME_SYMBOL=111, 
		DATE_SYMBOL=112, DAY_SYMBOL=113, DEFAULT_AUTH_SYMBOL=114, DEFINER_SYMBOL=115, 
		DELAY_KEY_WRITE_SYMBOL=116, DES_KEY_FILE_SYMBOL=117, DIAGNOSTICS_SYMBOL=118, 
		DIRECTORY_SYMBOL=119, DISABLE_SYMBOL=120, DISCARD_SYMBOL=121, DISK_SYMBOL=122, 
		DUMPFILE_SYMBOL=123, DUPLICATE_SYMBOL=124, DYNAMIC_SYMBOL=125, ENDS_SYMBOL=126, 
		ENUM_SYMBOL=127, ENGINE_SYMBOL=128, ENGINES_SYMBOL=129, ERROR_SYMBOL=130, 
		ERRORS_SYMBOL=131, ESCAPE_SYMBOL=132, EVENT_SYMBOL=133, EVENTS_SYMBOL=134, 
		EVERY_SYMBOL=135, EXPANSION_SYMBOL=136, EXPORT_SYMBOL=137, EXTENDED_SYMBOL=138, 
		EXTENT_SIZE_SYMBOL=139, FAULTS_SYMBOL=140, FAST_SYMBOL=141, FOUND_SYMBOL=142, 
		ENABLE_SYMBOL=143, FULL_SYMBOL=144, FILE_SYMBOL=145, FILE_BLOCK_SIZE_SYMBOL=146, 
		FILTER_SYMBOL=147, FIRST_SYMBOL=148, FIXED_SYMBOL=149, GENERAL_SYMBOL=150, 
		GEOMETRY_SYMBOL=151, GEOMETRYCOLLECTION_SYMBOL=152, GET_FORMAT_SYMBOL=153, 
		GRANTS_SYMBOL=154, GLOBAL_SYMBOL=155, HASH_SYMBOL=156, HOSTS_SYMBOL=157, 
		HOUR_SYMBOL=158, IDENTIFIED_SYMBOL=159, IGNORE_SERVER_IDS_SYMBOL=160, 
		INVOKER_SYMBOL=161, IMPORT_SYMBOL=162, INDEXES_SYMBOL=163, INITIAL_SIZE_SYMBOL=164, 
		INSTANCE_SYMBOL=165, INNODB_SYMBOL=166, IO_SYMBOL=167, IPC_SYMBOL=168, 
		ISOLATION_SYMBOL=169, ISSUER_SYMBOL=170, INSERT_METHOD_SYMBOL=171, JSON_SYMBOL=172, 
		KEY_BLOCK_SIZE_SYMBOL=173, LAST_SYMBOL=174, LEAVES_SYMBOL=175, LESS_SYMBOL=176, 
		LEVEL_SYMBOL=177, LINESTRING_SYMBOL=178, LIST_SYMBOL=179, LOCAL_SYMBOL=180, 
		LOCKS_SYMBOL=181, LOGFILE_SYMBOL=182, LOGS_SYMBOL=183, MAX_ROWS_SYMBOL=184, 
		MASTER_SYMBOL=185, MASTER_HEARTBEAT_PERIOD_SYMBOL=186, MASTER_HOST_SYMBOL=187, 
		MASTER_PORT_SYMBOL=188, MASTER_LOG_FILE_SYMBOL=189, MASTER_LOG_POS_SYMBOL=190, 
		MASTER_USER_SYMBOL=191, MASTER_PASSWORD_SYMBOL=192, MASTER_SERVER_ID_SYMBOL=193, 
		MASTER_CONNECT_RETRY_SYMBOL=194, MASTER_RETRY_COUNT_SYMBOL=195, MASTER_DELAY_SYMBOL=196, 
		MASTER_SSL_SYMBOL=197, MASTER_SSL_CA_SYMBOL=198, MASTER_SSL_CAPATH_SYMBOL=199, 
		MASTER_TLS_VERSION_SYMBOL=200, MASTER_SSL_CERT_SYMBOL=201, MASTER_SSL_CIPHER_SYMBOL=202, 
		MASTER_SSL_CRL_SYMBOL=203, MASTER_SSL_CRLPATH_SYMBOL=204, MASTER_SSL_KEY_SYMBOL=205, 
		MASTER_AUTO_POSITION_SYMBOL=206, MAX_CONNECTIONS_PER_HOUR_SYMBOL=207, 
		MAX_QUERIES_PER_HOUR_SYMBOL=208, MAX_STATEMENT_TIME_SYMBOL=209, MAX_SIZE_SYMBOL=210, 
		MAX_UPDATES_PER_HOUR_SYMBOL=211, MAX_USER_CONNECTIONS_SYMBOL=212, MEDIUM_SYMBOL=213, 
		MEMORY_SYMBOL=214, MERGE_SYMBOL=215, MESSAGE_TEXT_SYMBOL=216, MICROSECOND_SYMBOL=217, 
		MIGRATE_SYMBOL=218, MINUTE_SYMBOL=219, MIN_ROWS_SYMBOL=220, MODIFY_SYMBOL=221, 
		MODE_SYMBOL=222, MONTH_SYMBOL=223, MULTILINESTRING_SYMBOL=224, MULTIPOINT_SYMBOL=225, 
		MULTIPOLYGON_SYMBOL=226, MUTEX_SYMBOL=227, MYSQL_ERRNO_SYMBOL=228, NAME_SYMBOL=229, 
		NAMES_SYMBOL=230, NATIONAL_SYMBOL=231, NCHAR_SYMBOL=232, NDBCLUSTER_SYMBOL=233, 
		NEVER_SYMBOL=234, NEXT_SYMBOL=235, NEW_SYMBOL=236, NO_WAIT_SYMBOL=237, 
		NODEGROUP_SYMBOL=238, NONE_SYMBOL=239, NUMBER_SYMBOL=240, NVARCHAR_SYMBOL=241, 
		OFFSET_SYMBOL=242, OLD_PASSWORD_SYMBOL=243, ONE_SHOT_SYMBOL=244, ONE_SYMBOL=245, 
		PACK_KEYS_SYMBOL=246, PAGE_SYMBOL=247, PARTIAL_SYMBOL=248, PARTITIONING_SYMBOL=249, 
		PARTITIONS_SYMBOL=250, PASSWORD_SYMBOL=251, PHASE_SYMBOL=252, PLUGIN_DIR_SYMBOL=253, 
		PLUGIN_SYMBOL=254, PLUGINS_SYMBOL=255, POINT_SYMBOL=256, POLYGON_SYMBOL=257, 
		PRESERVE_SYMBOL=258, PREV_SYMBOL=259, PRIVILEGES_SYMBOL=260, PROCESS_SYMBOL=261, 
		PROCESSLIST_SYMBOL=262, PROFILE_SYMBOL=263, PROFILES_SYMBOL=264, PROXY_SYMBOL=265, 
		QUARTER_SYMBOL=266, QUERY_SYMBOL=267, QUICK_SYMBOL=268, READ_ONLY_SYMBOL=269, 
		REBUILD_SYMBOL=270, RECOVER_SYMBOL=271, REDO_BUFFER_SIZE_SYMBOL=272, REDOFILE_SYMBOL=273, 
		REDUNDANT_SYMBOL=274, RELAY_SYMBOL=275, RELAYLOG_SYMBOL=276, RELAY_LOG_FILE_SYMBOL=277, 
		RELAY_LOG_POS_SYMBOL=278, RELAY_THREAD_SYMBOL=279, RELOAD_SYMBOL=280, 
		REORGANIZE_SYMBOL=281, REPEATABLE_SYMBOL=282, REPLICATION_SYMBOL=283, 
		REPLICATE_DO_DB_SYMBOL=284, REPLICATE_IGNORE_DB_SYMBOL=285, REPLICATE_DO_TABLE_SYMBOL=286, 
		REPLICATE_IGNORE_TABLE_SYMBOL=287, REPLICATE_WILD_DO_TABLE_SYMBOL=288, 
		REPLICATE_WILD_IGNORE_TABLE_SYMBOL=289, REPLICATE_REWRITE_DB_SYMBOL=290, 
		RESUME_SYMBOL=291, RETURNED_SQLSTATE_SYMBOL=292, RETURNS_SYMBOL=293, REVERSE_SYMBOL=294, 
		ROLLUP_SYMBOL=295, ROTATE_SYMBOL=296, ROUTINE_SYMBOL=297, ROWS_SYMBOL=298, 
		ROW_COUNT_SYMBOL=299, ROW_FORMAT_SYMBOL=300, ROW_SYMBOL=301, RTREE_SYMBOL=302, 
		SCHEDULE_SYMBOL=303, SCHEMA_NAME_SYMBOL=304, SECOND_SYMBOL=305, SERIAL_SYMBOL=306, 
		SERIALIZABLE_SYMBOL=307, SESSION_SYMBOL=308, SIMPLE_SYMBOL=309, SHARE_SYMBOL=310, 
		SLOW_SYMBOL=311, SNAPSHOT_SYMBOL=312, SOUNDS_SYMBOL=313, SOURCE_SYMBOL=314, 
		SQL_AFTER_GTIDS_SYMBOL=315, SQL_AFTER_MTS_GAPS_SYMBOL=316, SQL_BEFORE_GTIDS_SYMBOL=317, 
		SQL_CACHE_SYMBOL=318, SQL_BUFFER_RESULT_SYMBOL=319, SQL_NO_CACHE_SYMBOL=320, 
		SQL_THREAD_SYMBOL=321, STACKED_SYMBOL=322, STARTS_SYMBOL=323, STATS_AUTO_RECALC_SYMBOL=324, 
		STATS_PERSISTENT_SYMBOL=325, STATS_SAMPLE_PAGES_SYMBOL=326, STATUS_SYMBOL=327, 
		STORAGE_SYMBOL=328, STRING_SYMBOL=329, SUBCLASS_ORIGIN_SYMBOL=330, SUBDATE_SYMBOL=331, 
		SUBJECT_SYMBOL=332, SUBPARTITION_SYMBOL=333, SUBPARTITIONS_SYMBOL=334, 
		SUPER_SYMBOL=335, SUSPEND_SYMBOL=336, SWAPS_SYMBOL=337, SWITCHES_SYMBOL=338, 
		TABLE_NAME_SYMBOL=339, TABLES_SYMBOL=340, TABLE_CHECKSUM_SYMBOL=341, TABLESPACE_SYMBOL=342, 
		TEMPORARY_SYMBOL=343, TEMPTABLE_SYMBOL=344, TEXT_SYMBOL=345, THAN_SYMBOL=346, 
		TRANSACTION_SYMBOL=347, TRIGGERS_SYMBOL=348, TIMESTAMP_SYMBOL=349, TIMESTAMP_ADD_SYMBOL=350, 
		TIMESTAMP_DIFF_SYMBOL=351, TIME_SYMBOL=352, TYPES_SYMBOL=353, TYPE_SYMBOL=354, 
		UDF_RETURNS_SYMBOL=355, FUNCTION_SYMBOL=356, UNCOMMITTED_SYMBOL=357, UNDEFINED_SYMBOL=358, 
		UNDO_BUFFER_SIZE_SYMBOL=359, UNDOFILE_SYMBOL=360, UNKNOWN_SYMBOL=361, 
		UNTIL_SYMBOL=362, USER_RESOURCES_SYMBOL=363, USER_SYMBOL=364, USE_FRM_SYMBOL=365, 
		VARIABLES_SYMBOL=366, VIEW_SYMBOL=367, VALUE_SYMBOL=368, WARNINGS_SYMBOL=369, 
		WAIT_SYMBOL=370, WEEK_SYMBOL=371, WORK_SYMBOL=372, WEIGHT_STRING_SYMBOL=373, 
		X509_SYMBOL=374, XID_SYMBOL=375, XML_SYMBOL=376, YEAR_SYMBOL=377, NOT2_SYMBOL=378, 
		CONCAT_PIPES_SYMBOL=379, INT_NUMBER=380, LONG_NUMBER=381, ULONGLONG_NUMBER=382, 
		EQUAL_OPERATOR=383, ASSIGN_OPERATOR=384, NULL_SAFE_EQUAL_OPERATOR=385, 
		GREATER_OR_EQUAL_OPERATOR=386, GREATER_THAN_OPERATOR=387, LESS_OR_EQUAL_OPERATOR=388, 
		LESS_THAN_OPERATOR=389, NOT_EQUAL_OPERATOR=390, PLUS_OPERATOR=391, MINUS_OPERATOR=392, 
		MULT_OPERATOR=393, DIV_OPERATOR=394, MOD_OPERATOR=395, LOGICAL_NOT_OPERATOR=396, 
		BITWISE_NOT_OPERATOR=397, SHIFT_LEFT_OPERATOR=398, SHIFT_RIGHT_OPERATOR=399, 
		LOGICAL_AND_OPERATOR=400, BITWISE_AND_OPERATOR=401, BITWISE_XOR_OPERATOR=402, 
		LOGICAL_OR_OPERATOR=403, BITWISE_OR_OPERATOR=404, DOT_SYMBOL=405, COMMA_SYMBOL=406, 
		SEMICOLON_SYMBOL=407, COLON_SYMBOL=408, OPEN_PAR_SYMBOL=409, CLOSE_PAR_SYMBOL=410, 
		OPEN_CURLY_SYMBOL=411, CLOSE_CURLY_SYMBOL=412, UNDERLINE_SYMBOL=413, JSON_SEPARATOR_SYMBOL=414, 
		JSON_UNQUOTED_SEPARATOR_SYMBOL=415, AT_SIGN_SYMBOL=416, AT_TEXT_SUFFIX=417, 
		AT_AT_SIGN_SYMBOL=418, NULL2_SYMBOL=419, PARAM_MARKER=420, HEX_NUMBER=421, 
		BIN_NUMBER=422, DECIMAL_NUMBER=423, FLOAT_NUMBER=424, ACCESSIBLE_SYMBOL=425, 
		ADD_SYMBOL=426, ALL_SYMBOL=427, ALTER_SYMBOL=428, ANALYSE_SYMBOL=429, 
		AND_SYMBOL=430, AS_SYMBOL=431, ASC_SYMBOL=432, ASENSITIVE_SYMBOL=433, 
		BEFORE_SYMBOL=434, BETWEEN_SYMBOL=435, BIGINT_SYMBOL=436, BINARY_SYMBOL=437, 
		BIN_NUM_SYMBOL=438, BIT_AND_SYMBOL=439, BIT_OR_SYMBOL=440, BIT_XOR_SYMBOL=441, 
		BLOB_SYMBOL=442, BOTH_SYMBOL=443, BY_SYMBOL=444, CALL_SYMBOL=445, CASCADE_SYMBOL=446, 
		CASE_SYMBOL=447, CAST_SYMBOL=448, CHANGE_SYMBOL=449, CHAR_SYMBOL=450, 
		CHECK_SYMBOL=451, COLLATE_SYMBOL=452, COLUMN_SYMBOL=453, CONDITION_SYMBOL=454, 
		CONSTRAINT_SYMBOL=455, CONTINUE_SYMBOL=456, CONVERT_SYMBOL=457, COUNT_SYMBOL=458, 
		CREATE_SYMBOL=459, CROSS_SYMBOL=460, CURDATE_SYMBOL=461, CURRENT_DATE_SYMBOL=462, 
		CURRENT_TIME_SYMBOL=463, CURRENT_USER_SYMBOL=464, CURSOR_SYMBOL=465, CURTIME_SYMBOL=466, 
		DATABASE_SYMBOL=467, DATABASES_SYMBOL=468, DATE_ADD_SYMBOL=469, DATE_SUB_SYMBOL=470, 
		DAY_HOUR_SYMBOL=471, DAY_MICROSECOND_SYMBOL=472, DAY_MINUTE_SYMBOL=473, 
		DAY_SECOND_SYMBOL=474, DECIMAL_NUM_SYMBOL=475, DECIMAL_SYMBOL=476, DECLARE_SYMBOL=477, 
		DEFAULT_SYMBOL=478, DELAYED_SYMBOL=479, DELETE_SYMBOL=480, DESC_SYMBOL=481, 
		DESCRIBE_SYMBOL=482, DETERMINISTIC_SYMBOL=483, DISTINCT_SYMBOL=484, DIV_SYMBOL=485, 
		DOUBLE_SYMBOL=486, DROP_SYMBOL=487, DUAL_SYMBOL=488, EACH_SYMBOL=489, 
		ELSE_SYMBOL=490, ELSEIF_SYMBOL=491, ENCLOSED_SYMBOL=492, END_OF_INPUT_SYMBOL=493, 
		ESCAPED_SYMBOL=494, EXCHANGE_SYMBOL=495, EXISTS_SYMBOL=496, EXIT_SYMBOL=497, 
		EXPIRE_SYMBOL=498, EXTRACT_SYMBOL=499, FALSE_SYMBOL=500, FETCH_SYMBOL=501, 
		FLOAT_SYMBOL=502, FORCE_SYMBOL=503, FOREIGN_SYMBOL=504, FOR_SYMBOL=505, 
		FRAC_SECOND_SYMBOL=506, FROM_SYMBOL=507, FULLTEXT_SYMBOL=508, GET_SYMBOL=509, 
		GENERATED_SYMBOL=510, GRANT_SYMBOL=511, GROUP_SYMBOL=512, GROUP_CONCAT_SYMBOL=513, 
		HAVING_SYMBOL=514, HIGH_PRIORITY_SYMBOL=515, HOUR_MICROSECOND_SYMBOL=516, 
		HOUR_MINUTE_SYMBOL=517, HOUR_SECOND_SYMBOL=518, IF_SYMBOL=519, IGNORE_SYMBOL=520, 
		INDEX_SYMBOL=521, INFILE_SYMBOL=522, INNER_SYMBOL=523, INOUT_SYMBOL=524, 
		INSENSITIVE_SYMBOL=525, INSERT_SYMBOL=526, INTERVAL_SYMBOL=527, INTO_SYMBOL=528, 
		INT_SYMBOL=529, IN_SYMBOL=530, IO_AFTER_GTIDS_SYMBOL=531, IO_BEFORE_GTIDS_SYMBOL=532, 
		IS_SYMBOL=533, ITERATE_SYMBOL=534, JOIN_SYMBOL=535, KEYS_SYMBOL=536, KEY_SYMBOL=537, 
		KILL_SYMBOL=538, LEADING_SYMBOL=539, LEAVE_SYMBOL=540, LEFT_SYMBOL=541, 
		LIKE_SYMBOL=542, LIMIT_SYMBOL=543, LINEAR_SYMBOL=544, LINES_SYMBOL=545, 
		LOAD_SYMBOL=546, LOCATOR_SYMBOL=547, LOCK_SYMBOL=548, LONGBLOB_SYMBOL=549, 
		LONGTEXT_SYMBOL=550, LONG_NUM_SYMBOL=551, LONG_SYMBOL=552, LOOP_SYMBOL=553, 
		LOW_PRIORITY_SYMBOL=554, MASTER_BIND_SYMBOL=555, MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL=556, 
		MATCH_SYMBOL=557, MAX_SYMBOL=558, MAXVALUE_SYMBOL=559, MEDIUMBLOB_SYMBOL=560, 
		MEDIUMINT_SYMBOL=561, MEDIUMTEXT_SYMBOL=562, MID_SYMBOL=563, MINUTE_MICROSECOND_SYMBOL=564, 
		MINUTE_SECOND_SYMBOL=565, MIN_SYMBOL=566, MODIFIES_SYMBOL=567, MOD_SYMBOL=568, 
		NATURAL_SYMBOL=569, NCHAR_STRING_SYMBOL=570, NEG_SYMBOL=571, NONBLOCKING_SYMBOL=572, 
		NOT_SYMBOL=573, NOW_SYMBOL=574, NO_WRITE_TO_BINLOG_SYMBOL=575, NULL_SYMBOL=576, 
		NUMERIC_SYMBOL=577, OFFLINE_SYMBOL=578, ON_SYMBOL=579, ONLINE_SYMBOL=580, 
		ONLY_SYMBOL=581, OPTIMIZE_SYMBOL=582, OPTIMIZER_COSTS_SYMBOL=583, OPTION_SYMBOL=584, 
		OPTIONALLY_SYMBOL=585, ORDER_SYMBOL=586, OR_SYMBOL=587, OUTER_SYMBOL=588, 
		OUTFILE_SYMBOL=589, OUT_SYMBOL=590, POSITION_SYMBOL=591, PRECISION_SYMBOL=592, 
		PRIMARY_SYMBOL=593, PROCEDURE_SYMBOL=594, PURGE_SYMBOL=595, RANGE_SYMBOL=596, 
		READS_SYMBOL=597, READ_SYMBOL=598, READ_WRITE_SYMBOL=599, REAL_SYMBOL=600, 
		REFERENCES_SYMBOL=601, REGEXP_SYMBOL=602, RELEASE_SYMBOL=603, RENAME_SYMBOL=604, 
		REPEAT_SYMBOL=605, REPLACE_SYMBOL=606, REQUIRE_SYMBOL=607, RESIGNAL_SYMBOL=608, 
		RESTRICT_SYMBOL=609, RETURN_SYMBOL=610, REVOKE_SYMBOL=611, RIGHT_SYMBOL=612, 
		SECOND_MICROSECOND_SYMBOL=613, SELECT_SYMBOL=614, SENSITIVE_SYMBOL=615, 
		SEPARATOR_SYMBOL=616, SERVER_OPTIONS_SYMBOL=617, SESSION_USER_SYMBOL=618, 
		SET_SYMBOL=619, SET_VAR_SYMBOL=620, SHOW_SYMBOL=621, SIGNAL_SYMBOL=622, 
		SMALLINT_SYMBOL=623, SPATIAL_SYMBOL=624, SPECIFIC_SYMBOL=625, SQLEXCEPTION_SYMBOL=626, 
		SQLSTATE_SYMBOL=627, SQLWARNING_SYMBOL=628, SQL_BIG_RESULT_SYMBOL=629, 
		SQL_CALC_FOUND_ROWS_SYMBOL=630, SQL_SMALL_RESULT_SYMBOL=631, SQL_SYMBOL=632, 
		SSL_SYMBOL=633, STARTING_SYMBOL=634, STDDEV_SAMP_SYMBOL=635, STDDEV_SYMBOL=636, 
		STDDEV_POP_SYMBOL=637, STD_SYMBOL=638, STORED_SYMBOL=639, STRAIGHT_JOIN_SYMBOL=640, 
		SUBSTR_SYMBOL=641, SUBSTRING_SYMBOL=642, SUM_SYMBOL=643, SYSDATE_SYMBOL=644, 
		SYSTEM_USER_SYMBOL=645, TABLE_REF_PRIORITY_SYMBOL=646, TABLE_SYMBOL=647, 
		TERMINATED_SYMBOL=648, THEN_SYMBOL=649, TINYBLOB_SYMBOL=650, TINYINT_SYMBOL=651, 
		TINYTEXT_SYMBOL=652, TO_SYMBOL=653, TRAILING_SYMBOL=654, TRIGGER_SYMBOL=655, 
		TRIM_SYMBOL=656, TRUE_SYMBOL=657, UNDO_SYMBOL=658, UNION_SYMBOL=659, UNIQUE_SYMBOL=660, 
		UNLOCK_SYMBOL=661, UNSIGNED_SYMBOL=662, UPDATE_SYMBOL=663, USAGE_SYMBOL=664, 
		USE_SYMBOL=665, USING_SYMBOL=666, UTC_DATE_SYMBOL=667, UTC_TIMESTAMP_SYMBOL=668, 
		UTC_TIME_SYMBOL=669, VALIDATION_SYMBOL=670, VALUES_SYMBOL=671, VARBINARY_SYMBOL=672, 
		VARCHAR_SYMBOL=673, VARIANCE_SYMBOL=674, VARYING_SYMBOL=675, VAR_POP_SYMBOL=676, 
		VAR_SAMP_SYMBOL=677, VIRTUAL_SYMBOL=678, WHEN_SYMBOL=679, WHERE_SYMBOL=680, 
		WHILE_SYMBOL=681, WITH_SYMBOL=682, WITH_CUBE_SYMBOL=683, WITH_ROLLUP_SYMBOL=684, 
		WITHOUT_SYMBOL=685, WRITE_SYMBOL=686, XOR_SYMBOL=687, YEAR_MONTH_SYMBOL=688, 
		ZEROFILL_SYMBOL=689, PERSIST_SYMBOL=690, ROLE_SYMBOL=691, ADMIN_SYMBOL=692, 
		INVISIBLE_SYMBOL=693, VISIBLE_SYMBOL=694, EXCEPT_SYMBOL=695, COMPONENT_SYMBOL=696, 
		RECURSIVE_SYMBOL=697, JSON_OBJECTAGG_SYMBOL=698, JSON_ARRAYAGG_SYMBOL=699, 
		OF_SYMBOL=700, SKIP_SYMBOL=701, LOCKED_SYMBOL=702, NOWAIT_SYMBOL=703, 
		GROUPING_SYMBOL=704, PERSIST_ONLY_SYMBOL=705, HISTOGRAM_SYMBOL=706, BUCKETS_SYMBOL=707, 
		REMOTE_SYMBOL=708, CLONE_SYMBOL=709, CUME_DIST_SYMBOL=710, DENSE_RANK_SYMBOL=711, 
		EXCLUDE_SYMBOL=712, FIRST_VALUE_SYMBOL=713, FOLLOWING_SYMBOL=714, GROUPS_SYMBOL=715, 
		LAG_SYMBOL=716, LAST_VALUE_SYMBOL=717, LEAD_SYMBOL=718, NTH_VALUE_SYMBOL=719, 
		NTILE_SYMBOL=720, NULLS_SYMBOL=721, OTHERS_SYMBOL=722, OVER_SYMBOL=723, 
		PERCENT_RANK_SYMBOL=724, PRECEDING_SYMBOL=725, RANK_SYMBOL=726, RESPECT_SYMBOL=727, 
		ROW_NUMBER_SYMBOL=728, TIES_SYMBOL=729, UNBOUNDED_SYMBOL=730, WINDOW_SYMBOL=731, 
		EMPTY_SYMBOL=732, JSON_TABLE_SYMBOL=733, NESTED_SYMBOL=734, ORDINALITY_SYMBOL=735, 
		PATH_SYMBOL=736, HISTORY_SYMBOL=737, REUSE_SYMBOL=738, SRID_SYMBOL=739, 
		THREAD_PRIORITY_SYMBOL=740, RESOURCE_SYMBOL=741, SYSTEM_SYMBOL=742, VCPU_SYMBOL=743, 
		MASTER_PUBLIC_KEY_PATH_SYMBOL=744, GET_MASTER_PUBLIC_KEY_SYM=745, RESTART_SYMBOL=746, 
		DEFINITION_SYMBOL=747, DESCRIPTION_SYMBOL=748, ORGANIZATION_SYMBOL=749, 
		REFERENCE_SYMBOL=750, WHITESPACE=751, INVALID_INPUT=752, UNDERSCORE_CHARSET=753, 
		IDENTIFIER=754, NCHAR_TEXT=755, BACK_TICK_QUOTED_ID=756, DOUBLE_QUOTED_TEXT=757, 
		SINGLE_QUOTED_TEXT=758, VERSION_COMMENT_START=759, MYSQL_COMMENT_START=760, 
		VERSION_COMMENT_END=761, BLOCK_COMMENT=762, POUND_COMMENT=763, DASHDASH_COMMENT=764, 
		NOT_EQUAL2_OPERATOR=765;
	public static final int
		RULE_query = 0, RULE_simpleStatement = 1, RULE_alterStatement = 2, RULE_alterDatabase = 3, 
		RULE_alterEvent = 4, RULE_alterLogfileGroup = 5, RULE_alterLogfileGroupOptions = 6, 
		RULE_alterLogfileGroupOption = 7, RULE_alterServer = 8, RULE_alterTable = 9, 
		RULE_alterTableActions = 10, RULE_alterCommandList = 11, RULE_alterCommandsModifierList = 12, 
		RULE_standaloneAlterCommands = 13, RULE_alterPartition = 14, RULE_alterList = 15, 
		RULE_alterCommandsModifier = 16, RULE_alterListItem = 17, RULE_place = 18, 
		RULE_restrict = 19, RULE_alterOrderList = 20, RULE_alterAlgorithmOption = 21, 
		RULE_alterLockOption = 22, RULE_indexLockAndAlgorithm = 23, RULE_withValidation = 24, 
		RULE_removePartitioning = 25, RULE_allOrPartitionNameList = 26, RULE_reorgPartitionRule = 27, 
		RULE_alterTablespace = 28, RULE_alterTablespaceOption = 29, RULE_changeTablespaceOption = 30, 
		RULE_alterView = 31, RULE_viewTail = 32, RULE_viewSelect = 33, RULE_viewCheckOption = 34, 
		RULE_createStatement = 35, RULE_createDatabase = 36, RULE_createDatabaseOption = 37, 
		RULE_createTable = 38, RULE_tableElementList = 39, RULE_tableElement = 40, 
		RULE_duplicateAsQueryExpression = 41, RULE_queryExpressionOrParens = 42, 
		RULE_createWithDefiner = 43, RULE_createRoutine = 44, RULE_createProcedure = 45, 
		RULE_createFunction = 46, RULE_createUdf = 47, RULE_routineCreateOption = 48, 
		RULE_routineAlterOptions = 49, RULE_routineOption = 50, RULE_createIndex = 51, 
		RULE_indexNameAndType = 52, RULE_createIndexTarget = 53, RULE_createLogfileGroup = 54, 
		RULE_logfileGroupOptions = 55, RULE_logfileGroupOption = 56, RULE_createServer = 57, 
		RULE_serverOptions = 58, RULE_serverOption = 59, RULE_createTablespace = 60, 
		RULE_tablespaceOptions = 61, RULE_tablespaceOption = 62, RULE_createView = 63, 
		RULE_viewReplaceOrAlgorithm = 64, RULE_viewAlgorithm = 65, RULE_viewSuid = 66, 
		RULE_createTrigger = 67, RULE_triggerFollowsPrecedesClause = 68, RULE_createEvent = 69, 
		RULE_createRole = 70, RULE_createSpatialReference = 71, RULE_srsAttribute = 72, 
		RULE_dropStatement = 73, RULE_dropDatabase = 74, RULE_dropEvent = 75, 
		RULE_dropFunction = 76, RULE_dropProcedure = 77, RULE_dropIndex = 78, 
		RULE_dropLogfileGroup = 79, RULE_dropLogfileGroupOption = 80, RULE_dropServer = 81, 
		RULE_dropTable = 82, RULE_dropTableSpace = 83, RULE_dropTrigger = 84, 
		RULE_dropView = 85, RULE_dropRole = 86, RULE_dropSpatialReference = 87, 
		RULE_renameTableStatement = 88, RULE_renamePair = 89, RULE_truncateTableStatement = 90, 
		RULE_importStatement = 91, RULE_callStatement = 92, RULE_deleteStatement = 93, 
		RULE_partitionDelete = 94, RULE_deleteStatementOption = 95, RULE_doStatement = 96, 
		RULE_handlerStatement = 97, RULE_handlerReadOrScan = 98, RULE_insertStatement = 99, 
		RULE_insertLockOption = 100, RULE_insertFromConstructor = 101, RULE_fields = 102, 
		RULE_insertValues = 103, RULE_insertQueryExpression = 104, RULE_valueList = 105, 
		RULE_values = 106, RULE_insertUpdateList = 107, RULE_loadStatement = 108, 
		RULE_dataOrXml = 109, RULE_xmlRowsIdentifiedBy = 110, RULE_loadDataFileTail = 111, 
		RULE_loadDataFileTargetList = 112, RULE_fieldOrVariableList = 113, RULE_replaceStatement = 114, 
		RULE_selectStatement = 115, RULE_selectStatementWithInto = 116, RULE_queryExpression = 117, 
		RULE_queryExpressionBody = 118, RULE_queryExpressionParens = 119, RULE_querySpecification = 120, 
		RULE_subquery = 121, RULE_querySpecOption = 122, RULE_limitClause = 123, 
		RULE_simpleLimitClause = 124, RULE_limitOptions = 125, RULE_limitOption = 126, 
		RULE_intoClause = 127, RULE_procedureAnalyseClause = 128, RULE_havingClause = 129, 
		RULE_windowClause = 130, RULE_windowDefinition = 131, RULE_windowSpec = 132, 
		RULE_windowSpecDetails = 133, RULE_windowFrameClause = 134, RULE_windowFrameUnits = 135, 
		RULE_windowFrameExtent = 136, RULE_windowFrameStart = 137, RULE_windowFrameBetween = 138, 
		RULE_windowFrameBound = 139, RULE_windowFrameExclusion = 140, RULE_withClause = 141, 
		RULE_commonTableExpression = 142, RULE_groupByClause = 143, RULE_olapOption = 144, 
		RULE_orderClause = 145, RULE_direction = 146, RULE_fromClause = 147, RULE_tableReferenceList = 148, 
		RULE_selectOption = 149, RULE_lockingClause = 150, RULE_lockStrengh = 151, 
		RULE_lockedRowAction = 152, RULE_selectItemList = 153, RULE_selectItem = 154, 
		RULE_selectAlias = 155, RULE_whereClause = 156, RULE_tableReference = 157, 
		RULE_joinedTable = 158, RULE_naturalJoinType = 159, RULE_innerJoinType = 160, 
		RULE_outerJoinType = 161, RULE_tableFactor = 162, RULE_singleTable = 163, 
		RULE_singleTableParens = 164, RULE_derivedTable = 165, RULE_joinedTableParens = 166, 
		RULE_tableReferenceListParens = 167, RULE_tableFunction = 168, RULE_columnsClause = 169, 
		RULE_jtColumn = 170, RULE_onEmptyOrError = 171, RULE_onEmpty = 172, RULE_onError = 173, 
		RULE_jtOnResponse = 174, RULE_unionOption = 175, RULE_tableAlias = 176, 
		RULE_indexHintList = 177, RULE_indexHint = 178, RULE_indexHintType = 179, 
		RULE_keyOrIndex = 180, RULE_indexHintClause = 181, RULE_indexList = 182, 
		RULE_indexListElement = 183, RULE_updateStatement = 184, RULE_transactionOrLockingStatement = 185, 
		RULE_transactionStatement = 186, RULE_beginWork = 187, RULE_transactionCharacteristic = 188, 
		RULE_setTransactionCharacteristic = 189, RULE_isolationLevel = 190, RULE_savepointStatement = 191, 
		RULE_lockStatement = 192, RULE_lockItem = 193, RULE_lockOption = 194, 
		RULE_xaStatement = 195, RULE_xaConvert = 196, RULE_xid = 197, RULE_replicationStatement = 198, 
		RULE_resetOption = 199, RULE_masterResetOptions = 200, RULE_replicationLoad = 201, 
		RULE_changeMaster = 202, RULE_changeMasterOptions = 203, RULE_masterOption = 204, 
		RULE_masterFileDef = 205, RULE_serverIdList = 206, RULE_changeReplication = 207, 
		RULE_filterDefinition = 208, RULE_filterDbList = 209, RULE_filterTableList = 210, 
		RULE_filterStringList = 211, RULE_filterWildDbTableString = 212, RULE_filterDbPairList = 213, 
		RULE_slave = 214, RULE_slaveUntilOptions = 215, RULE_slaveConnectionOptions = 216, 
		RULE_slaveThreadOptions = 217, RULE_slaveThreadOption = 218, RULE_groupReplication = 219, 
		RULE_preparedStatement = 220, RULE_executeStatement = 221, RULE_executeVarList = 222, 
		RULE_cloneStatement = 223, RULE_accountManagementStatement = 224, RULE_alterUser = 225, 
		RULE_alterUserTail = 226, RULE_createUser = 227, RULE_createUserTail = 228, 
		RULE_defaultRoleClause = 229, RULE_requireClause = 230, RULE_connectOptions = 231, 
		RULE_accountLockPasswordExpireOptions = 232, RULE_dropUser = 233, RULE_grant = 234, 
		RULE_grantTargetList = 235, RULE_grantOptions = 236, RULE_versionedRequireClause = 237, 
		RULE_renameUser = 238, RULE_revoke = 239, RULE_onTypeTo = 240, RULE_aclType = 241, 
		RULE_setPassword = 242, RULE_roleOrPrivilegesList = 243, RULE_roleOrPrivilege = 244, 
		RULE_grantIdentifier = 245, RULE_requireList = 246, RULE_requireListElement = 247, 
		RULE_grantOption = 248, RULE_setRole = 249, RULE_roleList = 250, RULE_role = 251, 
		RULE_tableAdministrationStatement = 252, RULE_histogram = 253, RULE_checkOption = 254, 
		RULE_repairType = 255, RULE_installUninstallStatment = 256, RULE_setStatement = 257, 
		RULE_optionValueNoOptionType = 258, RULE_setSystemVariable = 259, RULE_optionValueFollowingOptionType = 260, 
		RULE_setExprOrDefault = 261, RULE_optionValueList = 262, RULE_optionValue = 263, 
		RULE_showStatement = 264, RULE_showCommandType = 265, RULE_nonBlocking = 266, 
		RULE_fromOrIn = 267, RULE_inDb = 268, RULE_profileType = 269, RULE_otherAdministrativeStatement = 270, 
		RULE_keyCacheListOrParts = 271, RULE_keyCacheList = 272, RULE_assignToKeycache = 273, 
		RULE_assignToKeycachePartition = 274, RULE_cacheKeyList = 275, RULE_keyUsageElement = 276, 
		RULE_keyUsageList = 277, RULE_flushOption = 278, RULE_logType = 279, RULE_flushTables = 280, 
		RULE_flushTablesOptions = 281, RULE_preloadTail = 282, RULE_preloadList = 283, 
		RULE_preloadKeys = 284, RULE_adminPartition = 285, RULE_resourceGroupManagement = 286, 
		RULE_createResourceGroup = 287, RULE_resourceGroupVcpuList = 288, RULE_vcpuNumOrRange = 289, 
		RULE_resourceGroupPriority = 290, RULE_resourceGroupEnableDisable = 291, 
		RULE_alterResourceGroup = 292, RULE_setResourceGroup = 293, RULE_threadIdList = 294, 
		RULE_dropResourceGroup = 295, RULE_utilityStatement = 296, RULE_describeCommand = 297, 
		RULE_explainCommand = 298, RULE_explainableStatement = 299, RULE_helpCommand = 300, 
		RULE_useCommand = 301, RULE_restartServer = 302, RULE_expr = 303, RULE_boolPri = 304, 
		RULE_compOp = 305, RULE_predicate = 306, RULE_predicateOperations = 307, 
		RULE_bitExpr = 308, RULE_simpleExpr = 309, RULE_jsonOperator = 310, RULE_sumExpr = 311, 
		RULE_groupingOperation = 312, RULE_windowFunctionCall = 313, RULE_windowingClause = 314, 
		RULE_leadLagInfo = 315, RULE_nullTreatment = 316, RULE_jsonFunction = 317, 
		RULE_inSumExpr = 318, RULE_identListArg = 319, RULE_identList = 320, RULE_fulltextOptions = 321, 
		RULE_runtimeFunctionCall = 322, RULE_geometryFunction = 323, RULE_timeFunctionParameters = 324, 
		RULE_fractionalPrecision = 325, RULE_weightStringLevels = 326, RULE_weightStringLevelListItem = 327, 
		RULE_dateTimeTtype = 328, RULE_trimFunction = 329, RULE_substringFunction = 330, 
		RULE_functionCall = 331, RULE_udfExprList = 332, RULE_udfExpr = 333, RULE_variable = 334, 
		RULE_userVariable = 335, RULE_systemVariable = 336, RULE_internalVariableName = 337, 
		RULE_whenExpression = 338, RULE_thenExpression = 339, RULE_elseExpression = 340, 
		RULE_castType = 341, RULE_exprList = 342, RULE_charset = 343, RULE_notRule = 344, 
		RULE_not2Rule = 345, RULE_interval = 346, RULE_intervalTimeStamp = 347, 
		RULE_exprListWithParentheses = 348, RULE_orderOrGroupList = 349, RULE_orderExpression = 350, 
		RULE_channel = 351, RULE_compoundStatement = 352, RULE_returnStatement = 353, 
		RULE_ifStatement = 354, RULE_ifBody = 355, RULE_thenStatement = 356, RULE_compoundStatementList = 357, 
		RULE_caseStatement = 358, RULE_elseStatement = 359, RULE_labeledBlock = 360, 
		RULE_unlabeledBlock = 361, RULE_label = 362, RULE_beginEndBlock = 363, 
		RULE_labeledControl = 364, RULE_unlabeledControl = 365, RULE_loopBlock = 366, 
		RULE_whileDoBlock = 367, RULE_repeatUntilBlock = 368, RULE_spDeclarations = 369, 
		RULE_spDeclaration = 370, RULE_variableDeclaration = 371, RULE_conditionDeclaration = 372, 
		RULE_spCondition = 373, RULE_sqlstate = 374, RULE_handlerDeclaration = 375, 
		RULE_handlerCondition = 376, RULE_cursorDeclaration = 377, RULE_iterateStatement = 378, 
		RULE_leaveStatement = 379, RULE_getDiagnostics = 380, RULE_signalAllowedExpr = 381, 
		RULE_statementInformationItem = 382, RULE_conditionInformationItem = 383, 
		RULE_signalInformationItemName = 384, RULE_signalStatement = 385, RULE_resignalStatement = 386, 
		RULE_signalInformationItem = 387, RULE_cursorOpen = 388, RULE_cursorClose = 389, 
		RULE_cursorFetch = 390, RULE_schedule = 391, RULE_columnDefinition = 392, 
		RULE_checkOrReferences = 393, RULE_checkConstraint = 394, RULE_tableConstraintDef = 395, 
		RULE_fieldDefinition = 396, RULE_columnAttribute = 397, RULE_gcolAttribute = 398, 
		RULE_references = 399, RULE_deleteOption = 400, RULE_keyList = 401, RULE_keyPart = 402, 
		RULE_indexType = 403, RULE_indexOption = 404, RULE_commonIndexOption = 405, 
		RULE_visibility = 406, RULE_indexTypeClause = 407, RULE_fulltextIndexOption = 408, 
		RULE_spatialIndexOption = 409, RULE_dataTypeDefinition = 410, RULE_dataType = 411, 
		RULE_nchar = 412, RULE_varchar = 413, RULE_nvarchar = 414, RULE_fieldLength = 415, 
		RULE_fieldOptions = 416, RULE_charsetWithOptBinary = 417, RULE_ascii = 418, 
		RULE_unicode = 419, RULE_wsNumCodepoints = 420, RULE_typeDatetimePrecision = 421, 
		RULE_charsetName = 422, RULE_collationName = 423, RULE_createTableOptions = 424, 
		RULE_createTableOptionsSpaceSeparated = 425, RULE_createTableOption = 426, 
		RULE_ternaryOption = 427, RULE_defaultCollation = 428, RULE_defaultCharset = 429, 
		RULE_partitionClause = 430, RULE_partitionTypeDef = 431, RULE_subPartitions = 432, 
		RULE_partitionKeyAlgorithm = 433, RULE_partitionDefinitions = 434, RULE_partitionDefinition = 435, 
		RULE_partitionValuesIn = 436, RULE_partitionOption = 437, RULE_subpartitionDefinition = 438, 
		RULE_partitionValueItemListParen = 439, RULE_partitionValueItem = 440, 
		RULE_definerClause = 441, RULE_ifExists = 442, RULE_ifNotExists = 443, 
		RULE_procedureParameter = 444, RULE_functionParameter = 445, RULE_typeWithOptCollate = 446, 
		RULE_schemaIdentifierPair = 447, RULE_viewRefList = 448, RULE_updateList = 449, 
		RULE_updateElement = 450, RULE_charsetClause = 451, RULE_fieldsClause = 452, 
		RULE_fieldTerm = 453, RULE_linesClause = 454, RULE_lineTerm = 455, RULE_userList = 456, 
		RULE_createOrAlterUserList = 457, RULE_createOrAlterUser = 458, RULE_user = 459, 
		RULE_likeClause = 460, RULE_likeOrWhere = 461, RULE_onlineOption = 462, 
		RULE_noWriteToBinLog = 463, RULE_usePartition = 464, RULE_fieldIdentifier = 465, 
		RULE_columnInternalRef = 466, RULE_columnInternalRefList = 467, RULE_columnRef = 468, 
		RULE_insertIdentifier = 469, RULE_indexName = 470, RULE_indexRef = 471, 
		RULE_tableWild = 472, RULE_schemaName = 473, RULE_schemaRef = 474, RULE_procedureName = 475, 
		RULE_procedureRef = 476, RULE_functionName = 477, RULE_functionRef = 478, 
		RULE_triggerName = 479, RULE_triggerRef = 480, RULE_viewName = 481, RULE_viewRef = 482, 
		RULE_tablespaceName = 483, RULE_tablespaceRef = 484, RULE_logfileGroupName = 485, 
		RULE_logfileGroupRef = 486, RULE_eventName = 487, RULE_eventRef = 488, 
		RULE_udfName = 489, RULE_serverName = 490, RULE_serverRef = 491, RULE_engineRef = 492, 
		RULE_tableName = 493, RULE_filterTableRef = 494, RULE_tableRefWithWildcard = 495, 
		RULE_tableRef = 496, RULE_tableRefList = 497, RULE_tableAliasRefList = 498, 
		RULE_parameterName = 499, RULE_labelIdentifier = 500, RULE_labelRef = 501, 
		RULE_roleIdentifier = 502, RULE_roleRef = 503, RULE_pluginRef = 504, RULE_componentRef = 505, 
		RULE_resourceGroupRef = 506, RULE_windowName = 507, RULE_pureIdentifier = 508, 
		RULE_identifier = 509, RULE_identifierList = 510, RULE_identifierListWithParentheses = 511, 
		RULE_qualifiedIdentifier = 512, RULE_simpleIdentifier = 513, RULE_dotIdentifier = 514, 
		RULE_ulong_number = 515, RULE_real_ulong_number = 516, RULE_ulonglong_number = 517, 
		RULE_real_ulonglong_number = 518, RULE_literal = 519, RULE_signedLiteral = 520, 
		RULE_stringList = 521, RULE_textStringLiteral = 522, RULE_textString = 523, 
		RULE_textLiteral = 524, RULE_textStringNoLinebreak = 525, RULE_textStringLiteralList = 526, 
		RULE_numLiteral = 527, RULE_boolLiteral = 528, RULE_nullLiteral = 529, 
		RULE_temporalLiteral = 530, RULE_floatOptions = 531, RULE_precision = 532, 
		RULE_textOrIdentifier = 533, RULE_roleIdentifierOrText = 534, RULE_sizeNumber = 535, 
		RULE_parentheses = 536, RULE_equal = 537, RULE_optionType = 538, RULE_varIdentType = 539, 
		RULE_setVarIdentType = 540, RULE_identifierKeyword = 541, RULE_labelKeyword = 542, 
		RULE_roleOrIdentifierKeyword = 543, RULE_roleOrLabelKeyword = 544, RULE_roleKeyword = 545;
	public static final String[] ruleNames = {
		"query", "simpleStatement", "alterStatement", "alterDatabase", "alterEvent", 
		"alterLogfileGroup", "alterLogfileGroupOptions", "alterLogfileGroupOption", 
		"alterServer", "alterTable", "alterTableActions", "alterCommandList", 
		"alterCommandsModifierList", "standaloneAlterCommands", "alterPartition", 
		"alterList", "alterCommandsModifier", "alterListItem", "place", "restrict", 
		"alterOrderList", "alterAlgorithmOption", "alterLockOption", "indexLockAndAlgorithm", 
		"withValidation", "removePartitioning", "allOrPartitionNameList", "reorgPartitionRule", 
		"alterTablespace", "alterTablespaceOption", "changeTablespaceOption", 
		"alterView", "viewTail", "viewSelect", "viewCheckOption", "createStatement", 
		"createDatabase", "createDatabaseOption", "createTable", "tableElementList", 
		"tableElement", "duplicateAsQueryExpression", "queryExpressionOrParens", 
		"createWithDefiner", "createRoutine", "createProcedure", "createFunction", 
		"createUdf", "routineCreateOption", "routineAlterOptions", "routineOption", 
		"createIndex", "indexNameAndType", "createIndexTarget", "createLogfileGroup", 
		"logfileGroupOptions", "logfileGroupOption", "createServer", "serverOptions", 
		"serverOption", "createTablespace", "tablespaceOptions", "tablespaceOption", 
		"createView", "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid", "createTrigger", 
		"triggerFollowsPrecedesClause", "createEvent", "createRole", "createSpatialReference", 
		"srsAttribute", "dropStatement", "dropDatabase", "dropEvent", "dropFunction", 
		"dropProcedure", "dropIndex", "dropLogfileGroup", "dropLogfileGroupOption", 
		"dropServer", "dropTable", "dropTableSpace", "dropTrigger", "dropView", 
		"dropRole", "dropSpatialReference", "renameTableStatement", "renamePair", 
		"truncateTableStatement", "importStatement", "callStatement", "deleteStatement", 
		"partitionDelete", "deleteStatementOption", "doStatement", "handlerStatement", 
		"handlerReadOrScan", "insertStatement", "insertLockOption", "insertFromConstructor", 
		"fields", "insertValues", "insertQueryExpression", "valueList", "values", 
		"insertUpdateList", "loadStatement", "dataOrXml", "xmlRowsIdentifiedBy", 
		"loadDataFileTail", "loadDataFileTargetList", "fieldOrVariableList", "replaceStatement", 
		"selectStatement", "selectStatementWithInto", "queryExpression", "queryExpressionBody", 
		"queryExpressionParens", "querySpecification", "subquery", "querySpecOption", 
		"limitClause", "simpleLimitClause", "limitOptions", "limitOption", "intoClause", 
		"procedureAnalyseClause", "havingClause", "windowClause", "windowDefinition", 
		"windowSpec", "windowSpecDetails", "windowFrameClause", "windowFrameUnits", 
		"windowFrameExtent", "windowFrameStart", "windowFrameBetween", "windowFrameBound", 
		"windowFrameExclusion", "withClause", "commonTableExpression", "groupByClause", 
		"olapOption", "orderClause", "direction", "fromClause", "tableReferenceList", 
		"selectOption", "lockingClause", "lockStrengh", "lockedRowAction", "selectItemList", 
		"selectItem", "selectAlias", "whereClause", "tableReference", "joinedTable", 
		"naturalJoinType", "innerJoinType", "outerJoinType", "tableFactor", "singleTable", 
		"singleTableParens", "derivedTable", "joinedTableParens", "tableReferenceListParens", 
		"tableFunction", "columnsClause", "jtColumn", "onEmptyOrError", "onEmpty", 
		"onError", "jtOnResponse", "unionOption", "tableAlias", "indexHintList", 
		"indexHint", "indexHintType", "keyOrIndex", "indexHintClause", "indexList", 
		"indexListElement", "updateStatement", "transactionOrLockingStatement", 
		"transactionStatement", "beginWork", "transactionCharacteristic", "setTransactionCharacteristic", 
		"isolationLevel", "savepointStatement", "lockStatement", "lockItem", "lockOption", 
		"xaStatement", "xaConvert", "xid", "replicationStatement", "resetOption", 
		"masterResetOptions", "replicationLoad", "changeMaster", "changeMasterOptions", 
		"masterOption", "masterFileDef", "serverIdList", "changeReplication", 
		"filterDefinition", "filterDbList", "filterTableList", "filterStringList", 
		"filterWildDbTableString", "filterDbPairList", "slave", "slaveUntilOptions", 
		"slaveConnectionOptions", "slaveThreadOptions", "slaveThreadOption", "groupReplication", 
		"preparedStatement", "executeStatement", "executeVarList", "cloneStatement", 
		"accountManagementStatement", "alterUser", "alterUserTail", "createUser", 
		"createUserTail", "defaultRoleClause", "requireClause", "connectOptions", 
		"accountLockPasswordExpireOptions", "dropUser", "grant", "grantTargetList", 
		"grantOptions", "versionedRequireClause", "renameUser", "revoke", "onTypeTo", 
		"aclType", "setPassword", "roleOrPrivilegesList", "roleOrPrivilege", "grantIdentifier", 
		"requireList", "requireListElement", "grantOption", "setRole", "roleList", 
		"role", "tableAdministrationStatement", "histogram", "checkOption", "repairType", 
		"installUninstallStatment", "setStatement", "optionValueNoOptionType", 
		"setSystemVariable", "optionValueFollowingOptionType", "setExprOrDefault", 
		"optionValueList", "optionValue", "showStatement", "showCommandType", 
		"nonBlocking", "fromOrIn", "inDb", "profileType", "otherAdministrativeStatement", 
		"keyCacheListOrParts", "keyCacheList", "assignToKeycache", "assignToKeycachePartition", 
		"cacheKeyList", "keyUsageElement", "keyUsageList", "flushOption", "logType", 
		"flushTables", "flushTablesOptions", "preloadTail", "preloadList", "preloadKeys", 
		"adminPartition", "resourceGroupManagement", "createResourceGroup", "resourceGroupVcpuList", 
		"vcpuNumOrRange", "resourceGroupPriority", "resourceGroupEnableDisable", 
		"alterResourceGroup", "setResourceGroup", "threadIdList", "dropResourceGroup", 
		"utilityStatement", "describeCommand", "explainCommand", "explainableStatement", 
		"helpCommand", "useCommand", "restartServer", "expr", "boolPri", "compOp", 
		"predicate", "predicateOperations", "bitExpr", "simpleExpr", "jsonOperator", 
		"sumExpr", "groupingOperation", "windowFunctionCall", "windowingClause", 
		"leadLagInfo", "nullTreatment", "jsonFunction", "inSumExpr", "identListArg", 
		"identList", "fulltextOptions", "runtimeFunctionCall", "geometryFunction", 
		"timeFunctionParameters", "fractionalPrecision", "weightStringLevels", 
		"weightStringLevelListItem", "dateTimeTtype", "trimFunction", "substringFunction", 
		"functionCall", "udfExprList", "udfExpr", "variable", "userVariable", 
		"systemVariable", "internalVariableName", "whenExpression", "thenExpression", 
		"elseExpression", "castType", "exprList", "charset", "notRule", "not2Rule", 
		"interval", "intervalTimeStamp", "exprListWithParentheses", "orderOrGroupList", 
		"orderExpression", "channel", "compoundStatement", "returnStatement", 
		"ifStatement", "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
		"elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock", 
		"labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", "repeatUntilBlock", 
		"spDeclarations", "spDeclaration", "variableDeclaration", "conditionDeclaration", 
		"spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", "cursorDeclaration", 
		"iterateStatement", "leaveStatement", "getDiagnostics", "signalAllowedExpr", 
		"statementInformationItem", "conditionInformationItem", "signalInformationItemName", 
		"signalStatement", "resignalStatement", "signalInformationItem", "cursorOpen", 
		"cursorClose", "cursorFetch", "schedule", "columnDefinition", "checkOrReferences", 
		"checkConstraint", "tableConstraintDef", "fieldDefinition", "columnAttribute", 
		"gcolAttribute", "references", "deleteOption", "keyList", "keyPart", "indexType", 
		"indexOption", "commonIndexOption", "visibility", "indexTypeClause", "fulltextIndexOption", 
		"spatialIndexOption", "dataTypeDefinition", "dataType", "nchar", "varchar", 
		"nvarchar", "fieldLength", "fieldOptions", "charsetWithOptBinary", "ascii", 
		"unicode", "wsNumCodepoints", "typeDatetimePrecision", "charsetName", 
		"collationName", "createTableOptions", "createTableOptionsSpaceSeparated", 
		"createTableOption", "ternaryOption", "defaultCollation", "defaultCharset", 
		"partitionClause", "partitionTypeDef", "subPartitions", "partitionKeyAlgorithm", 
		"partitionDefinitions", "partitionDefinition", "partitionValuesIn", "partitionOption", 
		"subpartitionDefinition", "partitionValueItemListParen", "partitionValueItem", 
		"definerClause", "ifExists", "ifNotExists", "procedureParameter", "functionParameter", 
		"typeWithOptCollate", "schemaIdentifierPair", "viewRefList", "updateList", 
		"updateElement", "charsetClause", "fieldsClause", "fieldTerm", "linesClause", 
		"lineTerm", "userList", "createOrAlterUserList", "createOrAlterUser", 
		"user", "likeClause", "likeOrWhere", "onlineOption", "noWriteToBinLog", 
		"usePartition", "fieldIdentifier", "columnInternalRef", "columnInternalRefList", 
		"columnRef", "insertIdentifier", "indexName", "indexRef", "tableWild", 
		"schemaName", "schemaRef", "procedureName", "procedureRef", "functionName", 
		"functionRef", "triggerName", "triggerRef", "viewName", "viewRef", "tablespaceName", 
		"tablespaceRef", "logfileGroupName", "logfileGroupRef", "eventName", "eventRef", 
		"udfName", "serverName", "serverRef", "engineRef", "tableName", "filterTableRef", 
		"tableRefWithWildcard", "tableRef", "tableRefList", "tableAliasRefList", 
		"parameterName", "labelIdentifier", "labelRef", "roleIdentifier", "roleRef", 
		"pluginRef", "componentRef", "resourceGroupRef", "windowName", "pureIdentifier", 
		"identifier", "identifierList", "identifierListWithParentheses", "qualifiedIdentifier", 
		"simpleIdentifier", "dotIdentifier", "ulong_number", "real_ulong_number", 
		"ulonglong_number", "real_ulonglong_number", "literal", "signedLiteral", 
		"stringList", "textStringLiteral", "textString", "textLiteral", "textStringNoLinebreak", 
		"textStringLiteralList", "numLiteral", "boolLiteral", "nullLiteral", "temporalLiteral", 
		"floatOptions", "precision", "textOrIdentifier", "roleIdentifierOrText", 
		"sizeNumber", "parentheses", "equal", "optionType", "varIdentType", "setVarIdentType", 
		"identifierKeyword", "labelKeyword", "roleOrIdentifierKeyword", "roleOrLabelKeyword", 
		"roleKeyword"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'='", 
		"':='", "'<=>'", "'>='", "'>'", "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", "'&'", "'^'", "'||'", 
		"'|'", "'.'", "','", "';'", "':'", "'('", "')'", "'{'", "'}'", "'_'", 
		"'->'", "'->>'", "'@'", null, "'@@'", "'\\N'", "'?'", null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'<>'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "ACCOUNT_SYMBOL", "ASCII_SYMBOL", "ALWAYS_SYMBOL", "BACKUP_SYMBOL", 
		"BEGIN_SYMBOL", "BYTE_SYMBOL", "CACHE_SYMBOL", "CHARSET_SYMBOL", "CHECKSUM_SYMBOL", 
		"CLOSE_SYMBOL", "COMMENT_SYMBOL", "COMMIT_SYMBOL", "CONTAINS_SYMBOL", 
		"DEALLOCATE_SYMBOL", "DO_SYMBOL", "END_SYMBOL", "EXECUTE_SYMBOL", "FLUSH_SYMBOL", 
		"FOLLOWS_SYMBOL", "FORMAT_SYMBOL", "GROUP_REPLICATION_SYMBOL", "HANDLER_SYMBOL", 
		"HELP_SYMBOL", "HOST_SYMBOL", "INSTALL_SYMBOL", "LANGUAGE_SYMBOL", "NO_SYMBOL", 
		"OPEN_SYMBOL", "OPTIONS_SYMBOL", "OWNER_SYMBOL", "PARSER_SYMBOL", "PARTITION_SYMBOL", 
		"PORT_SYMBOL", "PRECEDES_SYMBOL", "PREPARE_SYMBOL", "REMOVE_SYMBOL", "REPAIR_SYMBOL", 
		"RESET_SYMBOL", "RESTORE_SYMBOL", "ROLLBACK_SYMBOL", "SAVEPOINT_SYMBOL", 
		"SECURITY_SYMBOL", "SERVER_SYMBOL", "SIGNED_SYMBOL", "SLAVE_SYMBOL", "SOCKET_SYMBOL", 
		"SONAME_SYMBOL", "START_SYMBOL", "STOP_SYMBOL", "TRUNCATE_SYMBOL", "UNICODE_SYMBOL", 
		"UNINSTALL_SYMBOL", "UPGRADE_SYMBOL", "WRAPPER_SYMBOL", "XA_SYMBOL", "SHUTDOWN_SYMBOL", 
		"ACTION_SYMBOL", "ADDDATE_SYMBOL", "AFTER_SYMBOL", "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", 
		"ALGORITHM_SYMBOL", "ANALYZE_SYMBOL", "ANY_SYMBOL", "AT_SYMBOL", "AUTHORS_SYMBOL", 
		"AUTO_INCREMENT_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL", "AVG_ROW_LENGTH_SYMBOL", 
		"AVG_SYMBOL", "BINLOG_SYMBOL", "BIT_SYMBOL", "BLOCK_SYMBOL", "BOOL_SYMBOL", 
		"BOOLEAN_SYMBOL", "BTREE_SYMBOL", "CASCADED_SYMBOL", "CATALOG_NAME_SYMBOL", 
		"CHAIN_SYMBOL", "CHANGED_SYMBOL", "CHANNEL_SYMBOL", "CIPHER_SYMBOL", "CLIENT_SYMBOL", 
		"CLASS_ORIGIN_SYMBOL", "COALESCE_SYMBOL", "CODE_SYMBOL", "COLLATION_SYMBOL", 
		"COLUMN_NAME_SYMBOL", "COLUMN_FORMAT_SYMBOL", "COLUMNS_SYMBOL", "COMMITTED_SYMBOL", 
		"COMPACT_SYMBOL", "COMPLETION_SYMBOL", "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", 
		"ENCRYPTION_SYMBOL", "CONCURRENT_SYMBOL", "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", 
		"CONSTRAINT_CATALOG_SYMBOL", "CONSTRAINT_SCHEMA_SYMBOL", "CONSTRAINT_NAME_SYMBOL", 
		"CONTEXT_SYMBOL", "CONTRIBUTORS_SYMBOL", "CPU_SYMBOL", "CUBE_SYMBOL", 
		"CURRENT_SYMBOL", "CURSOR_NAME_SYMBOL", "DATA_SYMBOL", "DATAFILE_SYMBOL", 
		"DATETIME_SYMBOL", "DATE_SYMBOL", "DAY_SYMBOL", "DEFAULT_AUTH_SYMBOL", 
		"DEFINER_SYMBOL", "DELAY_KEY_WRITE_SYMBOL", "DES_KEY_FILE_SYMBOL", "DIAGNOSTICS_SYMBOL", 
		"DIRECTORY_SYMBOL", "DISABLE_SYMBOL", "DISCARD_SYMBOL", "DISK_SYMBOL", 
		"DUMPFILE_SYMBOL", "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", "ENDS_SYMBOL", 
		"ENUM_SYMBOL", "ENGINE_SYMBOL", "ENGINES_SYMBOL", "ERROR_SYMBOL", "ERRORS_SYMBOL", 
		"ESCAPE_SYMBOL", "EVENT_SYMBOL", "EVENTS_SYMBOL", "EVERY_SYMBOL", "EXPANSION_SYMBOL", 
		"EXPORT_SYMBOL", "EXTENDED_SYMBOL", "EXTENT_SIZE_SYMBOL", "FAULTS_SYMBOL", 
		"FAST_SYMBOL", "FOUND_SYMBOL", "ENABLE_SYMBOL", "FULL_SYMBOL", "FILE_SYMBOL", 
		"FILE_BLOCK_SIZE_SYMBOL", "FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL", 
		"GENERAL_SYMBOL", "GEOMETRY_SYMBOL", "GEOMETRYCOLLECTION_SYMBOL", "GET_FORMAT_SYMBOL", 
		"GRANTS_SYMBOL", "GLOBAL_SYMBOL", "HASH_SYMBOL", "HOSTS_SYMBOL", "HOUR_SYMBOL", 
		"IDENTIFIED_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", "INVOKER_SYMBOL", "IMPORT_SYMBOL", 
		"INDEXES_SYMBOL", "INITIAL_SIZE_SYMBOL", "INSTANCE_SYMBOL", "INNODB_SYMBOL", 
		"IO_SYMBOL", "IPC_SYMBOL", "ISOLATION_SYMBOL", "ISSUER_SYMBOL", "INSERT_METHOD_SYMBOL", 
		"JSON_SYMBOL", "KEY_BLOCK_SIZE_SYMBOL", "LAST_SYMBOL", "LEAVES_SYMBOL", 
		"LESS_SYMBOL", "LEVEL_SYMBOL", "LINESTRING_SYMBOL", "LIST_SYMBOL", "LOCAL_SYMBOL", 
		"LOCKS_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", "MAX_ROWS_SYMBOL", "MASTER_SYMBOL", 
		"MASTER_HEARTBEAT_PERIOD_SYMBOL", "MASTER_HOST_SYMBOL", "MASTER_PORT_SYMBOL", 
		"MASTER_LOG_FILE_SYMBOL", "MASTER_LOG_POS_SYMBOL", "MASTER_USER_SYMBOL", 
		"MASTER_PASSWORD_SYMBOL", "MASTER_SERVER_ID_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL", 
		"MASTER_RETRY_COUNT_SYMBOL", "MASTER_DELAY_SYMBOL", "MASTER_SSL_SYMBOL", 
		"MASTER_SSL_CA_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", "MASTER_TLS_VERSION_SYMBOL", 
		"MASTER_SSL_CERT_SYMBOL", "MASTER_SSL_CIPHER_SYMBOL", "MASTER_SSL_CRL_SYMBOL", 
		"MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", "MASTER_AUTO_POSITION_SYMBOL", 
		"MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", "MAX_STATEMENT_TIME_SYMBOL", 
		"MAX_SIZE_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", "MAX_USER_CONNECTIONS_SYMBOL", 
		"MEDIUM_SYMBOL", "MEMORY_SYMBOL", "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL", 
		"MICROSECOND_SYMBOL", "MIGRATE_SYMBOL", "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", 
		"MODIFY_SYMBOL", "MODE_SYMBOL", "MONTH_SYMBOL", "MULTILINESTRING_SYMBOL", 
		"MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", "MUTEX_SYMBOL", "MYSQL_ERRNO_SYMBOL", 
		"NAME_SYMBOL", "NAMES_SYMBOL", "NATIONAL_SYMBOL", "NCHAR_SYMBOL", "NDBCLUSTER_SYMBOL", 
		"NEVER_SYMBOL", "NEXT_SYMBOL", "NEW_SYMBOL", "NO_WAIT_SYMBOL", "NODEGROUP_SYMBOL", 
		"NONE_SYMBOL", "NUMBER_SYMBOL", "NVARCHAR_SYMBOL", "OFFSET_SYMBOL", "OLD_PASSWORD_SYMBOL", 
		"ONE_SHOT_SYMBOL", "ONE_SYMBOL", "PACK_KEYS_SYMBOL", "PAGE_SYMBOL", "PARTIAL_SYMBOL", 
		"PARTITIONING_SYMBOL", "PARTITIONS_SYMBOL", "PASSWORD_SYMBOL", "PHASE_SYMBOL", 
		"PLUGIN_DIR_SYMBOL", "PLUGIN_SYMBOL", "PLUGINS_SYMBOL", "POINT_SYMBOL", 
		"POLYGON_SYMBOL", "PRESERVE_SYMBOL", "PREV_SYMBOL", "PRIVILEGES_SYMBOL", 
		"PROCESS_SYMBOL", "PROCESSLIST_SYMBOL", "PROFILE_SYMBOL", "PROFILES_SYMBOL", 
		"PROXY_SYMBOL", "QUARTER_SYMBOL", "QUERY_SYMBOL", "QUICK_SYMBOL", "READ_ONLY_SYMBOL", 
		"REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDO_BUFFER_SIZE_SYMBOL", "REDOFILE_SYMBOL", 
		"REDUNDANT_SYMBOL", "RELAY_SYMBOL", "RELAYLOG_SYMBOL", "RELAY_LOG_FILE_SYMBOL", 
		"RELAY_LOG_POS_SYMBOL", "RELAY_THREAD_SYMBOL", "RELOAD_SYMBOL", "REORGANIZE_SYMBOL", 
		"REPEATABLE_SYMBOL", "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", "REPLICATE_IGNORE_DB_SYMBOL", 
		"REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", "REPLICATE_WILD_DO_TABLE_SYMBOL", 
		"REPLICATE_WILD_IGNORE_TABLE_SYMBOL", "REPLICATE_REWRITE_DB_SYMBOL", "RESUME_SYMBOL", 
		"RETURNED_SQLSTATE_SYMBOL", "RETURNS_SYMBOL", "REVERSE_SYMBOL", "ROLLUP_SYMBOL", 
		"ROTATE_SYMBOL", "ROUTINE_SYMBOL", "ROWS_SYMBOL", "ROW_COUNT_SYMBOL", 
		"ROW_FORMAT_SYMBOL", "ROW_SYMBOL", "RTREE_SYMBOL", "SCHEDULE_SYMBOL", 
		"SCHEMA_NAME_SYMBOL", "SECOND_SYMBOL", "SERIAL_SYMBOL", "SERIALIZABLE_SYMBOL", 
		"SESSION_SYMBOL", "SIMPLE_SYMBOL", "SHARE_SYMBOL", "SLOW_SYMBOL", "SNAPSHOT_SYMBOL", 
		"SOUNDS_SYMBOL", "SOURCE_SYMBOL", "SQL_AFTER_GTIDS_SYMBOL", "SQL_AFTER_MTS_GAPS_SYMBOL", 
		"SQL_BEFORE_GTIDS_SYMBOL", "SQL_CACHE_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", 
		"SQL_NO_CACHE_SYMBOL", "SQL_THREAD_SYMBOL", "STACKED_SYMBOL", "STARTS_SYMBOL", 
		"STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL", 
		"STATUS_SYMBOL", "STORAGE_SYMBOL", "STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", 
		"SUBDATE_SYMBOL", "SUBJECT_SYMBOL", "SUBPARTITION_SYMBOL", "SUBPARTITIONS_SYMBOL", 
		"SUPER_SYMBOL", "SUSPEND_SYMBOL", "SWAPS_SYMBOL", "SWITCHES_SYMBOL", "TABLE_NAME_SYMBOL", 
		"TABLES_SYMBOL", "TABLE_CHECKSUM_SYMBOL", "TABLESPACE_SYMBOL", "TEMPORARY_SYMBOL", 
		"TEMPTABLE_SYMBOL", "TEXT_SYMBOL", "THAN_SYMBOL", "TRANSACTION_SYMBOL", 
		"TRIGGERS_SYMBOL", "TIMESTAMP_SYMBOL", "TIMESTAMP_ADD_SYMBOL", "TIMESTAMP_DIFF_SYMBOL", 
		"TIME_SYMBOL", "TYPES_SYMBOL", "TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "FUNCTION_SYMBOL", 
		"UNCOMMITTED_SYMBOL", "UNDEFINED_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", "UNDOFILE_SYMBOL", 
		"UNKNOWN_SYMBOL", "UNTIL_SYMBOL", "USER_RESOURCES_SYMBOL", "USER_SYMBOL", 
		"USE_FRM_SYMBOL", "VARIABLES_SYMBOL", "VIEW_SYMBOL", "VALUE_SYMBOL", "WARNINGS_SYMBOL", 
		"WAIT_SYMBOL", "WEEK_SYMBOL", "WORK_SYMBOL", "WEIGHT_STRING_SYMBOL", "X509_SYMBOL", 
		"XID_SYMBOL", "XML_SYMBOL", "YEAR_SYMBOL", "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", 
		"INT_NUMBER", "LONG_NUMBER", "ULONGLONG_NUMBER", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", 
		"NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", 
		"LESS_OR_EQUAL_OPERATOR", "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", 
		"PLUS_OPERATOR", "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", "MOD_OPERATOR", 
		"LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", "SHIFT_LEFT_OPERATOR", 
		"SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", 
		"BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", "BITWISE_OR_OPERATOR", 
		"DOT_SYMBOL", "COMMA_SYMBOL", "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
		"CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", 
		"JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL", 
		"AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", "NULL2_SYMBOL", "PARAM_MARKER", 
		"HEX_NUMBER", "BIN_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "ACCESSIBLE_SYMBOL", 
		"ADD_SYMBOL", "ALL_SYMBOL", "ALTER_SYMBOL", "ANALYSE_SYMBOL", "AND_SYMBOL", 
		"AS_SYMBOL", "ASC_SYMBOL", "ASENSITIVE_SYMBOL", "BEFORE_SYMBOL", "BETWEEN_SYMBOL", 
		"BIGINT_SYMBOL", "BINARY_SYMBOL", "BIN_NUM_SYMBOL", "BIT_AND_SYMBOL", 
		"BIT_OR_SYMBOL", "BIT_XOR_SYMBOL", "BLOB_SYMBOL", "BOTH_SYMBOL", "BY_SYMBOL", 
		"CALL_SYMBOL", "CASCADE_SYMBOL", "CASE_SYMBOL", "CAST_SYMBOL", "CHANGE_SYMBOL", 
		"CHAR_SYMBOL", "CHECK_SYMBOL", "COLLATE_SYMBOL", "COLUMN_SYMBOL", "CONDITION_SYMBOL", 
		"CONSTRAINT_SYMBOL", "CONTINUE_SYMBOL", "CONVERT_SYMBOL", "COUNT_SYMBOL", 
		"CREATE_SYMBOL", "CROSS_SYMBOL", "CURDATE_SYMBOL", "CURRENT_DATE_SYMBOL", 
		"CURRENT_TIME_SYMBOL", "CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURTIME_SYMBOL", 
		"DATABASE_SYMBOL", "DATABASES_SYMBOL", "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", 
		"DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", "DAY_MINUTE_SYMBOL", "DAY_SECOND_SYMBOL", 
		"DECIMAL_NUM_SYMBOL", "DECIMAL_SYMBOL", "DECLARE_SYMBOL", "DEFAULT_SYMBOL", 
		"DELAYED_SYMBOL", "DELETE_SYMBOL", "DESC_SYMBOL", "DESCRIBE_SYMBOL", "DETERMINISTIC_SYMBOL", 
		"DISTINCT_SYMBOL", "DIV_SYMBOL", "DOUBLE_SYMBOL", "DROP_SYMBOL", "DUAL_SYMBOL", 
		"EACH_SYMBOL", "ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENCLOSED_SYMBOL", "END_OF_INPUT_SYMBOL", 
		"ESCAPED_SYMBOL", "EXCHANGE_SYMBOL", "EXISTS_SYMBOL", "EXIT_SYMBOL", "EXPIRE_SYMBOL", 
		"EXTRACT_SYMBOL", "FALSE_SYMBOL", "FETCH_SYMBOL", "FLOAT_SYMBOL", "FORCE_SYMBOL", 
		"FOREIGN_SYMBOL", "FOR_SYMBOL", "FRAC_SECOND_SYMBOL", "FROM_SYMBOL", "FULLTEXT_SYMBOL", 
		"GET_SYMBOL", "GENERATED_SYMBOL", "GRANT_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL", 
		"HAVING_SYMBOL", "HIGH_PRIORITY_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL", 
		"HOUR_SECOND_SYMBOL", "IF_SYMBOL", "IGNORE_SYMBOL", "INDEX_SYMBOL", "INFILE_SYMBOL", 
		"INNER_SYMBOL", "INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", 
		"INTERVAL_SYMBOL", "INTO_SYMBOL", "INT_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", 
		"IO_BEFORE_GTIDS_SYMBOL", "IS_SYMBOL", "ITERATE_SYMBOL", "JOIN_SYMBOL", 
		"KEYS_SYMBOL", "KEY_SYMBOL", "KILL_SYMBOL", "LEADING_SYMBOL", "LEAVE_SYMBOL", 
		"LEFT_SYMBOL", "LIKE_SYMBOL", "LIMIT_SYMBOL", "LINEAR_SYMBOL", "LINES_SYMBOL", 
		"LOAD_SYMBOL", "LOCATOR_SYMBOL", "LOCK_SYMBOL", "LONGBLOB_SYMBOL", "LONGTEXT_SYMBOL", 
		"LONG_NUM_SYMBOL", "LONG_SYMBOL", "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL", 
		"MASTER_BIND_SYMBOL", "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", "MATCH_SYMBOL", 
		"MAX_SYMBOL", "MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", "MEDIUMINT_SYMBOL", 
		"MEDIUMTEXT_SYMBOL", "MID_SYMBOL", "MINUTE_MICROSECOND_SYMBOL", "MINUTE_SECOND_SYMBOL", 
		"MIN_SYMBOL", "MODIFIES_SYMBOL", "MOD_SYMBOL", "NATURAL_SYMBOL", "NCHAR_STRING_SYMBOL", 
		"NEG_SYMBOL", "NONBLOCKING_SYMBOL", "NOT_SYMBOL", "NOW_SYMBOL", "NO_WRITE_TO_BINLOG_SYMBOL", 
		"NULL_SYMBOL", "NUMERIC_SYMBOL", "OFFLINE_SYMBOL", "ON_SYMBOL", "ONLINE_SYMBOL", 
		"ONLY_SYMBOL", "OPTIMIZE_SYMBOL", "OPTIMIZER_COSTS_SYMBOL", "OPTION_SYMBOL", 
		"OPTIONALLY_SYMBOL", "ORDER_SYMBOL", "OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", 
		"OUT_SYMBOL", "POSITION_SYMBOL", "PRECISION_SYMBOL", "PRIMARY_SYMBOL", 
		"PROCEDURE_SYMBOL", "PURGE_SYMBOL", "RANGE_SYMBOL", "READS_SYMBOL", "READ_SYMBOL", 
		"READ_WRITE_SYMBOL", "REAL_SYMBOL", "REFERENCES_SYMBOL", "REGEXP_SYMBOL", 
		"RELEASE_SYMBOL", "RENAME_SYMBOL", "REPEAT_SYMBOL", "REPLACE_SYMBOL", 
		"REQUIRE_SYMBOL", "RESIGNAL_SYMBOL", "RESTRICT_SYMBOL", "RETURN_SYMBOL", 
		"REVOKE_SYMBOL", "RIGHT_SYMBOL", "SECOND_MICROSECOND_SYMBOL", "SELECT_SYMBOL", 
		"SENSITIVE_SYMBOL", "SEPARATOR_SYMBOL", "SERVER_OPTIONS_SYMBOL", "SESSION_USER_SYMBOL", 
		"SET_SYMBOL", "SET_VAR_SYMBOL", "SHOW_SYMBOL", "SIGNAL_SYMBOL", "SMALLINT_SYMBOL", 
		"SPATIAL_SYMBOL", "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", "SQLSTATE_SYMBOL", 
		"SQLWARNING_SYMBOL", "SQL_BIG_RESULT_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL", 
		"SQL_SMALL_RESULT_SYMBOL", "SQL_SYMBOL", "SSL_SYMBOL", "STARTING_SYMBOL", 
		"STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", "STD_SYMBOL", 
		"STORED_SYMBOL", "STRAIGHT_JOIN_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL", 
		"SUM_SYMBOL", "SYSDATE_SYMBOL", "SYSTEM_USER_SYMBOL", "TABLE_REF_PRIORITY_SYMBOL", 
		"TABLE_SYMBOL", "TERMINATED_SYMBOL", "THEN_SYMBOL", "TINYBLOB_SYMBOL", 
		"TINYINT_SYMBOL", "TINYTEXT_SYMBOL", "TO_SYMBOL", "TRAILING_SYMBOL", "TRIGGER_SYMBOL", 
		"TRIM_SYMBOL", "TRUE_SYMBOL", "UNDO_SYMBOL", "UNION_SYMBOL", "UNIQUE_SYMBOL", 
		"UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UPDATE_SYMBOL", "USAGE_SYMBOL", "USE_SYMBOL", 
		"USING_SYMBOL", "UTC_DATE_SYMBOL", "UTC_TIMESTAMP_SYMBOL", "UTC_TIME_SYMBOL", 
		"VALIDATION_SYMBOL", "VALUES_SYMBOL", "VARBINARY_SYMBOL", "VARCHAR_SYMBOL", 
		"VARIANCE_SYMBOL", "VARYING_SYMBOL", "VAR_POP_SYMBOL", "VAR_SAMP_SYMBOL", 
		"VIRTUAL_SYMBOL", "WHEN_SYMBOL", "WHERE_SYMBOL", "WHILE_SYMBOL", "WITH_SYMBOL", 
		"WITH_CUBE_SYMBOL", "WITH_ROLLUP_SYMBOL", "WITHOUT_SYMBOL", "WRITE_SYMBOL", 
		"XOR_SYMBOL", "YEAR_MONTH_SYMBOL", "ZEROFILL_SYMBOL", "PERSIST_SYMBOL", 
		"ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", "VISIBLE_SYMBOL", "EXCEPT_SYMBOL", 
		"COMPONENT_SYMBOL", "RECURSIVE_SYMBOL", "JSON_OBJECTAGG_SYMBOL", "JSON_ARRAYAGG_SYMBOL", 
		"OF_SYMBOL", "SKIP_SYMBOL", "LOCKED_SYMBOL", "NOWAIT_SYMBOL", "GROUPING_SYMBOL", 
		"PERSIST_ONLY_SYMBOL", "HISTOGRAM_SYMBOL", "BUCKETS_SYMBOL", "REMOTE_SYMBOL", 
		"CLONE_SYMBOL", "CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", 
		"FIRST_VALUE_SYMBOL", "FOLLOWING_SYMBOL", "GROUPS_SYMBOL", "LAG_SYMBOL", 
		"LAST_VALUE_SYMBOL", "LEAD_SYMBOL", "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", 
		"NULLS_SYMBOL", "OTHERS_SYMBOL", "OVER_SYMBOL", "PERCENT_RANK_SYMBOL", 
		"PRECEDING_SYMBOL", "RANK_SYMBOL", "RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL", 
		"TIES_SYMBOL", "UNBOUNDED_SYMBOL", "WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", 
		"NESTED_SYMBOL", "ORDINALITY_SYMBOL", "PATH_SYMBOL", "HISTORY_SYMBOL", 
		"REUSE_SYMBOL", "SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL", 
		"SYSTEM_SYMBOL", "VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYM", 
		"RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", "ORGANIZATION_SYMBOL", 
		"REFERENCE_SYMBOL", "WHITESPACE", "INVALID_INPUT", "UNDERSCORE_CHARSET", 
		"IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", "DOUBLE_QUOTED_TEXT", 
		"SINGLE_QUOTED_TEXT", "VERSION_COMMENT_START", "MYSQL_COMMENT_START", 
		"VERSION_COMMENT_END", "BLOCK_COMMENT", "POUND_COMMENT", "DASHDASH_COMMENT", 
		"NOT_EQUAL2_OPERATOR"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MySQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class QueryContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MySQLParser.EOF, 0); }
		public SimpleStatementContext simpleStatement() {
			return getRuleContext(SimpleStatementContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public TerminalNode SEMICOLON_SYMBOL() { return getToken(MySQLParser.SEMICOLON_SYMBOL, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryContext query() throws RecognitionException {
		QueryContext _localctx = new QueryContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_query);
		try {
			setState(1104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1092);
				match(EOF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1095);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					setState(1093);
					simpleStatement();
					}
					break;
				case 2:
					{
					setState(1094);
					beginWork();
					}
					break;
				}
				setState(1102);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SEMICOLON_SYMBOL:
					{
					setState(1097);
					match(SEMICOLON_SYMBOL);
					setState(1099);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						setState(1098);
						match(EOF);
						}
						break;
					}
					}
					break;
				case EOF:
					{
					setState(1101);
					match(EOF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStatementContext extends ParserRuleContext {
		public AlterStatementContext alterStatement() {
			return getRuleContext(AlterStatementContext.class,0);
		}
		public CreateStatementContext createStatement() {
			return getRuleContext(CreateStatementContext.class,0);
		}
		public DropStatementContext dropStatement() {
			return getRuleContext(DropStatementContext.class,0);
		}
		public RenameTableStatementContext renameTableStatement() {
			return getRuleContext(RenameTableStatementContext.class,0);
		}
		public TruncateTableStatementContext truncateTableStatement() {
			return getRuleContext(TruncateTableStatementContext.class,0);
		}
		public ImportStatementContext importStatement() {
			return getRuleContext(ImportStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public LoadStatementContext loadStatement() {
			return getRuleContext(LoadStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public TransactionOrLockingStatementContext transactionOrLockingStatement() {
			return getRuleContext(TransactionOrLockingStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public CloneStatementContext cloneStatement() {
			return getRuleContext(CloneStatementContext.class,0);
		}
		public AccountManagementStatementContext accountManagementStatement() {
			return getRuleContext(AccountManagementStatementContext.class,0);
		}
		public TableAdministrationStatementContext tableAdministrationStatement() {
			return getRuleContext(TableAdministrationStatementContext.class,0);
		}
		public InstallUninstallStatmentContext installUninstallStatment() {
			return getRuleContext(InstallUninstallStatmentContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public ResourceGroupManagementContext resourceGroupManagement() {
			return getRuleContext(ResourceGroupManagementContext.class,0);
		}
		public OtherAdministrativeStatementContext otherAdministrativeStatement() {
			return getRuleContext(OtherAdministrativeStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public GetDiagnosticsContext getDiagnostics() {
			return getRuleContext(GetDiagnosticsContext.class,0);
		}
		public SignalStatementContext signalStatement() {
			return getRuleContext(SignalStatementContext.class,0);
		}
		public ResignalStatementContext resignalStatement() {
			return getRuleContext(ResignalStatementContext.class,0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleStatementContext simpleStatement() throws RecognitionException {
		SimpleStatementContext _localctx = new SimpleStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_simpleStatement);
		try {
			setState(1142);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1106);
				alterStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1107);
				createStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1108);
				dropStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1109);
				renameTableStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1110);
				truncateTableStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1111);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1112);
				importStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1113);
				callStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1114);
				deleteStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1115);
				doStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1116);
				handlerStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1117);
				insertStatement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1118);
				loadStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1119);
				replaceStatement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1120);
				selectStatement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1121);
				updateStatement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1122);
				transactionOrLockingStatement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1123);
				replicationStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1124);
				preparedStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1125);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1126);
				cloneStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1127);
				accountManagementStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1128);
				tableAdministrationStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1129);
				installUninstallStatment();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1130);
				setStatement();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1131);
				showStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1132);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1133);
				resourceGroupManagement();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1134);
				otherAdministrativeStatement();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1135);
				utilityStatement();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1136);
				if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
				setState(1137);
				getDiagnostics();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1138);
				if (!(serverVersion >= 50500)) throw new FailedPredicateException(this, "serverVersion >= 50500");
				setState(1139);
				signalStatement();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1140);
				if (!(serverVersion >= 50500)) throw new FailedPredicateException(this, "serverVersion >= 50500");
				setState(1141);
				resignalStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStatementContext extends ParserRuleContext {
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionRefContext functionRef() {
			return getRuleContext(FunctionRefContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public AlterEventContext alterEvent() {
			return getRuleContext(AlterEventContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return getRuleContext(AlterLogfileGroupContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode ROTATE_SYMBOL() { return getToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public RoutineAlterOptionsContext routineAlterOptions() {
			return getRuleContext(RoutineAlterOptionsContext.class,0);
		}
		public AlterStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementContext alterStatement() throws RecognitionException {
		AlterStatementContext _localctx = new AlterStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_alterStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1144);
			match(ALTER_SYMBOL);
			setState(1170);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				setState(1145);
				alterTable();
				}
				break;
			case 2:
				{
				setState(1146);
				alterDatabase();
				}
				break;
			case 3:
				{
				setState(1147);
				match(PROCEDURE_SYMBOL);
				setState(1148);
				procedureRef();
				setState(1150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENT_SYMBOL) | (1L << CONTAINS_SYMBOL) | (1L << LANGUAGE_SYMBOL) | (1L << NO_SYMBOL))) != 0) || _la==DETERMINISTIC_SYMBOL || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (MODIFIES_SYMBOL - 567)) | (1L << (NOT_SYMBOL - 567)) | (1L << (READS_SYMBOL - 567)))) != 0) || _la==SQL_SYMBOL) {
					{
					setState(1149);
					routineAlterOptions();
					}
				}

				}
				break;
			case 4:
				{
				setState(1152);
				match(FUNCTION_SYMBOL);
				setState(1153);
				functionRef();
				setState(1155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENT_SYMBOL) | (1L << CONTAINS_SYMBOL) | (1L << LANGUAGE_SYMBOL) | (1L << NO_SYMBOL))) != 0) || _la==DETERMINISTIC_SYMBOL || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (MODIFIES_SYMBOL - 567)) | (1L << (NOT_SYMBOL - 567)) | (1L << (READS_SYMBOL - 567)))) != 0) || _la==SQL_SYMBOL) {
					{
					setState(1154);
					routineAlterOptions();
					}
				}

				}
				break;
			case 5:
				{
				setState(1157);
				alterView();
				}
				break;
			case 6:
				{
				setState(1158);
				if (!(serverVersion >= 50100)) throw new FailedPredicateException(this, "serverVersion >= 50100");
				setState(1159);
				alterEvent();
				}
				break;
			case 7:
				{
				setState(1160);
				alterTablespace();
				}
				break;
			case 8:
				{
				setState(1161);
				alterLogfileGroup();
				}
				break;
			case 9:
				{
				setState(1162);
				alterServer();
				}
				break;
			case 10:
				{
				setState(1163);
				if (!(serverVersion >= 50713)) throw new FailedPredicateException(this, "serverVersion >= 50713");
				setState(1164);
				match(INSTANCE_SYMBOL);
				setState(1165);
				match(ROTATE_SYMBOL);
				setState(1166);
				textOrIdentifier();
				setState(1167);
				match(MASTER_SYMBOL);
				setState(1168);
				match(KEY_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode NAME_SYMBOL() { return getToken(MySQLParser.NAME_SYMBOL, 0); }
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_alterDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1172);
			match(DATABASE_SYMBOL);
			setState(1173);
			schemaRef();
			setState(1184);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				setState(1175); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1174);
					createDatabaseOption();
					}
					}
					setState(1177); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CHARSET_SYMBOL || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (CHAR_SYMBOL - 450)) | (1L << (COLLATE_SYMBOL - 450)) | (1L << (DEFAULT_SYMBOL - 450)))) != 0) );
				}
				break;
			case 2:
				{
				setState(1179);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(1180);
				match(UPGRADE_SYMBOL);
				setState(1181);
				match(DATA_SYMBOL);
				setState(1182);
				match(DIRECTORY_SYMBOL);
				setState(1183);
				match(NAME_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventRefContext eventRef() {
			return getRuleContext(EventRefContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public List<TerminalNode> ON_SYMBOL() { return getTokens(MySQLParser.ON_SYMBOL); }
		public TerminalNode ON_SYMBOL(int i) {
			return getToken(MySQLParser.ON_SYMBOL, i);
		}
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public ScheduleContext schedule() {
			return getRuleContext(ScheduleContext.class,0);
		}
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(1186);
				definerClause();
				}
			}

			setState(1189);
			match(EVENT_SYMBOL);
			setState(1190);
			eventRef();
			setState(1194);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				setState(1191);
				match(ON_SYMBOL);
				setState(1192);
				match(SCHEDULE_SYMBOL);
				setState(1193);
				schedule();
				}
				break;
			}
			setState(1202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON_SYMBOL) {
				{
				setState(1196);
				match(ON_SYMBOL);
				setState(1197);
				match(COMPLETION_SYMBOL);
				setState(1199);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(1198);
					match(NOT_SYMBOL);
					}
				}

				setState(1201);
				match(PRESERVE_SYMBOL);
				}
			}

			setState(1207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RENAME_SYMBOL) {
				{
				setState(1204);
				match(RENAME_SYMBOL);
				setState(1205);
				match(TO_SYMBOL);
				setState(1206);
				identifier();
				}
			}

			setState(1215);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE_SYMBOL:
				{
				setState(1209);
				match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				setState(1210);
				match(DISABLE_SYMBOL);
				setState(1213);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(1211);
					match(ON_SYMBOL);
					setState(1212);
					match(SLAVE_SYMBOL);
					}
				}

				}
				break;
			case EOF:
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
			case SEMICOLON_SYMBOL:
				break;
			default:
				break;
			}
			setState(1219);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				setState(1217);
				match(COMMENT_SYMBOL);
				setState(1218);
				textLiteral();
				}
			}

			setState(1223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DO_SYMBOL) {
				{
				setState(1221);
				match(DO_SYMBOL);
				setState(1222);
				compoundStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return getRuleContext(LogfileGroupRefContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public AlterLogfileGroupOptionsContext alterLogfileGroupOptions() {
			return getRuleContext(AlterLogfileGroupOptionsContext.class,0);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_alterLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1225);
			match(LOGFILE_SYMBOL);
			setState(1226);
			match(GROUP_SYMBOL);
			setState(1227);
			logfileGroupRef();
			setState(1228);
			match(ADD_SYMBOL);
			setState(1229);
			match(UNDOFILE_SYMBOL);
			setState(1230);
			textLiteral();
			setState(1232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				setState(1231);
				alterLogfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupOptionsContext extends ParserRuleContext {
		public List<AlterLogfileGroupOptionContext> alterLogfileGroupOption() {
			return getRuleContexts(AlterLogfileGroupOptionContext.class);
		}
		public AlterLogfileGroupOptionContext alterLogfileGroupOption(int i) {
			return getRuleContext(AlterLogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterLogfileGroupOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroupOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterLogfileGroupOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterLogfileGroupOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterLogfileGroupOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupOptionsContext alterLogfileGroupOptions() throws RecognitionException {
		AlterLogfileGroupOptionsContext _localctx = new AlterLogfileGroupOptionsContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_alterLogfileGroupOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1234);
			alterLogfileGroupOption();
			setState(1241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				setState(1236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(1235);
					match(COMMA_SYMBOL);
					}
				}

				setState(1238);
				alterLogfileGroupOption();
				}
				}
				setState(1243);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupOptionContext extends ParserRuleContext {
		public Token option;
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode WAIT_SYMBOL() { return getToken(MySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public AlterLogfileGroupOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroupOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterLogfileGroupOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterLogfileGroupOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterLogfileGroupOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupOptionContext alterLogfileGroupOption() throws RecognitionException {
		AlterLogfileGroupOptionContext _localctx = new AlterLogfileGroupOptionContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alterLogfileGroupOption);
		int _la;
		try {
			setState(1258);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1244);
				((AlterLogfileGroupOptionContext)_localctx).option = match(INITIAL_SIZE_SYMBOL);
				setState(1246);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
				case 1:
					{
					setState(1245);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(1248);
				sizeNumber();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					setState(1249);
					match(STORAGE_SYMBOL);
					}
				}

				setState(1252);
				((AlterLogfileGroupOptionContext)_localctx).option = match(ENGINE_SYMBOL);
				setState(1254);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
				case 1:
					{
					setState(1253);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(1256);
				engineRef();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1257);
				((AlterLogfileGroupOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WAIT_SYMBOL || _la==WAIT_SYMBOL) ) {
					((AlterLogfileGroupOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerRefContext serverRef() {
			return getRuleContext(ServerRefContext.class,0);
		}
		public ServerOptionsContext serverOptions() {
			return getRuleContext(ServerOptionsContext.class,0);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_alterServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1260);
			match(SERVER_SYMBOL);
			setState(1261);
			serverRef();
			setState(1262);
			serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public OnlineOptionContext onlineOption() {
			return getRuleContext(OnlineOptionContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public AlterTableActionsContext alterTableActions() {
			return getRuleContext(AlterTableActionsContext.class,0);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_alterTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1265);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(1264);
				onlineOption();
				}
				break;
			}
			setState(1269);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				setState(1267);
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				setState(1268);
				match(IGNORE_SYMBOL);
				}
				break;
			}
			setState(1271);
			match(TABLE_SYMBOL);
			setState(1272);
			tableRef();
			setState(1274);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				setState(1273);
				alterTableActions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableActionsContext extends ParserRuleContext {
		public AlterCommandListContext alterCommandList() {
			return getRuleContext(AlterCommandListContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public RemovePartitioningContext removePartitioning() {
			return getRuleContext(RemovePartitioningContext.class,0);
		}
		public StandaloneAlterCommandsContext standaloneAlterCommands() {
			return getRuleContext(StandaloneAlterCommandsContext.class,0);
		}
		public AlterCommandsModifierListContext alterCommandsModifierList() {
			return getRuleContext(AlterCommandsModifierListContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public AlterTableActionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableActions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterTableActions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterTableActions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterTableActions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableActionsContext alterTableActions() throws RecognitionException {
		AlterTableActionsContext _localctx = new AlterTableActionsContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alterTableActions);
		try {
			setState(1289);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1276);
				alterCommandList();
				setState(1279);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					setState(1277);
					partitionClause();
					}
					break;
				case 2:
					{
					setState(1278);
					removePartitioning();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1281);
				partitionClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1282);
				removePartitioning();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1286);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
				case 1:
					{
					setState(1283);
					alterCommandsModifierList();
					setState(1284);
					match(COMMA_SYMBOL);
					}
					break;
				}
				setState(1288);
				standaloneAlterCommands();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCommandListContext extends ParserRuleContext {
		public AlterCommandsModifierListContext alterCommandsModifierList() {
			return getRuleContext(AlterCommandsModifierListContext.class,0);
		}
		public AlterListContext alterList() {
			return getRuleContext(AlterListContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public AlterCommandListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCommandList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterCommandList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterCommandList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterCommandList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCommandListContext alterCommandList() throws RecognitionException {
		AlterCommandListContext _localctx = new AlterCommandListContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alterCommandList);
		try {
			setState(1298);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1291);
				alterCommandsModifierList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1295);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
				case 1:
					{
					setState(1292);
					alterCommandsModifierList();
					setState(1293);
					match(COMMA_SYMBOL);
					}
					break;
				}
				setState(1297);
				alterList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCommandsModifierListContext extends ParserRuleContext {
		public List<AlterCommandsModifierContext> alterCommandsModifier() {
			return getRuleContexts(AlterCommandsModifierContext.class);
		}
		public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return getRuleContext(AlterCommandsModifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterCommandsModifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCommandsModifierList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterCommandsModifierList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterCommandsModifierList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterCommandsModifierList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCommandsModifierListContext alterCommandsModifierList() throws RecognitionException {
		AlterCommandsModifierListContext _localctx = new AlterCommandsModifierListContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alterCommandsModifierList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1300);
			alterCommandsModifier();
			setState(1305);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1301);
					match(COMMA_SYMBOL);
					setState(1302);
					alterCommandsModifier();
					}
					} 
				}
				setState(1307);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StandaloneAlterCommandsContext extends ParserRuleContext {
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext alterPartition() {
			return getRuleContext(AlterPartitionContext.class,0);
		}
		public StandaloneAlterCommandsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standaloneAlterCommands; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterStandaloneAlterCommands(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitStandaloneAlterCommands(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitStandaloneAlterCommands(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StandaloneAlterCommandsContext standaloneAlterCommands() throws RecognitionException {
		StandaloneAlterCommandsContext _localctx = new StandaloneAlterCommandsContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_standaloneAlterCommands);
		try {
			setState(1314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1308);
				match(DISCARD_SYMBOL);
				setState(1309);
				match(TABLESPACE_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1310);
				match(IMPORT_SYMBOL);
				setState(1311);
				match(TABLESPACE_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1312);
				if (!(serverVersion >= 50100)) throw new FailedPredicateException(this, "serverVersion >= 50100");
				setState(1313);
				alterPartition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPartitionContext extends ParserRuleContext {
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public List<NoWriteToBinLogContext> noWriteToBinLog() {
			return getRuleContexts(NoWriteToBinLogContext.class);
		}
		public NoWriteToBinLogContext noWriteToBinLog(int i) {
			return getRuleContext(NoWriteToBinLogContext.class,i);
		}
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode REBUILD_SYMBOL() { return getToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return getRuleContext(AllOrPartitionNameListContext.class,0);
		}
		public TerminalNode OPTIMIZE_SYMBOL() { return getToken(MySQLParser.OPTIMIZE_SYMBOL, 0); }
		public TerminalNode ANALYZE_SYMBOL() { return getToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public List<CheckOptionContext> checkOption() {
			return getRuleContexts(CheckOptionContext.class);
		}
		public CheckOptionContext checkOption(int i) {
			return getRuleContext(CheckOptionContext.class,i);
		}
		public TerminalNode REPAIR_SYMBOL() { return getToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public List<RepairTypeContext> repairType() {
			return getRuleContexts(RepairTypeContext.class);
		}
		public RepairTypeContext repairType(int i) {
			return getRuleContext(RepairTypeContext.class,i);
		}
		public TerminalNode COALESCE_SYMBOL() { return getToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public ReorgPartitionRuleContext reorgPartitionRule() {
			return getRuleContext(ReorgPartitionRuleContext.class,0);
		}
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public TerminalNode EXCHANGE_SYMBOL() { return getToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public WithValidationContext withValidation() {
			return getRuleContext(WithValidationContext.class,0);
		}
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterPartition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPartitionContext alterPartition() throws RecognitionException {
		AlterPartitionContext _localctx = new AlterPartitionContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alterPartition);
		int _la;
		try {
			setState(1414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1316);
				match(ADD_SYMBOL);
				setState(1317);
				match(PARTITION_SYMBOL);
				setState(1319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(1318);
					noWriteToBinLog();
					}
				}

				setState(1324);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					setState(1321);
					partitionDefinitions();
					}
					break;
				case PARTITIONS_SYMBOL:
					{
					setState(1322);
					match(PARTITIONS_SYMBOL);
					setState(1323);
					real_ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1326);
				match(DROP_SYMBOL);
				setState(1327);
				match(PARTITION_SYMBOL);
				setState(1328);
				identifierList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1329);
				match(REBUILD_SYMBOL);
				setState(1330);
				match(PARTITION_SYMBOL);
				setState(1332);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(1331);
					noWriteToBinLog();
					}
					break;
				}
				setState(1334);
				allOrPartitionNameList();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1335);
				match(OPTIMIZE_SYMBOL);
				setState(1336);
				match(PARTITION_SYMBOL);
				setState(1338);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					setState(1337);
					noWriteToBinLog();
					}
					break;
				}
				setState(1340);
				allOrPartitionNameList();
				setState(1342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(1341);
					noWriteToBinLog();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1344);
				match(ANALYZE_SYMBOL);
				setState(1345);
				match(PARTITION_SYMBOL);
				setState(1347);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					setState(1346);
					noWriteToBinLog();
					}
					break;
				}
				setState(1349);
				allOrPartitionNameList();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1350);
				match(CHECK_SYMBOL);
				setState(1351);
				match(PARTITION_SYMBOL);
				setState(1352);
				allOrPartitionNameList();
				setState(1356);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (CHANGED_SYMBOL - 80)) | (1L << (EXTENDED_SYMBOL - 80)) | (1L << (FAST_SYMBOL - 80)))) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL || _la==FOR_SYMBOL) {
					{
					{
					setState(1353);
					checkOption();
					}
					}
					setState(1358);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1359);
				match(REPAIR_SYMBOL);
				setState(1360);
				match(PARTITION_SYMBOL);
				setState(1362);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					setState(1361);
					noWriteToBinLog();
					}
					break;
				}
				setState(1364);
				allOrPartitionNameList();
				setState(1368);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					setState(1365);
					repairType();
					}
					}
					setState(1370);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1371);
				match(COALESCE_SYMBOL);
				setState(1372);
				match(PARTITION_SYMBOL);
				setState(1374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(1373);
					noWriteToBinLog();
					}
				}

				setState(1376);
				real_ulong_number();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1377);
				if (!(serverVersion >= 50500)) throw new FailedPredicateException(this, "serverVersion >= 50500");
				setState(1378);
				match(TRUNCATE_SYMBOL);
				setState(1379);
				match(PARTITION_SYMBOL);
				setState(1380);
				allOrPartitionNameList();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1381);
				reorgPartitionRule();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1382);
				match(REORGANIZE_SYMBOL);
				setState(1383);
				match(PARTITION_SYMBOL);
				setState(1385);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					setState(1384);
					noWriteToBinLog();
					}
					break;
				}
				setState(1391);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					setState(1387);
					identifierList();
					setState(1388);
					match(INTO_SYMBOL);
					setState(1389);
					partitionDefinitions();
					}
					break;
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1393);
				match(EXCHANGE_SYMBOL);
				setState(1394);
				match(PARTITION_SYMBOL);
				setState(1395);
				identifier();
				setState(1396);
				match(WITH_SYMBOL);
				setState(1397);
				match(TABLE_SYMBOL);
				setState(1398);
				tableRef();
				setState(1400);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(1399);
					withValidation();
					}
					break;
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1402);
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				setState(1403);
				match(DISCARD_SYMBOL);
				setState(1404);
				match(PARTITION_SYMBOL);
				setState(1405);
				allOrPartitionNameList();
				setState(1406);
				match(TABLESPACE_SYMBOL);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1408);
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				setState(1409);
				match(IMPORT_SYMBOL);
				setState(1410);
				match(PARTITION_SYMBOL);
				setState(1411);
				allOrPartitionNameList();
				setState(1412);
				match(TABLESPACE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterListContext extends ParserRuleContext {
		public List<AlterListItemContext> alterListItem() {
			return getRuleContexts(AlterListItemContext.class);
		}
		public AlterListItemContext alterListItem(int i) {
			return getRuleContext(AlterListItemContext.class,i);
		}
		public List<CreateTableOptionsSpaceSeparatedContext> createTableOptionsSpaceSeparated() {
			return getRuleContexts(CreateTableOptionsSpaceSeparatedContext.class);
		}
		public CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated(int i) {
			return getRuleContext(CreateTableOptionsSpaceSeparatedContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public List<AlterCommandsModifierContext> alterCommandsModifier() {
			return getRuleContexts(AlterCommandsModifierContext.class);
		}
		public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return getRuleContext(AlterCommandsModifierContext.class,i);
		}
		public AlterListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterListContext alterList() throws RecognitionException {
		AlterListContext _localctx = new AlterListContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_alterList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				setState(1416);
				alterListItem();
				}
				break;
			case 2:
				{
				setState(1417);
				createTableOptionsSpaceSeparated();
				}
				break;
			}
			setState(1428);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1420);
					match(COMMA_SYMBOL);
					setState(1424);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
					case 1:
						{
						setState(1421);
						alterListItem();
						}
						break;
					case 2:
						{
						setState(1422);
						alterCommandsModifier();
						}
						break;
					case 3:
						{
						setState(1423);
						createTableOptionsSpaceSeparated();
						}
						break;
					}
					}
					} 
				}
				setState(1430);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCommandsModifierContext extends ParserRuleContext {
		public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return getRuleContext(AlterAlgorithmOptionContext.class,0);
		}
		public AlterLockOptionContext alterLockOption() {
			return getRuleContext(AlterLockOptionContext.class,0);
		}
		public WithValidationContext withValidation() {
			return getRuleContext(WithValidationContext.class,0);
		}
		public AlterCommandsModifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCommandsModifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterCommandsModifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterCommandsModifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterCommandsModifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCommandsModifierContext alterCommandsModifier() throws RecognitionException {
		AlterCommandsModifierContext _localctx = new AlterCommandsModifierContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alterCommandsModifier);
		try {
			setState(1436);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1431);
				if (!(serverVersion >= 50600)) throw new FailedPredicateException(this, "serverVersion >= 50600");
				setState(1432);
				alterAlgorithmOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1433);
				if (!(serverVersion >= 50600)) throw new FailedPredicateException(this, "serverVersion >= 50600");
				setState(1434);
				alterLockOption();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1435);
				withValidation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterListItemContext extends ParserRuleContext {
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FieldDefinitionContext fieldDefinition() {
			return getRuleContext(FieldDefinitionContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode COLUMN_SYMBOL() { return getToken(MySQLParser.COLUMN_SYMBOL, 0); }
		public CheckOrReferencesContext checkOrReferences() {
			return getRuleContext(CheckOrReferencesContext.class,0);
		}
		public PlaceContext place() {
			return getRuleContext(PlaceContext.class,0);
		}
		public TableConstraintDefContext tableConstraintDef() {
			return getRuleContext(TableConstraintDefContext.class,0);
		}
		public TerminalNode CHANGE_SYMBOL() { return getToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public ColumnInternalRefContext columnInternalRef() {
			return getRuleContext(ColumnInternalRefContext.class,0);
		}
		public TerminalNode MODIFY_SYMBOL() { return getToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode FOREIGN_SYMBOL() { return getToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public IndexRefContext indexRef() {
			return getRuleContext(IndexRefContext.class,0);
		}
		public RestrictContext restrict() {
			return getRuleContext(RestrictContext.class,0);
		}
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode KEYS_SYMBOL() { return getToken(MySQLParser.KEYS_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public SignedLiteralContext signedLiteral() {
			return getRuleContext(SignedLiteralContext.class,0);
		}
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public VisibilityContext visibility() {
			return getRuleContext(VisibilityContext.class,0);
		}
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode CONVERT_SYMBOL() { return getToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode FORCE_SYMBOL() { return getToken(MySQLParser.FORCE_SYMBOL, 0); }
		public TerminalNode ORDER_SYMBOL() { return getToken(MySQLParser.ORDER_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public AlterOrderListContext alterOrderList() {
			return getRuleContext(AlterOrderListContext.class,0);
		}
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public AlterListItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterListItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterListItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterListItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterListItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterListItemContext alterListItem() throws RecognitionException {
		AlterListItemContext _localctx = new AlterListItemContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alterListItem);
		int _la;
		try {
			setState(1551);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1438);
				match(ADD_SYMBOL);
				setState(1440);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					setState(1439);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1454);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					setState(1442);
					identifier();
					setState(1443);
					fieldDefinition();
					setState(1445);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
					case 1:
						{
						setState(1444);
						checkOrReferences();
						}
						break;
					}
					setState(1448);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
					case 1:
						{
						setState(1447);
						place();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(1450);
					match(OPEN_PAR_SYMBOL);
					setState(1451);
					tableElementList();
					setState(1452);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1456);
				match(ADD_SYMBOL);
				setState(1457);
				tableConstraintDef();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1458);
				match(CHANGE_SYMBOL);
				setState(1460);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					setState(1459);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1462);
				columnInternalRef();
				setState(1463);
				identifier();
				setState(1464);
				fieldDefinition();
				setState(1466);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
				case 1:
					{
					setState(1465);
					place();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1468);
				match(MODIFY_SYMBOL);
				setState(1470);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
				case 1:
					{
					setState(1469);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1472);
				columnInternalRef();
				setState(1473);
				fieldDefinition();
				setState(1475);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					setState(1474);
					place();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1477);
				match(DROP_SYMBOL);
				setState(1500);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
				case 1:
					{
					setState(1479);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
					case 1:
						{
						setState(1478);
						match(COLUMN_SYMBOL);
						}
						break;
					}
					setState(1481);
					columnInternalRef();
					setState(1483);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
					case 1:
						{
						setState(1482);
						restrict();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(1485);
					match(FOREIGN_SYMBOL);
					setState(1486);
					match(KEY_SYMBOL);
					setState(1493);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
					case 1:
						{
						setState(1487);
						if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
						setState(1488);
						columnInternalRef();
						}
						break;
					case 2:
						{
						setState(1489);
						if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
						setState(1491);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
						case 1:
							{
							setState(1490);
							columnInternalRef();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(1495);
					match(PRIMARY_SYMBOL);
					setState(1496);
					match(KEY_SYMBOL);
					}
					break;
				case 4:
					{
					setState(1497);
					keyOrIndex();
					setState(1498);
					indexRef();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1502);
				match(DISABLE_SYMBOL);
				setState(1503);
				match(KEYS_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1504);
				match(ENABLE_SYMBOL);
				setState(1505);
				match(KEYS_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1506);
				match(ALTER_SYMBOL);
				setState(1508);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
				case 1:
					{
					setState(1507);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1510);
				columnInternalRef();
				setState(1516);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET_SYMBOL:
					{
					setState(1511);
					match(SET_SYMBOL);
					setState(1512);
					match(DEFAULT_SYMBOL);
					setState(1513);
					signedLiteral();
					}
					break;
				case DROP_SYMBOL:
					{
					setState(1514);
					match(DROP_SYMBOL);
					setState(1515);
					match(DEFAULT_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1518);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1519);
				match(ALTER_SYMBOL);
				setState(1520);
				match(INDEX_SYMBOL);
				setState(1521);
				indexRef();
				setState(1522);
				visibility();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1524);
				match(RENAME_SYMBOL);
				setState(1526);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
				case 1:
					{
					setState(1525);
					_la = _input.LA(1);
					if ( !(_la==AS_SYMBOL || _la==TO_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1528);
				tableName();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1529);
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				setState(1530);
				match(RENAME_SYMBOL);
				setState(1531);
				keyOrIndex();
				setState(1532);
				indexRef();
				setState(1533);
				match(TO_SYMBOL);
				setState(1534);
				indexName();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1536);
				match(CONVERT_SYMBOL);
				setState(1537);
				match(TO_SYMBOL);
				setState(1538);
				charset();
				setState(1539);
				charsetName();
				setState(1542);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
				case 1:
					{
					setState(1540);
					match(COLLATE_SYMBOL);
					setState(1541);
					collationName();
					}
					break;
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1544);
				match(FORCE_SYMBOL);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1545);
				match(ORDER_SYMBOL);
				setState(1546);
				match(BY_SYMBOL);
				setState(1547);
				alterOrderList();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1548);
				if (!(serverVersion >= 50708 && serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion >= 50708 && serverVersion < 80000");
				setState(1549);
				match(UPGRADE_SYMBOL);
				setState(1550);
				match(PARTITIONING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlaceContext extends ParserRuleContext {
		public TerminalNode AFTER_SYMBOL() { return getToken(MySQLParser.AFTER_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public PlaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_place; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPlace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPlace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPlace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlaceContext place() throws RecognitionException {
		PlaceContext _localctx = new PlaceContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_place);
		try {
			setState(1556);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFTER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1553);
				match(AFTER_SYMBOL);
				setState(1554);
				identifier();
				}
				break;
			case FIRST_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1555);
				match(FIRST_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RestrictContext extends ParserRuleContext {
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public RestrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restrict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRestrict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRestrict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRestrict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RestrictContext restrict() throws RecognitionException {
		RestrictContext _localctx = new RestrictContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_restrict);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1558);
			_la = _input.LA(1);
			if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOrderListContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<DirectionContext> direction() {
			return getRuleContexts(DirectionContext.class);
		}
		public DirectionContext direction(int i) {
			return getRuleContext(DirectionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterOrderListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOrderList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterOrderList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterOrderList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterOrderList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOrderListContext alterOrderList() throws RecognitionException {
		AlterOrderListContext _localctx = new AlterOrderListContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_alterOrderList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1560);
			identifier();
			setState(1561);
			direction();
			setState(1568);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,73,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1562);
					match(COMMA_SYMBOL);
					setState(1563);
					identifier();
					setState(1564);
					direction();
					}
					} 
				}
				setState(1570);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,73,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterAlgorithmOptionContext extends ParserRuleContext {
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public AlterAlgorithmOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAlgorithmOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterAlgorithmOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterAlgorithmOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterAlgorithmOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterAlgorithmOptionContext alterAlgorithmOption() throws RecognitionException {
		AlterAlgorithmOptionContext _localctx = new AlterAlgorithmOptionContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_alterAlgorithmOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1571);
			match(ALGORITHM_SYMBOL);
			setState(1573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				setState(1572);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(1577);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				setState(1575);
				match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				setState(1576);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLockOptionContext extends ParserRuleContext {
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public AlterLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterLockOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterLockOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLockOptionContext alterLockOption() throws RecognitionException {
		AlterLockOptionContext _localctx = new AlterLockOptionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_alterLockOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1579);
			match(LOCK_SYMBOL);
			setState(1581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				setState(1580);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(1585);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				setState(1583);
				match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				setState(1584);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexLockAndAlgorithmContext extends ParserRuleContext {
		public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return getRuleContext(AlterAlgorithmOptionContext.class,0);
		}
		public AlterLockOptionContext alterLockOption() {
			return getRuleContext(AlterLockOptionContext.class,0);
		}
		public IndexLockAndAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexLockAndAlgorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexLockAndAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexLockAndAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexLockAndAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexLockAndAlgorithmContext indexLockAndAlgorithm() throws RecognitionException {
		IndexLockAndAlgorithmContext _localctx = new IndexLockAndAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_indexLockAndAlgorithm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1587);
			if (!(serverVersion >= 50600)) throw new FailedPredicateException(this, "serverVersion >= 50600");
			setState(1596);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALGORITHM_SYMBOL:
				{
				setState(1588);
				alterAlgorithmOption();
				setState(1590);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCK_SYMBOL) {
					{
					setState(1589);
					alterLockOption();
					}
				}

				}
				break;
			case LOCK_SYMBOL:
				{
				setState(1592);
				alterLockOption();
				setState(1594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					setState(1593);
					alterAlgorithmOption();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithValidationContext extends ParserRuleContext {
		public TerminalNode VALIDATION_SYMBOL() { return getToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode WITHOUT_SYMBOL() { return getToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public WithValidationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withValidation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWithValidation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWithValidation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWithValidation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithValidationContext withValidation() throws RecognitionException {
		WithValidationContext _localctx = new WithValidationContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_withValidation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1598);
			if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
			setState(1599);
			_la = _input.LA(1);
			if ( !(_la==WITH_SYMBOL || _la==WITHOUT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1600);
			match(VALIDATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemovePartitioningContext extends ParserRuleContext {
		public TerminalNode REMOVE_SYMBOL() { return getToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public RemovePartitioningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removePartitioning; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRemovePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRemovePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRemovePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemovePartitioningContext removePartitioning() throws RecognitionException {
		RemovePartitioningContext _localctx = new RemovePartitioningContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_removePartitioning);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1602);
			if (!(serverVersion >= 50100)) throw new FailedPredicateException(this, "serverVersion >= 50100");
			setState(1603);
			match(REMOVE_SYMBOL);
			setState(1604);
			match(PARTITIONING_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllOrPartitionNameListContext extends ParserRuleContext {
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public AllOrPartitionNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOrPartitionNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAllOrPartitionNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAllOrPartitionNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAllOrPartitionNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllOrPartitionNameListContext allOrPartitionNameList() throws RecognitionException {
		AllOrPartitionNameListContext _localctx = new AllOrPartitionNameListContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_allOrPartitionNameList);
		try {
			setState(1608);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1606);
				match(ALL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1607);
				identifierList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReorgPartitionRuleContext extends ParserRuleContext {
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public NoWriteToBinLogContext noWriteToBinLog() {
			return getRuleContext(NoWriteToBinLogContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public ReorgPartitionRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reorgPartitionRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterReorgPartitionRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitReorgPartitionRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitReorgPartitionRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReorgPartitionRuleContext reorgPartitionRule() throws RecognitionException {
		ReorgPartitionRuleContext _localctx = new ReorgPartitionRuleContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_reorgPartitionRule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1610);
			match(REORGANIZE_SYMBOL);
			setState(1611);
			match(PARTITION_SYMBOL);
			setState(1613);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				setState(1612);
				noWriteToBinLog();
				}
				break;
			}
			setState(1619);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				setState(1615);
				identifierList();
				setState(1616);
				match(INTO_SYMBOL);
				setState(1617);
				partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode CHANGE_SYMBOL() { return getToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode ACCESSIBLE_SYMBOL() { return getToken(MySQLParser.ACCESSIBLE_SYMBOL, 0); }
		public List<AlterTablespaceOptionContext> alterTablespaceOption() {
			return getRuleContexts(AlterTablespaceOptionContext.class);
		}
		public AlterTablespaceOptionContext alterTablespaceOption(int i) {
			return getRuleContext(AlterTablespaceOptionContext.class,i);
		}
		public TerminalNode READ_ONLY_SYMBOL() { return getToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		public TerminalNode READ_WRITE_SYMBOL() { return getToken(MySQLParser.READ_WRITE_SYMBOL, 0); }
		public List<ChangeTablespaceOptionContext> changeTablespaceOption() {
			return getRuleContexts(ChangeTablespaceOptionContext.class);
		}
		public ChangeTablespaceOptionContext changeTablespaceOption(int i) {
			return getRuleContext(ChangeTablespaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_alterTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1621);
			match(TABLESPACE_SYMBOL);
			setState(1622);
			tablespaceRef();
			setState(1663);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				setState(1623);
				_la = _input.LA(1);
				if ( !(_la==ADD_SYMBOL || _la==DROP_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1624);
				match(DATAFILE_SYMBOL);
				setState(1625);
				textLiteral();
				setState(1636);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTOEXTEND_SIZE_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
					{
					setState(1626);
					alterTablespaceOption();
					setState(1633);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==AUTOEXTEND_SIZE_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
						{
						{
						setState(1628);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA_SYMBOL) {
							{
							setState(1627);
							match(COMMA_SYMBOL);
							}
						}

						setState(1630);
						alterTablespaceOption();
						}
						}
						setState(1635);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case 2:
				{
				setState(1638);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(1658);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EOF:
				case SEMICOLON_SYMBOL:
					{
					}
					break;
				case CHANGE_SYMBOL:
					{
					setState(1640);
					match(CHANGE_SYMBOL);
					setState(1641);
					match(DATAFILE_SYMBOL);
					setState(1642);
					textLiteral();
					setState(1653);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AUTOEXTEND_SIZE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL) {
						{
						setState(1643);
						changeTablespaceOption();
						setState(1650);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AUTOEXTEND_SIZE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==COMMA_SYMBOL) {
							{
							{
							setState(1645);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA_SYMBOL) {
								{
								setState(1644);
								match(COMMA_SYMBOL);
								}
							}

							setState(1647);
							changeTablespaceOption();
							}
							}
							setState(1652);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					}
					break;
				case READ_ONLY_SYMBOL:
				case READ_WRITE_SYMBOL:
					{
					setState(1655);
					_la = _input.LA(1);
					if ( !(_la==READ_ONLY_SYMBOL || _la==READ_WRITE_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case NOT_SYMBOL:
					{
					setState(1656);
					match(NOT_SYMBOL);
					setState(1657);
					match(ACCESSIBLE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				setState(1660);
				match(RENAME_SYMBOL);
				setState(1661);
				match(TO_SYMBOL);
				setState(1662);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceOptionContext extends ParserRuleContext {
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode AUTOEXTEND_SIZE_SYMBOL() { return getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public TerminalNode MAX_SIZE_SYMBOL() { return getToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode WAIT_SYMBOL() { return getToken(MySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public AlterTablespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespaceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterTablespaceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterTablespaceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterTablespaceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceOptionContext alterTablespaceOption() throws RecognitionException {
		AlterTablespaceOptionContext _localctx = new AlterTablespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_alterTablespaceOption);
		int _la;
		try {
			setState(1689);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1665);
				match(INITIAL_SIZE_SYMBOL);
				setState(1667);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
				case 1:
					{
					setState(1666);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(1669);
				sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1670);
				match(AUTOEXTEND_SIZE_SYMBOL);
				setState(1672);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
				case 1:
					{
					setState(1671);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(1674);
				sizeNumber();
				}
				break;
			case MAX_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1675);
				match(MAX_SIZE_SYMBOL);
				setState(1677);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
				case 1:
					{
					setState(1676);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(1679);
				sizeNumber();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(1681);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					setState(1680);
					match(STORAGE_SYMBOL);
					}
				}

				setState(1683);
				match(ENGINE_SYMBOL);
				setState(1685);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					setState(1684);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(1687);
				engineRef();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(1688);
				_la = _input.LA(1);
				if ( !(_la==NO_WAIT_SYMBOL || _la==WAIT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeTablespaceOptionContext extends ParserRuleContext {
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode AUTOEXTEND_SIZE_SYMBOL() { return getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public TerminalNode MAX_SIZE_SYMBOL() { return getToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public ChangeTablespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeTablespaceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterChangeTablespaceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitChangeTablespaceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitChangeTablespaceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeTablespaceOptionContext changeTablespaceOption() throws RecognitionException {
		ChangeTablespaceOptionContext _localctx = new ChangeTablespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_changeTablespaceOption);
		try {
			setState(1706);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1691);
				match(INITIAL_SIZE_SYMBOL);
				setState(1693);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
				case 1:
					{
					setState(1692);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(1695);
				sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1696);
				match(AUTOEXTEND_SIZE_SYMBOL);
				setState(1698);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					setState(1697);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(1700);
				sizeNumber();
				}
				break;
			case MAX_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1701);
				match(MAX_SIZE_SYMBOL);
				setState(1703);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
				case 1:
					{
					setState(1702);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(1705);
				sizeNumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewRefContext viewRef() {
			return getRuleContext(ViewRefContext.class,0);
		}
		public ViewTailContext viewTail() {
			return getRuleContext(ViewTailContext.class,0);
		}
		public ViewAlgorithmContext viewAlgorithm() {
			return getRuleContext(ViewAlgorithmContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public ViewSuidContext viewSuid() {
			return getRuleContext(ViewSuidContext.class,0);
		}
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM_SYMBOL) {
				{
				setState(1708);
				viewAlgorithm();
				}
			}

			setState(1712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(1711);
				definerClause();
				}
			}

			setState(1715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				setState(1714);
				viewSuid();
				}
			}

			setState(1717);
			match(VIEW_SYMBOL);
			setState(1718);
			viewRef();
			setState(1719);
			viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewTailContext extends ParserRuleContext {
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public ViewSelectContext viewSelect() {
			return getRuleContext(ViewSelectContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public ViewTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewTail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewTail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewTail(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewTail(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewTailContext viewTail() throws RecognitionException {
		ViewTailContext _localctx = new ViewTailContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_viewTail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(1721);
				columnInternalRefList();
				}
			}

			setState(1724);
			match(AS_SYMBOL);
			setState(1725);
			viewSelect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewSelectContext extends ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return getRuleContext(QueryExpressionOrParensContext.class,0);
		}
		public ViewCheckOptionContext viewCheckOption() {
			return getRuleContext(ViewCheckOptionContext.class,0);
		}
		public ViewSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewSelectContext viewSelect() throws RecognitionException {
		ViewSelectContext _localctx = new ViewSelectContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_viewSelect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1727);
			queryExpressionOrParens();
			setState(1729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				setState(1728);
				viewCheckOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewCheckOptionContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode CASCADED_SYMBOL() { return getToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ViewCheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewCheckOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewCheckOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewCheckOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewCheckOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewCheckOptionContext viewCheckOption() throws RecognitionException {
		ViewCheckOptionContext _localctx = new ViewCheckOptionContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_viewCheckOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1731);
			match(WITH_SYMBOL);
			setState(1733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) {
				{
				setState(1732);
				_la = _input.LA(1);
				if ( !(_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1735);
			match(CHECK_SYMBOL);
			setState(1736);
			match(OPTION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateStatementContext extends ParserRuleContext {
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateUdfContext createUdf() {
			return getRuleContext(CreateUdfContext.class,0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return getRuleContext(CreateLogfileGroupContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTablespaceContext createTablespace() {
			return getRuleContext(CreateTablespaceContext.class,0);
		}
		public CreateEventContext createEvent() {
			return getRuleContext(CreateEventContext.class,0);
		}
		public CreateRoleContext createRole() {
			return getRuleContext(CreateRoleContext.class,0);
		}
		public CreateSpatialReferenceContext createSpatialReference() {
			return getRuleContext(CreateSpatialReferenceContext.class,0);
		}
		public CreateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateStatementContext createStatement() throws RecognitionException {
		CreateStatementContext _localctx = new CreateStatementContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_createStatement);
		try {
			setState(1755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1738);
				createDatabase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1739);
				createTable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1740);
				createFunction();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1741);
				createProcedure();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1742);
				createUdf();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1743);
				createLogfileGroup();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1744);
				createView();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1745);
				createTrigger();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1746);
				createIndex();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1747);
				createServer();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1748);
				createTablespace();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1749);
				if (!(serverVersion >= 50100)) throw new FailedPredicateException(this, "serverVersion >= 50100");
				setState(1750);
				createEvent();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1751);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1752);
				createRole();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1753);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(1754);
				createSpatialReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1757);
			match(CREATE_SYMBOL);
			setState(1758);
			match(DATABASE_SYMBOL);
			setState(1760);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				setState(1759);
				ifNotExists();
				}
				break;
			}
			setState(1762);
			schemaName();
			setState(1766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CHARSET_SYMBOL || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (CHAR_SYMBOL - 450)) | (1L << (COLLATE_SYMBOL - 450)) | (1L << (DEFAULT_SYMBOL - 450)))) != 0)) {
				{
				{
				setState(1763);
				createDatabaseOption();
				}
				}
				setState(1768);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public DefaultCharsetContext defaultCharset() {
			return getRuleContext(DefaultCharsetContext.class,0);
		}
		public DefaultCollationContext defaultCollation() {
			return getRuleContext(DefaultCollationContext.class,0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateDatabaseOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateDatabaseOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateDatabaseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_createDatabaseOption);
		try {
			setState(1771);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1769);
				defaultCharset();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1770);
				defaultCollation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LIKE_SYMBOL() { return getToken(MySQLParser.LIKE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public CreateTableOptionsContext createTableOptions() {
			return getRuleContext(CreateTableOptionsContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public DuplicateAsQueryExpressionContext duplicateAsQueryExpression() {
			return getRuleContext(DuplicateAsQueryExpressionContext.class,0);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_createTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1773);
			match(CREATE_SYMBOL);
			setState(1775);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				setState(1774);
				match(TEMPORARY_SYMBOL);
				}
			}

			setState(1777);
			match(TABLE_SYMBOL);
			setState(1779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
			case 1:
				{
				setState(1778);
				ifNotExists();
				}
				break;
			}
			setState(1781);
			tableName();
			setState(1804);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(1786);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
				case 1:
					{
					setState(1782);
					match(OPEN_PAR_SYMBOL);
					setState(1783);
					tableElementList();
					setState(1784);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				setState(1789);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
				case 1:
					{
					setState(1788);
					createTableOptions();
					}
					break;
				}
				setState(1792);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
				case 1:
					{
					setState(1791);
					partitionClause();
					}
					break;
				}
				setState(1795);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
				case 1:
					{
					setState(1794);
					duplicateAsQueryExpression();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(1797);
				match(LIKE_SYMBOL);
				setState(1798);
				tableRef();
				}
				break;
			case 3:
				{
				setState(1799);
				match(OPEN_PAR_SYMBOL);
				setState(1800);
				match(LIKE_SYMBOL);
				setState(1801);
				tableRef();
				setState(1802);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementListContext extends ParserRuleContext {
		public List<TableElementContext> tableElement() {
			return getRuleContexts(TableElementContext.class);
		}
		public TableElementContext tableElement(int i) {
			return getRuleContext(TableElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementListContext tableElementList() throws RecognitionException {
		TableElementListContext _localctx = new TableElementListContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_tableElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1806);
			tableElement();
			setState(1811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(1807);
				match(COMMA_SYMBOL);
				setState(1808);
				tableElement();
				}
				}
				setState(1813);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TableConstraintDefContext tableConstraintDef() {
			return getRuleContext(TableConstraintDefContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_tableElement);
		try {
			setState(1816);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1814);
				columnDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1815);
				tableConstraintDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DuplicateAsQueryExpressionContext extends ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return getRuleContext(QueryExpressionOrParensContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public DuplicateAsQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_duplicateAsQueryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDuplicateAsQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDuplicateAsQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDuplicateAsQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DuplicateAsQueryExpressionContext duplicateAsQueryExpression() throws RecognitionException {
		DuplicateAsQueryExpressionContext _localctx = new DuplicateAsQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_duplicateAsQueryExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1819);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				setState(1818);
				_la = _input.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1822);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				{
				setState(1821);
				match(AS_SYMBOL);
				}
				break;
			}
			setState(1824);
			queryExpressionOrParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionOrParensContext extends ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public QueryExpressionOrParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionOrParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQueryExpressionOrParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQueryExpressionOrParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQueryExpressionOrParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionOrParensContext queryExpressionOrParens() throws RecognitionException {
		QueryExpressionOrParensContext _localctx = new QueryExpressionOrParensContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_queryExpressionOrParens);
		try {
			setState(1828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1826);
				queryExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1827);
				queryExpressionParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateWithDefinerContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public CreateWithDefinerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createWithDefiner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateWithDefiner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateWithDefiner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateWithDefiner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateWithDefinerContext createWithDefiner() throws RecognitionException {
		CreateWithDefinerContext _localctx = new CreateWithDefinerContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_createWithDefiner);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1830);
			match(CREATE_SYMBOL);
			setState(1832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(1831);
				definerClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoutineContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MySQLParser.EOF, 0); }
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateUdfContext createUdf() {
			return getRuleContext(CreateUdfContext.class,0);
		}
		public TerminalNode SEMICOLON_SYMBOL() { return getToken(MySQLParser.SEMICOLON_SYMBOL, 0); }
		public CreateRoutineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRoutine; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateRoutine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateRoutine(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoutineContext createRoutine() throws RecognitionException {
		CreateRoutineContext _localctx = new CreateRoutineContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_createRoutine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				setState(1834);
				createProcedure();
				}
				break;
			case 2:
				{
				setState(1835);
				createFunction();
				}
				break;
			case 3:
				{
				setState(1836);
				createUdf();
				}
				break;
			}
			setState(1840);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMICOLON_SYMBOL) {
				{
				setState(1839);
				match(SEMICOLON_SYMBOL);
				}
			}

			setState(1842);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public CreateWithDefinerContext createWithDefiner() {
			return getRuleContext(CreateWithDefinerContext.class,0);
		}
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public List<ProcedureParameterContext> procedureParameter() {
			return getRuleContexts(ProcedureParameterContext.class);
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return getRuleContext(ProcedureParameterContext.class,i);
		}
		public List<RoutineCreateOptionContext> routineCreateOption() {
			return getRuleContexts(RoutineCreateOptionContext.class);
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return getRuleContext(RoutineCreateOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1844);
			createWithDefiner();
			setState(1845);
			match(PROCEDURE_SYMBOL);
			setState(1846);
			procedureName();
			setState(1847);
			match(OPEN_PAR_SYMBOL);
			setState(1856);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				setState(1848);
				procedureParameter();
				setState(1853);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(1849);
					match(COMMA_SYMBOL);
					setState(1850);
					procedureParameter();
					}
					}
					setState(1855);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(1858);
			match(CLOSE_PAR_SYMBOL);
			setState(1862);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,129,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1859);
					routineCreateOption();
					}
					} 
				}
				setState(1864);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,129,_ctx);
			}
			setState(1865);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public CreateWithDefinerContext createWithDefiner() {
			return getRuleContext(CreateWithDefinerContext.class,0);
		}
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode RETURNS_SYMBOL() { return getToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TypeWithOptCollateContext typeWithOptCollate() {
			return getRuleContext(TypeWithOptCollateContext.class,0);
		}
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public List<RoutineCreateOptionContext> routineCreateOption() {
			return getRuleContexts(RoutineCreateOptionContext.class);
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return getRuleContext(RoutineCreateOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_createFunction);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1867);
			createWithDefiner();
			setState(1868);
			match(FUNCTION_SYMBOL);
			setState(1869);
			functionName();
			setState(1870);
			match(OPEN_PAR_SYMBOL);
			setState(1879);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				setState(1871);
				functionParameter();
				setState(1876);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(1872);
					match(COMMA_SYMBOL);
					setState(1873);
					functionParameter();
					}
					}
					setState(1878);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(1881);
			match(CLOSE_PAR_SYMBOL);
			setState(1882);
			match(RETURNS_SYMBOL);
			setState(1883);
			typeWithOptCollate();
			setState(1887);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,132,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1884);
					routineCreateOption();
					}
					} 
				}
				setState(1889);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,132,_ctx);
			}
			setState(1890);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfContext extends ParserRuleContext {
		public Token type;
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public UdfNameContext udfName() {
			return getRuleContext(UdfNameContext.class,0);
		}
		public TerminalNode RETURNS_SYMBOL() { return getToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TerminalNode SONAME_SYMBOL() { return getToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode STRING_SYMBOL() { return getToken(MySQLParser.STRING_SYMBOL, 0); }
		public TerminalNode INT_SYMBOL() { return getToken(MySQLParser.INT_SYMBOL, 0); }
		public TerminalNode REAL_SYMBOL() { return getToken(MySQLParser.REAL_SYMBOL, 0); }
		public TerminalNode DECIMAL_SYMBOL() { return getToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public TerminalNode AGGREGATE_SYMBOL() { return getToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public CreateUdfContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdf; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateUdf(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateUdf(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateUdf(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUdfContext createUdf() throws RecognitionException {
		CreateUdfContext _localctx = new CreateUdfContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_createUdf);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1892);
			match(CREATE_SYMBOL);
			setState(1894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE_SYMBOL) {
				{
				setState(1893);
				match(AGGREGATE_SYMBOL);
				}
			}

			setState(1896);
			match(FUNCTION_SYMBOL);
			setState(1897);
			udfName();
			setState(1898);
			match(RETURNS_SYMBOL);
			setState(1899);
			((CreateUdfContext)_localctx).type = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==STRING_SYMBOL || _la==DECIMAL_SYMBOL || _la==INT_SYMBOL || _la==REAL_SYMBOL) ) {
				((CreateUdfContext)_localctx).type = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1900);
			match(SONAME_SYMBOL);
			setState(1901);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineCreateOptionContext extends ParserRuleContext {
		public RoutineOptionContext routineOption() {
			return getRuleContext(RoutineOptionContext.class,0);
		}
		public TerminalNode DETERMINISTIC_SYMBOL() { return getToken(MySQLParser.DETERMINISTIC_SYMBOL, 0); }
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public RoutineCreateOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineCreateOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoutineCreateOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoutineCreateOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoutineCreateOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineCreateOptionContext routineCreateOption() throws RecognitionException {
		RoutineCreateOptionContext _localctx = new RoutineCreateOptionContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_routineCreateOption);
		int _la;
		try {
			setState(1908);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT_SYMBOL:
			case CONTAINS_SYMBOL:
			case LANGUAGE_SYMBOL:
			case NO_SYMBOL:
			case MODIFIES_SYMBOL:
			case READS_SYMBOL:
			case SQL_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1903);
				routineOption();
				}
				break;
			case DETERMINISTIC_SYMBOL:
			case NOT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1905);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(1904);
					match(NOT_SYMBOL);
					}
				}

				setState(1907);
				match(DETERMINISTIC_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineAlterOptionsContext extends ParserRuleContext {
		public List<RoutineCreateOptionContext> routineCreateOption() {
			return getRuleContexts(RoutineCreateOptionContext.class);
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return getRuleContext(RoutineCreateOptionContext.class,i);
		}
		public RoutineAlterOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineAlterOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoutineAlterOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoutineAlterOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoutineAlterOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineAlterOptionsContext routineAlterOptions() throws RecognitionException {
		RoutineAlterOptionsContext _localctx = new RoutineAlterOptionsContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_routineAlterOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1911); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1910);
				routineCreateOption();
				}
				}
				setState(1913); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENT_SYMBOL) | (1L << CONTAINS_SYMBOL) | (1L << LANGUAGE_SYMBOL) | (1L << NO_SYMBOL))) != 0) || _la==DETERMINISTIC_SYMBOL || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (MODIFIES_SYMBOL - 567)) | (1L << (NOT_SYMBOL - 567)) | (1L << (READS_SYMBOL - 567)))) != 0) || _la==SQL_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public Token option;
		public Token security;
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TerminalNode SQL_SYMBOL() { return getToken(MySQLParser.SQL_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode READS_SYMBOL() { return getToken(MySQLParser.READS_SYMBOL, 0); }
		public TerminalNode MODIFIES_SYMBOL() { return getToken(MySQLParser.MODIFIES_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoutineOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoutineOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoutineOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_routineOption);
		int _la;
		try {
			setState(1932);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1915);
				((RoutineOptionContext)_localctx).option = match(COMMENT_SYMBOL);
				setState(1916);
				textLiteral();
				}
				break;
			case LANGUAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1917);
				((RoutineOptionContext)_localctx).option = match(LANGUAGE_SYMBOL);
				setState(1918);
				match(SQL_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1919);
				((RoutineOptionContext)_localctx).option = match(NO_SYMBOL);
				setState(1920);
				match(SQL_SYMBOL);
				}
				break;
			case CONTAINS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(1921);
				((RoutineOptionContext)_localctx).option = match(CONTAINS_SYMBOL);
				setState(1922);
				match(SQL_SYMBOL);
				}
				break;
			case READS_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(1923);
				((RoutineOptionContext)_localctx).option = match(READS_SYMBOL);
				setState(1924);
				match(SQL_SYMBOL);
				setState(1925);
				match(DATA_SYMBOL);
				}
				break;
			case MODIFIES_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(1926);
				((RoutineOptionContext)_localctx).option = match(MODIFIES_SYMBOL);
				setState(1927);
				match(SQL_SYMBOL);
				setState(1928);
				match(DATA_SYMBOL);
				}
				break;
			case SQL_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(1929);
				((RoutineOptionContext)_localctx).option = match(SQL_SYMBOL);
				setState(1930);
				match(SECURITY_SYMBOL);
				setState(1931);
				((RoutineOptionContext)_localctx).security = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
					((RoutineOptionContext)_localctx).security = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public Token type;
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public CreateIndexTargetContext createIndexTarget() {
			return getRuleContext(CreateIndexTargetContext.class,0);
		}
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public OnlineOptionContext onlineOption() {
			return getRuleContext(OnlineOptionContext.class,0);
		}
		public TerminalNode FULLTEXT_SYMBOL() { return getToken(MySQLParser.FULLTEXT_SYMBOL, 0); }
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return getRuleContext(IndexLockAndAlgorithmContext.class,0);
		}
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public IndexNameAndTypeContext indexNameAndType() {
			return getRuleContext(IndexNameAndTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<FulltextIndexOptionContext> fulltextIndexOption() {
			return getRuleContexts(FulltextIndexOptionContext.class);
		}
		public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return getRuleContext(FulltextIndexOptionContext.class,i);
		}
		public List<SpatialIndexOptionContext> spatialIndexOption() {
			return getRuleContexts(SpatialIndexOptionContext.class);
		}
		public SpatialIndexOptionContext spatialIndexOption(int i) {
			return getRuleContext(SpatialIndexOptionContext.class,i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_createIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1934);
			match(CREATE_SYMBOL);
			setState(1936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
			case 1:
				{
				setState(1935);
				onlineOption();
				}
				break;
			}
			setState(1972);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX_SYMBOL:
			case UNIQUE_SYMBOL:
				{
				setState(1939);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNIQUE_SYMBOL) {
					{
					setState(1938);
					match(UNIQUE_SYMBOL);
					}
				}

				setState(1941);
				((CreateIndexContext)_localctx).type = match(INDEX_SYMBOL);
				setState(1943);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
				case 1:
					{
					setState(1942);
					indexNameAndType();
					}
					break;
				}
				setState(1945);
				createIndexTarget();
				setState(1949);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,141,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1946);
						indexOption();
						}
						} 
					}
					setState(1951);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,141,_ctx);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				{
				setState(1952);
				((CreateIndexContext)_localctx).type = match(FULLTEXT_SYMBOL);
				setState(1953);
				match(INDEX_SYMBOL);
				setState(1954);
				indexName();
				setState(1955);
				createIndexTarget();
				setState(1959);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1956);
						fulltextIndexOption();
						}
						} 
					}
					setState(1961);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				{
				setState(1962);
				((CreateIndexContext)_localctx).type = match(SPATIAL_SYMBOL);
				setState(1963);
				match(INDEX_SYMBOL);
				setState(1964);
				indexName();
				setState(1965);
				createIndexTarget();
				setState(1969);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,143,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1966);
						spatialIndexOption();
						}
						} 
					}
					setState(1971);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,143,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
			case 1:
				{
				setState(1974);
				indexLockAndAlgorithm();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameAndTypeContext extends ParserRuleContext {
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public IndexNameAndTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexNameAndType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexNameAndType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexNameAndType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexNameAndType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameAndTypeContext indexNameAndType() throws RecognitionException {
		IndexNameAndTypeContext _localctx = new IndexNameAndTypeContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_indexNameAndType);
		int _la;
		try {
			setState(1986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1977);
				indexName();
				setState(1980);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING_SYMBOL) {
					{
					setState(1978);
					match(USING_SYMBOL);
					setState(1979);
					indexType();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1982);
				indexName();
				setState(1983);
				match(TYPE_SYMBOL);
				setState(1984);
				indexType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexTargetContext extends ParserRuleContext {
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public KeyListContext keyList() {
			return getRuleContext(KeyListContext.class,0);
		}
		public CreateIndexTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateIndexTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateIndexTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateIndexTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexTargetContext createIndexTarget() throws RecognitionException {
		CreateIndexTargetContext _localctx = new CreateIndexTargetContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_createIndexTarget);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1988);
			match(ON_SYMBOL);
			setState(1989);
			tableRef();
			setState(1990);
			keyList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupNameContext logfileGroupName() {
			return getRuleContext(LogfileGroupNameContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TerminalNode REDOFILE_SYMBOL() { return getToken(MySQLParser.REDOFILE_SYMBOL, 0); }
		public LogfileGroupOptionsContext logfileGroupOptions() {
			return getRuleContext(LogfileGroupOptionsContext.class,0);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1992);
			match(CREATE_SYMBOL);
			setState(1993);
			match(LOGFILE_SYMBOL);
			setState(1994);
			match(GROUP_SYMBOL);
			setState(1995);
			logfileGroupName();
			setState(1996);
			match(ADD_SYMBOL);
			setState(1997);
			_la = _input.LA(1);
			if ( !(_la==REDOFILE_SYMBOL || _la==UNDOFILE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1998);
			textLiteral();
			setState(2000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (NO_WAIT_SYMBOL - 237)) | (1L << (NODEGROUP_SYMBOL - 237)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 237)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STORAGE_SYMBOL - 328)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 328)) | (1L << (WAIT_SYMBOL - 328)))) != 0)) {
				{
				setState(1999);
				logfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogfileGroupOptionsContext extends ParserRuleContext {
		public List<LogfileGroupOptionContext> logfileGroupOption() {
			return getRuleContexts(LogfileGroupOptionContext.class);
		}
		public LogfileGroupOptionContext logfileGroupOption(int i) {
			return getRuleContext(LogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public LogfileGroupOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLogfileGroupOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLogfileGroupOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLogfileGroupOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogfileGroupOptionsContext logfileGroupOptions() throws RecognitionException {
		LogfileGroupOptionsContext _localctx = new LogfileGroupOptionsContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_logfileGroupOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2002);
			logfileGroupOption();
			setState(2009);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (NO_WAIT_SYMBOL - 237)) | (1L << (NODEGROUP_SYMBOL - 237)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 237)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STORAGE_SYMBOL - 328)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 328)) | (1L << (WAIT_SYMBOL - 328)))) != 0) || _la==COMMA_SYMBOL) {
				{
				{
				setState(2004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(2003);
					match(COMMA_SYMBOL);
					}
				}

				setState(2006);
				logfileGroupOption();
				}
				}
				setState(2011);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogfileGroupOptionContext extends ParserRuleContext {
		public Token option;
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode REDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode WAIT_SYMBOL() { return getToken(MySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public LogfileGroupOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLogfileGroupOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLogfileGroupOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLogfileGroupOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogfileGroupOptionContext logfileGroupOption() throws RecognitionException {
		LogfileGroupOptionContext _localctx = new LogfileGroupOptionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_logfileGroupOption);
		int _la;
		try {
			setState(2041);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2012);
				((LogfileGroupOptionContext)_localctx).option = match(INITIAL_SIZE_SYMBOL);
				setState(2014);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
				case 1:
					{
					setState(2013);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(2016);
				sizeNumber();
				}
				break;
			case REDO_BUFFER_SIZE_SYMBOL:
			case UNDO_BUFFER_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2017);
				((LogfileGroupOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==REDO_BUFFER_SIZE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL) ) {
					((LogfileGroupOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2019);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
				case 1:
					{
					setState(2018);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(2021);
				sizeNumber();
				}
				break;
			case NODEGROUP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2022);
				((LogfileGroupOptionContext)_localctx).option = match(NODEGROUP_SYMBOL);
				setState(2024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(2023);
					match(EQUAL_OPERATOR);
					}
				}

				setState(2026);
				real_ulong_number();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2028);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					setState(2027);
					match(STORAGE_SYMBOL);
					}
				}

				setState(2030);
				((LogfileGroupOptionContext)_localctx).option = match(ENGINE_SYMBOL);
				setState(2032);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
				case 1:
					{
					setState(2031);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(2034);
				engineRef();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2035);
				((LogfileGroupOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WAIT_SYMBOL || _la==WAIT_SYMBOL) ) {
					((LogfileGroupOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2036);
				((LogfileGroupOptionContext)_localctx).option = match(COMMENT_SYMBOL);
				setState(2038);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
				case 1:
					{
					setState(2037);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(2040);
				textLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerNameContext serverName() {
			return getRuleContext(ServerNameContext.class,0);
		}
		public TerminalNode FOREIGN_SYMBOL() { return getToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode WRAPPER_SYMBOL() { return getToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ServerOptionsContext serverOptions() {
			return getRuleContext(ServerOptionsContext.class,0);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_createServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2043);
			match(CREATE_SYMBOL);
			setState(2044);
			match(SERVER_SYMBOL);
			setState(2045);
			serverName();
			setState(2046);
			match(FOREIGN_SYMBOL);
			setState(2047);
			match(DATA_SYMBOL);
			setState(2048);
			match(WRAPPER_SYMBOL);
			setState(2049);
			textOrIdentifier();
			setState(2050);
			serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS_SYMBOL() { return getToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ServerOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterServerOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitServerOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitServerOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerOptionsContext serverOptions() throws RecognitionException {
		ServerOptionsContext _localctx = new ServerOptionsContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_serverOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2052);
			match(OPTIONS_SYMBOL);
			setState(2053);
			match(OPEN_PAR_SYMBOL);
			setState(2054);
			serverOption();
			setState(2059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2055);
				match(COMMA_SYMBOL);
				setState(2056);
				serverOption();
				}
				}
				setState(2061);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2062);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public Token option;
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode HOST_SYMBOL() { return getToken(MySQLParser.HOST_SYMBOL, 0); }
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode SOCKET_SYMBOL() { return getToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public TerminalNode OWNER_SYMBOL() { return getToken(MySQLParser.OWNER_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode PORT_SYMBOL() { return getToken(MySQLParser.PORT_SYMBOL, 0); }
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterServerOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitServerOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitServerOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_serverOption);
		try {
			setState(2078);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2064);
				((ServerOptionContext)_localctx).option = match(HOST_SYMBOL);
				setState(2065);
				textLiteral();
				}
				break;
			case DATABASE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2066);
				((ServerOptionContext)_localctx).option = match(DATABASE_SYMBOL);
				setState(2067);
				textLiteral();
				}
				break;
			case USER_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2068);
				((ServerOptionContext)_localctx).option = match(USER_SYMBOL);
				setState(2069);
				textLiteral();
				}
				break;
			case PASSWORD_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2070);
				((ServerOptionContext)_localctx).option = match(PASSWORD_SYMBOL);
				setState(2071);
				textLiteral();
				}
				break;
			case SOCKET_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2072);
				((ServerOptionContext)_localctx).option = match(SOCKET_SYMBOL);
				setState(2073);
				textLiteral();
				}
				break;
			case OWNER_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2074);
				((ServerOptionContext)_localctx).option = match(OWNER_SYMBOL);
				setState(2075);
				textLiteral();
				}
				break;
			case PORT_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(2076);
				((ServerOptionContext)_localctx).option = match(PORT_SYMBOL);
				setState(2077);
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode USE_SYMBOL() { return getToken(MySQLParser.USE_SYMBOL, 0); }
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return getRuleContext(LogfileGroupRefContext.class,0);
		}
		public TablespaceOptionsContext tablespaceOptions() {
			return getRuleContext(TablespaceOptionsContext.class,0);
		}
		public CreateTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceContext createTablespace() throws RecognitionException {
		CreateTablespaceContext _localctx = new CreateTablespaceContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_createTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2080);
			match(CREATE_SYMBOL);
			setState(2081);
			match(TABLESPACE_SYMBOL);
			setState(2082);
			tablespaceName();
			setState(2083);
			match(ADD_SYMBOL);
			setState(2084);
			match(DATAFILE_SYMBOL);
			setState(2085);
			textLiteral();
			setState(2090);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				setState(2086);
				match(USE_SYMBOL);
				setState(2087);
				match(LOGFILE_SYMBOL);
				setState(2088);
				match(GROUP_SYMBOL);
				setState(2089);
				logfileGroupRef();
				}
				break;
			}
			setState(2093);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				setState(2092);
				tablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceOptionsContext extends ParserRuleContext {
		public List<TablespaceOptionContext> tablespaceOption() {
			return getRuleContexts(TablespaceOptionContext.class);
		}
		public TablespaceOptionContext tablespaceOption(int i) {
			return getRuleContext(TablespaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TablespaceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTablespaceOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTablespaceOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTablespaceOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceOptionsContext tablespaceOptions() throws RecognitionException {
		TablespaceOptionsContext _localctx = new TablespaceOptionsContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_tablespaceOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2095);
			tablespaceOption();
			setState(2102);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,163,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2097);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,162,_ctx) ) {
					case 1:
						{
						setState(2096);
						match(COMMA_SYMBOL);
						}
						break;
					}
					setState(2099);
					tablespaceOption();
					}
					} 
				}
				setState(2104);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,163,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceOptionContext extends ParserRuleContext {
		public Token option;
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode AUTOEXTEND_SIZE_SYMBOL() { return getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public TerminalNode MAX_SIZE_SYMBOL() { return getToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public TerminalNode EXTENT_SIZE_SYMBOL() { return getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode WAIT_SYMBOL() { return getToken(MySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TerminalNode FILE_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public TablespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTablespaceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTablespaceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTablespaceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceOptionContext tablespaceOption() throws RecognitionException {
		TablespaceOptionContext _localctx = new TablespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_tablespaceOption);
		int _la;
		try {
			setState(2150);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2105);
				((TablespaceOptionContext)_localctx).option = match(INITIAL_SIZE_SYMBOL);
				setState(2107);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
				case 1:
					{
					setState(2106);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(2109);
				sizeNumber();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2110);
				((TablespaceOptionContext)_localctx).option = match(AUTOEXTEND_SIZE_SYMBOL);
				setState(2112);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
				case 1:
					{
					setState(2111);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(2114);
				sizeNumber();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2115);
				((TablespaceOptionContext)_localctx).option = match(MAX_SIZE_SYMBOL);
				setState(2117);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
				case 1:
					{
					setState(2116);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(2119);
				sizeNumber();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2120);
				((TablespaceOptionContext)_localctx).option = match(EXTENT_SIZE_SYMBOL);
				setState(2122);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
				case 1:
					{
					setState(2121);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(2124);
				sizeNumber();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2125);
				((TablespaceOptionContext)_localctx).option = match(NODEGROUP_SYMBOL);
				setState(2127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(2126);
					match(EQUAL_OPERATOR);
					}
				}

				setState(2129);
				real_ulong_number();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					setState(2130);
					match(STORAGE_SYMBOL);
					}
				}

				setState(2133);
				((TablespaceOptionContext)_localctx).option = match(ENGINE_SYMBOL);
				setState(2135);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
				case 1:
					{
					setState(2134);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(2137);
				engineRef();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2138);
				((TablespaceOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WAIT_SYMBOL || _la==WAIT_SYMBOL) ) {
					((TablespaceOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2139);
				((TablespaceOptionContext)_localctx).option = match(COMMENT_SYMBOL);
				setState(2141);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
				case 1:
					{
					setState(2140);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(2143);
				textLiteral();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2144);
				if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
				setState(2145);
				((TablespaceOptionContext)_localctx).option = match(FILE_BLOCK_SIZE_SYMBOL);
				setState(2147);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
				case 1:
					{
					setState(2146);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(2149);
				sizeNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public ViewTailContext viewTail() {
			return getRuleContext(ViewTailContext.class,0);
		}
		public ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() {
			return getRuleContext(ViewReplaceOrAlgorithmContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public ViewSuidContext viewSuid() {
			return getRuleContext(ViewSuidContext.class,0);
		}
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2152);
			match(CREATE_SYMBOL);
			setState(2154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==OR_SYMBOL) {
				{
				setState(2153);
				viewReplaceOrAlgorithm();
				}
			}

			setState(2157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2156);
				definerClause();
				}
			}

			setState(2160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				setState(2159);
				viewSuid();
				}
			}

			setState(2162);
			match(VIEW_SYMBOL);
			setState(2163);
			viewName();
			setState(2164);
			viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewReplaceOrAlgorithmContext extends ParserRuleContext {
		public TerminalNode OR_SYMBOL() { return getToken(MySQLParser.OR_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public ViewAlgorithmContext viewAlgorithm() {
			return getRuleContext(ViewAlgorithmContext.class,0);
		}
		public ViewReplaceOrAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewReplaceOrAlgorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewReplaceOrAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewReplaceOrAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewReplaceOrAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() throws RecognitionException {
		ViewReplaceOrAlgorithmContext _localctx = new ViewReplaceOrAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_viewReplaceOrAlgorithm);
		int _la;
		try {
			setState(2172);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2166);
				match(OR_SYMBOL);
				setState(2167);
				match(REPLACE_SYMBOL);
				setState(2169);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					setState(2168);
					viewAlgorithm();
					}
				}

				}
				break;
			case ALGORITHM_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2171);
				viewAlgorithm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewAlgorithmContext extends ParserRuleContext {
		public Token algorithm;
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode UNDEFINED_SYMBOL() { return getToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public TerminalNode MERGE_SYMBOL() { return getToken(MySQLParser.MERGE_SYMBOL, 0); }
		public TerminalNode TEMPTABLE_SYMBOL() { return getToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public ViewAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewAlgorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewAlgorithmContext viewAlgorithm() throws RecognitionException {
		ViewAlgorithmContext _localctx = new ViewAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_viewAlgorithm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2174);
			match(ALGORITHM_SYMBOL);
			setState(2175);
			match(EQUAL_OPERATOR);
			setState(2176);
			((ViewAlgorithmContext)_localctx).algorithm = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==MERGE_SYMBOL || _la==TEMPTABLE_SYMBOL || _la==UNDEFINED_SYMBOL) ) {
				((ViewAlgorithmContext)_localctx).algorithm = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewSuidContext extends ParserRuleContext {
		public TerminalNode SQL_SYMBOL() { return getToken(MySQLParser.SQL_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public ViewSuidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewSuid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewSuid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewSuid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewSuid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewSuidContext viewSuid() throws RecognitionException {
		ViewSuidContext _localctx = new ViewSuidContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_viewSuid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2178);
			match(SQL_SYMBOL);
			setState(2179);
			match(SECURITY_SYMBOL);
			setState(2180);
			_la = _input.LA(1);
			if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public Token timing;
		public Token event;
		public CreateWithDefinerContext createWithDefiner() {
			return getRuleContext(CreateWithDefinerContext.class,0);
		}
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode EACH_SYMBOL() { return getToken(MySQLParser.EACH_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode BEFORE_SYMBOL() { return getToken(MySQLParser.BEFORE_SYMBOL, 0); }
		public TerminalNode AFTER_SYMBOL() { return getToken(MySQLParser.AFTER_SYMBOL, 0); }
		public TerminalNode INSERT_SYMBOL() { return getToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode DELETE_SYMBOL() { return getToken(MySQLParser.DELETE_SYMBOL, 0); }
		public TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() {
			return getRuleContext(TriggerFollowsPrecedesClauseContext.class,0);
		}
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2182);
			createWithDefiner();
			setState(2183);
			match(TRIGGER_SYMBOL);
			setState(2184);
			triggerName();
			setState(2185);
			((CreateTriggerContext)_localctx).timing = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==AFTER_SYMBOL || _la==BEFORE_SYMBOL) ) {
				((CreateTriggerContext)_localctx).timing = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2186);
			((CreateTriggerContext)_localctx).event = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE_SYMBOL || _la==INSERT_SYMBOL || _la==UPDATE_SYMBOL) ) {
				((CreateTriggerContext)_localctx).event = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2187);
			match(ON_SYMBOL);
			setState(2188);
			tableRef();
			setState(2189);
			match(FOR_SYMBOL);
			setState(2190);
			match(EACH_SYMBOL);
			setState(2191);
			match(ROW_SYMBOL);
			setState(2193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				setState(2192);
				triggerFollowsPrecedesClause();
				}
				break;
			}
			setState(2195);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerFollowsPrecedesClauseContext extends ParserRuleContext {
		public Token ordering;
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode FOLLOWS_SYMBOL() { return getToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public TerminalNode PRECEDES_SYMBOL() { return getToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public TriggerFollowsPrecedesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFollowsPrecedesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTriggerFollowsPrecedesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTriggerFollowsPrecedesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTriggerFollowsPrecedesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() throws RecognitionException {
		TriggerFollowsPrecedesClauseContext _localctx = new TriggerFollowsPrecedesClauseContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_triggerFollowsPrecedesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2197);
			if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
			setState(2198);
			((TriggerFollowsPrecedesClauseContext)_localctx).ordering = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FOLLOWS_SYMBOL || _la==PRECEDES_SYMBOL) ) {
				((TriggerFollowsPrecedesClauseContext)_localctx).ordering = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2199);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventContext extends ParserRuleContext {
		public CreateWithDefinerContext createWithDefiner() {
			return getRuleContext(CreateWithDefinerContext.class,0);
		}
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventNameContext eventName() {
			return getRuleContext(EventNameContext.class,0);
		}
		public List<TerminalNode> ON_SYMBOL() { return getTokens(MySQLParser.ON_SYMBOL); }
		public TerminalNode ON_SYMBOL(int i) {
			return getToken(MySQLParser.ON_SYMBOL, i);
		}
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public ScheduleContext schedule() {
			return getRuleContext(ScheduleContext.class,0);
		}
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2201);
			createWithDefiner();
			setState(2202);
			match(EVENT_SYMBOL);
			setState(2204);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				setState(2203);
				ifNotExists();
				}
				break;
			}
			setState(2206);
			eventName();
			setState(2207);
			match(ON_SYMBOL);
			setState(2208);
			match(SCHEDULE_SYMBOL);
			setState(2209);
			schedule();
			setState(2216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON_SYMBOL) {
				{
				setState(2210);
				match(ON_SYMBOL);
				setState(2211);
				match(COMPLETION_SYMBOL);
				setState(2213);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(2212);
					match(NOT_SYMBOL);
					}
				}

				setState(2215);
				match(PRESERVE_SYMBOL);
				}
			}

			setState(2224);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE_SYMBOL:
				{
				setState(2218);
				match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				setState(2219);
				match(DISABLE_SYMBOL);
				setState(2222);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(2220);
					match(ON_SYMBOL);
					setState(2221);
					match(SLAVE_SYMBOL);
					}
				}

				}
				break;
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
				break;
			default:
				break;
			}
			setState(2228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				setState(2226);
				match(COMMENT_SYMBOL);
				setState(2227);
				textLiteral();
				}
			}

			setState(2230);
			match(DO_SYMBOL);
			setState(2231);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoleContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoleContext createRole() throws RecognitionException {
		CreateRoleContext _localctx = new CreateRoleContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_createRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2233);
			match(CREATE_SYMBOL);
			setState(2234);
			match(ROLE_SYMBOL);
			setState(2236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				setState(2235);
				ifNotExists();
				}
				break;
			}
			setState(2238);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSpatialReferenceContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode OR_SYMBOL() { return getToken(MySQLParser.OR_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public TerminalNode REFERENCE_SYMBOL() { return getToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public List<SrsAttributeContext> srsAttribute() {
			return getRuleContexts(SrsAttributeContext.class);
		}
		public SrsAttributeContext srsAttribute(int i) {
			return getRuleContext(SrsAttributeContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateSpatialReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSpatialReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateSpatialReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateSpatialReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateSpatialReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSpatialReferenceContext createSpatialReference() throws RecognitionException {
		CreateSpatialReferenceContext _localctx = new CreateSpatialReferenceContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_createSpatialReference);
		int _la;
		try {
			setState(2267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2240);
				match(CREATE_SYMBOL);
				setState(2241);
				match(OR_SYMBOL);
				setState(2242);
				match(REPLACE_SYMBOL);
				setState(2243);
				match(SPATIAL_SYMBOL);
				setState(2244);
				match(REFERENCE_SYMBOL);
				setState(2245);
				match(SYSTEM_SYMBOL);
				setState(2246);
				real_ulonglong_number();
				setState(2250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (DEFINITION_SYMBOL - 747)) | (1L << (DESCRIPTION_SYMBOL - 747)) | (1L << (ORGANIZATION_SYMBOL - 747)))) != 0)) {
					{
					{
					setState(2247);
					srsAttribute();
					}
					}
					setState(2252);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2253);
				match(CREATE_SYMBOL);
				setState(2254);
				match(SPATIAL_SYMBOL);
				setState(2255);
				match(REFERENCE_SYMBOL);
				setState(2256);
				match(SYSTEM_SYMBOL);
				setState(2258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF_SYMBOL) {
					{
					setState(2257);
					ifNotExists();
					}
				}

				setState(2260);
				real_ulonglong_number();
				setState(2264);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (DEFINITION_SYMBOL - 747)) | (1L << (DESCRIPTION_SYMBOL - 747)) | (1L << (ORGANIZATION_SYMBOL - 747)))) != 0)) {
					{
					{
					setState(2261);
					srsAttribute();
					}
					}
					setState(2266);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SrsAttributeContext extends ParserRuleContext {
		public TerminalNode NAME_SYMBOL() { return getToken(MySQLParser.NAME_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode DEFINITION_SYMBOL() { return getToken(MySQLParser.DEFINITION_SYMBOL, 0); }
		public TerminalNode ORGANIZATION_SYMBOL() { return getToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public TerminalNode DESCRIPTION_SYMBOL() { return getToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public SrsAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_srsAttribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSrsAttribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSrsAttribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSrsAttribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SrsAttributeContext srsAttribute() throws RecognitionException {
		SrsAttributeContext _localctx = new SrsAttributeContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_srsAttribute);
		try {
			setState(2284);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2269);
				match(NAME_SYMBOL);
				setState(2270);
				match(TEXT_SYMBOL);
				setState(2271);
				textStringNoLinebreak();
				}
				break;
			case DEFINITION_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2272);
				match(DEFINITION_SYMBOL);
				setState(2273);
				match(TEXT_SYMBOL);
				setState(2274);
				textStringNoLinebreak();
				}
				break;
			case ORGANIZATION_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2275);
				match(ORGANIZATION_SYMBOL);
				setState(2276);
				textStringNoLinebreak();
				setState(2277);
				match(IDENTIFIED_SYMBOL);
				setState(2278);
				match(BY_SYMBOL);
				setState(2279);
				real_ulonglong_number();
				}
				break;
			case DESCRIPTION_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2281);
				match(DESCRIPTION_SYMBOL);
				setState(2282);
				match(TEXT_SYMBOL);
				setState(2283);
				textStringNoLinebreak();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropStatementContext extends ParserRuleContext {
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropEventContext dropEvent() {
			return getRuleContext(DropEventContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return getRuleContext(DropLogfileGroupContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropTableSpaceContext dropTableSpace() {
			return getRuleContext(DropTableSpaceContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public DropRoleContext dropRole() {
			return getRuleContext(DropRoleContext.class,0);
		}
		public DropSpatialReferenceContext dropSpatialReference() {
			return getRuleContext(DropSpatialReferenceContext.class,0);
		}
		public DropStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropStatementContext dropStatement() throws RecognitionException {
		DropStatementContext _localctx = new DropStatementContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_dropStatement);
		try {
			setState(2302);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2286);
				dropDatabase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2287);
				if (!(serverVersion >= 50100)) throw new FailedPredicateException(this, "serverVersion >= 50100");
				setState(2288);
				dropEvent();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2289);
				dropFunction();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2290);
				dropProcedure();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2291);
				dropIndex();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2292);
				dropLogfileGroup();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2293);
				dropServer();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2294);
				dropTable();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2295);
				dropTableSpace();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2296);
				dropTrigger();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2297);
				dropView();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2298);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(2299);
				dropRole();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2300);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(2301);
				dropSpatialReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_dropDatabase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2304);
			match(DROP_SYMBOL);
			setState(2305);
			match(DATABASE_SYMBOL);
			setState(2307);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2306);
				ifExists();
				}
				break;
			}
			setState(2309);
			schemaRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventRefContext eventRef() {
			return getRuleContext(EventRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_dropEvent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2311);
			match(DROP_SYMBOL);
			setState(2312);
			match(EVENT_SYMBOL);
			setState(2314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				setState(2313);
				ifExists();
				}
				break;
			}
			setState(2316);
			eventRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionRefContext functionRef() {
			return getRuleContext(FunctionRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_dropFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2318);
			match(DROP_SYMBOL);
			setState(2319);
			match(FUNCTION_SYMBOL);
			setState(2321);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				setState(2320);
				ifExists();
				}
				break;
			}
			setState(2323);
			functionRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_dropProcedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2325);
			match(DROP_SYMBOL);
			setState(2326);
			match(PROCEDURE_SYMBOL);
			setState(2328);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(2327);
				ifExists();
				}
				break;
			}
			setState(2330);
			procedureRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public Token type;
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public IndexRefContext indexRef() {
			return getRuleContext(IndexRefContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public OnlineOptionContext onlineOption() {
			return getRuleContext(OnlineOptionContext.class,0);
		}
		public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return getRuleContext(IndexLockAndAlgorithmContext.class,0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_dropIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2332);
			match(DROP_SYMBOL);
			setState(2334);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				setState(2333);
				onlineOption();
				}
				break;
			}
			setState(2336);
			((DropIndexContext)_localctx).type = match(INDEX_SYMBOL);
			setState(2337);
			indexRef();
			setState(2338);
			match(ON_SYMBOL);
			setState(2339);
			tableRef();
			setState(2341);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				setState(2340);
				indexLockAndAlgorithm();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return getRuleContext(LogfileGroupRefContext.class,0);
		}
		public List<DropLogfileGroupOptionContext> dropLogfileGroupOption() {
			return getRuleContexts(DropLogfileGroupOptionContext.class);
		}
		public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return getRuleContext(DropLogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_dropLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2343);
			match(DROP_SYMBOL);
			setState(2344);
			match(LOGFILE_SYMBOL);
			setState(2345);
			match(GROUP_SYMBOL);
			setState(2346);
			logfileGroupRef();
			setState(2357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				setState(2347);
				dropLogfileGroupOption();
				setState(2354);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
					{
					{
					setState(2349);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						setState(2348);
						match(COMMA_SYMBOL);
						}
					}

					setState(2351);
					dropLogfileGroupOption();
					}
					}
					setState(2356);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupOptionContext extends ParserRuleContext {
		public TerminalNode WAIT_SYMBOL() { return getToken(MySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DropLogfileGroupOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroupOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropLogfileGroupOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropLogfileGroupOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropLogfileGroupOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLogfileGroupOptionContext dropLogfileGroupOption() throws RecognitionException {
		DropLogfileGroupOptionContext _localctx = new DropLogfileGroupOptionContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_dropLogfileGroupOption);
		int _la;
		try {
			setState(2368);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2359);
				_la = _input.LA(1);
				if ( !(_la==NO_WAIT_SYMBOL || _la==WAIT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					setState(2360);
					match(STORAGE_SYMBOL);
					}
				}

				setState(2363);
				match(ENGINE_SYMBOL);
				setState(2365);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
				case 1:
					{
					setState(2364);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(2367);
				engineRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerRefContext serverRef() {
			return getRuleContext(ServerRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_dropServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2370);
			match(DROP_SYMBOL);
			setState(2371);
			match(SERVER_SYMBOL);
			setState(2373);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				setState(2372);
				ifExists();
				}
				break;
			}
			setState(2375);
			serverRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public Token type;
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TableRefListContext tableRefList() {
			return getRuleContext(TableRefListContext.class,0);
		}
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2377);
			match(DROP_SYMBOL);
			setState(2379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				setState(2378);
				match(TEMPORARY_SYMBOL);
				}
			}

			setState(2381);
			((DropTableContext)_localctx).type = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				((DropTableContext)_localctx).type = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				setState(2382);
				ifExists();
				}
				break;
			}
			setState(2385);
			tableRefList();
			setState(2387);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				setState(2386);
				_la = _input.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableSpaceContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public List<DropLogfileGroupOptionContext> dropLogfileGroupOption() {
			return getRuleContexts(DropLogfileGroupOptionContext.class);
		}
		public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return getRuleContext(DropLogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public DropTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableSpaceContext dropTableSpace() throws RecognitionException {
		DropTableSpaceContext _localctx = new DropTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_dropTableSpace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2389);
			match(DROP_SYMBOL);
			setState(2390);
			match(TABLESPACE_SYMBOL);
			setState(2391);
			tablespaceRef();
			setState(2402);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				setState(2392);
				dropLogfileGroupOption();
				setState(2399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
					{
					{
					setState(2394);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						setState(2393);
						match(COMMA_SYMBOL);
						}
					}

					setState(2396);
					dropLogfileGroupOption();
					}
					}
					setState(2401);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TriggerRefContext triggerRef() {
			return getRuleContext(TriggerRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_dropTrigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2404);
			match(DROP_SYMBOL);
			setState(2405);
			match(TRIGGER_SYMBOL);
			setState(2407);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				{
				setState(2406);
				ifExists();
				}
				break;
			}
			setState(2409);
			triggerRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewRefListContext viewRefList() {
			return getRuleContext(ViewRefListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2411);
			match(DROP_SYMBOL);
			setState(2412);
			match(VIEW_SYMBOL);
			setState(2414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				setState(2413);
				ifExists();
				}
				break;
			}
			setState(2416);
			viewRefList();
			setState(2418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				setState(2417);
				_la = _input.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoleContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoleContext dropRole() throws RecognitionException {
		DropRoleContext _localctx = new DropRoleContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_dropRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2420);
			match(DROP_SYMBOL);
			setState(2421);
			match(ROLE_SYMBOL);
			setState(2423);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				setState(2422);
				ifExists();
				}
				break;
			}
			setState(2425);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropSpatialReferenceContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public TerminalNode REFERENCE_SYMBOL() { return getToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropSpatialReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSpatialReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropSpatialReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropSpatialReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropSpatialReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSpatialReferenceContext dropSpatialReference() throws RecognitionException {
		DropSpatialReferenceContext _localctx = new DropSpatialReferenceContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_dropSpatialReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2427);
			match(DROP_SYMBOL);
			setState(2428);
			match(SPATIAL_SYMBOL);
			setState(2429);
			match(REFERENCE_SYMBOL);
			setState(2430);
			match(SYSTEM_SYMBOL);
			setState(2432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF_SYMBOL) {
				{
				setState(2431);
				ifExists();
				}
			}

			setState(2434);
			real_ulonglong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableStatementContext extends ParserRuleContext {
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public List<RenamePairContext> renamePair() {
			return getRuleContexts(RenamePairContext.class);
		}
		public RenamePairContext renamePair(int i) {
			return getRuleContext(RenamePairContext.class,i);
		}
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RenameTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRenameTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRenameTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRenameTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableStatementContext renameTableStatement() throws RecognitionException {
		RenameTableStatementContext _localctx = new RenameTableStatementContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_renameTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2436);
			match(RENAME_SYMBOL);
			setState(2437);
			_la = _input.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2438);
			renamePair();
			setState(2443);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2439);
				match(COMMA_SYMBOL);
				setState(2440);
				renamePair();
				}
				}
				setState(2445);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenamePairContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public RenamePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renamePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRenamePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRenamePair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRenamePair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenamePairContext renamePair() throws RecognitionException {
		RenamePairContext _localctx = new RenamePairContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_renamePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2446);
			tableRef();
			setState(2447);
			match(TO_SYMBOL);
			setState(2448);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableStatementContext extends ParserRuleContext {
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TruncateTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTruncateTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTruncateTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTruncateTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableStatementContext truncateTableStatement() throws RecognitionException {
		TruncateTableStatementContext _localctx = new TruncateTableStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_truncateTableStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2450);
			match(TRUNCATE_SYMBOL);
			setState(2452);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				setState(2451);
				match(TABLE_SYMBOL);
				}
				break;
			}
			setState(2454);
			tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportStatementContext extends ParserRuleContext {
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TextStringLiteralListContext textStringLiteralList() {
			return getRuleContext(TextStringLiteralListContext.class,0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterImportStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitImportStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitImportStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportStatementContext importStatement() throws RecognitionException {
		ImportStatementContext _localctx = new ImportStatementContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_importStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2456);
			match(IMPORT_SYMBOL);
			setState(2457);
			match(TABLE_SYMBOL);
			setState(2458);
			match(FROM_SYMBOL);
			setState(2459);
			textStringLiteralList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL_SYMBOL() { return getToken(MySQLParser.CALL_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCallStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCallStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCallStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_callStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2461);
			match(CALL_SYMBOL);
			setState(2462);
			procedureRef();
			setState(2468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(2463);
				match(OPEN_PAR_SYMBOL);
				setState(2465);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
				case 1:
					{
					setState(2464);
					exprList();
					}
					break;
				}
				setState(2467);
				match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public TerminalNode DELETE_SYMBOL() { return getToken(MySQLParser.DELETE_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TableAliasRefListContext tableAliasRefList() {
			return getRuleContext(TableAliasRefListContext.class,0);
		}
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public List<DeleteStatementOptionContext> deleteStatementOption() {
			return getRuleContexts(DeleteStatementOptionContext.class);
		}
		public DeleteStatementOptionContext deleteStatementOption(int i) {
			return getRuleContext(DeleteStatementOptionContext.class,i);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public PartitionDeleteContext partitionDelete() {
			return getRuleContext(PartitionDeleteContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public SimpleLimitClauseContext simpleLimitClause() {
			return getRuleContext(SimpleLimitClauseContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_deleteStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2472);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				setState(2470);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(2471);
				withClause();
				}
				break;
			}
			setState(2474);
			match(DELETE_SYMBOL);
			setState(2478);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,222,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2475);
					deleteStatementOption();
					}
					} 
				}
				setState(2480);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,222,_ctx);
			}
			setState(2509);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				setState(2481);
				match(FROM_SYMBOL);
				setState(2501);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
				case 1:
					{
					setState(2482);
					tableAliasRefList();
					setState(2483);
					match(USING_SYMBOL);
					setState(2484);
					tableReferenceList();
					setState(2486);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						setState(2485);
						whereClause();
						}
					}

					}
					break;
				case 2:
					{
					setState(2488);
					tableRef();
					setState(2490);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
					case 1:
						{
						setState(2489);
						partitionDelete();
						}
						break;
					}
					setState(2493);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						setState(2492);
						whereClause();
						}
					}

					setState(2496);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ORDER_SYMBOL) {
						{
						setState(2495);
						orderClause();
						}
					}

					setState(2499);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						setState(2498);
						simpleLimitClause();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2503);
				tableAliasRefList();
				setState(2504);
				match(FROM_SYMBOL);
				setState(2505);
				tableReferenceList();
				setState(2507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE_SYMBOL) {
					{
					setState(2506);
					whereClause();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDeleteContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDelete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDeleteContext partitionDelete() throws RecognitionException {
		PartitionDeleteContext _localctx = new PartitionDeleteContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_partitionDelete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2511);
			if (!(serverVersion >= 50602)) throw new FailedPredicateException(this, "serverVersion >= 50602");
			setState(2512);
			match(PARTITION_SYMBOL);
			setState(2513);
			match(OPEN_PAR_SYMBOL);
			setState(2514);
			identifierList();
			setState(2515);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementOptionContext extends ParserRuleContext {
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public DeleteStatementOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatementOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDeleteStatementOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDeleteStatementOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDeleteStatementOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementOptionContext deleteStatementOption() throws RecognitionException {
		DeleteStatementOptionContext _localctx = new DeleteStatementOptionContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_deleteStatementOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2517);
			_la = _input.LA(1);
			if ( !(_la==QUICK_SYMBOL || _la==IGNORE_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public SelectItemListContext selectItemList() {
			return getRuleContext(SelectItemListContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2519);
			match(DO_SYMBOL);
			setState(2524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				setState(2520);
				if (!(serverVersion < 50709)) throw new FailedPredicateException(this, "serverVersion < 50709");
				setState(2521);
				exprList();
				}
				break;
			case 2:
				{
				setState(2522);
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				setState(2523);
				selectItemList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER_SYMBOL() { return getToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CLOSE_SYMBOL() { return getToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public HandlerReadOrScanContext handlerReadOrScan() {
			return getRuleContext(HandlerReadOrScanContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterHandlerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitHandlerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitHandlerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_handlerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2526);
			match(HANDLER_SYMBOL);
			setState(2544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				{
				setState(2527);
				tableRef();
				setState(2528);
				match(OPEN_SYMBOL);
				setState(2530);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
				case 1:
					{
					setState(2529);
					tableAlias();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2532);
				identifier();
				setState(2542);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CLOSE_SYMBOL:
					{
					setState(2533);
					match(CLOSE_SYMBOL);
					}
					break;
				case READ_SYMBOL:
					{
					setState(2534);
					match(READ_SYMBOL);
					setState(2535);
					handlerReadOrScan();
					setState(2537);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						setState(2536);
						whereClause();
						}
					}

					setState(2540);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						setState(2539);
						limitClause();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadOrScanContext extends ParserRuleContext {
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MySQLParser.NEXT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ValuesContext values() {
			return getRuleContext(ValuesContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode PREV_SYMBOL() { return getToken(MySQLParser.PREV_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode LESS_THAN_OPERATOR() { return getToken(MySQLParser.LESS_THAN_OPERATOR, 0); }
		public TerminalNode GREATER_THAN_OPERATOR() { return getToken(MySQLParser.GREATER_THAN_OPERATOR, 0); }
		public TerminalNode LESS_OR_EQUAL_OPERATOR() { return getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		public TerminalNode GREATER_OR_EQUAL_OPERATOR() { return getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public HandlerReadOrScanContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadOrScan; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterHandlerReadOrScan(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitHandlerReadOrScan(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitHandlerReadOrScan(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadOrScanContext handlerReadOrScan() throws RecognitionException {
		HandlerReadOrScanContext _localctx = new HandlerReadOrScanContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_handlerReadOrScan);
		int _la;
		try {
			setState(2556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2546);
				_la = _input.LA(1);
				if ( !(_la==FIRST_SYMBOL || _la==NEXT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2547);
				identifier();
				setState(2554);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST_SYMBOL:
				case LAST_SYMBOL:
				case NEXT_SYMBOL:
				case PREV_SYMBOL:
					{
					setState(2548);
					_la = _input.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL || _la==NEXT_SYMBOL || _la==PREV_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case EQUAL_OPERATOR:
				case GREATER_OR_EQUAL_OPERATOR:
				case GREATER_THAN_OPERATOR:
				case LESS_OR_EQUAL_OPERATOR:
				case LESS_THAN_OPERATOR:
					{
					setState(2549);
					_la = _input.LA(1);
					if ( !(((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (EQUAL_OPERATOR - 383)) | (1L << (GREATER_OR_EQUAL_OPERATOR - 383)) | (1L << (GREATER_THAN_OPERATOR - 383)) | (1L << (LESS_OR_EQUAL_OPERATOR - 383)) | (1L << (LESS_THAN_OPERATOR - 383)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2550);
					match(OPEN_PAR_SYMBOL);
					setState(2551);
					values();
					setState(2552);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public TerminalNode INSERT_SYMBOL() { return getToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public InsertFromConstructorContext insertFromConstructor() {
			return getRuleContext(InsertFromConstructorContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public InsertQueryExpressionContext insertQueryExpression() {
			return getRuleContext(InsertQueryExpressionContext.class,0);
		}
		public InsertLockOptionContext insertLockOption() {
			return getRuleContext(InsertLockOptionContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public InsertUpdateListContext insertUpdateList() {
			return getRuleContext(InsertUpdateListContext.class,0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInsertStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2558);
			match(INSERT_SYMBOL);
			setState(2560);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				{
				setState(2559);
				insertLockOption();
				}
				break;
			}
			setState(2563);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				setState(2562);
				match(IGNORE_SYMBOL);
				}
				break;
			}
			setState(2566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				setState(2565);
				match(INTO_SYMBOL);
				}
				break;
			}
			setState(2568);
			tableRef();
			setState(2570);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				setState(2569);
				usePartition();
				}
				break;
			}
			setState(2576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				setState(2572);
				insertFromConstructor();
				}
				break;
			case 2:
				{
				setState(2573);
				match(SET_SYMBOL);
				setState(2574);
				updateList();
				}
				break;
			case 3:
				{
				setState(2575);
				insertQueryExpression();
				}
				break;
			}
			setState(2579);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON_SYMBOL) {
				{
				setState(2578);
				insertUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertLockOptionContext extends ParserRuleContext {
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode DELAYED_SYMBOL() { return getToken(MySQLParser.DELAYED_SYMBOL, 0); }
		public TerminalNode HIGH_PRIORITY_SYMBOL() { return getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
		public InsertLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertLockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInsertLockOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInsertLockOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInsertLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertLockOptionContext insertLockOption() throws RecognitionException {
		InsertLockOptionContext _localctx = new InsertLockOptionContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_insertLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2581);
			_la = _input.LA(1);
			if ( !(_la==DELAYED_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertFromConstructorContext extends ParserRuleContext {
		public InsertValuesContext insertValues() {
			return getRuleContext(InsertValuesContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldsContext fields() {
			return getRuleContext(FieldsContext.class,0);
		}
		public InsertFromConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertFromConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInsertFromConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInsertFromConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInsertFromConstructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertFromConstructorContext insertFromConstructor() throws RecognitionException {
		InsertFromConstructorContext _localctx = new InsertFromConstructorContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_insertFromConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(2583);
				match(OPEN_PAR_SYMBOL);
				setState(2585);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					setState(2584);
					fields();
					}
					break;
				}
				setState(2587);
				match(CLOSE_PAR_SYMBOL);
				}
			}

			setState(2590);
			insertValues();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldsContext extends ParserRuleContext {
		public List<InsertIdentifierContext> insertIdentifier() {
			return getRuleContexts(InsertIdentifierContext.class);
		}
		public InsertIdentifierContext insertIdentifier(int i) {
			return getRuleContext(InsertIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFields(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFields(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldsContext fields() throws RecognitionException {
		FieldsContext _localctx = new FieldsContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_fields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2592);
			insertIdentifier();
			setState(2597);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2593);
				match(COMMA_SYMBOL);
				setState(2594);
				insertIdentifier();
				}
				}
				setState(2599);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertValuesContext extends ParserRuleContext {
		public ValueListContext valueList() {
			return getRuleContext(ValueListContext.class,0);
		}
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public InsertValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertValues; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInsertValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInsertValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInsertValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertValuesContext insertValues() throws RecognitionException {
		InsertValuesContext _localctx = new InsertValuesContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_insertValues);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2600);
			_la = _input.LA(1);
			if ( !(_la==VALUE_SYMBOL || _la==VALUES_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2601);
			valueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertQueryExpressionContext extends ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return getRuleContext(QueryExpressionOrParensContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldsContext fields() {
			return getRuleContext(FieldsContext.class,0);
		}
		public InsertQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertQueryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInsertQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInsertQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInsertQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertQueryExpressionContext insertQueryExpression() throws RecognitionException {
		InsertQueryExpressionContext _localctx = new InsertQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_insertQueryExpression);
		try {
			setState(2610);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2603);
				queryExpressionOrParens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2604);
				match(OPEN_PAR_SYMBOL);
				setState(2606);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					setState(2605);
					fields();
					}
					break;
				}
				setState(2608);
				match(CLOSE_PAR_SYMBOL);
				setState(2609);
				queryExpressionOrParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValueListContext extends ParserRuleContext {
		public List<TerminalNode> OPEN_PAR_SYMBOL() { return getTokens(MySQLParser.OPEN_PAR_SYMBOL); }
		public TerminalNode OPEN_PAR_SYMBOL(int i) {
			return getToken(MySQLParser.OPEN_PAR_SYMBOL, i);
		}
		public List<TerminalNode> CLOSE_PAR_SYMBOL() { return getTokens(MySQLParser.CLOSE_PAR_SYMBOL); }
		public TerminalNode CLOSE_PAR_SYMBOL(int i) {
			return getToken(MySQLParser.CLOSE_PAR_SYMBOL, i);
		}
		public List<ValuesContext> values() {
			return getRuleContexts(ValuesContext.class);
		}
		public ValuesContext values(int i) {
			return getRuleContext(ValuesContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterValueList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitValueList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitValueList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValueListContext valueList() throws RecognitionException {
		ValueListContext _localctx = new ValueListContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_valueList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2612);
			match(OPEN_PAR_SYMBOL);
			setState(2614);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				{
				setState(2613);
				values();
				}
				break;
			}
			setState(2616);
			match(CLOSE_PAR_SYMBOL);
			setState(2625);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2617);
				match(COMMA_SYMBOL);
				setState(2618);
				match(OPEN_PAR_SYMBOL);
				setState(2620);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					setState(2619);
					values();
					}
					break;
				}
				setState(2622);
				match(CLOSE_PAR_SYMBOL);
				}
				}
				setState(2627);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> DEFAULT_SYMBOL() { return getTokens(MySQLParser.DEFAULT_SYMBOL); }
		public TerminalNode DEFAULT_SYMBOL(int i) {
			return getToken(MySQLParser.DEFAULT_SYMBOL, i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesContext values() throws RecognitionException {
		ValuesContext _localctx = new ValuesContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_values);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				{
				setState(2628);
				expr(0);
				}
				break;
			case 2:
				{
				setState(2629);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
			setState(2639);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2632);
				match(COMMA_SYMBOL);
				setState(2635);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					setState(2633);
					expr(0);
					}
					break;
				case 2:
					{
					setState(2634);
					match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				}
				setState(2641);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertUpdateListContext extends ParserRuleContext {
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode DUPLICATE_SYMBOL() { return getToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public InsertUpdateListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertUpdateList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInsertUpdateList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInsertUpdateList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInsertUpdateList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertUpdateListContext insertUpdateList() throws RecognitionException {
		InsertUpdateListContext _localctx = new InsertUpdateListContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_insertUpdateList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2642);
			match(ON_SYMBOL);
			setState(2643);
			match(DUPLICATE_SYMBOL);
			setState(2644);
			match(KEY_SYMBOL);
			setState(2645);
			match(UPDATE_SYMBOL);
			setState(2646);
			updateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadStatementContext extends ParserRuleContext {
		public TerminalNode LOAD_SYMBOL() { return getToken(MySQLParser.LOAD_SYMBOL, 0); }
		public DataOrXmlContext dataOrXml() {
			return getRuleContext(DataOrXmlContext.class,0);
		}
		public TerminalNode INFILE_SYMBOL() { return getToken(MySQLParser.INFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public LoadDataFileTailContext loadDataFileTail() {
			return getRuleContext(LoadDataFileTailContext.class,0);
		}
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public CharsetClauseContext charsetClause() {
			return getRuleContext(CharsetClauseContext.class,0);
		}
		public XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() {
			return getRuleContext(XmlRowsIdentifiedByContext.class,0);
		}
		public FieldsClauseContext fieldsClause() {
			return getRuleContext(FieldsClauseContext.class,0);
		}
		public LinesClauseContext linesClause() {
			return getRuleContext(LinesClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode CONCURRENT_SYMBOL() { return getToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public LoadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLoadStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLoadStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLoadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadStatementContext loadStatement() throws RecognitionException {
		LoadStatementContext _localctx = new LoadStatementContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_loadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2648);
			match(LOAD_SYMBOL);
			setState(2649);
			dataOrXml();
			setState(2651);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) {
				{
				setState(2650);
				_la = _input.LA(1);
				if ( !(_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2654);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_SYMBOL) {
				{
				setState(2653);
				match(LOCAL_SYMBOL);
				}
			}

			setState(2656);
			match(INFILE_SYMBOL);
			setState(2657);
			textLiteral();
			setState(2659);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) {
				{
				setState(2658);
				_la = _input.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2661);
			match(INTO_SYMBOL);
			setState(2662);
			match(TABLE_SYMBOL);
			setState(2663);
			tableRef();
			setState(2665);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
			case 1:
				{
				setState(2664);
				usePartition();
				}
				break;
			}
			setState(2668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
			case 1:
				{
				setState(2667);
				charsetClause();
				}
				break;
			}
			setState(2671);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				setState(2670);
				xmlRowsIdentifiedBy();
				}
				break;
			}
			setState(2674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS_SYMBOL) {
				{
				setState(2673);
				fieldsClause();
				}
			}

			setState(2677);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES_SYMBOL) {
				{
				setState(2676);
				linesClause();
				}
			}

			setState(2679);
			loadDataFileTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataOrXmlContext extends ParserRuleContext {
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode XML_SYMBOL() { return getToken(MySQLParser.XML_SYMBOL, 0); }
		public DataOrXmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataOrXml; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDataOrXml(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDataOrXml(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDataOrXml(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataOrXmlContext dataOrXml() throws RecognitionException {
		DataOrXmlContext _localctx = new DataOrXmlContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_dataOrXml);
		try {
			setState(2684);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2681);
				match(DATA_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2682);
				if (!(serverVersion >= 50500)) throw new FailedPredicateException(this, "serverVersion >= 50500");
				setState(2683);
				match(XML_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlRowsIdentifiedByContext extends ParserRuleContext {
		public TerminalNode ROWS_SYMBOL() { return getToken(MySQLParser.ROWS_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public XmlRowsIdentifiedByContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlRowsIdentifiedBy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterXmlRowsIdentifiedBy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitXmlRowsIdentifiedBy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitXmlRowsIdentifiedBy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() throws RecognitionException {
		XmlRowsIdentifiedByContext _localctx = new XmlRowsIdentifiedByContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_xmlRowsIdentifiedBy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2686);
			if (!(serverVersion >= 50500)) throw new FailedPredicateException(this, "serverVersion >= 50500");
			setState(2687);
			match(ROWS_SYMBOL);
			setState(2688);
			match(IDENTIFIED_SYMBOL);
			setState(2689);
			match(BY_SYMBOL);
			setState(2690);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataFileTailContext extends ParserRuleContext {
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public LoadDataFileTargetListContext loadDataFileTargetList() {
			return getRuleContext(LoadDataFileTargetListContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public TerminalNode LINES_SYMBOL() { return getToken(MySQLParser.LINES_SYMBOL, 0); }
		public TerminalNode ROWS_SYMBOL() { return getToken(MySQLParser.ROWS_SYMBOL, 0); }
		public LoadDataFileTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataFileTail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLoadDataFileTail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLoadDataFileTail(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLoadDataFileTail(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataFileTailContext loadDataFileTail() throws RecognitionException {
		LoadDataFileTailContext _localctx = new LoadDataFileTailContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_loadDataFileTail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE_SYMBOL) {
				{
				setState(2692);
				match(IGNORE_SYMBOL);
				setState(2693);
				match(INT_NUMBER);
				setState(2694);
				_la = _input.LA(1);
				if ( !(_la==ROWS_SYMBOL || _la==LINES_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2698);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(2697);
				loadDataFileTargetList();
				}
			}

			setState(2702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET_SYMBOL) {
				{
				setState(2700);
				match(SET_SYMBOL);
				setState(2701);
				updateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataFileTargetListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldOrVariableListContext fieldOrVariableList() {
			return getRuleContext(FieldOrVariableListContext.class,0);
		}
		public LoadDataFileTargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataFileTargetList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLoadDataFileTargetList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLoadDataFileTargetList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLoadDataFileTargetList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataFileTargetListContext loadDataFileTargetList() throws RecognitionException {
		LoadDataFileTargetListContext _localctx = new LoadDataFileTargetListContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_loadDataFileTargetList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2704);
			match(OPEN_PAR_SYMBOL);
			setState(2706);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				{
				setState(2705);
				fieldOrVariableList();
				}
				break;
			}
			setState(2708);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldOrVariableListContext extends ParserRuleContext {
		public List<ColumnRefContext> columnRef() {
			return getRuleContexts(ColumnRefContext.class);
		}
		public ColumnRefContext columnRef(int i) {
			return getRuleContext(ColumnRefContext.class,i);
		}
		public List<UserVariableContext> userVariable() {
			return getRuleContexts(UserVariableContext.class);
		}
		public UserVariableContext userVariable(int i) {
			return getRuleContext(UserVariableContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FieldOrVariableListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldOrVariableList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFieldOrVariableList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFieldOrVariableList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFieldOrVariableList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldOrVariableListContext fieldOrVariableList() throws RecognitionException {
		FieldOrVariableListContext _localctx = new FieldOrVariableListContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_fieldOrVariableList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2712);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				setState(2710);
				columnRef();
				}
				break;
			case 2:
				{
				setState(2711);
				userVariable();
				}
				break;
			}
			setState(2721);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2714);
				match(COMMA_SYMBOL);
				setState(2717);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
				case 1:
					{
					setState(2715);
					columnRef();
					}
					break;
				case 2:
					{
					setState(2716);
					userVariable();
					}
					break;
				}
				}
				}
				setState(2723);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public InsertFromConstructorContext insertFromConstructor() {
			return getRuleContext(InsertFromConstructorContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public InsertQueryExpressionContext insertQueryExpression() {
			return getRuleContext(InsertQueryExpressionContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode DELAYED_SYMBOL() { return getToken(MySQLParser.DELAYED_SYMBOL, 0); }
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterReplaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitReplaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitReplaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2724);
			match(REPLACE_SYMBOL);
			setState(2726);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(2725);
				_la = _input.LA(1);
				if ( !(_la==DELAYED_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				{
				setState(2728);
				match(INTO_SYMBOL);
				}
				break;
			}
			setState(2731);
			tableRef();
			setState(2733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				{
				setState(2732);
				usePartition();
				}
				break;
			}
			setState(2739);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				{
				setState(2735);
				insertFromConstructor();
				}
				break;
			case 2:
				{
				setState(2736);
				match(SET_SYMBOL);
				setState(2737);
				updateList();
				}
				break;
			case 3:
				{
				setState(2738);
				insertQueryExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public SelectStatementWithIntoContext selectStatementWithInto() {
			return getRuleContext(SelectStatementWithIntoContext.class,0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSelectStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSelectStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSelectStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_selectStatement);
		try {
			setState(2744);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2741);
				queryExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2742);
				queryExpressionParens();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2743);
				selectStatementWithInto();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementWithIntoContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SelectStatementWithIntoContext selectStatementWithInto() {
			return getRuleContext(SelectStatementWithIntoContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public SelectStatementWithIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatementWithInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSelectStatementWithInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSelectStatementWithInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSelectStatementWithInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementWithIntoContext selectStatementWithInto() throws RecognitionException {
		SelectStatementWithIntoContext _localctx = new SelectStatementWithIntoContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_selectStatementWithInto);
		try {
			setState(2753);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2746);
				match(OPEN_PAR_SYMBOL);
				setState(2747);
				selectStatementWithInto();
				setState(2748);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2750);
				queryExpression();
				setState(2751);
				intoClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public QueryExpressionBodyContext queryExpressionBody() {
			return getRuleContext(QueryExpressionBodyContext.class,0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public ProcedureAnalyseClauseContext procedureAnalyseClause() {
			return getRuleContext(ProcedureAnalyseClauseContext.class,0);
		}
		public LockingClauseContext lockingClause() {
			return getRuleContext(LockingClauseContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_queryExpression);
		int _la;
		try {
			setState(2789);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2757);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					setState(2755);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(2756);
					withClause();
					}
					break;
				}
				setState(2774);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
				case 1:
					{
					setState(2759);
					queryExpressionBody(0);
					setState(2761);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
					case 1:
						{
						setState(2760);
						orderClause();
						}
						break;
					}
					setState(2764);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
					case 1:
						{
						setState(2763);
						limitClause();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(2766);
					queryExpressionParens();
					setState(2772);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ORDER_SYMBOL:
						{
						setState(2767);
						orderClause();
						setState(2769);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
						case 1:
							{
							setState(2768);
							limitClause();
							}
							break;
						}
						}
						break;
					case LIMIT_SYMBOL:
						{
						setState(2771);
						limitClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(2778);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
				case 1:
					{
					setState(2776);
					if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
					setState(2777);
					procedureAnalyseClause();
					}
					break;
				}
				setState(2781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL || _la==LOCK_SYMBOL) {
					{
					setState(2780);
					lockingClause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2783);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(2784);
				withClause();
				setState(2785);
				queryExpressionParens();
				setState(2787);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL || _la==LOCK_SYMBOL) {
					{
					setState(2786);
					lockingClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionBodyContext extends ParserRuleContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public List<QueryExpressionParensContext> queryExpressionParens() {
			return getRuleContexts(QueryExpressionParensContext.class);
		}
		public QueryExpressionParensContext queryExpressionParens(int i) {
			return getRuleContext(QueryExpressionParensContext.class,i);
		}
		public TerminalNode UNION_SYMBOL() { return getToken(MySQLParser.UNION_SYMBOL, 0); }
		public UnionOptionContext unionOption() {
			return getRuleContext(UnionOptionContext.class,0);
		}
		public QueryExpressionBodyContext queryExpressionBody() {
			return getRuleContext(QueryExpressionBodyContext.class,0);
		}
		public QueryExpressionBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQueryExpressionBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQueryExpressionBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQueryExpressionBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionBodyContext queryExpressionBody() throws RecognitionException {
		return queryExpressionBody(0);
	}

	private QueryExpressionBodyContext queryExpressionBody(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		QueryExpressionBodyContext _localctx = new QueryExpressionBodyContext(_ctx, _parentState);
		QueryExpressionBodyContext _prevctx = _localctx;
		int _startState = 236;
		enterRecursionRule(_localctx, 236, RULE_queryExpressionBody, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2802);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT_SYMBOL:
				{
				setState(2792);
				querySpecification();
				}
				break;
			case OPEN_PAR_SYMBOL:
				{
				setState(2793);
				queryExpressionParens();
				setState(2794);
				match(UNION_SYMBOL);
				setState(2796);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) {
					{
					setState(2795);
					unionOption();
					}
				}

				setState(2800);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT_SYMBOL:
					{
					setState(2798);
					querySpecification();
					}
					break;
				case OPEN_PAR_SYMBOL:
					{
					setState(2799);
					queryExpressionParens();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(2815);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,293,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QueryExpressionBodyContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_queryExpressionBody);
					setState(2804);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2805);
					match(UNION_SYMBOL);
					setState(2807);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) {
						{
						setState(2806);
						unionOption();
						}
					}

					setState(2811);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELECT_SYMBOL:
						{
						setState(2809);
						querySpecification();
						}
						break;
					case OPEN_PAR_SYMBOL:
						{
						setState(2810);
						queryExpressionParens();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(2817);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,293,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class QueryExpressionParensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQueryExpressionParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQueryExpressionParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQueryExpressionParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionParensContext queryExpressionParens() throws RecognitionException {
		QueryExpressionParensContext _localctx = new QueryExpressionParensContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_queryExpressionParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2818);
			match(OPEN_PAR_SYMBOL);
			setState(2821);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
			case 1:
				{
				setState(2819);
				queryExpressionParens();
				}
				break;
			case 2:
				{
				setState(2820);
				queryExpression();
				}
				break;
			}
			setState(2823);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT_SYMBOL() { return getToken(MySQLParser.SELECT_SYMBOL, 0); }
		public SelectItemListContext selectItemList() {
			return getRuleContext(SelectItemListContext.class,0);
		}
		public List<SelectOptionContext> selectOption() {
			return getRuleContexts(SelectOptionContext.class);
		}
		public SelectOptionContext selectOption(int i) {
			return getRuleContext(SelectOptionContext.class,i);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_querySpecification);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2825);
			match(SELECT_SYMBOL);
			setState(2829);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,295,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2826);
					selectOption();
					}
					} 
				}
				setState(2831);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,295,_ctx);
			}
			setState(2832);
			selectItemList();
			setState(2834);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				{
				setState(2833);
				intoClause();
				}
				break;
			}
			setState(2837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				setState(2836);
				fromClause();
				}
				break;
			}
			setState(2840);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				setState(2839);
				whereClause();
				}
				break;
			}
			setState(2843);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				setState(2842);
				groupByClause();
				}
				break;
			}
			setState(2846);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				setState(2845);
				havingClause();
				}
				break;
			}
			setState(2850);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				{
				setState(2848);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(2849);
				windowClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2852);
			queryExpressionParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecOptionContext extends ParserRuleContext {
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode DISTINCT_SYMBOL() { return getToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public TerminalNode STRAIGHT_JOIN_SYMBOL() { return getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public TerminalNode HIGH_PRIORITY_SYMBOL() { return getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
		public TerminalNode SQL_SMALL_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_BIG_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_BUFFER_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS_SYMBOL() { return getToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0); }
		public QuerySpecOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQuerySpecOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQuerySpecOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQuerySpecOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecOptionContext querySpecOption() throws RecognitionException {
		QuerySpecOptionContext _localctx = new QuerySpecOptionContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_querySpecOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2854);
			_la = _input.LA(1);
			if ( !(_la==SQL_BUFFER_RESULT_SYMBOL || _la==ALL_SYMBOL || _la==DISTINCT_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || ((((_la - 629)) & ~0x3f) == 0 && ((1L << (_la - 629)) & ((1L << (SQL_BIG_RESULT_SYMBOL - 629)) | (1L << (SQL_CALC_FOUND_ROWS_SYMBOL - 629)) | (1L << (SQL_SMALL_RESULT_SYMBOL - 629)) | (1L << (STRAIGHT_JOIN_SYMBOL - 629)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT_SYMBOL() { return getToken(MySQLParser.LIMIT_SYMBOL, 0); }
		public LimitOptionsContext limitOptions() {
			return getRuleContext(LimitOptionsContext.class,0);
		}
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2856);
			match(LIMIT_SYMBOL);
			setState(2857);
			limitOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleLimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT_SYMBOL() { return getToken(MySQLParser.LIMIT_SYMBOL, 0); }
		public LimitOptionContext limitOption() {
			return getRuleContext(LimitOptionContext.class,0);
		}
		public SimpleLimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleLimitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleLimitClauseContext simpleLimitClause() throws RecognitionException {
		SimpleLimitClauseContext _localctx = new SimpleLimitClauseContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_simpleLimitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2859);
			match(LIMIT_SYMBOL);
			setState(2860);
			limitOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitOptionsContext extends ParserRuleContext {
		public List<LimitOptionContext> limitOption() {
			return getRuleContexts(LimitOptionContext.class);
		}
		public LimitOptionContext limitOption(int i) {
			return getRuleContext(LimitOptionContext.class,i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode OFFSET_SYMBOL() { return getToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public LimitOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLimitOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLimitOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLimitOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitOptionsContext limitOptions() throws RecognitionException {
		LimitOptionsContext _localctx = new LimitOptionsContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_limitOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2862);
			limitOption();
			setState(2865);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				setState(2863);
				_la = _input.LA(1);
				if ( !(_la==OFFSET_SYMBOL || _la==COMMA_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2864);
				limitOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitOptionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public LimitOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLimitOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLimitOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLimitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitOptionContext limitOption() throws RecognitionException {
		LimitOptionContext _localctx = new LimitOptionContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_limitOption);
		int _la;
		try {
			setState(2869);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2867);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2868);
				_la = _input.LA(1);
				if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (PARAM_MARKER - 380)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public TerminalNode OUTFILE_SYMBOL() { return getToken(MySQLParser.OUTFILE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode DUMPFILE_SYMBOL() { return getToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public List<TextOrIdentifierContext> textOrIdentifier() {
			return getRuleContexts(TextOrIdentifierContext.class);
		}
		public TextOrIdentifierContext textOrIdentifier(int i) {
			return getRuleContext(TextOrIdentifierContext.class,i);
		}
		public List<UserVariableContext> userVariable() {
			return getRuleContexts(UserVariableContext.class);
		}
		public UserVariableContext userVariable(int i) {
			return getRuleContext(UserVariableContext.class,i);
		}
		public CharsetClauseContext charsetClause() {
			return getRuleContext(CharsetClauseContext.class,0);
		}
		public FieldsClauseContext fieldsClause() {
			return getRuleContext(FieldsClauseContext.class,0);
		}
		public LinesClauseContext linesClause() {
			return getRuleContext(LinesClauseContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIntoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIntoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntoClauseContext intoClause() throws RecognitionException {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_intoClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2871);
			match(INTO_SYMBOL);
			setState(2899);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				setState(2872);
				match(OUTFILE_SYMBOL);
				setState(2873);
				textStringLiteral();
				setState(2875);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
				case 1:
					{
					setState(2874);
					charsetClause();
					}
					break;
				}
				setState(2878);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
				case 1:
					{
					setState(2877);
					fieldsClause();
					}
					break;
				}
				setState(2881);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
				case 1:
					{
					setState(2880);
					linesClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2883);
				match(DUMPFILE_SYMBOL);
				setState(2884);
				textStringLiteral();
				}
				break;
			case 3:
				{
				setState(2887);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					setState(2885);
					textOrIdentifier();
					}
					break;
				case 2:
					{
					setState(2886);
					userVariable();
					}
					break;
				}
				setState(2896);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,309,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2889);
						match(COMMA_SYMBOL);
						setState(2892);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
						case 1:
							{
							setState(2890);
							textOrIdentifier();
							}
							break;
						case 2:
							{
							setState(2891);
							userVariable();
							}
							break;
						}
						}
						} 
					}
					setState(2898);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,309,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureAnalyseClauseContext extends ParserRuleContext {
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public TerminalNode ANALYSE_SYMBOL() { return getToken(MySQLParser.ANALYSE_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> INT_NUMBER() { return getTokens(MySQLParser.INT_NUMBER); }
		public TerminalNode INT_NUMBER(int i) {
			return getToken(MySQLParser.INT_NUMBER, i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ProcedureAnalyseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureAnalyseClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterProcedureAnalyseClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitProcedureAnalyseClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitProcedureAnalyseClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureAnalyseClauseContext procedureAnalyseClause() throws RecognitionException {
		ProcedureAnalyseClauseContext _localctx = new ProcedureAnalyseClauseContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_procedureAnalyseClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2901);
			match(PROCEDURE_SYMBOL);
			setState(2902);
			match(ANALYSE_SYMBOL);
			setState(2903);
			match(OPEN_PAR_SYMBOL);
			setState(2909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INT_NUMBER) {
				{
				setState(2904);
				match(INT_NUMBER);
				setState(2907);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(2905);
					match(COMMA_SYMBOL);
					setState(2906);
					match(INT_NUMBER);
					}
				}

				}
			}

			setState(2911);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING_SYMBOL() { return getToken(MySQLParser.HAVING_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2913);
			match(HAVING_SYMBOL);
			setState(2914);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW_SYMBOL() { return getToken(MySQLParser.WINDOW_SYMBOL, 0); }
		public List<WindowDefinitionContext> windowDefinition() {
			return getRuleContexts(WindowDefinitionContext.class);
		}
		public WindowDefinitionContext windowDefinition(int i) {
			return getRuleContext(WindowDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_windowClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2916);
			match(WINDOW_SYMBOL);
			setState(2917);
			windowDefinition();
			setState(2922);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,313,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2918);
					match(COMMA_SYMBOL);
					setState(2919);
					windowDefinition();
					}
					} 
				}
				setState(2924);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,313,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowDefinitionContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowDefinitionContext windowDefinition() throws RecognitionException {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_windowDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2925);
			windowName();
			setState(2926);
			match(AS_SYMBOL);
			setState(2927);
			windowSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public WindowSpecDetailsContext windowSpecDetails() {
			return getRuleContext(WindowSpecDetailsContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_windowSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2929);
			match(OPEN_PAR_SYMBOL);
			setState(2930);
			windowSpecDetails();
			setState(2931);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecDetailsContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public OrderOrGroupListContext orderOrGroupList() {
			return getRuleContext(OrderOrGroupListContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public WindowFrameClauseContext windowFrameClause() {
			return getRuleContext(WindowFrameClauseContext.class,0);
		}
		public WindowSpecDetailsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpecDetails; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowSpecDetails(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowSpecDetails(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowSpecDetails(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecDetailsContext windowSpecDetails() throws RecognitionException {
		WindowSpecDetailsContext _localctx = new WindowSpecDetailsContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_windowSpecDetails);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				{
				setState(2933);
				windowName();
				}
				break;
			}
			setState(2938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION_SYMBOL) {
				{
				setState(2936);
				match(PARTITION_SYMBOL);
				setState(2937);
				orderOrGroupList();
				}
			}

			setState(2941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				setState(2940);
				orderClause();
				}
			}

			setState(2944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS_SYMBOL || _la==RANGE_SYMBOL || _la==GROUPS_SYMBOL) {
				{
				setState(2943);
				windowFrameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameClauseContext extends ParserRuleContext {
		public WindowFrameUnitsContext windowFrameUnits() {
			return getRuleContext(WindowFrameUnitsContext.class,0);
		}
		public WindowFrameExtentContext windowFrameExtent() {
			return getRuleContext(WindowFrameExtentContext.class,0);
		}
		public WindowFrameExclusionContext windowFrameExclusion() {
			return getRuleContext(WindowFrameExclusionContext.class,0);
		}
		public WindowFrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowFrameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowFrameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameClauseContext windowFrameClause() throws RecognitionException {
		WindowFrameClauseContext _localctx = new WindowFrameClauseContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_windowFrameClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2946);
			windowFrameUnits();
			setState(2947);
			windowFrameExtent();
			setState(2949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE_SYMBOL) {
				{
				setState(2948);
				windowFrameExclusion();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameUnitsContext extends ParserRuleContext {
		public TerminalNode ROWS_SYMBOL() { return getToken(MySQLParser.ROWS_SYMBOL, 0); }
		public TerminalNode RANGE_SYMBOL() { return getToken(MySQLParser.RANGE_SYMBOL, 0); }
		public TerminalNode GROUPS_SYMBOL() { return getToken(MySQLParser.GROUPS_SYMBOL, 0); }
		public WindowFrameUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameUnits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowFrameUnits(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowFrameUnits(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowFrameUnits(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameUnitsContext windowFrameUnits() throws RecognitionException {
		WindowFrameUnitsContext _localctx = new WindowFrameUnitsContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_windowFrameUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2951);
			_la = _input.LA(1);
			if ( !(_la==ROWS_SYMBOL || _la==RANGE_SYMBOL || _la==GROUPS_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameExtentContext extends ParserRuleContext {
		public WindowFrameStartContext windowFrameStart() {
			return getRuleContext(WindowFrameStartContext.class,0);
		}
		public WindowFrameBetweenContext windowFrameBetween() {
			return getRuleContext(WindowFrameBetweenContext.class,0);
		}
		public WindowFrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameExtent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowFrameExtent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowFrameExtent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameExtentContext windowFrameExtent() throws RecognitionException {
		WindowFrameExtentContext _localctx = new WindowFrameExtentContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_windowFrameExtent);
		try {
			setState(2955);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_SYMBOL:
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case PARAM_MARKER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
			case INTERVAL_SYMBOL:
			case UNBOUNDED_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2953);
				windowFrameStart();
				}
				break;
			case BETWEEN_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2954);
				windowFrameBetween();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameStartContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode PRECEDING_SYMBOL() { return getToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public WindowFrameStartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameStart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowFrameStart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowFrameStart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowFrameStart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameStartContext windowFrameStart() throws RecognitionException {
		WindowFrameStartContext _localctx = new WindowFrameStartContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_windowFrameStart);
		try {
			setState(2971);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2957);
				match(UNBOUNDED_SYMBOL);
				setState(2958);
				match(PRECEDING_SYMBOL);
				}
				break;
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2959);
				ulonglong_number();
				setState(2960);
				match(PRECEDING_SYMBOL);
				}
				break;
			case PARAM_MARKER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2962);
				match(PARAM_MARKER);
				setState(2963);
				match(PRECEDING_SYMBOL);
				}
				break;
			case INTERVAL_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2964);
				match(INTERVAL_SYMBOL);
				setState(2965);
				expr(0);
				setState(2966);
				interval();
				setState(2967);
				match(PRECEDING_SYMBOL);
				}
				break;
			case CURRENT_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2969);
				match(CURRENT_SYMBOL);
				setState(2970);
				match(ROW_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN_SYMBOL() { return getToken(MySQLParser.BETWEEN_SYMBOL, 0); }
		public List<WindowFrameBoundContext> windowFrameBound() {
			return getRuleContexts(WindowFrameBoundContext.class);
		}
		public WindowFrameBoundContext windowFrameBound(int i) {
			return getRuleContext(WindowFrameBoundContext.class,i);
		}
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public WindowFrameBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameBetween; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowFrameBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowFrameBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowFrameBetween(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameBetweenContext windowFrameBetween() throws RecognitionException {
		WindowFrameBetweenContext _localctx = new WindowFrameBetweenContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_windowFrameBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2973);
			match(BETWEEN_SYMBOL);
			setState(2974);
			windowFrameBound();
			setState(2975);
			match(AND_SYMBOL);
			setState(2976);
			windowFrameBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameBoundContext extends ParserRuleContext {
		public WindowFrameStartContext windowFrameStart() {
			return getRuleContext(WindowFrameStartContext.class,0);
		}
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode FOLLOWING_SYMBOL() { return getToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public WindowFrameBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowFrameBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowFrameBound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowFrameBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameBoundContext windowFrameBound() throws RecognitionException {
		WindowFrameBoundContext _localctx = new WindowFrameBoundContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_windowFrameBound);
		try {
			setState(2991);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2978);
				windowFrameStart();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2979);
				match(UNBOUNDED_SYMBOL);
				setState(2980);
				match(FOLLOWING_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2981);
				ulonglong_number();
				setState(2982);
				match(FOLLOWING_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2984);
				match(PARAM_MARKER);
				setState(2985);
				match(FOLLOWING_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2986);
				match(INTERVAL_SYMBOL);
				setState(2987);
				expr(0);
				setState(2988);
				interval();
				setState(2989);
				match(FOLLOWING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameExclusionContext extends ParserRuleContext {
		public TerminalNode EXCLUDE_SYMBOL() { return getToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public TerminalNode TIES_SYMBOL() { return getToken(MySQLParser.TIES_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode OTHERS_SYMBOL() { return getToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public WindowFrameExclusionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameExclusion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowFrameExclusion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowFrameExclusion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowFrameExclusion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameExclusionContext windowFrameExclusion() throws RecognitionException {
		WindowFrameExclusionContext _localctx = new WindowFrameExclusionContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_windowFrameExclusion);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2993);
			match(EXCLUDE_SYMBOL);
			setState(3000);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_SYMBOL:
				{
				setState(2994);
				match(CURRENT_SYMBOL);
				setState(2995);
				match(ROW_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				setState(2996);
				match(GROUP_SYMBOL);
				}
				break;
			case TIES_SYMBOL:
				{
				setState(2997);
				match(TIES_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				{
				setState(2998);
				match(NO_SYMBOL);
				setState(2999);
				match(OTHERS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public TerminalNode RECURSIVE_SYMBOL() { return getToken(MySQLParser.RECURSIVE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWithClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_withClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3002);
			match(WITH_SYMBOL);
			setState(3004);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				{
				setState(3003);
				match(RECURSIVE_SYMBOL);
				}
				break;
			}
			setState(3006);
			commonTableExpression();
			setState(3011);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3007);
				match(COMMA_SYMBOL);
				setState(3008);
				commonTableExpression();
				}
				}
				setState(3013);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonTableExpressionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCommonTableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCommonTableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCommonTableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExpressionContext commonTableExpression() throws RecognitionException {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_commonTableExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3014);
			identifier();
			setState(3016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(3015);
				columnInternalRefList();
				}
			}

			setState(3018);
			match(AS_SYMBOL);
			setState(3019);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderOrGroupListContext orderOrGroupList() {
			return getRuleContext(OrderOrGroupListContext.class,0);
		}
		public OlapOptionContext olapOption() {
			return getRuleContext(OlapOptionContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_groupByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3021);
			match(GROUP_SYMBOL);
			setState(3022);
			match(BY_SYMBOL);
			setState(3023);
			orderOrGroupList();
			setState(3025);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				{
				setState(3024);
				olapOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapOptionContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode ROLLUP_SYMBOL() { return getToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public TerminalNode CUBE_SYMBOL() { return getToken(MySQLParser.CUBE_SYMBOL, 0); }
		public OlapOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOlapOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOlapOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOlapOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OlapOptionContext olapOption() throws RecognitionException {
		OlapOptionContext _localctx = new OlapOptionContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_olapOption);
		try {
			setState(3032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3027);
				match(WITH_SYMBOL);
				setState(3028);
				match(ROLLUP_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3029);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(3030);
				match(WITH_SYMBOL);
				setState(3031);
				match(CUBE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderClauseContext extends ParserRuleContext {
		public TerminalNode ORDER_SYMBOL() { return getToken(MySQLParser.ORDER_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderOrGroupListContext orderOrGroupList() {
			return getRuleContext(OrderOrGroupListContext.class,0);
		}
		public OrderClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOrderClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOrderClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOrderClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderClauseContext orderClause() throws RecognitionException {
		OrderClauseContext _localctx = new OrderClauseContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_orderClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3034);
			match(ORDER_SYMBOL);
			setState(3035);
			match(BY_SYMBOL);
			setState(3036);
			orderOrGroupList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DirectionContext extends ParserRuleContext {
		public TerminalNode ASC_SYMBOL() { return getToken(MySQLParser.ASC_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MySQLParser.DESC_SYMBOL, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_direction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DirectionContext direction() throws RecognitionException {
		DirectionContext _localctx = new DirectionContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_direction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3038);
			_la = _input.LA(1);
			if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode DUAL_SYMBOL() { return getToken(MySQLParser.DUAL_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3040);
			match(FROM_SYMBOL);
			setState(3043);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				{
				setState(3041);
				match(DUAL_SYMBOL);
				}
				break;
			case 2:
				{
				setState(3042);
				tableReferenceList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceListContext extends ParserRuleContext {
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableReferenceListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReferenceList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableReferenceList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableReferenceList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableReferenceList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceListContext tableReferenceList() throws RecognitionException {
		TableReferenceListContext _localctx = new TableReferenceListContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_tableReferenceList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3045);
			tableReference();
			setState(3050);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,329,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3046);
					match(COMMA_SYMBOL);
					setState(3047);
					tableReference();
					}
					} 
				}
				setState(3052);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,329,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectOptionContext extends ParserRuleContext {
		public QuerySpecOptionContext querySpecOption() {
			return getRuleContext(QuerySpecOptionContext.class,0);
		}
		public TerminalNode SQL_NO_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_CACHE_SYMBOL, 0); }
		public TerminalNode MAX_STATEMENT_TIME_SYMBOL() { return getToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public SelectOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSelectOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSelectOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSelectOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectOptionContext selectOption() throws RecognitionException {
		SelectOptionContext _localctx = new SelectOptionContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_selectOption);
		try {
			setState(3061);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3053);
				querySpecOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3054);
				match(SQL_NO_CACHE_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3055);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(3056);
				match(SQL_CACHE_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3057);
				if (!(serverVersion >= 50704 && serverVersion < 50708)) throw new FailedPredicateException(this, "serverVersion >= 50704 && serverVersion < 50708");
				setState(3058);
				match(MAX_STATEMENT_TIME_SYMBOL);
				setState(3059);
				match(EQUAL_OPERATOR);
				setState(3060);
				real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockingClauseContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public LockStrenghContext lockStrengh() {
			return getRuleContext(LockStrenghContext.class,0);
		}
		public TerminalNode OF_SYMBOL() { return getToken(MySQLParser.OF_SYMBOL, 0); }
		public TableAliasRefListContext tableAliasRefList() {
			return getRuleContext(TableAliasRefListContext.class,0);
		}
		public LockedRowActionContext lockedRowAction() {
			return getRuleContext(LockedRowActionContext.class,0);
		}
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MySQLParser.SHARE_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MySQLParser.MODE_SYMBOL, 0); }
		public LockingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLockingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLockingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLockingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockingClauseContext lockingClause() throws RecognitionException {
		LockingClauseContext _localctx = new LockingClauseContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_lockingClause);
		try {
			setState(3078);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3063);
				match(FOR_SYMBOL);
				setState(3064);
				lockStrengh();
				setState(3068);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
				case 1:
					{
					setState(3065);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(3066);
					match(OF_SYMBOL);
					setState(3067);
					tableAliasRefList();
					}
					break;
				}
				setState(3072);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
				case 1:
					{
					setState(3070);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(3071);
					lockedRowAction();
					}
					break;
				}
				}
				break;
			case LOCK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3074);
				match(LOCK_SYMBOL);
				setState(3075);
				match(IN_SYMBOL);
				setState(3076);
				match(SHARE_SYMBOL);
				setState(3077);
				match(MODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockStrenghContext extends ParserRuleContext {
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MySQLParser.SHARE_SYMBOL, 0); }
		public LockStrenghContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockStrengh; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLockStrengh(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLockStrengh(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLockStrengh(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockStrenghContext lockStrengh() throws RecognitionException {
		LockStrenghContext _localctx = new LockStrenghContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_lockStrengh);
		try {
			setState(3083);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3080);
				match(UPDATE_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3081);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3082);
				match(SHARE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockedRowActionContext extends ParserRuleContext {
		public TerminalNode SKIP_SYMBOL() { return getToken(MySQLParser.SKIP_SYMBOL, 0); }
		public TerminalNode LOCKED_SYMBOL() { return getToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public TerminalNode NOWAIT_SYMBOL() { return getToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public LockedRowActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockedRowAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLockedRowAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLockedRowAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLockedRowAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockedRowActionContext lockedRowAction() throws RecognitionException {
		LockedRowActionContext _localctx = new LockedRowActionContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_lockedRowAction);
		try {
			setState(3088);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3085);
				match(SKIP_SYMBOL);
				setState(3086);
				match(LOCKED_SYMBOL);
				}
				break;
			case NOWAIT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3087);
				match(NOWAIT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectItemListContext extends ParserRuleContext {
		public List<SelectItemContext> selectItem() {
			return getRuleContexts(SelectItemContext.class);
		}
		public SelectItemContext selectItem(int i) {
			return getRuleContext(SelectItemContext.class,i);
		}
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SelectItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSelectItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSelectItemList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSelectItemList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectItemListContext selectItemList() throws RecognitionException {
		SelectItemListContext _localctx = new SelectItemListContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_selectItemList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3092);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				setState(3090);
				selectItem();
				}
				break;
			case 2:
				{
				setState(3091);
				match(MULT_OPERATOR);
				}
				break;
			}
			setState(3098);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,337,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3094);
					match(COMMA_SYMBOL);
					setState(3095);
					selectItem();
					}
					} 
				}
				setState(3100);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,337,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectItemContext extends ParserRuleContext {
		public TableWildContext tableWild() {
			return getRuleContext(TableWildContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SelectAliasContext selectAlias() {
			return getRuleContext(SelectAliasContext.class,0);
		}
		public SelectItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSelectItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSelectItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSelectItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectItemContext selectItem() throws RecognitionException {
		SelectItemContext _localctx = new SelectItemContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_selectItem);
		try {
			setState(3106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3101);
				tableWild();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3102);
				expr(0);
				setState(3104);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
				case 1:
					{
					setState(3103);
					selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectAliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public SelectAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSelectAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSelectAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSelectAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectAliasContext selectAlias() throws RecognitionException {
		SelectAliasContext _localctx = new SelectAliasContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_selectAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				setState(3108);
				match(AS_SYMBOL);
				}
				break;
			}
			setState(3113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
			case 1:
				{
				setState(3111);
				identifier();
				}
				break;
			case 2:
				{
				setState(3112);
				textStringLiteral();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE_SYMBOL() { return getToken(MySQLParser.WHERE_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3115);
			match(WHERE_SYMBOL);
			setState(3116);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceContext extends ParserRuleContext {
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public TerminalNode OPEN_CURLY_SYMBOL() { return getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode CLOSE_CURLY_SYMBOL() { return getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0); }
		public List<JoinedTableContext> joinedTable() {
			return getRuleContexts(JoinedTableContext.class);
		}
		public JoinedTableContext joinedTable(int i) {
			return getRuleContext(JoinedTableContext.class,i);
		}
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_tableReference);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3124);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				setState(3118);
				tableFactor();
				}
				break;
			case 2:
				{
				setState(3119);
				match(OPEN_CURLY_SYMBOL);
				setState(3120);
				identifier();
				setState(3121);
				tableReference();
				setState(3122);
				match(CLOSE_CURLY_SYMBOL);
				}
				break;
			}
			setState(3129);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,343,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3126);
					joinedTable();
					}
					} 
				}
				setState(3131);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,343,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinedTableContext extends ParserRuleContext {
		public InnerJoinTypeContext innerJoinType() {
			return getRuleContext(InnerJoinTypeContext.class,0);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public OuterJoinTypeContext outerJoinType() {
			return getRuleContext(OuterJoinTypeContext.class,0);
		}
		public NaturalJoinTypeContext naturalJoinType() {
			return getRuleContext(NaturalJoinTypeContext.class,0);
		}
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public JoinedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterJoinedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitJoinedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitJoinedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinedTableContext joinedTable() throws RecognitionException {
		JoinedTableContext _localctx = new JoinedTableContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_joinedTable);
		try {
			setState(3151);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
			case STRAIGHT_JOIN_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3132);
				innerJoinType();
				setState(3133);
				tableReference();
				setState(3138);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
				case 1:
					{
					setState(3134);
					match(ON_SYMBOL);
					setState(3135);
					expr(0);
					}
					break;
				case 2:
					{
					setState(3136);
					match(USING_SYMBOL);
					setState(3137);
					identifierListWithParentheses();
					}
					break;
				}
				}
				break;
			case LEFT_SYMBOL:
			case RIGHT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3140);
				outerJoinType();
				setState(3141);
				tableReference();
				setState(3146);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON_SYMBOL:
					{
					setState(3142);
					match(ON_SYMBOL);
					setState(3143);
					expr(0);
					}
					break;
				case USING_SYMBOL:
					{
					setState(3144);
					match(USING_SYMBOL);
					setState(3145);
					identifierListWithParentheses();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3148);
				naturalJoinType();
				setState(3149);
				tableFactor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NaturalJoinTypeContext extends ParserRuleContext {
		public TerminalNode NATURAL_SYMBOL() { return getToken(MySQLParser.NATURAL_SYMBOL, 0); }
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode INNER_SYMBOL() { return getToken(MySQLParser.INNER_SYMBOL, 0); }
		public TerminalNode LEFT_SYMBOL() { return getToken(MySQLParser.LEFT_SYMBOL, 0); }
		public TerminalNode RIGHT_SYMBOL() { return getToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public TerminalNode OUTER_SYMBOL() { return getToken(MySQLParser.OUTER_SYMBOL, 0); }
		public NaturalJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_naturalJoinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNaturalJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNaturalJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNaturalJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NaturalJoinTypeContext naturalJoinType() throws RecognitionException {
		NaturalJoinTypeContext _localctx = new NaturalJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_naturalJoinType);
		int _la;
		try {
			setState(3164);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3153);
				match(NATURAL_SYMBOL);
				setState(3155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER_SYMBOL) {
					{
					setState(3154);
					match(INNER_SYMBOL);
					}
				}

				setState(3157);
				match(JOIN_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3158);
				match(NATURAL_SYMBOL);
				setState(3159);
				_la = _input.LA(1);
				if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3161);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER_SYMBOL) {
					{
					setState(3160);
					match(OUTER_SYMBOL);
					}
				}

				setState(3163);
				match(JOIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InnerJoinTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode INNER_SYMBOL() { return getToken(MySQLParser.INNER_SYMBOL, 0); }
		public TerminalNode CROSS_SYMBOL() { return getToken(MySQLParser.CROSS_SYMBOL, 0); }
		public TerminalNode STRAIGHT_JOIN_SYMBOL() { return getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public InnerJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_innerJoinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInnerJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInnerJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInnerJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InnerJoinTypeContext innerJoinType() throws RecognitionException {
		InnerJoinTypeContext _localctx = new InnerJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_innerJoinType);
		int _la;
		try {
			setState(3171);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3167);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS_SYMBOL || _la==INNER_SYMBOL) {
					{
					setState(3166);
					((InnerJoinTypeContext)_localctx).type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CROSS_SYMBOL || _la==INNER_SYMBOL) ) {
						((InnerJoinTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3169);
				match(JOIN_SYMBOL);
				}
				break;
			case STRAIGHT_JOIN_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3170);
				((InnerJoinTypeContext)_localctx).type = match(STRAIGHT_JOIN_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OuterJoinTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode LEFT_SYMBOL() { return getToken(MySQLParser.LEFT_SYMBOL, 0); }
		public TerminalNode RIGHT_SYMBOL() { return getToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public TerminalNode OUTER_SYMBOL() { return getToken(MySQLParser.OUTER_SYMBOL, 0); }
		public OuterJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outerJoinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOuterJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOuterJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOuterJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OuterJoinTypeContext outerJoinType() throws RecognitionException {
		OuterJoinTypeContext _localctx = new OuterJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_outerJoinType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3173);
			((OuterJoinTypeContext)_localctx).type = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				((OuterJoinTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3175);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER_SYMBOL) {
				{
				setState(3174);
				match(OUTER_SYMBOL);
				}
			}

			setState(3177);
			match(JOIN_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFactorContext extends ParserRuleContext {
		public SingleTableContext singleTable() {
			return getRuleContext(SingleTableContext.class,0);
		}
		public SingleTableParensContext singleTableParens() {
			return getRuleContext(SingleTableParensContext.class,0);
		}
		public DerivedTableContext derivedTable() {
			return getRuleContext(DerivedTableContext.class,0);
		}
		public JoinedTableParensContext joinedTableParens() {
			return getRuleContext(JoinedTableParensContext.class,0);
		}
		public TableReferenceListParensContext tableReferenceListParens() {
			return getRuleContext(TableReferenceListParensContext.class,0);
		}
		public TableFunctionContext tableFunction() {
			return getRuleContext(TableFunctionContext.class,0);
		}
		public TableFactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFactor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableFactor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableFactor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableFactor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFactorContext tableFactor() throws RecognitionException {
		TableFactorContext _localctx = new TableFactorContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_tableFactor);
		try {
			setState(3186);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3179);
				singleTable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3180);
				singleTableParens();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3181);
				derivedTable();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3182);
				joinedTableParens();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3183);
				tableReferenceListParens();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3184);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3185);
				tableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleTableContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public IndexHintListContext indexHintList() {
			return getRuleContext(IndexHintListContext.class,0);
		}
		public SingleTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSingleTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSingleTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSingleTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleTableContext singleTable() throws RecognitionException {
		SingleTableContext _localctx = new SingleTableContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_singleTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3188);
			tableRef();
			setState(3190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
			case 1:
				{
				setState(3189);
				usePartition();
				}
				break;
			}
			setState(3193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				{
				setState(3192);
				tableAlias();
				}
				break;
			}
			setState(3196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				setState(3195);
				indexHintList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleTableParensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SingleTableContext singleTable() {
			return getRuleContext(SingleTableContext.class,0);
		}
		public SingleTableParensContext singleTableParens() {
			return getRuleContext(SingleTableParensContext.class,0);
		}
		public SingleTableParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSingleTableParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSingleTableParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSingleTableParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleTableParensContext singleTableParens() throws RecognitionException {
		SingleTableParensContext _localctx = new SingleTableParensContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_singleTableParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3198);
			match(OPEN_PAR_SYMBOL);
			setState(3201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				setState(3199);
				singleTable();
				}
				break;
			case 2:
				{
				setState(3200);
				singleTableParens();
				}
				break;
			}
			setState(3203);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DerivedTableContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public DerivedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derivedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDerivedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDerivedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDerivedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DerivedTableContext derivedTable() throws RecognitionException {
		DerivedTableContext _localctx = new DerivedTableContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_derivedTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3205);
			subquery();
			setState(3206);
			tableAlias();
			setState(3209);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				setState(3207);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3208);
				columnInternalRefList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinedTableParensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ReferencesContext references() {
			return getRuleContext(ReferencesContext.class,0);
		}
		public JoinedTableContext joinedTable() {
			return getRuleContext(JoinedTableContext.class,0);
		}
		public JoinedTableParensContext joinedTableParens() {
			return getRuleContext(JoinedTableParensContext.class,0);
		}
		public JoinedTableParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTableParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterJoinedTableParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitJoinedTableParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitJoinedTableParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinedTableParensContext joinedTableParens() throws RecognitionException {
		JoinedTableParensContext _localctx = new JoinedTableParensContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_joinedTableParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3211);
			match(OPEN_PAR_SYMBOL);
			setState(3216);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REFERENCES_SYMBOL:
				{
				setState(3212);
				references();
				setState(3213);
				joinedTable();
				}
				break;
			case OPEN_PAR_SYMBOL:
				{
				setState(3215);
				joinedTableParens();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3218);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceListParensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public TableReferenceListParensContext tableReferenceListParens() {
			return getRuleContext(TableReferenceListParensContext.class,0);
		}
		public TableReferenceListParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReferenceListParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableReferenceListParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableReferenceListParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableReferenceListParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceListParensContext tableReferenceListParens() throws RecognitionException {
		TableReferenceListParensContext _localctx = new TableReferenceListParensContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_tableReferenceListParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3220);
			match(OPEN_PAR_SYMBOL);
			setState(3223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
			case 1:
				{
				setState(3221);
				tableReferenceList();
				}
				break;
			case 2:
				{
				setState(3222);
				tableReferenceListParens();
				}
				break;
			}
			setState(3225);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFunctionContext extends ParserRuleContext {
		public TerminalNode JSON_TABLE_SYMBOL() { return getToken(MySQLParser.JSON_TABLE_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public ColumnsClauseContext columnsClause() {
			return getRuleContext(ColumnsClauseContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public TableFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFunctionContext tableFunction() throws RecognitionException {
		TableFunctionContext _localctx = new TableFunctionContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_tableFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3227);
			match(JSON_TABLE_SYMBOL);
			setState(3228);
			match(OPEN_PAR_SYMBOL);
			setState(3229);
			expr(0);
			setState(3230);
			match(COMMA_SYMBOL);
			setState(3231);
			textStringLiteral();
			setState(3232);
			columnsClause();
			setState(3233);
			match(CLOSE_PAR_SYMBOL);
			setState(3234);
			tableAlias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnsClauseContext extends ParserRuleContext {
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<JtColumnContext> jtColumn() {
			return getRuleContexts(JtColumnContext.class);
		}
		public JtColumnContext jtColumn(int i) {
			return getRuleContext(JtColumnContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ColumnsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterColumnsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitColumnsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitColumnsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnsClauseContext columnsClause() throws RecognitionException {
		ColumnsClauseContext _localctx = new ColumnsClauseContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_columnsClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3236);
			match(COLUMNS_SYMBOL);
			setState(3237);
			match(OPEN_PAR_SYMBOL);
			setState(3238);
			jtColumn();
			setState(3243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3239);
				match(COMMA_SYMBOL);
				setState(3240);
				jtColumn();
				}
				}
				setState(3245);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3246);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JtColumnContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode ORDINALITY_SYMBOL() { return getToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode PATH_SYMBOL() { return getToken(MySQLParser.PATH_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode EXISTS_SYMBOL() { return getToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public OnEmptyOrErrorContext onEmptyOrError() {
			return getRuleContext(OnEmptyOrErrorContext.class,0);
		}
		public TerminalNode NESTED_SYMBOL() { return getToken(MySQLParser.NESTED_SYMBOL, 0); }
		public ColumnsClauseContext columnsClause() {
			return getRuleContext(ColumnsClauseContext.class,0);
		}
		public JtColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jtColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterJtColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitJtColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitJtColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JtColumnContext jtColumn() throws RecognitionException {
		JtColumnContext _localctx = new JtColumnContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_jtColumn);
		int _la;
		try {
			setState(3267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3248);
				identifier();
				setState(3249);
				match(FOR_SYMBOL);
				setState(3250);
				match(ORDINALITY_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3252);
				identifier();
				setState(3253);
				dataType();
				setState(3255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					setState(3254);
					match(EXISTS_SYMBOL);
					}
				}

				setState(3257);
				match(PATH_SYMBOL);
				setState(3258);
				textStringLiteral();
				setState(3260);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ERROR_SYMBOL || _la==DEFAULT_SYMBOL || _la==NULL_SYMBOL) {
					{
					setState(3259);
					onEmptyOrError();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3262);
				match(NESTED_SYMBOL);
				setState(3263);
				match(PATH_SYMBOL);
				setState(3264);
				textStringLiteral();
				setState(3265);
				columnsClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnEmptyOrErrorContext extends ParserRuleContext {
		public OnEmptyContext onEmpty() {
			return getRuleContext(OnEmptyContext.class,0);
		}
		public OnErrorContext onError() {
			return getRuleContext(OnErrorContext.class,0);
		}
		public OnEmptyOrErrorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onEmptyOrError; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOnEmptyOrError(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOnEmptyOrError(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOnEmptyOrError(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnEmptyOrErrorContext onEmptyOrError() throws RecognitionException {
		OnEmptyOrErrorContext _localctx = new OnEmptyOrErrorContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_onEmptyOrError);
		int _la;
		try {
			setState(3277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3269);
				onEmpty();
				setState(3271);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ERROR_SYMBOL || _la==DEFAULT_SYMBOL || _la==NULL_SYMBOL) {
					{
					setState(3270);
					onError();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3273);
				onError();
				setState(3275);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ERROR_SYMBOL || _la==DEFAULT_SYMBOL || _la==NULL_SYMBOL) {
					{
					setState(3274);
					onEmpty();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnEmptyContext extends ParserRuleContext {
		public JtOnResponseContext jtOnResponse() {
			return getRuleContext(JtOnResponseContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode EMPTY_SYMBOL() { return getToken(MySQLParser.EMPTY_SYMBOL, 0); }
		public OnEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onEmpty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOnEmpty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOnEmpty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOnEmpty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnEmptyContext onEmpty() throws RecognitionException {
		OnEmptyContext _localctx = new OnEmptyContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_onEmpty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3279);
			jtOnResponse();
			setState(3280);
			match(ON_SYMBOL);
			setState(3281);
			match(EMPTY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnErrorContext extends ParserRuleContext {
		public JtOnResponseContext jtOnResponse() {
			return getRuleContext(JtOnResponseContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public OnErrorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onError; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOnError(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOnError(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOnError(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnErrorContext onError() throws RecognitionException {
		OnErrorContext _localctx = new OnErrorContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_onError);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3283);
			jtOnResponse();
			setState(3284);
			match(ON_SYMBOL);
			setState(3285);
			match(ERROR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JtOnResponseContext extends ParserRuleContext {
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public JtOnResponseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jtOnResponse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterJtOnResponse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitJtOnResponse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitJtOnResponse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JtOnResponseContext jtOnResponse() throws RecognitionException {
		JtOnResponseContext _localctx = new JtOnResponseContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_jtOnResponse);
		try {
			setState(3291);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ERROR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3287);
				match(ERROR_SYMBOL);
				}
				break;
			case NULL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3288);
				match(NULL_SYMBOL);
				}
				break;
			case DEFAULT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3289);
				match(DEFAULT_SYMBOL);
				setState(3290);
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionOptionContext extends ParserRuleContext {
		public TerminalNode DISTINCT_SYMBOL() { return getToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public UnionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUnionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUnionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUnionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionOptionContext unionOption() throws RecognitionException {
		UnionOptionContext _localctx = new UnionOptionContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_unionOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3293);
			_la = _input.LA(1);
			if ( !(_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAliasContext tableAlias() throws RecognitionException {
		TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_tableAlias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3296);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				{
				setState(3295);
				_la = _input.LA(1);
				if ( !(_la==EQUAL_OPERATOR || _la==AS_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3298);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintListContext extends ParserRuleContext {
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IndexHintListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexHintList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexHintList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexHintList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintListContext indexHintList() throws RecognitionException {
		IndexHintListContext _localctx = new IndexHintListContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_indexHintList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3300);
			indexHint();
			setState(3305);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,370,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3301);
					match(COMMA_SYMBOL);
					setState(3302);
					indexHint();
					}
					} 
				}
				setState(3307);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,370,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IndexListContext indexList() {
			return getRuleContext(IndexListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IndexHintClauseContext indexHintClause() {
			return getRuleContext(IndexHintClauseContext.class,0);
		}
		public TerminalNode USE_SYMBOL() { return getToken(MySQLParser.USE_SYMBOL, 0); }
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_indexHint);
		int _la;
		try {
			setState(3328);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FORCE_SYMBOL:
			case IGNORE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3308);
				indexHintType();
				setState(3309);
				keyOrIndex();
				setState(3311);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(3310);
					indexHintClause();
					}
				}

				setState(3313);
				match(OPEN_PAR_SYMBOL);
				setState(3314);
				indexList();
				setState(3315);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case USE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3317);
				match(USE_SYMBOL);
				setState(3318);
				keyOrIndex();
				setState(3320);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(3319);
					indexHintClause();
					}
				}

				setState(3322);
				match(OPEN_PAR_SYMBOL);
				setState(3324);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
				case 1:
					{
					setState(3323);
					indexList();
					}
					break;
				}
				setState(3326);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode FORCE_SYMBOL() { return getToken(MySQLParser.FORCE_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexHintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexHintType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_indexHintType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3330);
			_la = _input.LA(1);
			if ( !(_la==FORCE_SYMBOL || _la==IGNORE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyOrIndexContext extends ParserRuleContext {
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public KeyOrIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyOrIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyOrIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyOrIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyOrIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyOrIndexContext keyOrIndex() throws RecognitionException {
		KeyOrIndexContext _localctx = new KeyOrIndexContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_keyOrIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3332);
			_la = _input.LA(1);
			if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintClauseContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode ORDER_SYMBOL() { return getToken(MySQLParser.ORDER_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IndexHintClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexHintClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexHintClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexHintClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintClauseContext indexHintClause() throws RecognitionException {
		IndexHintClauseContext _localctx = new IndexHintClauseContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_indexHintClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3334);
			match(FOR_SYMBOL);
			setState(3340);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN_SYMBOL:
				{
				setState(3335);
				match(JOIN_SYMBOL);
				}
				break;
			case ORDER_SYMBOL:
				{
				setState(3336);
				match(ORDER_SYMBOL);
				setState(3337);
				match(BY_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				setState(3338);
				match(GROUP_SYMBOL);
				setState(3339);
				match(BY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexListContext extends ParserRuleContext {
		public List<IndexListElementContext> indexListElement() {
			return getRuleContexts(IndexListElementContext.class);
		}
		public IndexListElementContext indexListElement(int i) {
			return getRuleContext(IndexListElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IndexListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexListContext indexList() throws RecognitionException {
		IndexListContext _localctx = new IndexListContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_indexList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3342);
			indexListElement();
			setState(3347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3343);
				match(COMMA_SYMBOL);
				setState(3344);
				indexListElement();
				}
				}
				setState(3349);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexListElementContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public IndexListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexListElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexListElementContext indexListElement() throws RecognitionException {
		IndexListElementContext _localctx = new IndexListElementContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_indexListElement);
		try {
			setState(3352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3350);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3351);
				match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public SimpleLimitClauseContext simpleLimitClause() {
			return getRuleContext(SimpleLimitClauseContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_updateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				{
				setState(3354);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3355);
				withClause();
				}
				break;
			}
			setState(3358);
			match(UPDATE_SYMBOL);
			setState(3360);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				setState(3359);
				match(LOW_PRIORITY_SYMBOL);
				}
				break;
			}
			setState(3363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				{
				setState(3362);
				match(IGNORE_SYMBOL);
				}
				break;
			}
			setState(3365);
			tableReferenceList();
			setState(3366);
			match(SET_SYMBOL);
			setState(3367);
			updateList();
			setState(3369);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE_SYMBOL) {
				{
				setState(3368);
				whereClause();
				}
			}

			setState(3372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				setState(3371);
				orderClause();
				}
			}

			setState(3375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				setState(3374);
				simpleLimitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionOrLockingStatementContext extends ParserRuleContext {
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public LockStatementContext lockStatement() {
			return getRuleContext(LockStatementContext.class,0);
		}
		public XaStatementContext xaStatement() {
			return getRuleContext(XaStatementContext.class,0);
		}
		public TransactionOrLockingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOrLockingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTransactionOrLockingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTransactionOrLockingStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTransactionOrLockingStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionOrLockingStatementContext transactionOrLockingStatement() throws RecognitionException {
		TransactionOrLockingStatementContext _localctx = new TransactionOrLockingStatementContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_transactionOrLockingStatement);
		try {
			setState(3381);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3377);
				transactionStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3378);
				savepointStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3379);
				lockStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3380);
				xaStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public List<TransactionCharacteristicContext> transactionCharacteristic() {
			return getRuleContexts(TransactionCharacteristicContext.class);
		}
		public TransactionCharacteristicContext transactionCharacteristic(int i) {
			return getRuleContext(TransactionCharacteristicContext.class,i);
		}
		public TerminalNode COMMIT_SYMBOL() { return getToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode RELEASE_SYMBOL() { return getToken(MySQLParser.RELEASE_SYMBOL, 0); }
		public List<TerminalNode> NO_SYMBOL() { return getTokens(MySQLParser.NO_SYMBOL); }
		public TerminalNode NO_SYMBOL(int i) {
			return getToken(MySQLParser.NO_SYMBOL, i);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_transactionStatement);
		int _la;
		try {
			int _alt;
			setState(3408);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3383);
				match(START_SYMBOL);
				setState(3384);
				match(TRANSACTION_SYMBOL);
				setState(3388);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,385,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3385);
						transactionCharacteristic();
						}
						} 
					}
					setState(3390);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,385,_ctx);
				}
				}
				break;
			case COMMIT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3391);
				match(COMMIT_SYMBOL);
				setState(3393);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					setState(3392);
					match(WORK_SYMBOL);
					}
				}

				setState(3400);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND_SYMBOL) {
					{
					setState(3395);
					match(AND_SYMBOL);
					setState(3397);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO_SYMBOL) {
						{
						setState(3396);
						match(NO_SYMBOL);
						}
					}

					setState(3399);
					match(CHAIN_SYMBOL);
					}
				}

				setState(3406);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
					{
					setState(3403);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO_SYMBOL) {
						{
						setState(3402);
						match(NO_SYMBOL);
						}
					}

					setState(3405);
					match(RELEASE_SYMBOL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterBeginWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitBeginWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitBeginWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_beginWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3410);
			match(BEGIN_SYMBOL);
			setState(3412);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK_SYMBOL) {
				{
				setState(3411);
				match(WORK_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionCharacteristicContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode CONSISTENT_SYMBOL() { return getToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public TerminalNode SNAPSHOT_SYMBOL() { return getToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode WRITE_SYMBOL() { return getToken(MySQLParser.WRITE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TransactionCharacteristicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionCharacteristic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTransactionCharacteristic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTransactionCharacteristic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTransactionCharacteristic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionCharacteristicContext transactionCharacteristic() throws RecognitionException {
		TransactionCharacteristicContext _localctx = new TransactionCharacteristicContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_transactionCharacteristic);
		int _la;
		try {
			setState(3420);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3414);
				match(WITH_SYMBOL);
				setState(3415);
				match(CONSISTENT_SYMBOL);
				setState(3416);
				match(SNAPSHOT_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3417);
				if (!(serverVersion >= 50605)) throw new FailedPredicateException(this, "serverVersion >= 50605");
				setState(3418);
				match(READ_SYMBOL);
				setState(3419);
				_la = _input.LA(1);
				if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTransactionCharacteristicContext extends ParserRuleContext {
		public TerminalNode ISOLATION_SYMBOL() { return getToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public TerminalNode LEVEL_SYMBOL() { return getToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public IsolationLevelContext isolationLevel() {
			return getRuleContext(IsolationLevelContext.class,0);
		}
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode WRITE_SYMBOL() { return getToken(MySQLParser.WRITE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MySQLParser.ONLY_SYMBOL, 0); }
		public SetTransactionCharacteristicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTransactionCharacteristic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSetTransactionCharacteristic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSetTransactionCharacteristic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSetTransactionCharacteristic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTransactionCharacteristicContext setTransactionCharacteristic() throws RecognitionException {
		SetTransactionCharacteristicContext _localctx = new SetTransactionCharacteristicContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_setTransactionCharacteristic);
		int _la;
		try {
			setState(3428);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3422);
				match(ISOLATION_SYMBOL);
				setState(3423);
				match(LEVEL_SYMBOL);
				setState(3424);
				isolationLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3425);
				if (!(serverVersion >= 50605)) throw new FailedPredicateException(this, "serverVersion >= 50605");
				setState(3426);
				match(READ_SYMBOL);
				setState(3427);
				_la = _input.LA(1);
				if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsolationLevelContext extends ParserRuleContext {
		public TerminalNode REPEATABLE_SYMBOL() { return getToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode COMMITTED_SYMBOL() { return getToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public TerminalNode UNCOMMITTED_SYMBOL() { return getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public TerminalNode SERIALIZABLE_SYMBOL() { return getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public IsolationLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolationLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIsolationLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIsolationLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIsolationLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsolationLevelContext isolationLevel() throws RecognitionException {
		IsolationLevelContext _localctx = new IsolationLevelContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_isolationLevel);
		int _la;
		try {
			setState(3435);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPEATABLE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3430);
				match(REPEATABLE_SYMBOL);
				setState(3431);
				match(READ_SYMBOL);
				}
				break;
			case READ_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3432);
				match(READ_SYMBOL);
				setState(3433);
				_la = _input.LA(1);
				if ( !(_la==COMMITTED_SYMBOL || _la==UNCOMMITTED_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SERIALIZABLE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3434);
				match(SERIALIZABLE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT_SYMBOL() { return getToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode RELEASE_SYMBOL() { return getToken(MySQLParser.RELEASE_SYMBOL, 0); }
		public List<TerminalNode> NO_SYMBOL() { return getTokens(MySQLParser.NO_SYMBOL); }
		public TerminalNode NO_SYMBOL(int i) {
			return getToken(MySQLParser.NO_SYMBOL, i);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSavepointStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSavepointStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSavepointStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_savepointStatement);
		int _la;
		try {
			setState(3466);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SAVEPOINT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3437);
				match(SAVEPOINT_SYMBOL);
				setState(3438);
				identifier();
				}
				break;
			case ROLLBACK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3439);
				match(ROLLBACK_SYMBOL);
				setState(3441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					setState(3440);
					match(WORK_SYMBOL);
					}
				}

				setState(3461);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TO_SYMBOL:
					{
					setState(3443);
					match(TO_SYMBOL);
					setState(3445);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
					case 1:
						{
						setState(3444);
						match(SAVEPOINT_SYMBOL);
						}
						break;
					}
					setState(3447);
					identifier();
					}
					break;
				case EOF:
				case NO_SYMBOL:
				case SEMICOLON_SYMBOL:
				case AND_SYMBOL:
				case RELEASE_SYMBOL:
					{
					setState(3453);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AND_SYMBOL) {
						{
						setState(3448);
						match(AND_SYMBOL);
						setState(3450);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NO_SYMBOL) {
							{
							setState(3449);
							match(NO_SYMBOL);
							}
						}

						setState(3452);
						match(CHAIN_SYMBOL);
						}
					}

					setState(3459);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
						{
						setState(3456);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NO_SYMBOL) {
							{
							setState(3455);
							match(NO_SYMBOL);
							}
						}

						setState(3458);
						match(RELEASE_SYMBOL);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RELEASE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3463);
				match(RELEASE_SYMBOL);
				setState(3464);
				match(SAVEPOINT_SYMBOL);
				setState(3465);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockStatementContext extends ParserRuleContext {
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public List<LockItemContext> lockItem() {
			return getRuleContexts(LockItemContext.class);
		}
		public LockItemContext lockItem(int i) {
			return getRuleContext(LockItemContext.class,i);
		}
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode BACKUP_SYMBOL() { return getToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public TerminalNode UNLOCK_SYMBOL() { return getToken(MySQLParser.UNLOCK_SYMBOL, 0); }
		public LockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLockStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLockStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLockStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockStatementContext lockStatement() throws RecognitionException {
		LockStatementContext _localctx = new LockStatementContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_lockStatement);
		int _la;
		try {
			setState(3490);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3468);
				match(LOCK_SYMBOL);
				setState(3469);
				_la = _input.LA(1);
				if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3470);
				lockItem();
				setState(3475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(3471);
					match(COMMA_SYMBOL);
					setState(3472);
					lockItem();
					}
					}
					setState(3477);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3478);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3479);
				match(LOCK_SYMBOL);
				setState(3480);
				match(INSTANCE_SYMBOL);
				setState(3481);
				match(FOR_SYMBOL);
				setState(3482);
				match(BACKUP_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3483);
				match(UNLOCK_SYMBOL);
				setState(3488);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
				case 1:
					{
					setState(3484);
					match(TABLES_SYMBOL);
					}
					break;
				case 2:
					{
					setState(3485);
					match(TABLE_SYMBOL);
					}
					break;
				case 3:
					{
					setState(3486);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(3487);
					match(INSTANCE_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockItemContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public LockOptionContext lockOption() {
			return getRuleContext(LockOptionContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public LockItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLockItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLockItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLockItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockItemContext lockItem() throws RecognitionException {
		LockItemContext _localctx = new LockItemContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_lockItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3492);
			tableRef();
			setState(3494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				setState(3493);
				tableAlias();
				}
				break;
			}
			setState(3496);
			lockOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockOptionContext extends ParserRuleContext {
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode WRITE_SYMBOL() { return getToken(MySQLParser.WRITE_SYMBOL, 0); }
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public LockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLockOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLockOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockOptionContext lockOption() throws RecognitionException {
		LockOptionContext _localctx = new LockOptionContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_lockOption);
		int _la;
		try {
			setState(3506);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3498);
				match(READ_SYMBOL);
				setState(3500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL) {
					{
					setState(3499);
					match(LOCAL_SYMBOL);
					}
				}

				}
				break;
			case LOW_PRIORITY_SYMBOL:
			case WRITE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3503);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY_SYMBOL) {
					{
					setState(3502);
					match(LOW_PRIORITY_SYMBOL);
					}
				}

				setState(3505);
				match(WRITE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaStatementContext extends ParserRuleContext {
		public TerminalNode XA_SYMBOL() { return getToken(MySQLParser.XA_SYMBOL, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TerminalNode COMMIT_SYMBOL() { return getToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode RECOVER_SYMBOL() { return getToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public XaConvertContext xaConvert() {
			return getRuleContext(XaConvertContext.class,0);
		}
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode SUSPEND_SYMBOL() { return getToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public TerminalNode ONE_SYMBOL() { return getToken(MySQLParser.ONE_SYMBOL, 0); }
		public TerminalNode PHASE_SYMBOL() { return getToken(MySQLParser.PHASE_SYMBOL, 0); }
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode RESUME_SYMBOL() { return getToken(MySQLParser.RESUME_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode MIGRATE_SYMBOL() { return getToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public XaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterXaStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitXaStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitXaStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaStatementContext xaStatement() throws RecognitionException {
		XaStatementContext _localctx = new XaStatementContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_xaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3508);
			match(XA_SYMBOL);
			setState(3535);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN_SYMBOL:
			case START_SYMBOL:
				{
				setState(3509);
				_la = _input.LA(1);
				if ( !(_la==BEGIN_SYMBOL || _la==START_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3510);
				xid();
				setState(3512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESUME_SYMBOL || _la==JOIN_SYMBOL) {
					{
					setState(3511);
					_la = _input.LA(1);
					if ( !(_la==RESUME_SYMBOL || _la==JOIN_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case END_SYMBOL:
				{
				setState(3514);
				match(END_SYMBOL);
				setState(3515);
				xid();
				setState(3521);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUSPEND_SYMBOL) {
					{
					setState(3516);
					match(SUSPEND_SYMBOL);
					setState(3519);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FOR_SYMBOL) {
						{
						setState(3517);
						match(FOR_SYMBOL);
						setState(3518);
						match(MIGRATE_SYMBOL);
						}
					}

					}
				}

				}
				break;
			case PREPARE_SYMBOL:
				{
				setState(3523);
				match(PREPARE_SYMBOL);
				setState(3524);
				xid();
				}
				break;
			case COMMIT_SYMBOL:
				{
				setState(3525);
				match(COMMIT_SYMBOL);
				setState(3526);
				xid();
				setState(3529);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONE_SYMBOL) {
					{
					setState(3527);
					match(ONE_SYMBOL);
					setState(3528);
					match(PHASE_SYMBOL);
					}
				}

				}
				break;
			case ROLLBACK_SYMBOL:
				{
				setState(3531);
				match(ROLLBACK_SYMBOL);
				setState(3532);
				xid();
				}
				break;
			case RECOVER_SYMBOL:
				{
				setState(3533);
				match(RECOVER_SYMBOL);
				setState(3534);
				xaConvert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaConvertContext extends ParserRuleContext {
		public TerminalNode CONVERT_SYMBOL() { return getToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public TerminalNode XID_SYMBOL() { return getToken(MySQLParser.XID_SYMBOL, 0); }
		public XaConvertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaConvert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterXaConvert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitXaConvert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitXaConvert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaConvertContext xaConvert() throws RecognitionException {
		XaConvertContext _localctx = new XaConvertContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_xaConvert);
		int _la;
		try {
			setState(3543);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3537);
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				setState(3540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONVERT_SYMBOL) {
					{
					setState(3538);
					match(CONVERT_SYMBOL);
					setState(3539);
					match(XID_SYMBOL);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterXid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitXid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitXid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3545);
			textString();
			setState(3552);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				setState(3546);
				match(COMMA_SYMBOL);
				setState(3547);
				textString();
				setState(3550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(3548);
					match(COMMA_SYMBOL);
					setState(3549);
					ulong_number();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationStatementContext extends ParserRuleContext {
		public TerminalNode PURGE_SYMBOL() { return getToken(MySQLParser.PURGE_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode BEFORE_SYMBOL() { return getToken(MySQLParser.BEFORE_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public TerminalNode RESET_SYMBOL() { return getToken(MySQLParser.RESET_SYMBOL, 0); }
		public List<ResetOptionContext> resetOption() {
			return getRuleContexts(ResetOptionContext.class);
		}
		public ResetOptionContext resetOption(int i) {
			return getRuleContext(ResetOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode PERSIST_SYMBOL() { return getToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SlaveContext slave() {
			return getRuleContext(SlaveContext.class,0);
		}
		public ChangeReplicationContext changeReplication() {
			return getRuleContext(ChangeReplicationContext.class,0);
		}
		public ReplicationLoadContext replicationLoad() {
			return getRuleContext(ReplicationLoadContext.class,0);
		}
		public GroupReplicationContext groupReplication() {
			return getRuleContext(GroupReplicationContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterReplicationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitReplicationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitReplicationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_replicationStatement);
		int _la;
		try {
			setState(3588);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3554);
				match(PURGE_SYMBOL);
				setState(3555);
				_la = _input.LA(1);
				if ( !(_la==MASTER_SYMBOL || _la==BINARY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3556);
				match(LOGS_SYMBOL);
				setState(3561);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TO_SYMBOL:
					{
					setState(3557);
					match(TO_SYMBOL);
					setState(3558);
					textLiteral();
					}
					break;
				case BEFORE_SYMBOL:
					{
					setState(3559);
					match(BEFORE_SYMBOL);
					setState(3560);
					expr(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3563);
				changeMaster();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3564);
				match(RESET_SYMBOL);
				setState(3565);
				resetOption();
				setState(3570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(3566);
					match(COMMA_SYMBOL);
					setState(3567);
					resetOption();
					}
					}
					setState(3572);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3573);
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				setState(3574);
				match(RESET_SYMBOL);
				setState(3575);
				match(PERSIST_SYMBOL);
				setState(3579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF_SYMBOL) {
					{
					setState(3576);
					ifExists();
					setState(3577);
					identifier();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3581);
				slave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3582);
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				setState(3583);
				changeReplication();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3584);
				if (!(serverVersion < 50500)) throw new FailedPredicateException(this, "serverVersion < 50500");
				setState(3585);
				replicationLoad();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3586);
				if (!(serverVersion > 50706)) throw new FailedPredicateException(this, "serverVersion > 50706");
				setState(3587);
				groupReplication();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetOptionContext extends ParserRuleContext {
		public Token option;
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public MasterResetOptionsContext masterResetOptions() {
			return getRuleContext(MasterResetOptionsContext.class,0);
		}
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ResetOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterResetOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitResetOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitResetOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetOptionContext resetOption() throws RecognitionException {
		ResetOptionContext _localctx = new ResetOptionContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_resetOption);
		try {
			setState(3604);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3590);
				((ResetOptionContext)_localctx).option = match(MASTER_SYMBOL);
				setState(3592);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
				case 1:
					{
					setState(3591);
					masterResetOptions();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3594);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(3595);
				((ResetOptionContext)_localctx).option = match(QUERY_SYMBOL);
				setState(3596);
				match(CACHE_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3597);
				((ResetOptionContext)_localctx).option = match(SLAVE_SYMBOL);
				setState(3599);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
				case 1:
					{
					setState(3598);
					match(ALL_SYMBOL);
					}
					break;
				}
				setState(3602);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
				case 1:
					{
					setState(3601);
					channel();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterResetOptionsContext extends ParserRuleContext {
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public MasterResetOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterResetOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterMasterResetOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitMasterResetOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitMasterResetOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterResetOptionsContext masterResetOptions() throws RecognitionException {
		MasterResetOptionsContext _localctx = new MasterResetOptionsContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_masterResetOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3606);
			if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
			setState(3607);
			match(TO_SYMBOL);
			setState(3608);
			real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationLoadContext extends ParserRuleContext {
		public TerminalNode LOAD_SYMBOL() { return getToken(MySQLParser.LOAD_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public ReplicationLoadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationLoad; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterReplicationLoad(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitReplicationLoad(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitReplicationLoad(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationLoadContext replicationLoad() throws RecognitionException {
		ReplicationLoadContext _localctx = new ReplicationLoadContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_replicationLoad);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3610);
			match(LOAD_SYMBOL);
			setState(3614);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATA_SYMBOL:
				{
				setState(3611);
				match(DATA_SYMBOL);
				}
				break;
			case TABLE_SYMBOL:
				{
				setState(3612);
				match(TABLE_SYMBOL);
				setState(3613);
				tableRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3616);
			match(FROM_SYMBOL);
			setState(3617);
			match(MASTER_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterContext extends ParserRuleContext {
		public TerminalNode CHANGE_SYMBOL() { return getToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public ChangeMasterOptionsContext changeMasterOptions() {
			return getRuleContext(ChangeMasterOptionsContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterChangeMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitChangeMaster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitChangeMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_changeMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3619);
			match(CHANGE_SYMBOL);
			setState(3620);
			match(MASTER_SYMBOL);
			setState(3621);
			match(TO_SYMBOL);
			setState(3622);
			changeMasterOptions();
			setState(3624);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				setState(3623);
				channel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterOptionsContext extends ParserRuleContext {
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ChangeMasterOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMasterOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterChangeMasterOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitChangeMasterOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitChangeMasterOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeMasterOptionsContext changeMasterOptions() throws RecognitionException {
		ChangeMasterOptionsContext _localctx = new ChangeMasterOptionsContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_changeMasterOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3626);
			masterOption();
			setState(3631);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,430,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3627);
					match(COMMA_SYMBOL);
					setState(3628);
					masterOption();
					}
					} 
				}
				setState(3633);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,430,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_HOST_SYMBOL() { return getToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode MASTER_BIND_SYMBOL() { return getToken(MySQLParser.MASTER_BIND_SYMBOL, 0); }
		public TerminalNode MASTER_USER_SYMBOL() { return getToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public TerminalNode MASTER_PASSWORD_SYMBOL() { return getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public TerminalNode MASTER_PORT_SYMBOL() { return getToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public TerminalNode MASTER_RETRY_COUNT_SYMBOL() { return getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public TerminalNode MASTER_DELAY_SYMBOL() { return getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CA_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_VERSION_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CAPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CERT_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CIPHER_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_KEY_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public TerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public TerminalNode GET_MASTER_PUBLIC_KEY_SYM() { return getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYM, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public TerminalNode IGNORE_SERVER_IDS_SYMBOL() { return getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public ServerIdListContext serverIdList() {
			return getRuleContext(ServerIdListContext.class,0);
		}
		public TerminalNode MASTER_AUTO_POSITION_SYMBOL() { return getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public MasterFileDefContext masterFileDef() {
			return getRuleContext(MasterFileDefContext.class,0);
		}
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_masterOption);
		try {
			setState(3704);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_HOST_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3634);
				match(MASTER_HOST_SYMBOL);
				setState(3635);
				match(EQUAL_OPERATOR);
				setState(3636);
				textStringNoLinebreak();
				}
				break;
			case MASTER_BIND_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3637);
				match(MASTER_BIND_SYMBOL);
				setState(3638);
				match(EQUAL_OPERATOR);
				setState(3639);
				textStringNoLinebreak();
				}
				break;
			case MASTER_USER_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3640);
				match(MASTER_USER_SYMBOL);
				setState(3641);
				match(EQUAL_OPERATOR);
				setState(3642);
				textStringNoLinebreak();
				}
				break;
			case MASTER_PASSWORD_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3643);
				match(MASTER_PASSWORD_SYMBOL);
				setState(3644);
				match(EQUAL_OPERATOR);
				setState(3645);
				textStringNoLinebreak();
				}
				break;
			case MASTER_PORT_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(3646);
				match(MASTER_PORT_SYMBOL);
				setState(3647);
				match(EQUAL_OPERATOR);
				setState(3648);
				ulong_number();
				}
				break;
			case MASTER_CONNECT_RETRY_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(3649);
				match(MASTER_CONNECT_RETRY_SYMBOL);
				setState(3650);
				match(EQUAL_OPERATOR);
				setState(3651);
				ulong_number();
				}
				break;
			case MASTER_RETRY_COUNT_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(3652);
				match(MASTER_RETRY_COUNT_SYMBOL);
				setState(3653);
				match(EQUAL_OPERATOR);
				setState(3654);
				ulong_number();
				}
				break;
			case MASTER_DELAY_SYMBOL:
				enterOuterAlt(_localctx, 8);
				{
				setState(3655);
				match(MASTER_DELAY_SYMBOL);
				setState(3656);
				match(EQUAL_OPERATOR);
				setState(3657);
				ulong_number();
				}
				break;
			case MASTER_SSL_SYMBOL:
				enterOuterAlt(_localctx, 9);
				{
				setState(3658);
				match(MASTER_SSL_SYMBOL);
				setState(3659);
				match(EQUAL_OPERATOR);
				setState(3660);
				ulong_number();
				}
				break;
			case MASTER_SSL_CA_SYMBOL:
				enterOuterAlt(_localctx, 10);
				{
				setState(3661);
				match(MASTER_SSL_CA_SYMBOL);
				setState(3662);
				match(EQUAL_OPERATOR);
				setState(3663);
				textStringNoLinebreak();
				}
				break;
			case MASTER_TLS_VERSION_SYMBOL:
				enterOuterAlt(_localctx, 11);
				{
				setState(3664);
				match(MASTER_TLS_VERSION_SYMBOL);
				setState(3665);
				match(EQUAL_OPERATOR);
				setState(3666);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_CAPATH_SYMBOL:
				enterOuterAlt(_localctx, 12);
				{
				setState(3667);
				match(MASTER_SSL_CAPATH_SYMBOL);
				setState(3668);
				match(EQUAL_OPERATOR);
				setState(3669);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_CERT_SYMBOL:
				enterOuterAlt(_localctx, 13);
				{
				setState(3670);
				match(MASTER_SSL_CERT_SYMBOL);
				setState(3671);
				match(EQUAL_OPERATOR);
				setState(3672);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_CIPHER_SYMBOL:
				enterOuterAlt(_localctx, 14);
				{
				setState(3673);
				match(MASTER_SSL_CIPHER_SYMBOL);
				setState(3674);
				match(EQUAL_OPERATOR);
				setState(3675);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_KEY_SYMBOL:
				enterOuterAlt(_localctx, 15);
				{
				setState(3676);
				match(MASTER_SSL_KEY_SYMBOL);
				setState(3677);
				match(EQUAL_OPERATOR);
				setState(3678);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL:
				enterOuterAlt(_localctx, 16);
				{
				setState(3679);
				match(MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL);
				setState(3680);
				match(EQUAL_OPERATOR);
				setState(3681);
				ulong_number();
				}
				break;
			case MASTER_SSL_CRL_SYMBOL:
				enterOuterAlt(_localctx, 17);
				{
				setState(3682);
				match(MASTER_SSL_CRL_SYMBOL);
				setState(3683);
				match(EQUAL_OPERATOR);
				setState(3684);
				textLiteral();
				}
				break;
			case MASTER_SSL_CRLPATH_SYMBOL:
				enterOuterAlt(_localctx, 18);
				{
				setState(3685);
				match(MASTER_SSL_CRLPATH_SYMBOL);
				setState(3686);
				match(EQUAL_OPERATOR);
				setState(3687);
				textStringNoLinebreak();
				}
				break;
			case MASTER_PUBLIC_KEY_PATH_SYMBOL:
				enterOuterAlt(_localctx, 19);
				{
				setState(3688);
				match(MASTER_PUBLIC_KEY_PATH_SYMBOL);
				setState(3689);
				match(EQUAL_OPERATOR);
				setState(3690);
				textStringNoLinebreak();
				}
				break;
			case GET_MASTER_PUBLIC_KEY_SYM:
				enterOuterAlt(_localctx, 20);
				{
				setState(3691);
				match(GET_MASTER_PUBLIC_KEY_SYM);
				setState(3692);
				match(EQUAL_OPERATOR);
				setState(3693);
				ulong_number();
				}
				break;
			case MASTER_HEARTBEAT_PERIOD_SYMBOL:
				enterOuterAlt(_localctx, 21);
				{
				setState(3694);
				match(MASTER_HEARTBEAT_PERIOD_SYMBOL);
				setState(3695);
				match(EQUAL_OPERATOR);
				setState(3696);
				ulong_number();
				}
				break;
			case IGNORE_SERVER_IDS_SYMBOL:
				enterOuterAlt(_localctx, 22);
				{
				setState(3697);
				match(IGNORE_SERVER_IDS_SYMBOL);
				setState(3698);
				match(EQUAL_OPERATOR);
				setState(3699);
				serverIdList();
				}
				break;
			case MASTER_AUTO_POSITION_SYMBOL:
				enterOuterAlt(_localctx, 23);
				{
				setState(3700);
				match(MASTER_AUTO_POSITION_SYMBOL);
				setState(3701);
				match(EQUAL_OPERATOR);
				setState(3702);
				ulong_number();
				}
				break;
			case MASTER_LOG_FILE_SYMBOL:
			case MASTER_LOG_POS_SYMBOL:
			case RELAY_LOG_FILE_SYMBOL:
			case RELAY_LOG_POS_SYMBOL:
				enterOuterAlt(_localctx, 24);
				{
				setState(3703);
				masterFileDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterFileDefContext extends ParserRuleContext {
		public TerminalNode MASTER_LOG_FILE_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode MASTER_LOG_POS_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode RELAY_LOG_FILE_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_POS_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public MasterFileDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterFileDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterMasterFileDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitMasterFileDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitMasterFileDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterFileDefContext masterFileDef() throws RecognitionException {
		MasterFileDefContext _localctx = new MasterFileDefContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_masterFileDef);
		try {
			setState(3718);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_LOG_FILE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3706);
				match(MASTER_LOG_FILE_SYMBOL);
				setState(3707);
				match(EQUAL_OPERATOR);
				setState(3708);
				textStringNoLinebreak();
				}
				break;
			case MASTER_LOG_POS_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3709);
				match(MASTER_LOG_POS_SYMBOL);
				setState(3710);
				match(EQUAL_OPERATOR);
				setState(3711);
				ulonglong_number();
				}
				break;
			case RELAY_LOG_FILE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3712);
				match(RELAY_LOG_FILE_SYMBOL);
				setState(3713);
				match(EQUAL_OPERATOR);
				setState(3714);
				textStringNoLinebreak();
				}
				break;
			case RELAY_LOG_POS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3715);
				match(RELAY_LOG_POS_SYMBOL);
				setState(3716);
				match(EQUAL_OPERATOR);
				setState(3717);
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerIdListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<Ulong_numberContext> ulong_number() {
			return getRuleContexts(Ulong_numberContext.class);
		}
		public Ulong_numberContext ulong_number(int i) {
			return getRuleContext(Ulong_numberContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ServerIdListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverIdList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterServerIdList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitServerIdList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitServerIdList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerIdListContext serverIdList() throws RecognitionException {
		ServerIdListContext _localctx = new ServerIdListContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_serverIdList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3720);
			match(OPEN_PAR_SYMBOL);
			setState(3729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (HEX_NUMBER - 380)) | (1L << (DECIMAL_NUMBER - 380)) | (1L << (FLOAT_NUMBER - 380)))) != 0)) {
				{
				setState(3721);
				ulong_number();
				setState(3726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(3722);
					match(COMMA_SYMBOL);
					setState(3723);
					ulong_number();
					}
					}
					setState(3728);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3731);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeReplicationContext extends ParserRuleContext {
		public TerminalNode CHANGE_SYMBOL() { return getToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode FILTER_SYMBOL() { return getToken(MySQLParser.FILTER_SYMBOL, 0); }
		public List<FilterDefinitionContext> filterDefinition() {
			return getRuleContexts(FilterDefinitionContext.class);
		}
		public FilterDefinitionContext filterDefinition(int i) {
			return getRuleContext(FilterDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ChangeReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterChangeReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitChangeReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitChangeReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeReplicationContext changeReplication() throws RecognitionException {
		ChangeReplicationContext _localctx = new ChangeReplicationContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_changeReplication);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3733);
			match(CHANGE_SYMBOL);
			setState(3734);
			match(REPLICATION_SYMBOL);
			setState(3735);
			match(FILTER_SYMBOL);
			setState(3736);
			filterDefinition();
			setState(3741);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,435,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3737);
					match(COMMA_SYMBOL);
					setState(3738);
					filterDefinition();
					}
					} 
				}
				setState(3743);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,435,_ctx);
			}
			setState(3746);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				{
				setState(3744);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3745);
				channel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterDefinitionContext extends ParserRuleContext {
		public TerminalNode REPLICATE_DO_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FilterDbListContext filterDbList() {
			return getRuleContext(FilterDbListContext.class,0);
		}
		public TerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public FilterTableListContext filterTableList() {
			return getRuleContext(FilterTableListContext.class,0);
		}
		public TerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public FilterStringListContext filterStringList() {
			return getRuleContext(FilterStringListContext.class,0);
		}
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public FilterDbPairListContext filterDbPairList() {
			return getRuleContext(FilterDbPairListContext.class,0);
		}
		public FilterDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFilterDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFilterDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFilterDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterDefinitionContext filterDefinition() throws RecognitionException {
		FilterDefinitionContext _localctx = new FilterDefinitionContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_filterDefinition);
		int _la;
		try {
			setState(3797);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3748);
				match(REPLICATE_DO_DB_SYMBOL);
				setState(3749);
				match(EQUAL_OPERATOR);
				setState(3750);
				match(OPEN_PAR_SYMBOL);
				setState(3752);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
				case 1:
					{
					setState(3751);
					filterDbList();
					}
					break;
				}
				setState(3754);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_DB_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3755);
				match(REPLICATE_IGNORE_DB_SYMBOL);
				setState(3756);
				match(EQUAL_OPERATOR);
				setState(3757);
				match(OPEN_PAR_SYMBOL);
				setState(3759);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
				case 1:
					{
					setState(3758);
					filterDbList();
					}
					break;
				}
				setState(3761);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_DO_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3762);
				match(REPLICATE_DO_TABLE_SYMBOL);
				setState(3763);
				match(EQUAL_OPERATOR);
				setState(3764);
				match(OPEN_PAR_SYMBOL);
				setState(3766);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					setState(3765);
					filterTableList();
					}
					break;
				}
				setState(3768);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3769);
				match(REPLICATE_IGNORE_TABLE_SYMBOL);
				setState(3770);
				match(EQUAL_OPERATOR);
				setState(3771);
				match(OPEN_PAR_SYMBOL);
				setState(3773);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
				case 1:
					{
					setState(3772);
					filterTableList();
					}
					break;
				}
				setState(3775);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_DO_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(3776);
				match(REPLICATE_WILD_DO_TABLE_SYMBOL);
				setState(3777);
				match(EQUAL_OPERATOR);
				setState(3778);
				match(OPEN_PAR_SYMBOL);
				setState(3780);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
				case 1:
					{
					setState(3779);
					filterStringList();
					}
					break;
				}
				setState(3782);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(3783);
				match(REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
				setState(3784);
				match(EQUAL_OPERATOR);
				setState(3785);
				match(OPEN_PAR_SYMBOL);
				setState(3787);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
				case 1:
					{
					setState(3786);
					filterStringList();
					}
					break;
				}
				setState(3789);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_REWRITE_DB_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(3790);
				match(REPLICATE_REWRITE_DB_SYMBOL);
				setState(3791);
				match(EQUAL_OPERATOR);
				setState(3792);
				match(OPEN_PAR_SYMBOL);
				setState(3794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					setState(3793);
					filterDbPairList();
					}
				}

				setState(3796);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterDbListContext extends ParserRuleContext {
		public List<SchemaRefContext> schemaRef() {
			return getRuleContexts(SchemaRefContext.class);
		}
		public SchemaRefContext schemaRef(int i) {
			return getRuleContext(SchemaRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterDbListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterDbList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFilterDbList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFilterDbList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFilterDbList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterDbListContext filterDbList() throws RecognitionException {
		FilterDbListContext _localctx = new FilterDbListContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_filterDbList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3799);
			schemaRef();
			setState(3804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3800);
				match(COMMA_SYMBOL);
				setState(3801);
				schemaRef();
				}
				}
				setState(3806);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterTableListContext extends ParserRuleContext {
		public List<FilterTableRefContext> filterTableRef() {
			return getRuleContexts(FilterTableRefContext.class);
		}
		public FilterTableRefContext filterTableRef(int i) {
			return getRuleContext(FilterTableRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterTableListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterTableList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFilterTableList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFilterTableList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFilterTableList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterTableListContext filterTableList() throws RecognitionException {
		FilterTableListContext _localctx = new FilterTableListContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_filterTableList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3807);
			filterTableRef();
			setState(3812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3808);
				match(COMMA_SYMBOL);
				setState(3809);
				filterTableRef();
				}
				}
				setState(3814);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterStringListContext extends ParserRuleContext {
		public List<FilterWildDbTableStringContext> filterWildDbTableString() {
			return getRuleContexts(FilterWildDbTableStringContext.class);
		}
		public FilterWildDbTableStringContext filterWildDbTableString(int i) {
			return getRuleContext(FilterWildDbTableStringContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterStringListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterStringList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFilterStringList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFilterStringList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFilterStringList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterStringListContext filterStringList() throws RecognitionException {
		FilterStringListContext _localctx = new FilterStringListContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_filterStringList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3815);
			filterWildDbTableString();
			setState(3820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3816);
				match(COMMA_SYMBOL);
				setState(3817);
				filterWildDbTableString();
				}
				}
				setState(3822);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterWildDbTableStringContext extends ParserRuleContext {
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public FilterWildDbTableStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterWildDbTableString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFilterWildDbTableString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFilterWildDbTableString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFilterWildDbTableString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterWildDbTableStringContext filterWildDbTableString() throws RecognitionException {
		FilterWildDbTableStringContext _localctx = new FilterWildDbTableStringContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_filterWildDbTableString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3823);
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterDbPairListContext extends ParserRuleContext {
		public List<SchemaIdentifierPairContext> schemaIdentifierPair() {
			return getRuleContexts(SchemaIdentifierPairContext.class);
		}
		public SchemaIdentifierPairContext schemaIdentifierPair(int i) {
			return getRuleContext(SchemaIdentifierPairContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterDbPairListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterDbPairList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFilterDbPairList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFilterDbPairList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFilterDbPairList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterDbPairListContext filterDbPairList() throws RecognitionException {
		FilterDbPairListContext _localctx = new FilterDbPairListContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_filterDbPairList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3825);
			schemaIdentifierPair();
			setState(3830);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3826);
				match(COMMA_SYMBOL);
				setState(3827);
				schemaIdentifierPair();
				}
				}
				setState(3832);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveContext extends ParserRuleContext {
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public SlaveConnectionOptionsContext slaveConnectionOptions() {
			return getRuleContext(SlaveConnectionOptionsContext.class,0);
		}
		public SlaveThreadOptionsContext slaveThreadOptions() {
			return getRuleContext(SlaveThreadOptionsContext.class,0);
		}
		public TerminalNode UNTIL_SYMBOL() { return getToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public SlaveUntilOptionsContext slaveUntilOptions() {
			return getRuleContext(SlaveUntilOptionsContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public TerminalNode STOP_SYMBOL() { return getToken(MySQLParser.STOP_SYMBOL, 0); }
		public SlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SlaveContext slave() throws RecognitionException {
		SlaveContext _localctx = new SlaveContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_slave);
		try {
			setState(3854);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3833);
				match(START_SYMBOL);
				setState(3834);
				match(SLAVE_SYMBOL);
				setState(3836);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
				case 1:
					{
					setState(3835);
					slaveThreadOptions();
					}
					break;
				}
				setState(3840);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
				case 1:
					{
					setState(3838);
					match(UNTIL_SYMBOL);
					setState(3839);
					slaveUntilOptions();
					}
					break;
				}
				setState(3842);
				slaveConnectionOptions();
				setState(3844);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
				case 1:
					{
					setState(3843);
					channel();
					}
					break;
				}
				}
				break;
			case STOP_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3846);
				match(STOP_SYMBOL);
				setState(3847);
				match(SLAVE_SYMBOL);
				setState(3849);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
				case 1:
					{
					setState(3848);
					slaveThreadOptions();
					}
					break;
				}
				setState(3852);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
				case 1:
					{
					setState(3851);
					channel();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveUntilOptionsContext extends ParserRuleContext {
		public List<MasterFileDefContext> masterFileDef() {
			return getRuleContexts(MasterFileDefContext.class);
		}
		public MasterFileDefContext masterFileDef(int i) {
			return getRuleContext(MasterFileDefContext.class,i);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public TerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SlaveUntilOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slaveUntilOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSlaveUntilOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSlaveUntilOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSlaveUntilOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SlaveUntilOptionsContext slaveUntilOptions() throws RecognitionException {
		SlaveUntilOptionsContext _localctx = new SlaveUntilOptionsContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_slaveUntilOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3863);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				setState(3856);
				masterFileDef();
				}
				break;
			case 2:
				{
				setState(3857);
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				setState(3858);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS_SYMBOL || _la==SQL_BEFORE_GTIDS_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3859);
				match(EQUAL_OPERATOR);
				setState(3860);
				textString();
				}
				break;
			case 3:
				{
				setState(3861);
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				setState(3862);
				match(SQL_AFTER_MTS_GAPS_SYMBOL);
				}
				break;
			}
			setState(3869);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,456,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3865);
					match(COMMA_SYMBOL);
					setState(3866);
					masterFileDef();
					}
					} 
				}
				setState(3871);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,456,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveConnectionOptionsContext extends ParserRuleContext {
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public List<TerminalNode> EQUAL_OPERATOR() { return getTokens(MySQLParser.EQUAL_OPERATOR); }
		public TerminalNode EQUAL_OPERATOR(int i) {
			return getToken(MySQLParser.EQUAL_OPERATOR, i);
		}
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode DEFAULT_AUTH_SYMBOL() { return getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public TerminalNode PLUGIN_DIR_SYMBOL() { return getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public SlaveConnectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slaveConnectionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSlaveConnectionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSlaveConnectionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSlaveConnectionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SlaveConnectionOptionsContext slaveConnectionOptions() throws RecognitionException {
		SlaveConnectionOptionsContext _localctx = new SlaveConnectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_slaveConnectionOptions);
		try {
			setState(3894);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3872);
				if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
				setState(3876);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
				case 1:
					{
					setState(3873);
					match(USER_SYMBOL);
					setState(3874);
					match(EQUAL_OPERATOR);
					setState(3875);
					textString();
					}
					break;
				}
				setState(3881);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
				case 1:
					{
					setState(3878);
					match(PASSWORD_SYMBOL);
					setState(3879);
					match(EQUAL_OPERATOR);
					setState(3880);
					textString();
					}
					break;
				}
				setState(3886);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
				case 1:
					{
					setState(3883);
					match(DEFAULT_AUTH_SYMBOL);
					setState(3884);
					match(EQUAL_OPERATOR);
					setState(3885);
					textString();
					}
					break;
				}
				setState(3891);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
				case 1:
					{
					setState(3888);
					match(PLUGIN_DIR_SYMBOL);
					setState(3889);
					match(EQUAL_OPERATOR);
					setState(3890);
					textString();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveThreadOptionsContext extends ParserRuleContext {
		public List<SlaveThreadOptionContext> slaveThreadOption() {
			return getRuleContexts(SlaveThreadOptionContext.class);
		}
		public SlaveThreadOptionContext slaveThreadOption(int i) {
			return getRuleContext(SlaveThreadOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SlaveThreadOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slaveThreadOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSlaveThreadOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSlaveThreadOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSlaveThreadOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SlaveThreadOptionsContext slaveThreadOptions() throws RecognitionException {
		SlaveThreadOptionsContext _localctx = new SlaveThreadOptionsContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_slaveThreadOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3896);
			slaveThreadOption();
			setState(3901);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,462,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3897);
					match(COMMA_SYMBOL);
					setState(3898);
					slaveThreadOption();
					}
					} 
				}
				setState(3903);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,462,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveThreadOptionContext extends ParserRuleContext {
		public TerminalNode RELAY_THREAD_SYMBOL() { return getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public TerminalNode SQL_THREAD_SYMBOL() { return getToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public SlaveThreadOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slaveThreadOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSlaveThreadOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSlaveThreadOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSlaveThreadOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SlaveThreadOptionContext slaveThreadOption() throws RecognitionException {
		SlaveThreadOptionContext _localctx = new SlaveThreadOptionContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_slaveThreadOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3904);
			_la = _input.LA(1);
			if ( !(_la==RELAY_THREAD_SYMBOL || _la==SQL_THREAD_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupReplicationContext extends ParserRuleContext {
		public TerminalNode GROUP_REPLICATION_SYMBOL() { return getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode STOP_SYMBOL() { return getToken(MySQLParser.STOP_SYMBOL, 0); }
		public GroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGroupReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupReplicationContext groupReplication() throws RecognitionException {
		GroupReplicationContext _localctx = new GroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_groupReplication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3906);
			_la = _input.LA(1);
			if ( !(_la==START_SYMBOL || _la==STOP_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3907);
			match(GROUP_REPLICATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparedStatementContext extends ParserRuleContext {
		public Token type;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public TerminalNode DEALLOCATE_SYMBOL() { return getToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPreparedStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPreparedStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPreparedStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_preparedStatement);
		int _la;
		try {
			setState(3920);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3909);
				((PreparedStatementContext)_localctx).type = match(PREPARE_SYMBOL);
				setState(3910);
				identifier();
				setState(3911);
				match(FROM_SYMBOL);
				setState(3914);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
				case 1:
					{
					setState(3912);
					textLiteral();
					}
					break;
				case 2:
					{
					setState(3913);
					userVariable();
					}
					break;
				}
				}
				break;
			case EXECUTE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3916);
				executeStatement();
				}
				break;
			case DEALLOCATE_SYMBOL:
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3917);
				((PreparedStatementContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEALLOCATE_SYMBOL || _la==DROP_SYMBOL) ) {
					((PreparedStatementContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3918);
				match(PREPARE_SYMBOL);
				setState(3919);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public ExecuteVarListContext executeVarList() {
			return getRuleContext(ExecuteVarListContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExecuteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExecuteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExecuteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3922);
			match(EXECUTE_SYMBOL);
			setState(3923);
			identifier();
			setState(3926);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING_SYMBOL) {
				{
				setState(3924);
				match(USING_SYMBOL);
				setState(3925);
				executeVarList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteVarListContext extends ParserRuleContext {
		public List<UserVariableContext> userVariable() {
			return getRuleContexts(UserVariableContext.class);
		}
		public UserVariableContext userVariable(int i) {
			return getRuleContext(UserVariableContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExecuteVarListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeVarList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExecuteVarList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExecuteVarList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExecuteVarList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteVarListContext executeVarList() throws RecognitionException {
		ExecuteVarListContext _localctx = new ExecuteVarListContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_executeVarList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3928);
			userVariable();
			setState(3933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3929);
				match(COMMA_SYMBOL);
				setState(3930);
				userVariable();
				}
				}
				setState(3935);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloneStatementContext extends ParserRuleContext {
		public TerminalNode CLONE_SYMBOL() { return getToken(MySQLParser.CLONE_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode REMOTE_SYMBOL() { return getToken(MySQLParser.REMOTE_SYMBOL, 0); }
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public CloneStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloneStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCloneStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCloneStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCloneStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloneStatementContext cloneStatement() throws RecognitionException {
		CloneStatementContext _localctx = new CloneStatementContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_cloneStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3936);
			match(CLONE_SYMBOL);
			setState(3949);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_SYMBOL:
				{
				setState(3937);
				match(LOCAL_SYMBOL);
				setState(3938);
				match(DATA_SYMBOL);
				setState(3939);
				match(DIRECTORY_SYMBOL);
				setState(3941);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
				case 1:
					{
					setState(3940);
					equal();
					}
					break;
				}
				setState(3943);
				textStringLiteral();
				}
				break;
			case REMOTE_SYMBOL:
				{
				setState(3944);
				match(REMOTE_SYMBOL);
				setState(3947);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(3945);
					match(FOR_SYMBOL);
					setState(3946);
					match(REPLICATION_SYMBOL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AccountManagementStatementContext extends ParserRuleContext {
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public GrantContext grant() {
			return getRuleContext(GrantContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public RevokeContext revoke() {
			return getRuleContext(RevokeContext.class,0);
		}
		public SetPasswordContext setPassword() {
			return getRuleContext(SetPasswordContext.class,0);
		}
		public SetRoleContext setRole() {
			return getRuleContext(SetRoleContext.class,0);
		}
		public AccountManagementStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accountManagementStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAccountManagementStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAccountManagementStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAccountManagementStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AccountManagementStatementContext accountManagementStatement() throws RecognitionException {
		AccountManagementStatementContext _localctx = new AccountManagementStatementContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_accountManagementStatement);
		try {
			setState(3961);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3951);
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				setState(3952);
				alterUser();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3953);
				createUser();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3954);
				dropUser();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3955);
				grant();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3956);
				renameUser();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3957);
				revoke();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3958);
				setPassword();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3959);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3960);
				setRole();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserContext extends ParserRuleContext {
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public AlterUserTailContext alterUserTail() {
			return getRuleContext(AlterUserTailContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_alterUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3963);
			match(ALTER_SYMBOL);
			setState(3964);
			match(USER_SYMBOL);
			setState(3967);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				{
				setState(3965);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(3966);
				ifExists();
				}
				break;
			}
			setState(3969);
			alterUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserTailContext extends ParserRuleContext {
		public CreateOrAlterUserListContext createOrAlterUserList() {
			return getRuleContext(CreateOrAlterUserListContext.class,0);
		}
		public CreateUserTailContext createUserTail() {
			return getRuleContext(CreateUserTailContext.class,0);
		}
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public AlterUserTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserTail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterUserTail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterUserTail(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterUserTail(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserTailContext alterUserTail() throws RecognitionException {
		AlterUserTailContext _localctx = new AlterUserTailContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_alterUserTail);
		try {
			setState(3990);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3971);
				createOrAlterUserList();
				setState(3972);
				createUserTail();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3974);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(3975);
				match(USER_SYMBOL);
				setState(3976);
				parentheses();
				setState(3977);
				match(IDENTIFIED_SYMBOL);
				setState(3978);
				match(BY_SYMBOL);
				setState(3979);
				textString();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3981);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3982);
				user();
				setState(3983);
				match(DEFAULT_SYMBOL);
				setState(3984);
				match(ROLE_SYMBOL);
				setState(3988);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
				case 1:
					{
					setState(3985);
					match(ALL_SYMBOL);
					}
					break;
				case 2:
					{
					setState(3986);
					match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					setState(3987);
					roleList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public CreateOrAlterUserListContext createOrAlterUserList() {
			return getRuleContext(CreateOrAlterUserListContext.class,0);
		}
		public DefaultRoleClauseContext defaultRoleClause() {
			return getRuleContext(DefaultRoleClauseContext.class,0);
		}
		public CreateUserTailContext createUserTail() {
			return getRuleContext(CreateUserTailContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_createUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3992);
			match(CREATE_SYMBOL);
			setState(3993);
			match(USER_SYMBOL);
			setState(3997);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				{
				setState(3994);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(3995);
				ifNotExists();
				}
				break;
			case 2:
				{
				}
				break;
			}
			setState(3999);
			createOrAlterUserList();
			setState(4000);
			defaultRoleClause();
			setState(4001);
			createUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserTailContext extends ParserRuleContext {
		public RequireClauseContext requireClause() {
			return getRuleContext(RequireClauseContext.class,0);
		}
		public ConnectOptionsContext connectOptions() {
			return getRuleContext(ConnectOptionsContext.class,0);
		}
		public AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions() {
			return getRuleContext(AccountLockPasswordExpireOptionsContext.class,0);
		}
		public CreateUserTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserTail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateUserTail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateUserTail(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateUserTail(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserTailContext createUserTail() throws RecognitionException {
		CreateUserTailContext _localctx = new CreateUserTailContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_createUserTail);
		int _la;
		try {
			setState(4014);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4003);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE_SYMBOL) {
					{
					setState(4004);
					requireClause();
					}
				}

				setState(4008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(4007);
					connectOptions();
					}
				}

				setState(4011);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ACCOUNT_SYMBOL || _la==PASSWORD_SYMBOL) {
					{
					setState(4010);
					accountLockPasswordExpireOptions();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultRoleClauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public DefaultRoleClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultRoleClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDefaultRoleClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDefaultRoleClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDefaultRoleClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultRoleClauseContext defaultRoleClause() throws RecognitionException {
		DefaultRoleClauseContext _localctx = new DefaultRoleClauseContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_defaultRoleClause);
		try {
			setState(4023);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4016);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4020);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
				case 1:
					{
					setState(4017);
					match(DEFAULT_SYMBOL);
					setState(4018);
					match(ROLE_SYMBOL);
					setState(4019);
					roleList();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RequireClauseContext extends ParserRuleContext {
		public Token option;
		public TerminalNode REQUIRE_SYMBOL() { return getToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		public RequireListContext requireList() {
			return getRuleContext(RequireListContext.class,0);
		}
		public TerminalNode SSL_SYMBOL() { return getToken(MySQLParser.SSL_SYMBOL, 0); }
		public TerminalNode X509_SYMBOL() { return getToken(MySQLParser.X509_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public RequireClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_requireClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRequireClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRequireClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRequireClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RequireClauseContext requireClause() throws RecognitionException {
		RequireClauseContext _localctx = new RequireClauseContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_requireClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4025);
			match(REQUIRE_SYMBOL);
			setState(4028);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CIPHER_SYMBOL:
			case ISSUER_SYMBOL:
			case SUBJECT_SYMBOL:
				{
				setState(4026);
				requireList();
				}
				break;
			case NONE_SYMBOL:
			case X509_SYMBOL:
			case SSL_SYMBOL:
				{
				setState(4027);
				((RequireClauseContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NONE_SYMBOL || _la==X509_SYMBOL || _la==SSL_SYMBOL) ) {
					((RequireClauseContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectOptionsContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public List<TerminalNode> MAX_QUERIES_PER_HOUR_SYMBOL() { return getTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL); }
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL(int i) {
			return getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
		}
		public List<Ulong_numberContext> ulong_number() {
			return getRuleContexts(Ulong_numberContext.class);
		}
		public Ulong_numberContext ulong_number(int i) {
			return getRuleContext(Ulong_numberContext.class,i);
		}
		public List<TerminalNode> MAX_UPDATES_PER_HOUR_SYMBOL() { return getTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL(int i) {
			return getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
		}
		public List<TerminalNode> MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL(int i) {
			return getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
		}
		public List<TerminalNode> MAX_USER_CONNECTIONS_SYMBOL() { return getTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL(int i) {
			return getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
		}
		public ConnectOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterConnectOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitConnectOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitConnectOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectOptionsContext connectOptions() throws RecognitionException {
		ConnectOptionsContext _localctx = new ConnectOptionsContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_connectOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4030);
			match(WITH_SYMBOL);
			setState(4039); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(4039);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MAX_QUERIES_PER_HOUR_SYMBOL:
					{
					setState(4031);
					match(MAX_QUERIES_PER_HOUR_SYMBOL);
					setState(4032);
					ulong_number();
					}
					break;
				case MAX_UPDATES_PER_HOUR_SYMBOL:
					{
					setState(4033);
					match(MAX_UPDATES_PER_HOUR_SYMBOL);
					setState(4034);
					ulong_number();
					}
					break;
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
					{
					setState(4035);
					match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
					setState(4036);
					ulong_number();
					}
					break;
				case MAX_USER_CONNECTIONS_SYMBOL:
					{
					setState(4037);
					match(MAX_USER_CONNECTIONS_SYMBOL);
					setState(4038);
					ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(4041); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 207)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AccountLockPasswordExpireOptionsContext extends ParserRuleContext {
		public TerminalNode ACCOUNT_SYMBOL() { return getToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode UNLOCK_SYMBOL() { return getToken(MySQLParser.UNLOCK_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode EXPIRE_SYMBOL() { return getToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode NEVER_SYMBOL() { return getToken(MySQLParser.NEVER_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode HISTORY_SYMBOL() { return getToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public TerminalNode REUSE_SYMBOL() { return getToken(MySQLParser.REUSE_SYMBOL, 0); }
		public AccountLockPasswordExpireOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accountLockPasswordExpireOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAccountLockPasswordExpireOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAccountLockPasswordExpireOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAccountLockPasswordExpireOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions() throws RecognitionException {
		AccountLockPasswordExpireOptionsContext _localctx = new AccountLockPasswordExpireOptionsContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_accountLockPasswordExpireOptions);
		int _la;
		try {
			setState(4069);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4043);
				match(ACCOUNT_SYMBOL);
				setState(4044);
				_la = _input.LA(1);
				if ( !(_la==LOCK_SYMBOL || _la==UNLOCK_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4045);
				match(PASSWORD_SYMBOL);
				setState(4046);
				match(EXPIRE_SYMBOL);
				setState(4052);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INTERVAL_SYMBOL:
					{
					setState(4047);
					match(INTERVAL_SYMBOL);
					setState(4048);
					real_ulong_number();
					setState(4049);
					match(DAY_SYMBOL);
					}
					break;
				case NEVER_SYMBOL:
				case DEFAULT_SYMBOL:
					{
					setState(4051);
					_la = _input.LA(1);
					if ( !(_la==NEVER_SYMBOL || _la==DEFAULT_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case EOF:
				case SEMICOLON_SYMBOL:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4054);
				match(PASSWORD_SYMBOL);
				setState(4055);
				match(HISTORY_SYMBOL);
				setState(4058);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INT_NUMBER:
				case LONG_NUMBER:
				case ULONGLONG_NUMBER:
				case HEX_NUMBER:
					{
					setState(4056);
					real_ulong_number();
					}
					break;
				case DEFAULT_SYMBOL:
					{
					setState(4057);
					match(DEFAULT_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4060);
				match(PASSWORD_SYMBOL);
				setState(4061);
				match(REUSE_SYMBOL);
				setState(4067);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INTERVAL_SYMBOL:
					{
					setState(4062);
					match(INTERVAL_SYMBOL);
					setState(4063);
					real_ulong_number();
					setState(4064);
					match(DAY_SYMBOL);
					}
					break;
				case DEFAULT_SYMBOL:
					{
					setState(4066);
					match(DEFAULT_SYMBOL);
					}
					break;
				case EOF:
				case SEMICOLON_SYMBOL:
					break;
				default:
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_dropUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4071);
			match(DROP_SYMBOL);
			setState(4072);
			match(USER_SYMBOL);
			setState(4075);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				setState(4073);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4074);
				ifExists();
				}
				break;
			}
			setState(4077);
			userList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantContext extends ParserRuleContext {
		public List<TerminalNode> GRANT_SYMBOL() { return getTokens(MySQLParser.GRANT_SYMBOL); }
		public TerminalNode GRANT_SYMBOL(int i) {
			return getToken(MySQLParser.GRANT_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return getRuleContext(RoleOrPrivilegesListContext.class,0);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public GrantIdentifierContext grantIdentifier() {
			return getRuleContext(GrantIdentifierContext.class,0);
		}
		public GrantTargetListContext grantTargetList() {
			return getRuleContext(GrantTargetListContext.class,0);
		}
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode ADMIN_SYMBOL() { return getToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public AclTypeContext aclType() {
			return getRuleContext(AclTypeContext.class,0);
		}
		public VersionedRequireClauseContext versionedRequireClause() {
			return getRuleContext(VersionedRequireClauseContext.class,0);
		}
		public GrantOptionsContext grantOptions() {
			return getRuleContext(GrantOptionsContext.class,0);
		}
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public GrantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGrant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGrant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGrant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantContext grant() throws RecognitionException {
		GrantContext _localctx = new GrantContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_grant);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4079);
			match(GRANT_SYMBOL);
			setState(4120);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				setState(4080);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4081);
				roleOrPrivilegesList();
				setState(4082);
				match(TO_SYMBOL);
				setState(4083);
				userList();
				setState(4087);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(4084);
					match(WITH_SYMBOL);
					setState(4085);
					match(ADMIN_SYMBOL);
					setState(4086);
					match(OPTION_SYMBOL);
					}
				}

				}
				break;
			case 2:
				{
				setState(4094);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
				case 1:
					{
					setState(4089);
					roleOrPrivilegesList();
					}
					break;
				case 2:
					{
					setState(4090);
					match(ALL_SYMBOL);
					setState(4092);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES_SYMBOL) {
						{
						setState(4091);
						match(PRIVILEGES_SYMBOL);
						}
					}

					}
					break;
				}
				setState(4096);
				match(ON_SYMBOL);
				setState(4098);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
				case 1:
					{
					setState(4097);
					aclType();
					}
					break;
				}
				setState(4100);
				grantIdentifier();
				setState(4101);
				match(TO_SYMBOL);
				setState(4102);
				grantTargetList();
				setState(4104);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
				case 1:
					{
					setState(4103);
					versionedRequireClause();
					}
					break;
				}
				setState(4107);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
				case 1:
					{
					setState(4106);
					grantOptions();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(4109);
				if (!(serverVersion >= 50500)) throw new FailedPredicateException(this, "serverVersion >= 50500");
				setState(4110);
				match(PROXY_SYMBOL);
				setState(4111);
				match(ON_SYMBOL);
				setState(4112);
				user();
				setState(4113);
				match(TO_SYMBOL);
				setState(4114);
				grantTargetList();
				setState(4118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(4115);
					match(WITH_SYMBOL);
					setState(4116);
					match(GRANT_SYMBOL);
					setState(4117);
					match(OPTION_SYMBOL);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantTargetListContext extends ParserRuleContext {
		public CreateOrAlterUserListContext createOrAlterUserList() {
			return getRuleContext(CreateOrAlterUserListContext.class,0);
		}
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public GrantTargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantTargetList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGrantTargetList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGrantTargetList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGrantTargetList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantTargetListContext grantTargetList() throws RecognitionException {
		GrantTargetListContext _localctx = new GrantTargetListContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_grantTargetList);
		try {
			setState(4126);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4122);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(4123);
				createOrAlterUserList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4124);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(4125);
				userList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantOptionsContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public List<GrantOptionContext> grantOption() {
			return getRuleContexts(GrantOptionContext.class);
		}
		public GrantOptionContext grantOption(int i) {
			return getRuleContext(GrantOptionContext.class,i);
		}
		public TerminalNode GRANT_SYMBOL() { return getToken(MySQLParser.GRANT_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public GrantOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGrantOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGrantOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGrantOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantOptionsContext grantOptions() throws RecognitionException {
		GrantOptionsContext _localctx = new GrantOptionsContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_grantOptions);
		int _la;
		try {
			setState(4139);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4128);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(4129);
				match(WITH_SYMBOL);
				setState(4131); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4130);
					grantOption();
					}
					}
					setState(4133); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 207)))) != 0) || _la==GRANT_SYMBOL );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4135);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(4136);
				match(WITH_SYMBOL);
				setState(4137);
				match(GRANT_SYMBOL);
				setState(4138);
				match(OPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VersionedRequireClauseContext extends ParserRuleContext {
		public RequireClauseContext requireClause() {
			return getRuleContext(RequireClauseContext.class,0);
		}
		public VersionedRequireClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_versionedRequireClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterVersionedRequireClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitVersionedRequireClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitVersionedRequireClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VersionedRequireClauseContext versionedRequireClause() throws RecognitionException {
		VersionedRequireClauseContext _localctx = new VersionedRequireClauseContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_versionedRequireClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4141);
			if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
			setState(4142);
			requireClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public List<UserContext> user() {
			return getRuleContexts(UserContext.class);
		}
		public UserContext user(int i) {
			return getRuleContext(UserContext.class,i);
		}
		public List<TerminalNode> TO_SYMBOL() { return getTokens(MySQLParser.TO_SYMBOL); }
		public TerminalNode TO_SYMBOL(int i) {
			return getToken(MySQLParser.TO_SYMBOL, i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRenameUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRenameUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRenameUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4144);
			match(RENAME_SYMBOL);
			setState(4145);
			match(USER_SYMBOL);
			setState(4146);
			user();
			setState(4147);
			match(TO_SYMBOL);
			setState(4148);
			user();
			setState(4156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4149);
				match(COMMA_SYMBOL);
				setState(4150);
				user();
				setState(4151);
				match(TO_SYMBOL);
				setState(4152);
				user();
				}
				}
				setState(4158);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeContext extends ParserRuleContext {
		public TerminalNode REVOKE_SYMBOL() { return getToken(MySQLParser.REVOKE_SYMBOL, 0); }
		public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return getRuleContext(RoleOrPrivilegesListContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public OnTypeToContext onTypeTo() {
			return getRuleContext(OnTypeToContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public GrantIdentifierContext grantIdentifier() {
			return getRuleContext(GrantIdentifierContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode GRANT_SYMBOL() { return getToken(MySQLParser.GRANT_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public AclTypeContext aclType() {
			return getRuleContext(AclTypeContext.class,0);
		}
		public RevokeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeContext revoke() throws RecognitionException {
		RevokeContext _localctx = new RevokeContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_revoke);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4159);
			match(REVOKE_SYMBOL);
			setState(4194);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
			case 1:
				{
				setState(4160);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4161);
				roleOrPrivilegesList();
				setState(4162);
				match(FROM_SYMBOL);
				setState(4163);
				userList();
				}
				break;
			case 2:
				{
				setState(4165);
				roleOrPrivilegesList();
				setState(4166);
				onTypeTo();
				setState(4167);
				match(FROM_SYMBOL);
				setState(4168);
				userList();
				}
				break;
			case 3:
				{
				setState(4170);
				match(ALL_SYMBOL);
				setState(4172);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
				case 1:
					{
					setState(4171);
					match(PRIVILEGES_SYMBOL);
					}
					break;
				}
				setState(4185);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
				case 1:
					{
					setState(4174);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(4175);
					match(ON_SYMBOL);
					setState(4177);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
					case 1:
						{
						setState(4176);
						aclType();
						}
						break;
					}
					setState(4179);
					grantIdentifier();
					}
					break;
				case 2:
					{
					setState(4180);
					match(COMMA_SYMBOL);
					setState(4181);
					match(GRANT_SYMBOL);
					setState(4182);
					match(OPTION_SYMBOL);
					setState(4183);
					match(FROM_SYMBOL);
					setState(4184);
					userList();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(4187);
				if (!(serverVersion >= 50500)) throw new FailedPredicateException(this, "serverVersion >= 50500");
				setState(4188);
				match(PROXY_SYMBOL);
				setState(4189);
				match(ON_SYMBOL);
				setState(4190);
				user();
				setState(4191);
				match(FROM_SYMBOL);
				setState(4192);
				userList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnTypeToContext extends ParserRuleContext {
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public GrantIdentifierContext grantIdentifier() {
			return getRuleContext(GrantIdentifierContext.class,0);
		}
		public AclTypeContext aclType() {
			return getRuleContext(AclTypeContext.class,0);
		}
		public OnTypeToContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onTypeTo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOnTypeTo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOnTypeTo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOnTypeTo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnTypeToContext onTypeTo() throws RecognitionException {
		OnTypeToContext _localctx = new OnTypeToContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_onTypeTo);
		int _la;
		try {
			setState(4210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4196);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(4197);
				match(ON_SYMBOL);
				setState(4199);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
				case 1:
					{
					setState(4198);
					aclType();
					}
					break;
				}
				setState(4201);
				grantIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4202);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4208);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(4203);
					match(ON_SYMBOL);
					setState(4205);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
					case 1:
						{
						setState(4204);
						aclType();
						}
						break;
					}
					setState(4207);
					grantIdentifier();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AclTypeContext extends ParserRuleContext {
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public AclTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aclType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAclType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAclType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAclType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AclTypeContext aclType() throws RecognitionException {
		AclTypeContext _localctx = new AclTypeContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_aclType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4212);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION_SYMBOL || _la==PROCEDURE_SYMBOL || _la==TABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetPasswordContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public List<TerminalNode> PASSWORD_SYMBOL() { return getTokens(MySQLParser.PASSWORD_SYMBOL); }
		public TerminalNode PASSWORD_SYMBOL(int i) {
			return getToken(MySQLParser.PASSWORD_SYMBOL, i);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode OLD_PASSWORD_SYMBOL() { return getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public SetPasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setPassword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSetPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSetPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSetPassword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetPasswordContext setPassword() throws RecognitionException {
		SetPasswordContext _localctx = new SetPasswordContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_setPassword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4214);
			match(SET_SYMBOL);
			setState(4215);
			match(PASSWORD_SYMBOL);
			setState(4218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				setState(4216);
				match(FOR_SYMBOL);
				setState(4217);
				user();
				}
			}

			setState(4220);
			equal();
			setState(4233);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
			case 1:
				{
				setState(4221);
				match(PASSWORD_SYMBOL);
				setState(4222);
				match(OPEN_PAR_SYMBOL);
				setState(4223);
				textString();
				setState(4224);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				{
				setState(4226);
				if (!(serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion < 50706");
				setState(4227);
				match(OLD_PASSWORD_SYMBOL);
				setState(4228);
				match(OPEN_PAR_SYMBOL);
				setState(4229);
				textString();
				setState(4230);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				{
				setState(4232);
				textString();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOrPrivilegesListContext extends ParserRuleContext {
		public List<RoleOrPrivilegeContext> roleOrPrivilege() {
			return getRuleContexts(RoleOrPrivilegeContext.class);
		}
		public RoleOrPrivilegeContext roleOrPrivilege(int i) {
			return getRuleContext(RoleOrPrivilegeContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrPrivilegesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleOrPrivilegesList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleOrPrivilegesList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleOrPrivilegesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleOrPrivilegesListContext roleOrPrivilegesList() throws RecognitionException {
		RoleOrPrivilegesListContext _localctx = new RoleOrPrivilegesListContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_roleOrPrivilegesList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4235);
			roleOrPrivilege();
			setState(4240);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,511,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4236);
					match(COMMA_SYMBOL);
					setState(4237);
					roleOrPrivilege();
					}
					} 
				}
				setState(4242);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,511,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOrPrivilegeContext extends ParserRuleContext {
		public Token object;
		public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return getRuleContext(RoleIdentifierOrTextContext.class,0);
		}
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public TerminalNode SELECT_SYMBOL() { return getToken(MySQLParser.SELECT_SYMBOL, 0); }
		public TerminalNode INSERT_SYMBOL() { return getToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode REFERENCES_SYMBOL() { return getToken(MySQLParser.REFERENCES_SYMBOL, 0); }
		public TerminalNode DELETE_SYMBOL() { return getToken(MySQLParser.DELETE_SYMBOL, 0); }
		public TerminalNode USAGE_SYMBOL() { return getToken(MySQLParser.USAGE_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public TerminalNode RELOAD_SYMBOL() { return getToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode PROCESS_SYMBOL() { return getToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public TerminalNode FILE_SYMBOL() { return getToken(MySQLParser.FILE_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MySQLParser.SUPER_SYMBOL, 0); }
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TerminalNode GRANT_SYMBOL() { return getToken(MySQLParser.GRANT_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode DATABASES_SYMBOL() { return getToken(MySQLParser.DATABASES_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode ROUTINE_SYMBOL() { return getToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode CLIENT_SYMBOL() { return getToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleOrPrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrPrivilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleOrPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleOrPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleOrPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleOrPrivilegeContext roleOrPrivilege() throws RecognitionException {
		RoleOrPrivilegeContext _localctx = new RoleOrPrivilegeContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_roleOrPrivilege);
		int _la;
		try {
			setState(4284);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4243);
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				setState(4254);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
				case 1:
					{
					setState(4244);
					roleIdentifierOrText();
					setState(4246);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
					case 1:
						{
						setState(4245);
						columnInternalRefList();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(4248);
					roleIdentifierOrText();
					setState(4252);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case AT_TEXT_SUFFIX:
						{
						setState(4249);
						match(AT_TEXT_SUFFIX);
						}
						break;
					case AT_SIGN_SYMBOL:
						{
						setState(4250);
						match(AT_SIGN_SYMBOL);
						setState(4251);
						textOrIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4256);
				_la = _input.LA(1);
				if ( !(_la==INSERT_SYMBOL || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (REFERENCES_SYMBOL - 601)) | (1L << (SELECT_SYMBOL - 601)) | (1L << (UPDATE_SYMBOL - 601)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4258);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
				case 1:
					{
					setState(4257);
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4260);
				_la = _input.LA(1);
				if ( !(_la==EXECUTE_SYMBOL || _la==SHUTDOWN_SYMBOL || _la==EVENT_SYMBOL || _la==FILE_SYMBOL || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (PROCESS_SYMBOL - 261)) | (1L << (PROXY_SYMBOL - 261)) | (1L << (RELOAD_SYMBOL - 261)))) != 0) || _la==SUPER_SYMBOL || ((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & ((1L << (DELETE_SYMBOL - 480)) | (1L << (DROP_SYMBOL - 480)) | (1L << (INDEX_SYMBOL - 480)))) != 0) || _la==TRIGGER_SYMBOL || _la==USAGE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4261);
				match(GRANT_SYMBOL);
				setState(4262);
				match(OPTION_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4263);
				match(SHOW_SYMBOL);
				setState(4264);
				match(DATABASES_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4265);
				match(CREATE_SYMBOL);
				setState(4269);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
				case 1:
					{
					setState(4266);
					match(TEMPORARY_SYMBOL);
					setState(4267);
					((RoleOrPrivilegeContext)_localctx).object = match(TABLES_SYMBOL);
					}
					break;
				case 2:
					{
					setState(4268);
					((RoleOrPrivilegeContext)_localctx).object = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ROUTINE_SYMBOL || _la==TABLESPACE_SYMBOL || _la==USER_SYMBOL || _la==VIEW_SYMBOL) ) {
						((RoleOrPrivilegeContext)_localctx).object = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4271);
				match(LOCK_SYMBOL);
				setState(4272);
				match(TABLES_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4273);
				match(REPLICATION_SYMBOL);
				setState(4274);
				((RoleOrPrivilegeContext)_localctx).object = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SLAVE_SYMBOL || _la==CLIENT_SYMBOL) ) {
					((RoleOrPrivilegeContext)_localctx).object = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4275);
				match(SHOW_SYMBOL);
				setState(4276);
				match(VIEW_SYMBOL);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4277);
				match(ALTER_SYMBOL);
				setState(4279);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
				case 1:
					{
					setState(4278);
					match(ROUTINE_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4281);
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				setState(4282);
				_la = _input.LA(1);
				if ( !(_la==CREATE_SYMBOL || _la==DROP_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4283);
				match(ROLE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantIdentifierContext extends ParserRuleContext {
		public List<TerminalNode> MULT_OPERATOR() { return getTokens(MySQLParser.MULT_OPERATOR); }
		public TerminalNode MULT_OPERATOR(int i) {
			return getToken(MySQLParser.MULT_OPERATOR, i);
		}
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public GrantIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGrantIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGrantIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGrantIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantIdentifierContext grantIdentifier() throws RecognitionException {
		GrantIdentifierContext _localctx = new GrantIdentifierContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_grantIdentifier);
		int _la;
		try {
			setState(4297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4286);
				match(MULT_OPERATOR);
				setState(4289);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					setState(4287);
					match(DOT_SYMBOL);
					setState(4288);
					match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4291);
				identifier();
				setState(4294);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					setState(4292);
					match(DOT_SYMBOL);
					setState(4293);
					match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4296);
				tableRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RequireListContext extends ParserRuleContext {
		public List<RequireListElementContext> requireListElement() {
			return getRuleContexts(RequireListElementContext.class);
		}
		public RequireListElementContext requireListElement(int i) {
			return getRuleContext(RequireListElementContext.class,i);
		}
		public List<TerminalNode> AND_SYMBOL() { return getTokens(MySQLParser.AND_SYMBOL); }
		public TerminalNode AND_SYMBOL(int i) {
			return getToken(MySQLParser.AND_SYMBOL, i);
		}
		public RequireListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_requireList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRequireList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRequireList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRequireList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RequireListContext requireList() throws RecognitionException {
		RequireListContext _localctx = new RequireListContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_requireList);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4299);
			requireListElement();
			setState(4306);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,523,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4301);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AND_SYMBOL) {
						{
						setState(4300);
						match(AND_SYMBOL);
						}
					}

					setState(4303);
					requireListElement();
					}
					} 
				}
				setState(4308);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,523,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RequireListElementContext extends ParserRuleContext {
		public Token element;
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode CIPHER_SYMBOL() { return getToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public TerminalNode ISSUER_SYMBOL() { return getToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public TerminalNode SUBJECT_SYMBOL() { return getToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public RequireListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_requireListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRequireListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRequireListElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRequireListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RequireListElementContext requireListElement() throws RecognitionException {
		RequireListElementContext _localctx = new RequireListElementContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_requireListElement);
		try {
			setState(4315);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CIPHER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4309);
				((RequireListElementContext)_localctx).element = match(CIPHER_SYMBOL);
				setState(4310);
				textString();
				}
				break;
			case ISSUER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4311);
				((RequireListElementContext)_localctx).element = match(ISSUER_SYMBOL);
				setState(4312);
				textString();
				}
				break;
			case SUBJECT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4313);
				((RequireListElementContext)_localctx).element = match(SUBJECT_SYMBOL);
				setState(4314);
				textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantOptionContext extends ParserRuleContext {
		public Token option;
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode GRANT_SYMBOL() { return getToken(MySQLParser.GRANT_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public GrantOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGrantOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGrantOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGrantOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantOptionContext grantOption() throws RecognitionException {
		GrantOptionContext _localctx = new GrantOptionContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_grantOption);
		try {
			setState(4327);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRANT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4317);
				((GrantOptionContext)_localctx).option = match(GRANT_SYMBOL);
				setState(4318);
				match(OPTION_SYMBOL);
				}
				break;
			case MAX_QUERIES_PER_HOUR_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4319);
				((GrantOptionContext)_localctx).option = match(MAX_QUERIES_PER_HOUR_SYMBOL);
				setState(4320);
				ulong_number();
				}
				break;
			case MAX_UPDATES_PER_HOUR_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4321);
				((GrantOptionContext)_localctx).option = match(MAX_UPDATES_PER_HOUR_SYMBOL);
				setState(4322);
				ulong_number();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4323);
				((GrantOptionContext)_localctx).option = match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
				setState(4324);
				ulong_number();
				}
				break;
			case MAX_USER_CONNECTIONS_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4325);
				((GrantOptionContext)_localctx).option = match(MAX_USER_CONNECTIONS_SYMBOL);
				setState(4326);
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRoleContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public List<RoleListContext> roleList() {
			return getRuleContexts(RoleListContext.class);
		}
		public RoleListContext roleList(int i) {
			return getRuleContext(RoleListContext.class,i);
		}
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode EXCEPT_SYMBOL() { return getToken(MySQLParser.EXCEPT_SYMBOL, 0); }
		public SetRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSetRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSetRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSetRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRoleContext setRole() throws RecognitionException {
		SetRoleContext _localctx = new SetRoleContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_setRole);
		int _la;
		try {
			setState(4352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4329);
				match(SET_SYMBOL);
				setState(4330);
				match(ROLE_SYMBOL);
				setState(4331);
				roleList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4332);
				match(SET_SYMBOL);
				setState(4333);
				match(ROLE_SYMBOL);
				setState(4334);
				_la = _input.LA(1);
				if ( !(_la==NONE_SYMBOL || _la==DEFAULT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4335);
				match(SET_SYMBOL);
				setState(4336);
				match(DEFAULT_SYMBOL);
				setState(4337);
				match(ROLE_SYMBOL);
				setState(4341);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
				case 1:
					{
					setState(4338);
					roleList();
					}
					break;
				case 2:
					{
					setState(4339);
					match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					setState(4340);
					match(ALL_SYMBOL);
					}
					break;
				}
				setState(4343);
				match(TO_SYMBOL);
				setState(4344);
				roleList();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4345);
				match(SET_SYMBOL);
				setState(4346);
				match(ROLE_SYMBOL);
				setState(4347);
				match(ALL_SYMBOL);
				setState(4350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					setState(4348);
					match(EXCEPT_SYMBOL);
					setState(4349);
					roleList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleListContext extends ParserRuleContext {
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleListContext roleList() throws RecognitionException {
		RoleListContext _localctx = new RoleListContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_roleList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4354);
			role();
			setState(4359);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,529,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4355);
					match(COMMA_SYMBOL);
					setState(4356);
					role();
					}
					} 
				}
				setState(4361);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,529,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleContext extends ParserRuleContext {
		public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return getRuleContext(RoleIdentifierOrTextContext.class,0);
		}
		public TerminalNode AT_SYMBOL() { return getToken(MySQLParser.AT_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public RoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleContext role() throws RecognitionException {
		RoleContext _localctx = new RoleContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4362);
			roleIdentifierOrText();
			setState(4365);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
			case 1:
				{
				setState(4363);
				match(AT_SYMBOL);
				setState(4364);
				textOrIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAdministrationStatementContext extends ParserRuleContext {
		public Token type;
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefListContext tableRefList() {
			return getRuleContext(TableRefListContext.class,0);
		}
		public TerminalNode ANALYZE_SYMBOL() { return getToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public NoWriteToBinLogContext noWriteToBinLog() {
			return getRuleContext(NoWriteToBinLogContext.class,0);
		}
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public List<CheckOptionContext> checkOption() {
			return getRuleContexts(CheckOptionContext.class);
		}
		public CheckOptionContext checkOption(int i) {
			return getRuleContext(CheckOptionContext.class,i);
		}
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode OPTIMIZE_SYMBOL() { return getToken(MySQLParser.OPTIMIZE_SYMBOL, 0); }
		public HistogramContext histogram() {
			return getRuleContext(HistogramContext.class,0);
		}
		public TerminalNode REPAIR_SYMBOL() { return getToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public List<RepairTypeContext> repairType() {
			return getRuleContexts(RepairTypeContext.class);
		}
		public RepairTypeContext repairType(int i) {
			return getRuleContext(RepairTypeContext.class,i);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode BACKUP_SYMBOL() { return getToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode RESTORE_SYMBOL() { return getToken(MySQLParser.RESTORE_SYMBOL, 0); }
		public TableAdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAdministrationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableAdministrationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableAdministrationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableAdministrationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAdministrationStatementContext tableAdministrationStatement() throws RecognitionException {
		TableAdministrationStatementContext _localctx = new TableAdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_tableAdministrationStatement);
		int _la;
		try {
			setState(4424);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4367);
				((TableAdministrationStatementContext)_localctx).type = match(ANALYZE_SYMBOL);
				setState(4369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(4368);
					noWriteToBinLog();
					}
				}

				setState(4371);
				match(TABLE_SYMBOL);
				setState(4372);
				tableRefList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4373);
				((TableAdministrationStatementContext)_localctx).type = match(CHECK_SYMBOL);
				setState(4374);
				match(TABLE_SYMBOL);
				setState(4375);
				tableRefList();
				setState(4379);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (CHANGED_SYMBOL - 80)) | (1L << (EXTENDED_SYMBOL - 80)) | (1L << (FAST_SYMBOL - 80)))) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL || _la==FOR_SYMBOL) {
					{
					{
					setState(4376);
					checkOption();
					}
					}
					setState(4381);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4382);
				((TableAdministrationStatementContext)_localctx).type = match(CHECKSUM_SYMBOL);
				setState(4383);
				match(TABLE_SYMBOL);
				setState(4384);
				tableRefList();
				setState(4386);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) {
					{
					setState(4385);
					_la = _input.LA(1);
					if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4388);
				((TableAdministrationStatementContext)_localctx).type = match(OPTIMIZE_SYMBOL);
				setState(4390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(4389);
					noWriteToBinLog();
					}
				}

				setState(4392);
				match(TABLE_SYMBOL);
				setState(4393);
				tableRefList();
				setState(4396);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
				case 1:
					{
					setState(4394);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(4395);
					histogram();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4398);
				((TableAdministrationStatementContext)_localctx).type = match(REPAIR_SYMBOL);
				setState(4400);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(4399);
					noWriteToBinLog();
					}
				}

				setState(4402);
				match(TABLE_SYMBOL);
				setState(4403);
				tableRefList();
				setState(4407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					setState(4404);
					repairType();
					}
					}
					setState(4409);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4410);
				if (!(serverVersion < 50500)) throw new FailedPredicateException(this, "serverVersion < 50500");
				setState(4411);
				((TableAdministrationStatementContext)_localctx).type = match(BACKUP_SYMBOL);
				setState(4412);
				match(TABLE_SYMBOL);
				setState(4413);
				tableRefList();
				setState(4414);
				match(TO_SYMBOL);
				setState(4415);
				textLiteral();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4417);
				if (!(serverVersion < 50500)) throw new FailedPredicateException(this, "serverVersion < 50500");
				setState(4418);
				((TableAdministrationStatementContext)_localctx).type = match(RESTORE_SYMBOL);
				setState(4419);
				match(TABLE_SYMBOL);
				setState(4420);
				tableRefList();
				setState(4421);
				match(FROM_SYMBOL);
				setState(4422);
				textLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HistogramContext extends ParserRuleContext {
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode HISTOGRAM_SYMBOL() { return getToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode BUCKETS_SYMBOL() { return getToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public HistogramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_histogram; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterHistogram(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitHistogram(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitHistogram(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HistogramContext histogram() throws RecognitionException {
		HistogramContext _localctx = new HistogramContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_histogram);
		int _la;
		try {
			setState(4439);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4426);
				match(UPDATE_SYMBOL);
				setState(4427);
				match(HISTOGRAM_SYMBOL);
				setState(4428);
				match(ON_SYMBOL);
				setState(4429);
				identifierList();
				setState(4433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(4430);
					match(WITH_SYMBOL);
					setState(4431);
					match(INT_NUMBER);
					setState(4432);
					match(BUCKETS_SYMBOL);
					}
				}

				}
				break;
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4435);
				match(DROP_SYMBOL);
				setState(4436);
				match(HISTOGRAM_SYMBOL);
				setState(4437);
				match(ON_SYMBOL);
				setState(4438);
				identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckOptionContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode FAST_SYMBOL() { return getToken(MySQLParser.FAST_SYMBOL, 0); }
		public TerminalNode MEDIUM_SYMBOL() { return getToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode CHANGED_SYMBOL() { return getToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public CheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCheckOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCheckOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCheckOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckOptionContext checkOption() throws RecognitionException {
		CheckOptionContext _localctx = new CheckOptionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_checkOption);
		int _la;
		try {
			setState(4444);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4441);
				match(FOR_SYMBOL);
				setState(4442);
				match(UPGRADE_SYMBOL);
				}
				break;
			case CHANGED_SYMBOL:
			case EXTENDED_SYMBOL:
			case FAST_SYMBOL:
			case MEDIUM_SYMBOL:
			case QUICK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4443);
				_la = _input.LA(1);
				if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (CHANGED_SYMBOL - 80)) | (1L << (EXTENDED_SYMBOL - 80)) | (1L << (FAST_SYMBOL - 80)))) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTypeContext extends ParserRuleContext {
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode USE_FRM_SYMBOL() { return getToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public RepairTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRepairType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRepairType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRepairType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepairTypeContext repairType() throws RecognitionException {
		RepairTypeContext _localctx = new RepairTypeContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_repairType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4446);
			_la = _input.LA(1);
			if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallUninstallStatmentContext extends ParserRuleContext {
		public Token action;
		public Token type;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SONAME_SYMBOL() { return getToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode INSTALL_SYMBOL() { return getToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public TerminalNode PLUGIN_SYMBOL() { return getToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public TextStringLiteralListContext textStringLiteralList() {
			return getRuleContext(TextStringLiteralListContext.class,0);
		}
		public TerminalNode COMPONENT_SYMBOL() { return getToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public PluginRefContext pluginRef() {
			return getRuleContext(PluginRefContext.class,0);
		}
		public TerminalNode UNINSTALL_SYMBOL() { return getToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public List<ComponentRefContext> componentRef() {
			return getRuleContexts(ComponentRefContext.class);
		}
		public ComponentRefContext componentRef(int i) {
			return getRuleContext(ComponentRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public InstallUninstallStatmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installUninstallStatment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInstallUninstallStatment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInstallUninstallStatment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInstallUninstallStatment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstallUninstallStatmentContext installUninstallStatment() throws RecognitionException {
		InstallUninstallStatmentContext _localctx = new InstallUninstallStatmentContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_installUninstallStatment);
		int _la;
		try {
			setState(4470);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4448);
				((InstallUninstallStatmentContext)_localctx).action = match(INSTALL_SYMBOL);
				setState(4449);
				((InstallUninstallStatmentContext)_localctx).type = match(PLUGIN_SYMBOL);
				setState(4450);
				identifier();
				setState(4451);
				match(SONAME_SYMBOL);
				setState(4452);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4454);
				((InstallUninstallStatmentContext)_localctx).action = match(INSTALL_SYMBOL);
				setState(4455);
				((InstallUninstallStatmentContext)_localctx).type = match(COMPONENT_SYMBOL);
				setState(4456);
				textStringLiteralList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4457);
				((InstallUninstallStatmentContext)_localctx).action = match(UNINSTALL_SYMBOL);
				setState(4458);
				((InstallUninstallStatmentContext)_localctx).type = match(PLUGIN_SYMBOL);
				setState(4459);
				pluginRef();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4460);
				((InstallUninstallStatmentContext)_localctx).action = match(UNINSTALL_SYMBOL);
				setState(4461);
				((InstallUninstallStatmentContext)_localctx).type = match(COMPONENT_SYMBOL);
				setState(4462);
				componentRef();
				setState(4467);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(4463);
					match(COMMA_SYMBOL);
					setState(4464);
					componentRef();
					}
					}
					setState(4469);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public SetTransactionCharacteristicContext setTransactionCharacteristic() {
			return getRuleContext(SetTransactionCharacteristicContext.class,0);
		}
		public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return getRuleContext(OptionValueNoOptionTypeContext.class,0);
		}
		public OptionTypeContext optionType() {
			return getRuleContext(OptionTypeContext.class,0);
		}
		public OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() {
			return getRuleContext(OptionValueFollowingOptionTypeContext.class,0);
		}
		public TerminalNode ONE_SHOT_SYMBOL() { return getToken(MySQLParser.ONE_SHOT_SYMBOL, 0); }
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public OptionValueListContext optionValueList() {
			return getRuleContext(OptionValueListContext.class,0);
		}
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSetStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSetStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_setStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4472);
			match(SET_SYMBOL);
			setState(4492);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				{
				setState(4474);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) {
					{
					setState(4473);
					optionType();
					}
				}

				setState(4476);
				match(TRANSACTION_SYMBOL);
				setState(4477);
				setTransactionCharacteristic();
				}
				break;
			case 2:
				{
				setState(4479);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
				case 1:
					{
					setState(4478);
					match(ONE_SHOT_SYMBOL);
					}
					break;
				}
				setState(4481);
				optionValueNoOptionType();
				setState(4484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(4482);
					match(COMMA_SYMBOL);
					setState(4483);
					optionValueList();
					}
				}

				}
				break;
			case 3:
				{
				setState(4486);
				optionType();
				setState(4487);
				optionValueFollowingOptionType();
				setState(4490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(4488);
					match(COMMA_SYMBOL);
					setState(4489);
					optionValueList();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionValueNoOptionTypeContext extends ParserRuleContext {
		public InternalVariableNameContext internalVariableName() {
			return getRuleContext(InternalVariableNameContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return getRuleContext(SetExprOrDefaultContext.class,0);
		}
		public CharsetClauseContext charsetClause() {
			return getRuleContext(CharsetClauseContext.class,0);
		}
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SetSystemVariableContext setSystemVariable() {
			return getRuleContext(SetSystemVariableContext.class,0);
		}
		public TerminalNode NAMES_SYMBOL() { return getToken(MySQLParser.NAMES_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public OptionValueNoOptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValueNoOptionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOptionValueNoOptionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOptionValueNoOptionType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOptionValueNoOptionType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionValueNoOptionTypeContext optionValueNoOptionType() throws RecognitionException {
		OptionValueNoOptionTypeContext _localctx = new OptionValueNoOptionTypeContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_optionValueNoOptionType);
		int _la;
		try {
			setState(4520);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4494);
				internalVariableName();
				setState(4495);
				equal();
				setState(4496);
				setExprOrDefault();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4498);
				charsetClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4499);
				userVariable();
				setState(4500);
				equal();
				setState(4501);
				expr(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4503);
				setSystemVariable();
				setState(4504);
				equal();
				setState(4505);
				setExprOrDefault();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4507);
				match(NAMES_SYMBOL);
				setState(4518);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
				case 1:
					{
					setState(4508);
					equal();
					setState(4509);
					expr(0);
					}
					break;
				case 2:
					{
					setState(4511);
					charsetName();
					setState(4514);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLLATE_SYMBOL) {
						{
						setState(4512);
						match(COLLATE_SYMBOL);
						setState(4513);
						collationName();
						}
					}

					}
					break;
				case 3:
					{
					setState(4516);
					if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
					setState(4517);
					match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetSystemVariableContext extends ParserRuleContext {
		public TerminalNode AT_AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		public InternalVariableNameContext internalVariableName() {
			return getRuleContext(InternalVariableNameContext.class,0);
		}
		public SetVarIdentTypeContext setVarIdentType() {
			return getRuleContext(SetVarIdentTypeContext.class,0);
		}
		public SetSystemVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setSystemVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSetSystemVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSetSystemVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSetSystemVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetSystemVariableContext setSystemVariable() throws RecognitionException {
		SetSystemVariableContext _localctx = new SetSystemVariableContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_setSystemVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4522);
			match(AT_AT_SIGN_SYMBOL);
			setState(4524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
			case 1:
				{
				setState(4523);
				setVarIdentType();
				}
				break;
			}
			setState(4526);
			internalVariableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionValueFollowingOptionTypeContext extends ParserRuleContext {
		public InternalVariableNameContext internalVariableName() {
			return getRuleContext(InternalVariableNameContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return getRuleContext(SetExprOrDefaultContext.class,0);
		}
		public OptionValueFollowingOptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValueFollowingOptionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOptionValueFollowingOptionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOptionValueFollowingOptionType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOptionValueFollowingOptionType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() throws RecognitionException {
		OptionValueFollowingOptionTypeContext _localctx = new OptionValueFollowingOptionTypeContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_optionValueFollowingOptionType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4528);
			internalVariableName();
			setState(4529);
			equal();
			setState(4530);
			setExprOrDefault();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetExprOrDefaultContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public SetExprOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setExprOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSetExprOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSetExprOrDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSetExprOrDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetExprOrDefaultContext setExprOrDefault() throws RecognitionException {
		SetExprOrDefaultContext _localctx = new SetExprOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_setExprOrDefault);
		int _la;
		try {
			setState(4536);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4532);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4533);
				_la = _input.LA(1);
				if ( !(((((_la - 427)) & ~0x3f) == 0 && ((1L << (_la - 427)) & ((1L << (ALL_SYMBOL - 427)) | (1L << (BINARY_SYMBOL - 427)) | (1L << (DEFAULT_SYMBOL - 427)))) != 0) || _la==ON_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4534);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4535);
				_la = _input.LA(1);
				if ( !(_la==ROW_SYMBOL || _la==SYSTEM_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionValueListContext extends ParserRuleContext {
		public List<OptionValueContext> optionValue() {
			return getRuleContexts(OptionValueContext.class);
		}
		public OptionValueContext optionValue(int i) {
			return getRuleContext(OptionValueContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public OptionValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValueList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOptionValueList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOptionValueList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOptionValueList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionValueListContext optionValueList() throws RecognitionException {
		OptionValueListContext _localctx = new OptionValueListContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_optionValueList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4538);
			optionValue();
			setState(4543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4539);
				match(COMMA_SYMBOL);
				setState(4540);
				optionValue();
				}
				}
				setState(4545);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionValueContext extends ParserRuleContext {
		public OptionTypeContext optionType() {
			return getRuleContext(OptionTypeContext.class,0);
		}
		public InternalVariableNameContext internalVariableName() {
			return getRuleContext(InternalVariableNameContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return getRuleContext(SetExprOrDefaultContext.class,0);
		}
		public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return getRuleContext(OptionValueNoOptionTypeContext.class,0);
		}
		public OptionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOptionValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOptionValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOptionValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionValueContext optionValue() throws RecognitionException {
		OptionValueContext _localctx = new OptionValueContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_optionValue);
		try {
			setState(4552);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4546);
				optionType();
				setState(4547);
				internalVariableName();
				setState(4548);
				equal();
				setState(4549);
				setExprOrDefault();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4551);
				optionValueNoOptionType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public Token value;
		public Token object;
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode EVENTS_SYMBOL() { return getToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public FromOrInContext fromOrIn() {
			return getRuleContext(FromOrInContext.class,0);
		}
		public TerminalNode COUNT_SYMBOL() { return getToken(MySQLParser.COUNT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public TerminalNode CODE_SYMBOL() { return getToken(MySQLParser.CODE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public FunctionRefContext functionRef() {
			return getRuleContext(FunctionRefContext.class,0);
		}
		public TerminalNode AUTHORS_SYMBOL() { return getToken(MySQLParser.AUTHORS_SYMBOL, 0); }
		public TerminalNode DATABASES_SYMBOL() { return getToken(MySQLParser.DATABASES_SYMBOL, 0); }
		public TerminalNode TRIGGERS_SYMBOL() { return getToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public TerminalNode PLUGIN_SYMBOL() { return getToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public TerminalNode PLUGINS_SYMBOL() { return getToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode MUTEX_SYMBOL() { return getToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode ENGINES_SYMBOL() { return getToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public TerminalNode WARNINGS_SYMBOL() { return getToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public TerminalNode ERRORS_SYMBOL() { return getToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public TerminalNode PROFILES_SYMBOL() { return getToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public TerminalNode PROFILE_SYMBOL() { return getToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public TerminalNode PROCESSLIST_SYMBOL() { return getToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode CONTRIBUTORS_SYMBOL() { return getToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode GRANTS_SYMBOL() { return getToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public TerminalNode INNODB_SYMBOL() { return getToken(MySQLParser.INNODB_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public NonBlockingContext nonBlocking() {
			return getRuleContext(NonBlockingContext.class,0);
		}
		public TerminalNode BINLOG_SYMBOL() { return getToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode RELAYLOG_SYMBOL() { return getToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public TerminalNode INDEXES_SYMBOL() { return getToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public TerminalNode KEYS_SYMBOL() { return getToken(MySQLParser.KEYS_SYMBOL, 0); }
		public TerminalNode VARIABLES_SYMBOL() { return getToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public EventRefContext eventRef() {
			return getRuleContext(EventRefContext.class,0);
		}
		public TriggerRefContext triggerRef() {
			return getRuleContext(TriggerRefContext.class,0);
		}
		public ViewRefContext viewRef() {
			return getRuleContext(ViewRefContext.class,0);
		}
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowCommandTypeContext showCommandType() {
			return getRuleContext(ShowCommandTypeContext.class,0);
		}
		public InDbContext inDb() {
			return getRuleContext(InDbContext.class,0);
		}
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public List<ProfileTypeContext> profileType() {
			return getRuleContexts(ProfileTypeContext.class);
		}
		public ProfileTypeContext profileType(int i) {
			return getRuleContext(ProfileTypeContext.class,i);
		}
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public OptionTypeContext optionType() {
			return getRuleContext(OptionTypeContext.class,0);
		}
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterShowStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitShowStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitShowStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_showStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4554);
			match(SHOW_SYMBOL);
			setState(4781);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
			case 1:
				{
				setState(4555);
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				setState(4556);
				((ShowStatementContext)_localctx).value = match(AUTHORS_SYMBOL);
				}
				break;
			case 2:
				{
				setState(4557);
				((ShowStatementContext)_localctx).value = match(DATABASES_SYMBOL);
				setState(4559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4558);
					likeOrWhere();
					}
				}

				}
				break;
			case 3:
				{
				setState(4562);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
				case 1:
					{
					setState(4561);
					showCommandType();
					}
					break;
				}
				setState(4564);
				((ShowStatementContext)_localctx).value = match(TABLES_SYMBOL);
				setState(4566);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4565);
					inDb();
					}
				}

				setState(4569);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4568);
					likeOrWhere();
					}
				}

				}
				break;
			case 4:
				{
				setState(4572);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					setState(4571);
					match(FULL_SYMBOL);
					}
				}

				setState(4574);
				((ShowStatementContext)_localctx).value = match(TRIGGERS_SYMBOL);
				setState(4576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4575);
					inDb();
					}
				}

				setState(4579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4578);
					likeOrWhere();
					}
				}

				}
				break;
			case 5:
				{
				setState(4581);
				((ShowStatementContext)_localctx).value = match(EVENTS_SYMBOL);
				setState(4583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4582);
					inDb();
					}
				}

				setState(4586);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4585);
					likeOrWhere();
					}
				}

				}
				break;
			case 6:
				{
				setState(4588);
				((ShowStatementContext)_localctx).value = match(TABLE_SYMBOL);
				setState(4589);
				match(STATUS_SYMBOL);
				setState(4591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4590);
					inDb();
					}
				}

				setState(4594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4593);
					likeOrWhere();
					}
				}

				}
				break;
			case 7:
				{
				setState(4596);
				((ShowStatementContext)_localctx).value = match(OPEN_SYMBOL);
				setState(4597);
				match(TABLES_SYMBOL);
				setState(4599);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4598);
					inDb();
					}
				}

				setState(4602);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4601);
					likeOrWhere();
					}
				}

				}
				break;
			case 8:
				{
				setState(4604);
				if (!((serverVersion >= 50105) && (serverVersion < 50500))) throw new FailedPredicateException(this, "(serverVersion >= 50105) && (serverVersion < 50500)");
				setState(4605);
				((ShowStatementContext)_localctx).value = match(PLUGIN_SYMBOL);
				}
				break;
			case 9:
				{
				setState(4606);
				if (!(serverVersion >= 50500)) throw new FailedPredicateException(this, "serverVersion >= 50500");
				setState(4607);
				((ShowStatementContext)_localctx).value = match(PLUGINS_SYMBOL);
				}
				break;
			case 10:
				{
				setState(4608);
				((ShowStatementContext)_localctx).value = match(ENGINE_SYMBOL);
				setState(4611);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
				case 1:
					{
					setState(4609);
					engineRef();
					}
					break;
				case 2:
					{
					setState(4610);
					match(ALL_SYMBOL);
					}
					break;
				}
				setState(4613);
				_la = _input.LA(1);
				if ( !(_la==LOGS_SYMBOL || _la==MUTEX_SYMBOL || _la==STATUS_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				{
				setState(4615);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
				case 1:
					{
					setState(4614);
					showCommandType();
					}
					break;
				}
				setState(4617);
				((ShowStatementContext)_localctx).value = match(COLUMNS_SYMBOL);
				setState(4618);
				_la = _input.LA(1);
				if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4619);
				tableRef();
				setState(4621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4620);
					inDb();
					}
				}

				setState(4624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4623);
					likeOrWhere();
					}
				}

				}
				break;
			case 12:
				{
				setState(4626);
				_la = _input.LA(1);
				if ( !(_la==MASTER_SYMBOL || _la==BINARY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4627);
				((ShowStatementContext)_localctx).value = match(LOGS_SYMBOL);
				}
				break;
			case 13:
				{
				setState(4628);
				((ShowStatementContext)_localctx).value = match(SLAVE_SYMBOL);
				setState(4635);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case HOSTS_SYMBOL:
					{
					setState(4629);
					match(HOSTS_SYMBOL);
					}
					break;
				case STATUS_SYMBOL:
					{
					setState(4630);
					match(STATUS_SYMBOL);
					setState(4631);
					nonBlocking();
					setState(4633);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
					case 1:
						{
						setState(4632);
						channel();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 14:
				{
				setState(4637);
				((ShowStatementContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG_SYMBOL || _la==RELAYLOG_SYMBOL) ) {
					((ShowStatementContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4638);
				match(EVENTS_SYMBOL);
				setState(4641);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
				case 1:
					{
					setState(4639);
					match(IN_SYMBOL);
					setState(4640);
					textString();
					}
					break;
				}
				setState(4645);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
				case 1:
					{
					setState(4643);
					match(FROM_SYMBOL);
					setState(4644);
					ulonglong_number();
					}
					break;
				}
				setState(4648);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
				case 1:
					{
					setState(4647);
					limitClause();
					}
					break;
				}
				setState(4651);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
				case 1:
					{
					setState(4650);
					channel();
					}
					break;
				}
				}
				break;
			case 15:
				{
				setState(4655);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
				case 1:
					{
					setState(4653);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(4654);
					match(EXTENDED_SYMBOL);
					}
					break;
				}
				setState(4657);
				((ShowStatementContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEXES_SYMBOL || _la==INDEX_SYMBOL || _la==KEYS_SYMBOL) ) {
					((ShowStatementContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4658);
				fromOrIn();
				setState(4659);
				tableRef();
				setState(4661);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4660);
					inDb();
					}
				}

				setState(4664);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE_SYMBOL) {
					{
					setState(4663);
					whereClause();
					}
				}

				}
				break;
			case 16:
				{
				setState(4667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					setState(4666);
					match(STORAGE_SYMBOL);
					}
				}

				setState(4669);
				((ShowStatementContext)_localctx).value = match(ENGINES_SYMBOL);
				}
				break;
			case 17:
				{
				setState(4670);
				match(COUNT_SYMBOL);
				setState(4671);
				match(OPEN_PAR_SYMBOL);
				setState(4672);
				match(MULT_OPERATOR);
				setState(4673);
				match(CLOSE_PAR_SYMBOL);
				setState(4674);
				((ShowStatementContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS_SYMBOL || _la==WARNINGS_SYMBOL) ) {
					((ShowStatementContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 18:
				{
				setState(4675);
				((ShowStatementContext)_localctx).value = match(WARNINGS_SYMBOL);
				setState(4677);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					setState(4676);
					limitClause();
					}
				}

				}
				break;
			case 19:
				{
				setState(4679);
				((ShowStatementContext)_localctx).value = match(ERRORS_SYMBOL);
				setState(4681);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					setState(4680);
					limitClause();
					}
				}

				}
				break;
			case 20:
				{
				setState(4683);
				((ShowStatementContext)_localctx).value = match(PROFILES_SYMBOL);
				}
				break;
			case 21:
				{
				setState(4684);
				((ShowStatementContext)_localctx).value = match(PROFILE_SYMBOL);
				setState(4693);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (BLOCK_SYMBOL - 73)) | (1L << (CONTEXT_SYMBOL - 73)) | (1L << (CPU_SYMBOL - 73)))) != 0) || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==PAGE_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL || _la==ALL_SYMBOL) {
					{
					setState(4685);
					profileType();
					setState(4690);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_SYMBOL) {
						{
						{
						setState(4686);
						match(COMMA_SYMBOL);
						setState(4687);
						profileType();
						}
						}
						setState(4692);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(4698);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(4695);
					match(FOR_SYMBOL);
					setState(4696);
					match(QUERY_SYMBOL);
					setState(4697);
					match(INT_NUMBER);
					}
				}

				setState(4701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					setState(4700);
					limitClause();
					}
				}

				}
				break;
			case 22:
				{
				setState(4704);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) {
					{
					setState(4703);
					optionType();
					}
				}

				setState(4706);
				((ShowStatementContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==STATUS_SYMBOL || _la==VARIABLES_SYMBOL) ) {
					((ShowStatementContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4708);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4707);
					likeOrWhere();
					}
				}

				}
				break;
			case 23:
				{
				setState(4711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					setState(4710);
					match(FULL_SYMBOL);
					}
				}

				setState(4713);
				((ShowStatementContext)_localctx).value = match(PROCESSLIST_SYMBOL);
				}
				break;
			case 24:
				{
				setState(4714);
				charset();
				setState(4716);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4715);
					likeOrWhere();
					}
				}

				}
				break;
			case 25:
				{
				setState(4718);
				((ShowStatementContext)_localctx).value = match(COLLATION_SYMBOL);
				setState(4720);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4719);
					likeOrWhere();
					}
				}

				}
				break;
			case 26:
				{
				setState(4722);
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				setState(4723);
				((ShowStatementContext)_localctx).value = match(CONTRIBUTORS_SYMBOL);
				}
				break;
			case 27:
				{
				setState(4724);
				((ShowStatementContext)_localctx).value = match(PRIVILEGES_SYMBOL);
				}
				break;
			case 28:
				{
				setState(4725);
				((ShowStatementContext)_localctx).value = match(GRANTS_SYMBOL);
				setState(4728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(4726);
					match(FOR_SYMBOL);
					setState(4727);
					user();
					}
				}

				}
				break;
			case 29:
				{
				setState(4730);
				if (!(serverVersion >= 50500)) throw new FailedPredicateException(this, "serverVersion >= 50500");
				setState(4731);
				((ShowStatementContext)_localctx).value = match(GRANTS_SYMBOL);
				setState(4732);
				match(FOR_SYMBOL);
				setState(4733);
				user();
				setState(4734);
				match(USING_SYMBOL);
				setState(4735);
				userList();
				}
				break;
			case 30:
				{
				setState(4737);
				((ShowStatementContext)_localctx).value = match(MASTER_SYMBOL);
				setState(4738);
				match(STATUS_SYMBOL);
				}
				break;
			case 31:
				{
				setState(4739);
				((ShowStatementContext)_localctx).value = match(CREATE_SYMBOL);
				setState(4760);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
				case 1:
					{
					setState(4740);
					((ShowStatementContext)_localctx).object = match(DATABASE_SYMBOL);
					setState(4742);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
					case 1:
						{
						setState(4741);
						ifNotExists();
						}
						break;
					}
					setState(4744);
					schemaRef();
					}
					break;
				case 2:
					{
					setState(4745);
					((ShowStatementContext)_localctx).object = match(EVENT_SYMBOL);
					setState(4746);
					eventRef();
					}
					break;
				case 3:
					{
					setState(4747);
					((ShowStatementContext)_localctx).object = match(FUNCTION_SYMBOL);
					setState(4748);
					functionRef();
					}
					break;
				case 4:
					{
					setState(4749);
					((ShowStatementContext)_localctx).object = match(PROCEDURE_SYMBOL);
					setState(4750);
					procedureRef();
					}
					break;
				case 5:
					{
					setState(4751);
					((ShowStatementContext)_localctx).object = match(TABLE_SYMBOL);
					setState(4752);
					tableRef();
					}
					break;
				case 6:
					{
					setState(4753);
					((ShowStatementContext)_localctx).object = match(TRIGGER_SYMBOL);
					setState(4754);
					triggerRef();
					}
					break;
				case 7:
					{
					setState(4755);
					((ShowStatementContext)_localctx).object = match(VIEW_SYMBOL);
					setState(4756);
					viewRef();
					}
					break;
				case 8:
					{
					setState(4757);
					if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
					setState(4758);
					((ShowStatementContext)_localctx).object = match(USER_SYMBOL);
					setState(4759);
					user();
					}
					break;
				}
				}
				break;
			case 32:
				{
				setState(4762);
				((ShowStatementContext)_localctx).value = match(PROCEDURE_SYMBOL);
				setState(4763);
				match(STATUS_SYMBOL);
				setState(4765);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4764);
					likeOrWhere();
					}
				}

				}
				break;
			case 33:
				{
				setState(4767);
				((ShowStatementContext)_localctx).value = match(FUNCTION_SYMBOL);
				setState(4768);
				match(STATUS_SYMBOL);
				setState(4770);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4769);
					likeOrWhere();
					}
				}

				}
				break;
			case 34:
				{
				setState(4772);
				((ShowStatementContext)_localctx).value = match(PROCEDURE_SYMBOL);
				setState(4773);
				match(CODE_SYMBOL);
				setState(4774);
				procedureRef();
				}
				break;
			case 35:
				{
				setState(4775);
				((ShowStatementContext)_localctx).value = match(FUNCTION_SYMBOL);
				setState(4776);
				match(CODE_SYMBOL);
				setState(4777);
				functionRef();
				}
				break;
			case 36:
				{
				setState(4778);
				if (!(serverVersion < 50500)) throw new FailedPredicateException(this, "serverVersion < 50500");
				setState(4779);
				((ShowStatementContext)_localctx).value = match(INNODB_SYMBOL);
				setState(4780);
				match(STATUS_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommandTypeContext extends ParserRuleContext {
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ShowCommandTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommandType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterShowCommandType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitShowCommandType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitShowCommandType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCommandTypeContext showCommandType() throws RecognitionException {
		ShowCommandTypeContext _localctx = new ShowCommandTypeContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_showCommandType);
		int _la;
		try {
			setState(4789);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4783);
				match(FULL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4784);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4785);
				match(EXTENDED_SYMBOL);
				setState(4787);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					setState(4786);
					match(FULL_SYMBOL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonBlockingContext extends ParserRuleContext {
		public TerminalNode NONBLOCKING_SYMBOL() { return getToken(MySQLParser.NONBLOCKING_SYMBOL, 0); }
		public NonBlockingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonBlocking; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNonBlocking(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNonBlocking(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNonBlocking(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonBlockingContext nonBlocking() throws RecognitionException {
		NonBlockingContext _localctx = new NonBlockingContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_nonBlocking);
		try {
			setState(4796);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4791);
				if (!(serverVersion >= 50700 && serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion >= 50700 && serverVersion < 50706");
				setState(4793);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
				case 1:
					{
					setState(4792);
					match(NONBLOCKING_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromOrInContext extends ParserRuleContext {
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public FromOrInContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromOrIn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFromOrIn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFromOrIn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFromOrIn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromOrInContext fromOrIn() throws RecognitionException {
		FromOrInContext _localctx = new FromOrInContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_fromOrIn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4798);
			_la = _input.LA(1);
			if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InDbContext extends ParserRuleContext {
		public FromOrInContext fromOrIn() {
			return getRuleContext(FromOrInContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public InDbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inDb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInDb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInDb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInDb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InDbContext inDb() throws RecognitionException {
		InDbContext _localctx = new InDbContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_inDb);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4800);
			fromOrIn();
			setState(4801);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProfileTypeContext extends ParserRuleContext {
		public TerminalNode BLOCK_SYMBOL() { return getToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public TerminalNode IO_SYMBOL() { return getToken(MySQLParser.IO_SYMBOL, 0); }
		public TerminalNode CONTEXT_SYMBOL() { return getToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public TerminalNode SWITCHES_SYMBOL() { return getToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public TerminalNode PAGE_SYMBOL() { return getToken(MySQLParser.PAGE_SYMBOL, 0); }
		public TerminalNode FAULTS_SYMBOL() { return getToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode CPU_SYMBOL() { return getToken(MySQLParser.CPU_SYMBOL, 0); }
		public TerminalNode IPC_SYMBOL() { return getToken(MySQLParser.IPC_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode SOURCE_SYMBOL() { return getToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public TerminalNode SWAPS_SYMBOL() { return getToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public ProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profileType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterProfileType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitProfileType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitProfileType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProfileTypeContext profileType() throws RecognitionException {
		ProfileTypeContext _localctx = new ProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_profileType);
		int _la;
		try {
			setState(4810);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BLOCK_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4803);
				match(BLOCK_SYMBOL);
				setState(4804);
				match(IO_SYMBOL);
				}
				break;
			case CONTEXT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4805);
				match(CONTEXT_SYMBOL);
				setState(4806);
				match(SWITCHES_SYMBOL);
				}
				break;
			case PAGE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4807);
				match(PAGE_SYMBOL);
				setState(4808);
				match(FAULTS_SYMBOL);
				}
				break;
			case CPU_SYMBOL:
			case IPC_SYMBOL:
			case MEMORY_SYMBOL:
			case SOURCE_SYMBOL:
			case SWAPS_SYMBOL:
			case ALL_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4809);
				_la = _input.LA(1);
				if ( !(_la==CPU_SYMBOL || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL || _la==ALL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OtherAdministrativeStatementContext extends ParserRuleContext {
		public Token type;
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode BINLOG_SYMBOL() { return getToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public KeyCacheListOrPartsContext keyCacheListOrParts() {
			return getRuleContext(KeyCacheListOrPartsContext.class,0);
		}
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode FLUSH_SYMBOL() { return getToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public FlushTablesContext flushTables() {
			return getRuleContext(FlushTablesContext.class,0);
		}
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public NoWriteToBinLogContext noWriteToBinLog() {
			return getRuleContext(NoWriteToBinLogContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode KILL_SYMBOL() { return getToken(MySQLParser.KILL_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public PreloadTailContext preloadTail() {
			return getRuleContext(PreloadTailContext.class,0);
		}
		public TerminalNode LOAD_SYMBOL() { return getToken(MySQLParser.LOAD_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public OtherAdministrativeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_otherAdministrativeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOtherAdministrativeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOtherAdministrativeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOtherAdministrativeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OtherAdministrativeStatementContext otherAdministrativeStatement() throws RecognitionException {
		OtherAdministrativeStatementContext _localctx = new OtherAdministrativeStatementContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_otherAdministrativeStatement);
		int _la;
		try {
			setState(4849);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,610,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4812);
				((OtherAdministrativeStatementContext)_localctx).type = match(BINLOG_SYMBOL);
				setState(4813);
				textLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4814);
				((OtherAdministrativeStatementContext)_localctx).type = match(CACHE_SYMBOL);
				setState(4815);
				match(INDEX_SYMBOL);
				setState(4816);
				keyCacheListOrParts();
				setState(4817);
				match(IN_SYMBOL);
				setState(4820);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
				case 1:
					{
					setState(4818);
					identifier();
					}
					break;
				case 2:
					{
					setState(4819);
					match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4822);
				((OtherAdministrativeStatementContext)_localctx).type = match(FLUSH_SYMBOL);
				setState(4824);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
				case 1:
					{
					setState(4823);
					noWriteToBinLog();
					}
					break;
				}
				setState(4835);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
				case 1:
					{
					setState(4826);
					flushTables();
					}
					break;
				case 2:
					{
					setState(4827);
					flushOption();
					setState(4832);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_SYMBOL) {
						{
						{
						setState(4828);
						match(COMMA_SYMBOL);
						setState(4829);
						flushOption();
						}
						}
						setState(4834);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4837);
				((OtherAdministrativeStatementContext)_localctx).type = match(KILL_SYMBOL);
				setState(4839);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
				case 1:
					{
					setState(4838);
					_la = _input.LA(1);
					if ( !(_la==CONNECTION_SYMBOL || _la==QUERY_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4841);
				expr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4842);
				((OtherAdministrativeStatementContext)_localctx).type = match(LOAD_SYMBOL);
				setState(4843);
				match(INDEX_SYMBOL);
				setState(4844);
				match(INTO_SYMBOL);
				setState(4845);
				match(CACHE_SYMBOL);
				setState(4846);
				preloadTail();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4847);
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				setState(4848);
				((OtherAdministrativeStatementContext)_localctx).type = match(SHUTDOWN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyCacheListOrPartsContext extends ParserRuleContext {
		public KeyCacheListContext keyCacheList() {
			return getRuleContext(KeyCacheListContext.class,0);
		}
		public AssignToKeycachePartitionContext assignToKeycachePartition() {
			return getRuleContext(AssignToKeycachePartitionContext.class,0);
		}
		public KeyCacheListOrPartsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyCacheListOrParts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyCacheListOrParts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyCacheListOrParts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyCacheListOrParts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyCacheListOrPartsContext keyCacheListOrParts() throws RecognitionException {
		KeyCacheListOrPartsContext _localctx = new KeyCacheListOrPartsContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_keyCacheListOrParts);
		try {
			setState(4853);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4851);
				keyCacheList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4852);
				assignToKeycachePartition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyCacheListContext extends ParserRuleContext {
		public List<AssignToKeycacheContext> assignToKeycache() {
			return getRuleContexts(AssignToKeycacheContext.class);
		}
		public AssignToKeycacheContext assignToKeycache(int i) {
			return getRuleContext(AssignToKeycacheContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyCacheListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyCacheList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyCacheList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyCacheList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyCacheList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyCacheListContext keyCacheList() throws RecognitionException {
		KeyCacheListContext _localctx = new KeyCacheListContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_keyCacheList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4855);
			assignToKeycache();
			setState(4860);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4856);
				match(COMMA_SYMBOL);
				setState(4857);
				assignToKeycache();
				}
				}
				setState(4862);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignToKeycacheContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public AssignToKeycacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignToKeycache; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAssignToKeycache(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAssignToKeycache(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAssignToKeycache(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignToKeycacheContext assignToKeycache() throws RecognitionException {
		AssignToKeycacheContext _localctx = new AssignToKeycacheContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_assignToKeycache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4863);
			tableRef();
			setState(4865);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				setState(4864);
				cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignToKeycachePartitionContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return getRuleContext(AllOrPartitionNameListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public AssignToKeycachePartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignToKeycachePartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAssignToKeycachePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAssignToKeycachePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAssignToKeycachePartition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignToKeycachePartitionContext assignToKeycachePartition() throws RecognitionException {
		AssignToKeycachePartitionContext _localctx = new AssignToKeycachePartitionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_assignToKeycachePartition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4867);
			tableRef();
			setState(4868);
			match(PARTITION_SYMBOL);
			setState(4869);
			match(OPEN_PAR_SYMBOL);
			setState(4870);
			allOrPartitionNameList();
			setState(4871);
			match(CLOSE_PAR_SYMBOL);
			setState(4873);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				setState(4872);
				cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheKeyListContext extends ParserRuleContext {
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public KeyUsageListContext keyUsageList() {
			return getRuleContext(KeyUsageListContext.class,0);
		}
		public CacheKeyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheKeyList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCacheKeyList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCacheKeyList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCacheKeyList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CacheKeyListContext cacheKeyList() throws RecognitionException {
		CacheKeyListContext _localctx = new CacheKeyListContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_cacheKeyList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4875);
			keyOrIndex();
			setState(4876);
			match(OPEN_PAR_SYMBOL);
			setState(4878);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
			case 1:
				{
				setState(4877);
				keyUsageList();
				}
				break;
			}
			setState(4880);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyUsageElementContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public KeyUsageElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyUsageElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyUsageElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyUsageElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyUsageElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyUsageElementContext keyUsageElement() throws RecognitionException {
		KeyUsageElementContext _localctx = new KeyUsageElementContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_keyUsageElement);
		try {
			setState(4884);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,616,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4882);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4883);
				match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyUsageListContext extends ParserRuleContext {
		public List<KeyUsageElementContext> keyUsageElement() {
			return getRuleContexts(KeyUsageElementContext.class);
		}
		public KeyUsageElementContext keyUsageElement(int i) {
			return getRuleContext(KeyUsageElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyUsageListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyUsageList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyUsageList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyUsageList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyUsageList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyUsageListContext keyUsageList() throws RecognitionException {
		KeyUsageListContext _localctx = new KeyUsageListContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_keyUsageList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4886);
			keyUsageElement();
			setState(4891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4887);
				match(COMMA_SYMBOL);
				setState(4888);
				keyUsageElement();
				}
				}
				setState(4893);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOptionContext extends ParserRuleContext {
		public Token option;
		public TerminalNode DES_KEY_FILE_SYMBOL() { return getToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode USER_RESOURCES_SYMBOL() { return getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public LogTypeContext logType() {
			return getRuleContext(LogTypeContext.class,0);
		}
		public TerminalNode RELAY_SYMBOL() { return getToken(MySQLParser.RELAY_SYMBOL, 0); }
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode OPTIMIZER_COSTS_SYMBOL() { return getToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0); }
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_flushOption);
		int _la;
		try {
			setState(4909);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,620,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4894);
				((FlushOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DES_KEY_FILE_SYMBOL || _la==HOSTS_SYMBOL || _la==PRIVILEGES_SYMBOL || _la==STATUS_SYMBOL || _la==USER_RESOURCES_SYMBOL) ) {
					((FlushOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4896);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENGINE_SYMBOL - 128)) | (1L << (ERROR_SYMBOL - 128)) | (1L << (GENERAL_SYMBOL - 128)))) != 0) || _la==SLOW_SYMBOL || _la==BINARY_SYMBOL) {
					{
					setState(4895);
					logType();
					}
				}

				setState(4898);
				((FlushOptionContext)_localctx).option = match(LOGS_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4899);
				((FlushOptionContext)_localctx).option = match(RELAY_SYMBOL);
				setState(4900);
				match(LOGS_SYMBOL);
				setState(4902);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,619,_ctx) ) {
				case 1:
					{
					setState(4901);
					channel();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4904);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(4905);
				((FlushOptionContext)_localctx).option = match(QUERY_SYMBOL);
				setState(4906);
				match(CACHE_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4907);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4908);
				((FlushOptionContext)_localctx).option = match(OPTIMIZER_COSTS_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogTypeContext extends ParserRuleContext {
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode GENERAL_SYMBOL() { return getToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public TerminalNode SLOW_SYMBOL() { return getToken(MySQLParser.SLOW_SYMBOL, 0); }
		public LogTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLogType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLogType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLogType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogTypeContext logType() throws RecognitionException {
		LogTypeContext _localctx = new LogTypeContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_logType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4911);
			_la = _input.LA(1);
			if ( !(((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENGINE_SYMBOL - 128)) | (1L << (ERROR_SYMBOL - 128)) | (1L << (GENERAL_SYMBOL - 128)))) != 0) || _la==SLOW_SYMBOL || _la==BINARY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTablesContext extends ParserRuleContext {
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public FlushTablesOptionsContext flushTablesOptions() {
			return getRuleContext(FlushTablesOptionsContext.class,0);
		}
		public FlushTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFlushTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFlushTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFlushTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushTablesContext flushTables() throws RecognitionException {
		FlushTablesContext _localctx = new FlushTablesContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_flushTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4913);
			_la = _input.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4921);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
			case 1:
				{
				setState(4914);
				match(WITH_SYMBOL);
				setState(4915);
				match(READ_SYMBOL);
				setState(4916);
				match(LOCK_SYMBOL);
				}
				break;
			case 2:
				{
				setState(4917);
				identifierList();
				setState(4919);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
				case 1:
					{
					setState(4918);
					flushTablesOptions();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTablesOptionsContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode EXPORT_SYMBOL() { return getToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public FlushTablesOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTablesOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFlushTablesOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFlushTablesOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFlushTablesOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushTablesOptionsContext flushTablesOptions() throws RecognitionException {
		FlushTablesOptionsContext _localctx = new FlushTablesOptionsContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_flushTablesOptions);
		try {
			setState(4929);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4923);
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				setState(4924);
				match(FOR_SYMBOL);
				setState(4925);
				match(EXPORT_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4926);
				match(WITH_SYMBOL);
				setState(4927);
				match(READ_SYMBOL);
				setState(4928);
				match(LOCK_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreloadTailContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public AdminPartitionContext adminPartition() {
			return getRuleContext(AdminPartitionContext.class,0);
		}
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public PreloadListContext preloadList() {
			return getRuleContext(PreloadListContext.class,0);
		}
		public PreloadTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preloadTail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPreloadTail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPreloadTail(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPreloadTail(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreloadTailContext preloadTail() throws RecognitionException {
		PreloadTailContext _localctx = new PreloadTailContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_preloadTail);
		int _la;
		try {
			setState(4941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,626,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4931);
				tableRef();
				setState(4932);
				adminPartition();
				setState(4934);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					setState(4933);
					cacheKeyList();
					}
				}

				setState(4938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL) {
					{
					setState(4936);
					match(IGNORE_SYMBOL);
					setState(4937);
					match(LEAVES_SYMBOL);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4940);
				preloadList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreloadListContext extends ParserRuleContext {
		public List<PreloadKeysContext> preloadKeys() {
			return getRuleContexts(PreloadKeysContext.class);
		}
		public PreloadKeysContext preloadKeys(int i) {
			return getRuleContext(PreloadKeysContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PreloadListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preloadList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPreloadList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPreloadList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPreloadList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreloadListContext preloadList() throws RecognitionException {
		PreloadListContext _localctx = new PreloadListContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_preloadList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4943);
			preloadKeys();
			setState(4948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4944);
				match(COMMA_SYMBOL);
				setState(4945);
				preloadKeys();
				}
				}
				setState(4950);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreloadKeysContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public PreloadKeysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preloadKeys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPreloadKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPreloadKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPreloadKeys(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreloadKeysContext preloadKeys() throws RecognitionException {
		PreloadKeysContext _localctx = new PreloadKeysContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_preloadKeys);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4951);
			tableRef();
			setState(4953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				setState(4952);
				cacheKeyList();
				}
			}

			setState(4957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE_SYMBOL) {
				{
				setState(4955);
				match(IGNORE_SYMBOL);
				setState(4956);
				match(LEAVES_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdminPartitionContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return getRuleContext(AllOrPartitionNameListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public AdminPartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_adminPartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAdminPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAdminPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAdminPartition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdminPartitionContext adminPartition() throws RecognitionException {
		AdminPartitionContext _localctx = new AdminPartitionContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_adminPartition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4959);
			if (!(serverVersion >= 50500)) throw new FailedPredicateException(this, "serverVersion >= 50500");
			{
			setState(4960);
			match(PARTITION_SYMBOL);
			setState(4961);
			match(OPEN_PAR_SYMBOL);
			setState(4962);
			allOrPartitionNameList();
			setState(4963);
			match(CLOSE_PAR_SYMBOL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupManagementContext extends ParserRuleContext {
		public CreateResourceGroupContext createResourceGroup() {
			return getRuleContext(CreateResourceGroupContext.class,0);
		}
		public AlterResourceGroupContext alterResourceGroup() {
			return getRuleContext(AlterResourceGroupContext.class,0);
		}
		public SetResourceGroupContext setResourceGroup() {
			return getRuleContext(SetResourceGroupContext.class,0);
		}
		public DropResourceGroupContext dropResourceGroup() {
			return getRuleContext(DropResourceGroupContext.class,0);
		}
		public ResourceGroupManagementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupManagement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterResourceGroupManagement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitResourceGroupManagement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitResourceGroupManagement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceGroupManagementContext resourceGroupManagement() throws RecognitionException {
		ResourceGroupManagementContext _localctx = new ResourceGroupManagementContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_resourceGroupManagement);
		try {
			setState(4969);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4965);
				createResourceGroup();
				}
				break;
			case ALTER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4966);
				alterResourceGroup();
				}
				break;
			case SET_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4967);
				setResourceGroup();
				}
				break;
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4968);
				dropResourceGroup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateResourceGroupContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return getRuleContext(ResourceGroupVcpuListContext.class,0);
		}
		public ResourceGroupPriorityContext resourceGroupPriority() {
			return getRuleContext(ResourceGroupPriorityContext.class,0);
		}
		public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return getRuleContext(ResourceGroupEnableDisableContext.class,0);
		}
		public CreateResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createResourceGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateResourceGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateResourceGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateResourceGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateResourceGroupContext createResourceGroup() throws RecognitionException {
		CreateResourceGroupContext _localctx = new CreateResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_createResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4971);
			match(CREATE_SYMBOL);
			setState(4972);
			match(RESOURCE_SYMBOL);
			setState(4973);
			match(GROUP_SYMBOL);
			setState(4974);
			identifier();
			setState(4975);
			match(TYPE_SYMBOL);
			setState(4977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				setState(4976);
				equal();
				}
			}

			setState(4979);
			_la = _input.LA(1);
			if ( !(_la==USER_SYMBOL || _la==SYSTEM_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				setState(4980);
				resourceGroupVcpuList();
				}
			}

			setState(4984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				setState(4983);
				resourceGroupPriority();
				}
			}

			setState(4987);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				setState(4986);
				resourceGroupEnableDisable();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupVcpuListContext extends ParserRuleContext {
		public TerminalNode VCPU_SYMBOL() { return getToken(MySQLParser.VCPU_SYMBOL, 0); }
		public List<VcpuNumOrRangeContext> vcpuNumOrRange() {
			return getRuleContexts(VcpuNumOrRangeContext.class);
		}
		public VcpuNumOrRangeContext vcpuNumOrRange(int i) {
			return getRuleContext(VcpuNumOrRangeContext.class,i);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ResourceGroupVcpuListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupVcpuList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterResourceGroupVcpuList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitResourceGroupVcpuList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitResourceGroupVcpuList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceGroupVcpuListContext resourceGroupVcpuList() throws RecognitionException {
		ResourceGroupVcpuListContext _localctx = new ResourceGroupVcpuListContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_resourceGroupVcpuList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4989);
			match(VCPU_SYMBOL);
			setState(4991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				setState(4990);
				equal();
				}
			}

			setState(4993);
			vcpuNumOrRange();
			setState(5000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INT_NUMBER || _la==COMMA_SYMBOL) {
				{
				{
				setState(4995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(4994);
					match(COMMA_SYMBOL);
					}
				}

				setState(4997);
				vcpuNumOrRange();
				}
				}
				setState(5002);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VcpuNumOrRangeContext extends ParserRuleContext {
		public List<TerminalNode> INT_NUMBER() { return getTokens(MySQLParser.INT_NUMBER); }
		public TerminalNode INT_NUMBER(int i) {
			return getToken(MySQLParser.INT_NUMBER, i);
		}
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public VcpuNumOrRangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vcpuNumOrRange; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterVcpuNumOrRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitVcpuNumOrRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitVcpuNumOrRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VcpuNumOrRangeContext vcpuNumOrRange() throws RecognitionException {
		VcpuNumOrRangeContext _localctx = new VcpuNumOrRangeContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_vcpuNumOrRange);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5003);
			match(INT_NUMBER);
			setState(5006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS_OPERATOR) {
				{
				setState(5004);
				match(MINUS_OPERATOR);
				setState(5005);
				match(INT_NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupPriorityContext extends ParserRuleContext {
		public TerminalNode THREAD_PRIORITY_SYMBOL() { return getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public ResourceGroupPriorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupPriority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterResourceGroupPriority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitResourceGroupPriority(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitResourceGroupPriority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceGroupPriorityContext resourceGroupPriority() throws RecognitionException {
		ResourceGroupPriorityContext _localctx = new ResourceGroupPriorityContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_resourceGroupPriority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5008);
			match(THREAD_PRIORITY_SYMBOL);
			setState(5010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				setState(5009);
				equal();
				}
			}

			setState(5012);
			match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupEnableDisableContext extends ParserRuleContext {
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ResourceGroupEnableDisableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupEnableDisable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterResourceGroupEnableDisable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitResourceGroupEnableDisable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitResourceGroupEnableDisable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceGroupEnableDisableContext resourceGroupEnableDisable() throws RecognitionException {
		ResourceGroupEnableDisableContext _localctx = new ResourceGroupEnableDisableContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_resourceGroupEnableDisable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5014);
			_la = _input.LA(1);
			if ( !(_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterResourceGroupContext extends ParserRuleContext {
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public ResourceGroupRefContext resourceGroupRef() {
			return getRuleContext(ResourceGroupRefContext.class,0);
		}
		public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return getRuleContext(ResourceGroupVcpuListContext.class,0);
		}
		public ResourceGroupPriorityContext resourceGroupPriority() {
			return getRuleContext(ResourceGroupPriorityContext.class,0);
		}
		public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return getRuleContext(ResourceGroupEnableDisableContext.class,0);
		}
		public TerminalNode FORCE_SYMBOL() { return getToken(MySQLParser.FORCE_SYMBOL, 0); }
		public AlterResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterResourceGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterResourceGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterResourceGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterResourceGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterResourceGroupContext alterResourceGroup() throws RecognitionException {
		AlterResourceGroupContext _localctx = new AlterResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_alterResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5016);
			match(ALTER_SYMBOL);
			setState(5017);
			match(RESOURCE_SYMBOL);
			setState(5018);
			match(GROUP_SYMBOL);
			setState(5019);
			resourceGroupRef();
			setState(5021);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				setState(5020);
				resourceGroupVcpuList();
				}
			}

			setState(5024);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				setState(5023);
				resourceGroupPriority();
				}
			}

			setState(5027);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				setState(5026);
				resourceGroupEnableDisable();
				}
			}

			setState(5030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				setState(5029);
				match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetResourceGroupContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public ThreadIdListContext threadIdList() {
			return getRuleContext(ThreadIdListContext.class,0);
		}
		public SetResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResourceGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSetResourceGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSetResourceGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSetResourceGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetResourceGroupContext setResourceGroup() throws RecognitionException {
		SetResourceGroupContext _localctx = new SetResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_setResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5032);
			match(SET_SYMBOL);
			setState(5033);
			match(RESOURCE_SYMBOL);
			setState(5034);
			match(GROUP_SYMBOL);
			setState(5035);
			identifier();
			setState(5038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				setState(5036);
				match(FOR_SYMBOL);
				setState(5037);
				threadIdList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadIdListContext extends ParserRuleContext {
		public List<Real_ulong_numberContext> real_ulong_number() {
			return getRuleContexts(Real_ulong_numberContext.class);
		}
		public Real_ulong_numberContext real_ulong_number(int i) {
			return getRuleContext(Real_ulong_numberContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ThreadIdListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadIdList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterThreadIdList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitThreadIdList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitThreadIdList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThreadIdListContext threadIdList() throws RecognitionException {
		ThreadIdListContext _localctx = new ThreadIdListContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_threadIdList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5040);
			real_ulong_number();
			setState(5047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (COMMA_SYMBOL - 380)) | (1L << (HEX_NUMBER - 380)))) != 0)) {
				{
				{
				setState(5042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(5041);
					match(COMMA_SYMBOL);
					}
				}

				setState(5044);
				real_ulong_number();
				}
				}
				setState(5049);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropResourceGroupContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public ResourceGroupRefContext resourceGroupRef() {
			return getRuleContext(ResourceGroupRefContext.class,0);
		}
		public TerminalNode FORCE_SYMBOL() { return getToken(MySQLParser.FORCE_SYMBOL, 0); }
		public DropResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropResourceGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropResourceGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropResourceGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropResourceGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropResourceGroupContext dropResourceGroup() throws RecognitionException {
		DropResourceGroupContext _localctx = new DropResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_dropResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5050);
			match(DROP_SYMBOL);
			setState(5051);
			match(RESOURCE_SYMBOL);
			setState(5052);
			match(GROUP_SYMBOL);
			setState(5053);
			resourceGroupRef();
			setState(5055);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				setState(5054);
				match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityStatementContext extends ParserRuleContext {
		public DescribeCommandContext describeCommand() {
			return getRuleContext(DescribeCommandContext.class,0);
		}
		public ExplainCommandContext explainCommand() {
			return getRuleContext(ExplainCommandContext.class,0);
		}
		public HelpCommandContext helpCommand() {
			return getRuleContext(HelpCommandContext.class,0);
		}
		public UseCommandContext useCommand() {
			return getRuleContext(UseCommandContext.class,0);
		}
		public RestartServerContext restartServer() {
			return getRuleContext(RestartServerContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUtilityStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUtilityStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUtilityStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_utilityStatement);
		try {
			setState(5063);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5057);
				describeCommand();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5058);
				explainCommand();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5059);
				helpCommand();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5060);
				useCommand();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5061);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(5062);
				restartServer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeCommandContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode DESCRIBE_SYMBOL() { return getToken(MySQLParser.DESCRIBE_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MySQLParser.DESC_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public DescribeCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDescribeCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDescribeCommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDescribeCommand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeCommandContext describeCommand() throws RecognitionException {
		DescribeCommandContext _localctx = new DescribeCommandContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_describeCommand);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5065);
			_la = _input.LA(1);
			if ( !(_la==DESC_SYMBOL || _la==DESCRIBE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5066);
			tableRef();
			setState(5069);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
			case 1:
				{
				setState(5067);
				textString();
				}
				break;
			case 2:
				{
				setState(5068);
				columnRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainCommandContext extends ParserRuleContext {
		public ExplainableStatementContext explainableStatement() {
			return getRuleContext(ExplainableStatementContext.class,0);
		}
		public TerminalNode DESCRIBE_SYMBOL() { return getToken(MySQLParser.DESCRIBE_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MySQLParser.DESC_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ExplainCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExplainCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExplainCommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExplainCommand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainCommandContext explainCommand() throws RecognitionException {
		ExplainCommandContext _localctx = new ExplainCommandContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_explainCommand);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5071);
			_la = _input.LA(1);
			if ( !(_la==DESC_SYMBOL || _la==DESCRIBE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5080);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,650,_ctx) ) {
			case 1:
				{
				setState(5072);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(5073);
				match(EXTENDED_SYMBOL);
				}
				break;
			case 2:
				{
				setState(5074);
				if (!(serverVersion >= 50105 && serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion >= 50105 && serverVersion < 80000");
				setState(5075);
				match(PARTITIONS_SYMBOL);
				}
				break;
			case 3:
				{
				setState(5076);
				if (!(serverVersion >= 50605)) throw new FailedPredicateException(this, "serverVersion >= 50605");
				setState(5077);
				match(FORMAT_SYMBOL);
				setState(5078);
				match(EQUAL_OPERATOR);
				setState(5079);
				textOrIdentifier();
				}
				break;
			}
			setState(5082);
			explainableStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainableStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public ExplainableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExplainableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExplainableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExplainableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainableStatementContext explainableStatement() throws RecognitionException {
		ExplainableStatementContext _localctx = new ExplainableStatementContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_explainableStatement);
		try {
			setState(5096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5084);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5085);
				if (!(serverVersion >= 50603)) throw new FailedPredicateException(this, "serverVersion >= 50603");
				setState(5090);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,651,_ctx) ) {
				case 1:
					{
					setState(5086);
					deleteStatement();
					}
					break;
				case 2:
					{
					setState(5087);
					insertStatement();
					}
					break;
				case 3:
					{
					setState(5088);
					replaceStatement();
					}
					break;
				case 4:
					{
					setState(5089);
					updateStatement();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5092);
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				setState(5093);
				match(FOR_SYMBOL);
				setState(5094);
				match(CONNECTION_SYMBOL);
				setState(5095);
				real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpCommandContext extends ParserRuleContext {
		public TerminalNode HELP_SYMBOL() { return getToken(MySQLParser.HELP_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public HelpCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterHelpCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitHelpCommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitHelpCommand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HelpCommandContext helpCommand() throws RecognitionException {
		HelpCommandContext _localctx = new HelpCommandContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_helpCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5098);
			match(HELP_SYMBOL);
			setState(5099);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseCommandContext extends ParserRuleContext {
		public TerminalNode USE_SYMBOL() { return getToken(MySQLParser.USE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UseCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUseCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUseCommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUseCommand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseCommandContext useCommand() throws RecognitionException {
		UseCommandContext _localctx = new UseCommandContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_useCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5101);
			match(USE_SYMBOL);
			setState(5102);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RestartServerContext extends ParserRuleContext {
		public TerminalNode RESTART_SYMBOL() { return getToken(MySQLParser.RESTART_SYMBOL, 0); }
		public RestartServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restartServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRestartServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRestartServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRestartServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RestartServerContext restartServer() throws RecognitionException {
		RestartServerContext _localctx = new RestartServerContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_restartServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5104);
			match(RESTART_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
	 
		public ExprContext() { }
		public void copyFrom(ExprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ExprOrContext extends ExprContext {
		public Token op;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode OR_SYMBOL() { return getToken(MySQLParser.OR_SYMBOL, 0); }
		public TerminalNode LOGICAL_OR_OPERATOR() { return getToken(MySQLParser.LOGICAL_OR_OPERATOR, 0); }
		public ExprOrContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExprOr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExprOr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExprOr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExprNotContext extends ExprContext {
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ExprNotContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExprNot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExprNot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExprNot(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExprIsContext extends ExprContext {
		public Token type;
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public TerminalNode IS_SYMBOL() { return getToken(MySQLParser.IS_SYMBOL, 0); }
		public TerminalNode TRUE_SYMBOL() { return getToken(MySQLParser.TRUE_SYMBOL, 0); }
		public TerminalNode FALSE_SYMBOL() { return getToken(MySQLParser.FALSE_SYMBOL, 0); }
		public TerminalNode UNKNOWN_SYMBOL() { return getToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public ExprIsContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExprIs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExprIs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExprIs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExprAndContext extends ExprContext {
		public Token op;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public TerminalNode LOGICAL_AND_OPERATOR() { return getToken(MySQLParser.LOGICAL_AND_OPERATOR, 0); }
		public ExprAndContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExprAnd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExprAnd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExprAnd(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExprXorContext extends ExprContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode XOR_SYMBOL() { return getToken(MySQLParser.XOR_SYMBOL, 0); }
		public ExprXorContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExprXor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExprXor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExprXor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 606;
		enterRecursionRule(_localctx, 606, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5117);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
			case 1:
				{
				_localctx = new ExprIsContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(5107);
				boolPri(0);
				setState(5113);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
				case 1:
					{
					setState(5108);
					match(IS_SYMBOL);
					setState(5110);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
						{
						setState(5109);
						notRule();
						}
					}

					setState(5112);
					((ExprIsContext)_localctx).type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==UNKNOWN_SYMBOL || _la==FALSE_SYMBOL || _la==TRUE_SYMBOL) ) {
						((ExprIsContext)_localctx).type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new ExprNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5115);
				match(NOT_SYMBOL);
				setState(5116);
				expr(4);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5130);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,657,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5128);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
					case 1:
						{
						_localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(5119);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5120);
						((ExprAndContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==LOGICAL_AND_OPERATOR || _la==AND_SYMBOL) ) {
							((ExprAndContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5121);
						expr(4);
						}
						break;
					case 2:
						{
						_localctx = new ExprXorContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(5122);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5123);
						match(XOR_SYMBOL);
						setState(5124);
						expr(3);
						}
						break;
					case 3:
						{
						_localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(5125);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(5126);
						((ExprOrContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==LOGICAL_OR_OPERATOR || _la==OR_SYMBOL) ) {
							((ExprOrContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5127);
						expr(2);
						}
						break;
					}
					} 
				}
				setState(5132);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,657,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class BoolPriContext extends ParserRuleContext {
		public BoolPriContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolPri; }
	 
		public BoolPriContext() { }
		public void copyFrom(BoolPriContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PrimaryExprPredicateContext extends BoolPriContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PrimaryExprPredicateContext(BoolPriContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPrimaryExprPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPrimaryExprPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPrimaryExprPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryExprCompareContext extends BoolPriContext {
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public CompOpContext compOp() {
			return getRuleContext(CompOpContext.class,0);
		}
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PrimaryExprCompareContext(BoolPriContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPrimaryExprCompare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPrimaryExprCompare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPrimaryExprCompare(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryExprAllAnyContext extends BoolPriContext {
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public CompOpContext compOp() {
			return getRuleContext(CompOpContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode ANY_SYMBOL() { return getToken(MySQLParser.ANY_SYMBOL, 0); }
		public PrimaryExprAllAnyContext(BoolPriContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPrimaryExprAllAny(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPrimaryExprAllAny(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPrimaryExprAllAny(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryExprIsNullContext extends BoolPriContext {
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public TerminalNode IS_SYMBOL() { return getToken(MySQLParser.IS_SYMBOL, 0); }
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public PrimaryExprIsNullContext(BoolPriContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPrimaryExprIsNull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPrimaryExprIsNull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPrimaryExprIsNull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoolPriContext boolPri() throws RecognitionException {
		return boolPri(0);
	}

	private BoolPriContext boolPri(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BoolPriContext _localctx = new BoolPriContext(_ctx, _parentState);
		BoolPriContext _prevctx = _localctx;
		int _startState = 608;
		enterRecursionRule(_localctx, 608, RULE_boolPri, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryExprPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(5134);
			predicate();
			}
			_ctx.stop = _input.LT(-1);
			setState(5155);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,660,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5153);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,659,_ctx) ) {
					case 1:
						{
						_localctx = new PrimaryExprIsNullContext(new BoolPriContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						setState(5136);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5137);
						match(IS_SYMBOL);
						setState(5139);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
							{
							setState(5138);
							notRule();
							}
						}

						setState(5141);
						match(NULL_SYMBOL);
						}
						break;
					case 2:
						{
						_localctx = new PrimaryExprCompareContext(new BoolPriContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						setState(5142);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5143);
						compOp();
						setState(5144);
						predicate();
						}
						break;
					case 3:
						{
						_localctx = new PrimaryExprAllAnyContext(new BoolPriContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						setState(5146);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(5147);
						compOp();
						setState(5148);
						_la = _input.LA(1);
						if ( !(_la==ANY_SYMBOL || _la==ALL_SYMBOL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5149);
						match(OPEN_PAR_SYMBOL);
						setState(5150);
						subquery();
						setState(5151);
						match(CLOSE_PAR_SYMBOL);
						}
						break;
					}
					} 
				}
				setState(5157);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,660,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CompOpContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode NULL_SAFE_EQUAL_OPERATOR() { return getToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0); }
		public TerminalNode GREATER_OR_EQUAL_OPERATOR() { return getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public TerminalNode GREATER_THAN_OPERATOR() { return getToken(MySQLParser.GREATER_THAN_OPERATOR, 0); }
		public TerminalNode LESS_OR_EQUAL_OPERATOR() { return getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		public TerminalNode LESS_THAN_OPERATOR() { return getToken(MySQLParser.LESS_THAN_OPERATOR, 0); }
		public TerminalNode NOT_EQUAL_OPERATOR() { return getToken(MySQLParser.NOT_EQUAL_OPERATOR, 0); }
		public CompOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCompOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCompOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCompOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompOpContext compOp() throws RecognitionException {
		CompOpContext _localctx = new CompOpContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_compOp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5158);
			_la = _input.LA(1);
			if ( !(((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (EQUAL_OPERATOR - 383)) | (1L << (NULL_SAFE_EQUAL_OPERATOR - 383)) | (1L << (GREATER_OR_EQUAL_OPERATOR - 383)) | (1L << (GREATER_THAN_OPERATOR - 383)) | (1L << (LESS_OR_EQUAL_OPERATOR - 383)) | (1L << (LESS_THAN_OPERATOR - 383)) | (1L << (NOT_EQUAL_OPERATOR - 383)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public List<BitExprContext> bitExpr() {
			return getRuleContexts(BitExprContext.class);
		}
		public BitExprContext bitExpr(int i) {
			return getRuleContext(BitExprContext.class,i);
		}
		public PredicateOperationsContext predicateOperations() {
			return getRuleContext(PredicateOperationsContext.class,0);
		}
		public TerminalNode SOUNDS_SYMBOL() { return getToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public TerminalNode LIKE_SYMBOL() { return getToken(MySQLParser.LIKE_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5160);
			bitExpr(0);
			setState(5168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
			case 1:
				{
				setState(5162);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
					{
					setState(5161);
					notRule();
					}
				}

				setState(5164);
				predicateOperations();
				}
				break;
			case 2:
				{
				setState(5165);
				match(SOUNDS_SYMBOL);
				setState(5166);
				match(LIKE_SYMBOL);
				setState(5167);
				bitExpr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateOperationsContext extends ParserRuleContext {
		public PredicateOperationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicateOperations; }
	 
		public PredicateOperationsContext() { }
		public void copyFrom(PredicateOperationsContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PredicateExprRegexContext extends PredicateOperationsContext {
		public TerminalNode REGEXP_SYMBOL() { return getToken(MySQLParser.REGEXP_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public PredicateExprRegexContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPredicateExprRegex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPredicateExprRegex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPredicateExprRegex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExprBetweenContext extends PredicateOperationsContext {
		public TerminalNode BETWEEN_SYMBOL() { return getToken(MySQLParser.BETWEEN_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExprBetweenContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPredicateExprBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPredicateExprBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPredicateExprBetween(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExprInContext extends PredicateOperationsContext {
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PredicateExprInContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPredicateExprIn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPredicateExprIn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPredicateExprIn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExprLikeContext extends PredicateOperationsContext {
		public TerminalNode LIKE_SYMBOL() { return getToken(MySQLParser.LIKE_SYMBOL, 0); }
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public TerminalNode ESCAPE_SYMBOL() { return getToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public PredicateExprLikeContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPredicateExprLike(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPredicateExprLike(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPredicateExprLike(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateOperationsContext predicateOperations() throws RecognitionException {
		PredicateOperationsContext _localctx = new PredicateOperationsContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_predicateOperations);
		try {
			setState(5191);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_SYMBOL:
				_localctx = new PredicateExprInContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5170);
				match(IN_SYMBOL);
				setState(5176);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
				case 1:
					{
					setState(5171);
					subquery();
					}
					break;
				case 2:
					{
					setState(5172);
					match(OPEN_PAR_SYMBOL);
					setState(5173);
					exprList();
					setState(5174);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case BETWEEN_SYMBOL:
				_localctx = new PredicateExprBetweenContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5178);
				match(BETWEEN_SYMBOL);
				setState(5179);
				bitExpr(0);
				setState(5180);
				match(AND_SYMBOL);
				setState(5181);
				predicate();
				}
				break;
			case LIKE_SYMBOL:
				_localctx = new PredicateExprLikeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5183);
				match(LIKE_SYMBOL);
				setState(5184);
				simpleExpr(0);
				setState(5187);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
				case 1:
					{
					setState(5185);
					match(ESCAPE_SYMBOL);
					setState(5186);
					simpleExpr(0);
					}
					break;
				}
				}
				break;
			case REGEXP_SYMBOL:
				_localctx = new PredicateExprRegexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5189);
				match(REGEXP_SYMBOL);
				setState(5190);
				bitExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitExprContext extends ParserRuleContext {
		public Token op;
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public List<BitExprContext> bitExpr() {
			return getRuleContexts(BitExprContext.class);
		}
		public BitExprContext bitExpr(int i) {
			return getRuleContext(BitExprContext.class,i);
		}
		public TerminalNode BITWISE_XOR_OPERATOR() { return getToken(MySQLParser.BITWISE_XOR_OPERATOR, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public TerminalNode DIV_OPERATOR() { return getToken(MySQLParser.DIV_OPERATOR, 0); }
		public TerminalNode MOD_OPERATOR() { return getToken(MySQLParser.MOD_OPERATOR, 0); }
		public TerminalNode DIV_SYMBOL() { return getToken(MySQLParser.DIV_SYMBOL, 0); }
		public TerminalNode MOD_SYMBOL() { return getToken(MySQLParser.MOD_SYMBOL, 0); }
		public TerminalNode PLUS_OPERATOR() { return getToken(MySQLParser.PLUS_OPERATOR, 0); }
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public TerminalNode SHIFT_LEFT_OPERATOR() { return getToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0); }
		public TerminalNode SHIFT_RIGHT_OPERATOR() { return getToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0); }
		public TerminalNode BITWISE_AND_OPERATOR() { return getToken(MySQLParser.BITWISE_AND_OPERATOR, 0); }
		public TerminalNode BITWISE_OR_OPERATOR() { return getToken(MySQLParser.BITWISE_OR_OPERATOR, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public BitExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterBitExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitBitExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitBitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitExprContext bitExpr() throws RecognitionException {
		return bitExpr(0);
	}

	private BitExprContext bitExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BitExprContext _localctx = new BitExprContext(_ctx, _parentState);
		BitExprContext _prevctx = _localctx;
		int _startState = 616;
		enterRecursionRule(_localctx, 616, RULE_bitExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5194);
			simpleExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(5222);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,667,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5220);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
					case 1:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5196);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(5197);
						((BitExprContext)_localctx).op = match(BITWISE_XOR_OPERATOR);
						setState(5198);
						bitExpr(8);
						}
						break;
					case 2:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5199);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(5200);
						((BitExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (MULT_OPERATOR - 393)) | (1L << (DIV_OPERATOR - 393)) | (1L << (MOD_OPERATOR - 393)))) != 0) || _la==DIV_SYMBOL || _la==MOD_SYMBOL) ) {
							((BitExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5201);
						bitExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5202);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(5203);
						((BitExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							((BitExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5204);
						bitExpr(6);
						}
						break;
					case 4:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5205);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5206);
						((BitExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==SHIFT_LEFT_OPERATOR || _la==SHIFT_RIGHT_OPERATOR) ) {
							((BitExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5207);
						bitExpr(4);
						}
						break;
					case 5:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5208);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5209);
						((BitExprContext)_localctx).op = match(BITWISE_AND_OPERATOR);
						setState(5210);
						bitExpr(3);
						}
						break;
					case 6:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5211);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(5212);
						((BitExprContext)_localctx).op = match(BITWISE_OR_OPERATOR);
						setState(5213);
						bitExpr(2);
						}
						break;
					case 7:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5214);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(5215);
						((BitExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							((BitExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5216);
						match(INTERVAL_SYMBOL);
						setState(5217);
						expr(0);
						setState(5218);
						interval();
						}
						break;
					}
					} 
				}
				setState(5224);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,667,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SimpleExprContext extends ParserRuleContext {
		public SimpleExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleExpr; }
	 
		public SimpleExprContext() { }
		public void copyFrom(SimpleExprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleExprConvertContext extends SimpleExprContext {
		public TerminalNode CONVERT_SYMBOL() { return getToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public CastTypeContext castType() {
			return getRuleContext(CastTypeContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprConvert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprConvert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprConvert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprVariableContext extends SimpleExprContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public SimpleExprVariableContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprVariable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprCastContext extends SimpleExprContext {
		public TerminalNode CAST_SYMBOL() { return getToken(MySQLParser.CAST_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public CastTypeContext castType() {
			return getRuleContext(CastTypeContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprCastContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprCast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprCast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprCast(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprUnaryContext extends SimpleExprContext {
		public Token op;
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode PLUS_OPERATOR() { return getToken(MySQLParser.PLUS_OPERATOR, 0); }
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public TerminalNode BITWISE_NOT_OPERATOR() { return getToken(MySQLParser.BITWISE_NOT_OPERATOR, 0); }
		public SimpleExprUnaryContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprUnary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprUnary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprUnary(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprOdbcContext extends SimpleExprContext {
		public TerminalNode OPEN_CURLY_SYMBOL() { return getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_CURLY_SYMBOL() { return getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0); }
		public SimpleExprOdbcContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprOdbc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprOdbc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprOdbc(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprRuntimeFunctionContext extends SimpleExprContext {
		public RuntimeFunctionCallContext runtimeFunctionCall() {
			return getRuleContext(RuntimeFunctionCallContext.class,0);
		}
		public SimpleExprRuntimeFunctionContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprRuntimeFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprRuntimeFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprRuntimeFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprFunctionContext extends SimpleExprContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public SimpleExprFunctionContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprCollateContext extends SimpleExprContext {
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public SimpleExprCollateContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprMatchContext extends SimpleExprContext {
		public TerminalNode MATCH_SYMBOL() { return getToken(MySQLParser.MATCH_SYMBOL, 0); }
		public IdentListArgContext identListArg() {
			return getRuleContext(IdentListArgContext.class,0);
		}
		public TerminalNode AGAINST_SYMBOL() { return getToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public FulltextOptionsContext fulltextOptions() {
			return getRuleContext(FulltextOptionsContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprMatchContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprMatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprMatch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprMatch(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprWindowingFunctionContext extends SimpleExprContext {
		public WindowFunctionCallContext windowFunctionCall() {
			return getRuleContext(WindowFunctionCallContext.class,0);
		}
		public SimpleExprWindowingFunctionContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprWindowingFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprWindowingFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprWindowingFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprBinaryContext extends SimpleExprContext {
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public SimpleExprBinaryContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprBinary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprBinary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprBinary(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprColumnRefContext extends SimpleExprContext {
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public SimpleExprColumnRefContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprColumnRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprColumnRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprColumnRef(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprParamMarkerContext extends SimpleExprContext {
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public SimpleExprParamMarkerContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprParamMarker(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprParamMarker(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprParamMarker(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprSumContext extends SimpleExprContext {
		public SumExprContext sumExpr() {
			return getRuleContext(SumExprContext.class,0);
		}
		public SimpleExprSumContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprSum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprSum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprSum(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprConvertUsingContext extends SimpleExprContext {
		public TerminalNode CONVERT_SYMBOL() { return getToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertUsingContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprConvertUsing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprConvertUsing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprConvertUsing(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprSubQueryContext extends SimpleExprContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode EXISTS_SYMBOL() { return getToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public SimpleExprSubQueryContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprSubQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprSubQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprSubQuery(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprGroupingOperationContext extends SimpleExprContext {
		public GroupingOperationContext groupingOperation() {
			return getRuleContext(GroupingOperationContext.class,0);
		}
		public SimpleExprGroupingOperationContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprGroupingOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprGroupingOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprGroupingOperation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprNotContext extends SimpleExprContext {
		public Not2RuleContext not2Rule() {
			return getRuleContext(Not2RuleContext.class,0);
		}
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public SimpleExprNotContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprNot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprNot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprNot(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprValuesContext extends SimpleExprContext {
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleIdentifierContext simpleIdentifier() {
			return getRuleContext(SimpleIdentifierContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprValuesContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprValues(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprDefaultContext extends SimpleExprContext {
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleIdentifierContext simpleIdentifier() {
			return getRuleContext(SimpleIdentifierContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprDefaultContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprListContext extends SimpleExprContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public SimpleExprListContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprIntervalContext extends SimpleExprContext {
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode PLUS_OPERATOR() { return getToken(MySQLParser.PLUS_OPERATOR, 0); }
		public SimpleExprIntervalContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprInterval(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprCaseContext extends SimpleExprContext {
		public TerminalNode CASE_SYMBOL() { return getToken(MySQLParser.CASE_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<WhenExpressionContext> whenExpression() {
			return getRuleContexts(WhenExpressionContext.class);
		}
		public WhenExpressionContext whenExpression(int i) {
			return getRuleContext(WhenExpressionContext.class,i);
		}
		public List<ThenExpressionContext> thenExpression() {
			return getRuleContexts(ThenExpressionContext.class);
		}
		public ThenExpressionContext thenExpression(int i) {
			return getRuleContext(ThenExpressionContext.class,i);
		}
		public ElseExpressionContext elseExpression() {
			return getRuleContext(ElseExpressionContext.class,0);
		}
		public SimpleExprCaseContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprCase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprCase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprCase(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprConcatContext extends SimpleExprContext {
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public TerminalNode CONCAT_PIPES_SYMBOL() { return getToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0); }
		public SimpleExprConcatContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprConcat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprConcat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprConcat(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprLiteralContext extends SimpleExprContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public SimpleExprLiteralContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleExprContext simpleExpr() throws RecognitionException {
		return simpleExpr(0);
	}

	private SimpleExprContext simpleExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SimpleExprContext _localctx = new SimpleExprContext(_ctx, _parentState);
		SimpleExprContext _prevctx = _localctx;
		int _startState = 618;
		enterRecursionRule(_localctx, 618, RULE_simpleExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5324);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
			case 1:
				{
				_localctx = new SimpleExprVariableContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(5226);
				variable();
				}
				break;
			case 2:
				{
				_localctx = new SimpleExprColumnRefContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5227);
				columnRef();
				setState(5229);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
				case 1:
					{
					setState(5228);
					jsonOperator();
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new SimpleExprRuntimeFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5231);
				runtimeFunctionCall();
				}
				break;
			case 4:
				{
				_localctx = new SimpleExprFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5232);
				functionCall();
				}
				break;
			case 5:
				{
				_localctx = new SimpleExprLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5233);
				literal();
				}
				break;
			case 6:
				{
				_localctx = new SimpleExprParamMarkerContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5234);
				match(PARAM_MARKER);
				}
				break;
			case 7:
				{
				_localctx = new SimpleExprSumContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5235);
				sumExpr();
				}
				break;
			case 8:
				{
				_localctx = new SimpleExprGroupingOperationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5236);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(5237);
				groupingOperation();
				}
				break;
			case 9:
				{
				_localctx = new SimpleExprWindowingFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5238);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(5239);
				windowFunctionCall();
				}
				break;
			case 10:
				{
				_localctx = new SimpleExprUnaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5240);
				((SimpleExprUnaryContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (PLUS_OPERATOR - 391)) | (1L << (MINUS_OPERATOR - 391)) | (1L << (BITWISE_NOT_OPERATOR - 391)))) != 0)) ) {
					((SimpleExprUnaryContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5241);
				simpleExpr(14);
				}
				break;
			case 11:
				{
				_localctx = new SimpleExprNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5242);
				not2Rule();
				setState(5243);
				simpleExpr(13);
				}
				break;
			case 12:
				{
				_localctx = new SimpleExprListContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROW_SYMBOL) {
					{
					setState(5245);
					match(ROW_SYMBOL);
					}
				}

				setState(5248);
				match(OPEN_PAR_SYMBOL);
				setState(5249);
				exprList();
				setState(5250);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 13:
				{
				_localctx = new SimpleExprSubQueryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5253);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					setState(5252);
					match(EXISTS_SYMBOL);
					}
				}

				setState(5255);
				subquery();
				}
				break;
			case 14:
				{
				_localctx = new SimpleExprOdbcContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5256);
				match(OPEN_CURLY_SYMBOL);
				setState(5257);
				identifier();
				setState(5258);
				expr(0);
				setState(5259);
				match(CLOSE_CURLY_SYMBOL);
				}
				break;
			case 15:
				{
				_localctx = new SimpleExprMatchContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5261);
				match(MATCH_SYMBOL);
				setState(5262);
				identListArg();
				setState(5263);
				match(AGAINST_SYMBOL);
				setState(5264);
				match(OPEN_PAR_SYMBOL);
				setState(5265);
				bitExpr(0);
				setState(5266);
				fulltextOptions();
				setState(5267);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 16:
				{
				_localctx = new SimpleExprBinaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5269);
				match(BINARY_SYMBOL);
				setState(5270);
				simpleExpr(8);
				}
				break;
			case 17:
				{
				_localctx = new SimpleExprCastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5271);
				match(CAST_SYMBOL);
				setState(5272);
				match(OPEN_PAR_SYMBOL);
				setState(5273);
				expr(0);
				setState(5274);
				match(AS_SYMBOL);
				setState(5275);
				castType();
				setState(5276);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 18:
				{
				_localctx = new SimpleExprCaseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5278);
				match(CASE_SYMBOL);
				setState(5280);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
				case 1:
					{
					setState(5279);
					expr(0);
					}
					break;
				}
				setState(5285); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5282);
					whenExpression();
					setState(5283);
					thenExpression();
					}
					}
					setState(5287); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN_SYMBOL );
				setState(5290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE_SYMBOL) {
					{
					setState(5289);
					elseExpression();
					}
				}

				setState(5292);
				match(END_SYMBOL);
				}
				break;
			case 19:
				{
				_localctx = new SimpleExprConvertContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5294);
				match(CONVERT_SYMBOL);
				setState(5295);
				match(OPEN_PAR_SYMBOL);
				setState(5296);
				expr(0);
				setState(5297);
				match(COMMA_SYMBOL);
				setState(5298);
				castType();
				setState(5299);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				{
				_localctx = new SimpleExprConvertUsingContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5301);
				match(CONVERT_SYMBOL);
				setState(5302);
				match(OPEN_PAR_SYMBOL);
				setState(5303);
				expr(0);
				setState(5304);
				match(USING_SYMBOL);
				setState(5305);
				charsetName();
				setState(5306);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 21:
				{
				_localctx = new SimpleExprDefaultContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5308);
				match(DEFAULT_SYMBOL);
				setState(5309);
				match(OPEN_PAR_SYMBOL);
				setState(5310);
				simpleIdentifier();
				setState(5311);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 22:
				{
				_localctx = new SimpleExprValuesContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5313);
				match(VALUES_SYMBOL);
				setState(5314);
				match(OPEN_PAR_SYMBOL);
				setState(5315);
				simpleIdentifier();
				setState(5316);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				{
				_localctx = new SimpleExprIntervalContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5318);
				match(INTERVAL_SYMBOL);
				setState(5319);
				expr(0);
				setState(5320);
				interval();
				setState(5321);
				match(PLUS_OPERATOR);
				setState(5322);
				expr(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5334);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,676,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5332);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
					case 1:
						{
						_localctx = new SimpleExprConcatContext(new SimpleExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						setState(5326);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(5327);
						match(CONCAT_PIPES_SYMBOL);
						setState(5328);
						simpleExpr(16);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExprCollateContext(new SimpleExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						setState(5329);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(5330);
						match(COLLATE_SYMBOL);
						setState(5331);
						textOrIdentifier();
						}
						break;
					}
					} 
				}
				setState(5336);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,676,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class JsonOperatorContext extends ParserRuleContext {
		public TerminalNode JSON_SEPARATOR_SYMBOL() { return getToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode JSON_UNQUOTED_SEPARATOR_SYMBOL() { return getToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0); }
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterJsonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitJsonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitJsonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_jsonOperator);
		try {
			setState(5343);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5337);
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				setState(5338);
				match(JSON_SEPARATOR_SYMBOL);
				setState(5339);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5340);
				if (!(serverVersion >= 50713)) throw new FailedPredicateException(this, "serverVersion >= 50713");
				setState(5341);
				match(JSON_UNQUOTED_SEPARATOR_SYMBOL);
				setState(5342);
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SumExprContext extends ParserRuleContext {
		public Token name;
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public InSumExprContext inSumExpr() {
			return getRuleContext(InSumExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode AVG_SYMBOL() { return getToken(MySQLParser.AVG_SYMBOL, 0); }
		public TerminalNode DISTINCT_SYMBOL() { return getToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public WindowingClauseContext windowingClause() {
			return getRuleContext(WindowingClauseContext.class,0);
		}
		public TerminalNode BIT_AND_SYMBOL() { return getToken(MySQLParser.BIT_AND_SYMBOL, 0); }
		public TerminalNode BIT_OR_SYMBOL() { return getToken(MySQLParser.BIT_OR_SYMBOL, 0); }
		public TerminalNode BIT_XOR_SYMBOL() { return getToken(MySQLParser.BIT_XOR_SYMBOL, 0); }
		public JsonFunctionContext jsonFunction() {
			return getRuleContext(JsonFunctionContext.class,0);
		}
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public TerminalNode COUNT_SYMBOL() { return getToken(MySQLParser.COUNT_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode MIN_SYMBOL() { return getToken(MySQLParser.MIN_SYMBOL, 0); }
		public TerminalNode MAX_SYMBOL() { return getToken(MySQLParser.MAX_SYMBOL, 0); }
		public TerminalNode STD_SYMBOL() { return getToken(MySQLParser.STD_SYMBOL, 0); }
		public TerminalNode VARIANCE_SYMBOL() { return getToken(MySQLParser.VARIANCE_SYMBOL, 0); }
		public TerminalNode STDDEV_SAMP_SYMBOL() { return getToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0); }
		public TerminalNode VAR_SAMP_SYMBOL() { return getToken(MySQLParser.VAR_SAMP_SYMBOL, 0); }
		public TerminalNode SUM_SYMBOL() { return getToken(MySQLParser.SUM_SYMBOL, 0); }
		public TerminalNode GROUP_CONCAT_SYMBOL() { return getToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0); }
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public TerminalNode SEPARATOR_SYMBOL() { return getToken(MySQLParser.SEPARATOR_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public SumExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sumExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSumExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSumExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSumExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SumExprContext sumExpr() throws RecognitionException {
		SumExprContext _localctx = new SumExprContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_sumExpr);
		int _la;
		try {
			setState(5476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,700,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5345);
				((SumExprContext)_localctx).name = match(AVG_SYMBOL);
				setState(5346);
				match(OPEN_PAR_SYMBOL);
				setState(5348);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
				case 1:
					{
					setState(5347);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5350);
				inSumExpr();
				setState(5351);
				match(CLOSE_PAR_SYMBOL);
				setState(5354);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
				case 1:
					{
					setState(5352);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5353);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5356);
				((SumExprContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (BIT_AND_SYMBOL - 439)) | (1L << (BIT_OR_SYMBOL - 439)) | (1L << (BIT_XOR_SYMBOL - 439)))) != 0)) ) {
					((SumExprContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5357);
				match(OPEN_PAR_SYMBOL);
				setState(5358);
				inSumExpr();
				setState(5359);
				match(CLOSE_PAR_SYMBOL);
				setState(5362);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
				case 1:
					{
					setState(5360);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5361);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5364);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(5365);
				jsonFunction();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5366);
				((SumExprContext)_localctx).name = match(COUNT_SYMBOL);
				setState(5367);
				match(OPEN_PAR_SYMBOL);
				setState(5369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL_SYMBOL) {
					{
					setState(5368);
					match(ALL_SYMBOL);
					}
				}

				setState(5371);
				match(MULT_OPERATOR);
				setState(5372);
				match(CLOSE_PAR_SYMBOL);
				setState(5375);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
				case 1:
					{
					setState(5373);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5374);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5377);
				((SumExprContext)_localctx).name = match(COUNT_SYMBOL);
				setState(5378);
				match(OPEN_PAR_SYMBOL);
				setState(5386);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
				case 1:
					{
					setState(5380);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL_SYMBOL) {
						{
						setState(5379);
						match(ALL_SYMBOL);
						}
					}

					setState(5382);
					match(MULT_OPERATOR);
					}
					break;
				case 2:
					{
					setState(5383);
					inSumExpr();
					}
					break;
				case 3:
					{
					setState(5384);
					match(DISTINCT_SYMBOL);
					setState(5385);
					exprList();
					}
					break;
				}
				setState(5388);
				match(CLOSE_PAR_SYMBOL);
				setState(5391);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,685,_ctx) ) {
				case 1:
					{
					setState(5389);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5390);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5393);
				((SumExprContext)_localctx).name = match(MIN_SYMBOL);
				setState(5394);
				match(OPEN_PAR_SYMBOL);
				setState(5396);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
				case 1:
					{
					setState(5395);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5398);
				inSumExpr();
				setState(5399);
				match(CLOSE_PAR_SYMBOL);
				setState(5402);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
				case 1:
					{
					setState(5400);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5401);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5404);
				((SumExprContext)_localctx).name = match(MAX_SYMBOL);
				setState(5405);
				match(OPEN_PAR_SYMBOL);
				setState(5407);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
				case 1:
					{
					setState(5406);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5409);
				inSumExpr();
				setState(5410);
				match(CLOSE_PAR_SYMBOL);
				setState(5413);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,689,_ctx) ) {
				case 1:
					{
					setState(5411);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5412);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5415);
				((SumExprContext)_localctx).name = match(STD_SYMBOL);
				setState(5416);
				match(OPEN_PAR_SYMBOL);
				setState(5417);
				inSumExpr();
				setState(5418);
				match(CLOSE_PAR_SYMBOL);
				setState(5421);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,690,_ctx) ) {
				case 1:
					{
					setState(5419);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5420);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5423);
				((SumExprContext)_localctx).name = match(VARIANCE_SYMBOL);
				setState(5424);
				match(OPEN_PAR_SYMBOL);
				setState(5425);
				inSumExpr();
				setState(5426);
				match(CLOSE_PAR_SYMBOL);
				setState(5429);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,691,_ctx) ) {
				case 1:
					{
					setState(5427);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5428);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5431);
				((SumExprContext)_localctx).name = match(STDDEV_SAMP_SYMBOL);
				setState(5432);
				match(OPEN_PAR_SYMBOL);
				setState(5433);
				inSumExpr();
				setState(5434);
				match(CLOSE_PAR_SYMBOL);
				setState(5437);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,692,_ctx) ) {
				case 1:
					{
					setState(5435);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5436);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5439);
				((SumExprContext)_localctx).name = match(VAR_SAMP_SYMBOL);
				setState(5440);
				match(OPEN_PAR_SYMBOL);
				setState(5441);
				inSumExpr();
				setState(5442);
				match(CLOSE_PAR_SYMBOL);
				setState(5445);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
				case 1:
					{
					setState(5443);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5444);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5447);
				((SumExprContext)_localctx).name = match(SUM_SYMBOL);
				setState(5448);
				match(OPEN_PAR_SYMBOL);
				setState(5450);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,694,_ctx) ) {
				case 1:
					{
					setState(5449);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5452);
				inSumExpr();
				setState(5453);
				match(CLOSE_PAR_SYMBOL);
				setState(5456);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
				case 1:
					{
					setState(5454);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5455);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5458);
				((SumExprContext)_localctx).name = match(GROUP_CONCAT_SYMBOL);
				setState(5459);
				match(OPEN_PAR_SYMBOL);
				setState(5461);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
				case 1:
					{
					setState(5460);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5463);
				exprList();
				setState(5465);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER_SYMBOL) {
					{
					setState(5464);
					orderClause();
					}
				}

				setState(5469);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR_SYMBOL) {
					{
					setState(5467);
					match(SEPARATOR_SYMBOL);
					setState(5468);
					textString();
					}
				}

				setState(5471);
				match(CLOSE_PAR_SYMBOL);
				setState(5474);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,699,_ctx) ) {
				case 1:
					{
					setState(5472);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5473);
					windowingClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingOperationContext extends ParserRuleContext {
		public TerminalNode GROUPING_SYMBOL() { return getToken(MySQLParser.GROUPING_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public GroupingOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGroupingOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGroupingOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGroupingOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingOperationContext groupingOperation() throws RecognitionException {
		GroupingOperationContext _localctx = new GroupingOperationContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_groupingOperation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5478);
			match(GROUPING_SYMBOL);
			setState(5479);
			match(OPEN_PAR_SYMBOL);
			setState(5480);
			exprList();
			setState(5481);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFunctionCallContext extends ParserRuleContext {
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public WindowingClauseContext windowingClause() {
			return getRuleContext(WindowingClauseContext.class,0);
		}
		public TerminalNode ROW_NUMBER_SYMBOL() { return getToken(MySQLParser.ROW_NUMBER_SYMBOL, 0); }
		public TerminalNode RANK_SYMBOL() { return getToken(MySQLParser.RANK_SYMBOL, 0); }
		public TerminalNode DENSE_RANK_SYMBOL() { return getToken(MySQLParser.DENSE_RANK_SYMBOL, 0); }
		public TerminalNode CUME_DIST_SYMBOL() { return getToken(MySQLParser.CUME_DIST_SYMBOL, 0); }
		public TerminalNode PERCENT_RANK_SYMBOL() { return getToken(MySQLParser.PERCENT_RANK_SYMBOL, 0); }
		public TerminalNode NTILE_SYMBOL() { return getToken(MySQLParser.NTILE_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode LEAD_SYMBOL() { return getToken(MySQLParser.LEAD_SYMBOL, 0); }
		public TerminalNode LAG_SYMBOL() { return getToken(MySQLParser.LAG_SYMBOL, 0); }
		public LeadLagInfoContext leadLagInfo() {
			return getRuleContext(LeadLagInfoContext.class,0);
		}
		public NullTreatmentContext nullTreatment() {
			return getRuleContext(NullTreatmentContext.class,0);
		}
		public TerminalNode FIRST_VALUE_SYMBOL() { return getToken(MySQLParser.FIRST_VALUE_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode NTH_VALUE_SYMBOL() { return getToken(MySQLParser.NTH_VALUE_SYMBOL, 0); }
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public WindowFunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFunctionCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFunctionCallContext windowFunctionCall() throws RecognitionException {
		WindowFunctionCallContext _localctx = new WindowFunctionCallContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_windowFunctionCall);
		int _la;
		try {
			setState(5529);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CUME_DIST_SYMBOL:
			case DENSE_RANK_SYMBOL:
			case PERCENT_RANK_SYMBOL:
			case RANK_SYMBOL:
			case ROW_NUMBER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5483);
				_la = _input.LA(1);
				if ( !(((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (CUME_DIST_SYMBOL - 710)) | (1L << (DENSE_RANK_SYMBOL - 710)) | (1L << (PERCENT_RANK_SYMBOL - 710)) | (1L << (RANK_SYMBOL - 710)) | (1L << (ROW_NUMBER_SYMBOL - 710)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5484);
				parentheses();
				setState(5485);
				windowingClause();
				}
				break;
			case NTILE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5487);
				match(NTILE_SYMBOL);
				setState(5488);
				match(OPEN_PAR_SYMBOL);
				setState(5489);
				simpleExpr(0);
				setState(5490);
				match(CLOSE_PAR_SYMBOL);
				setState(5491);
				windowingClause();
				}
				break;
			case LAG_SYMBOL:
			case LEAD_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5493);
				_la = _input.LA(1);
				if ( !(_la==LAG_SYMBOL || _la==LEAD_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5494);
				match(OPEN_PAR_SYMBOL);
				setState(5495);
				expr(0);
				setState(5497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(5496);
					leadLagInfo();
					}
				}

				setState(5499);
				match(CLOSE_PAR_SYMBOL);
				setState(5501);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					setState(5500);
					nullTreatment();
					}
				}

				setState(5503);
				windowingClause();
				}
				break;
			case LAST_SYMBOL:
			case FIRST_VALUE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5505);
				_la = _input.LA(1);
				if ( !(_la==LAST_SYMBOL || _la==FIRST_VALUE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5506);
				match(OPEN_PAR_SYMBOL);
				setState(5507);
				expr(0);
				setState(5508);
				match(CLOSE_PAR_SYMBOL);
				setState(5510);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					setState(5509);
					nullTreatment();
					}
				}

				setState(5512);
				windowingClause();
				}
				break;
			case NTH_VALUE_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(5514);
				match(NTH_VALUE_SYMBOL);
				setState(5515);
				match(OPEN_PAR_SYMBOL);
				setState(5516);
				expr(0);
				setState(5517);
				match(COMMA_SYMBOL);
				setState(5518);
				simpleExpr(0);
				setState(5519);
				match(CLOSE_PAR_SYMBOL);
				setState(5522);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					setState(5520);
					match(FROM_SYMBOL);
					setState(5521);
					_la = _input.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5525);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					setState(5524);
					nullTreatment();
					}
				}

				setState(5527);
				windowingClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowingClauseContext extends ParserRuleContext {
		public TerminalNode OVER_SYMBOL() { return getToken(MySQLParser.OVER_SYMBOL, 0); }
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public WindowingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowingClauseContext windowingClause() throws RecognitionException {
		WindowingClauseContext _localctx = new WindowingClauseContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_windowingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5531);
			match(OVER_SYMBOL);
			setState(5534);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,707,_ctx) ) {
			case 1:
				{
				setState(5532);
				windowName();
				}
				break;
			case 2:
				{
				setState(5533);
				windowSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeadLagInfoContext extends ParserRuleContext {
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public LeadLagInfoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leadLagInfo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLeadLagInfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLeadLagInfo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLeadLagInfo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeadLagInfoContext leadLagInfo() throws RecognitionException {
		LeadLagInfoContext _localctx = new LeadLagInfoContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_leadLagInfo);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5536);
			match(COMMA_SYMBOL);
			setState(5539);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				{
				setState(5537);
				ulonglong_number();
				}
				break;
			case PARAM_MARKER:
				{
				setState(5538);
				match(PARAM_MARKER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				setState(5541);
				match(COMMA_SYMBOL);
				setState(5542);
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullTreatmentContext extends ParserRuleContext {
		public TerminalNode NULLS_SYMBOL() { return getToken(MySQLParser.NULLS_SYMBOL, 0); }
		public TerminalNode RESPECT_SYMBOL() { return getToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public NullTreatmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullTreatment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNullTreatment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNullTreatment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNullTreatment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullTreatmentContext nullTreatment() throws RecognitionException {
		NullTreatmentContext _localctx = new NullTreatmentContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_nullTreatment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5545);
			_la = _input.LA(1);
			if ( !(_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5546);
			match(NULLS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonFunctionContext extends ParserRuleContext {
		public TerminalNode JSON_ARRAYAGG_SYMBOL() { return getToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<InSumExprContext> inSumExpr() {
			return getRuleContexts(InSumExprContext.class);
		}
		public InSumExprContext inSumExpr(int i) {
			return getRuleContext(InSumExprContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowingClauseContext windowingClause() {
			return getRuleContext(WindowingClauseContext.class,0);
		}
		public TerminalNode JSON_OBJECTAGG_SYMBOL() { return getToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0); }
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public JsonFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterJsonFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitJsonFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitJsonFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonFunctionContext jsonFunction() throws RecognitionException {
		JsonFunctionContext _localctx = new JsonFunctionContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_jsonFunction);
		try {
			setState(5564);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON_ARRAYAGG_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5548);
				match(JSON_ARRAYAGG_SYMBOL);
				setState(5549);
				match(OPEN_PAR_SYMBOL);
				setState(5550);
				inSumExpr();
				setState(5551);
				match(CLOSE_PAR_SYMBOL);
				setState(5553);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,710,_ctx) ) {
				case 1:
					{
					setState(5552);
					windowingClause();
					}
					break;
				}
				}
				break;
			case JSON_OBJECTAGG_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5555);
				match(JSON_OBJECTAGG_SYMBOL);
				setState(5556);
				match(OPEN_PAR_SYMBOL);
				setState(5557);
				inSumExpr();
				setState(5558);
				match(COMMA_SYMBOL);
				setState(5559);
				inSumExpr();
				setState(5560);
				match(CLOSE_PAR_SYMBOL);
				setState(5562);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,711,_ctx) ) {
				case 1:
					{
					setState(5561);
					windowingClause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InSumExprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public InSumExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inSumExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInSumExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInSumExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInSumExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InSumExprContext inSumExpr() throws RecognitionException {
		InSumExprContext _localctx = new InSumExprContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_inSumExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
			case 1:
				{
				setState(5566);
				match(ALL_SYMBOL);
				}
				break;
			}
			setState(5569);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentListArgContext extends ParserRuleContext {
		public IdentListContext identList() {
			return getRuleContext(IdentListContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentListArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identListArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentListArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentListArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentListArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentListArgContext identListArg() throws RecognitionException {
		IdentListArgContext _localctx = new IdentListArgContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_identListArg);
		try {
			setState(5576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,714,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5571);
				identList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5572);
				match(OPEN_PAR_SYMBOL);
				setState(5573);
				identList();
				setState(5574);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentListContext extends ParserRuleContext {
		public List<SimpleIdentifierContext> simpleIdentifier() {
			return getRuleContexts(SimpleIdentifierContext.class);
		}
		public SimpleIdentifierContext simpleIdentifier(int i) {
			return getRuleContext(SimpleIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IdentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentListContext identList() throws RecognitionException {
		IdentListContext _localctx = new IdentListContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_identList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5578);
			simpleIdentifier();
			setState(5583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5579);
				match(COMMA_SYMBOL);
				setState(5580);
				simpleIdentifier();
				}
				}
				setState(5585);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FulltextOptionsContext extends ParserRuleContext {
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MySQLParser.MODE_SYMBOL, 0); }
		public TerminalNode NATURAL_SYMBOL() { return getToken(MySQLParser.NATURAL_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode EXPANSION_SYMBOL() { return getToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public FulltextOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fulltextOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFulltextOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFulltextOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFulltextOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FulltextOptionsContext fulltextOptions() throws RecognitionException {
		FulltextOptionsContext _localctx = new FulltextOptionsContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_fulltextOptions);
		int _la;
		try {
			setState(5600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,718,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5586);
				match(IN_SYMBOL);
				setState(5587);
				match(BOOLEAN_SYMBOL);
				setState(5588);
				match(MODE_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5593);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN_SYMBOL) {
					{
					setState(5589);
					match(IN_SYMBOL);
					setState(5590);
					match(NATURAL_SYMBOL);
					setState(5591);
					match(LANGUAGE_SYMBOL);
					setState(5592);
					match(MODE_SYMBOL);
					}
				}

				setState(5598);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(5595);
					match(WITH_SYMBOL);
					setState(5596);
					match(QUERY_SYMBOL);
					setState(5597);
					match(EXPANSION_SYMBOL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuntimeFunctionCallContext extends ParserRuleContext {
		public Token name;
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CURRENT_USER_SYMBOL() { return getToken(MySQLParser.CURRENT_USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MySQLParser.HOUR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode INSERT_SYMBOL() { return getToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public TerminalNode LEFT_SYMBOL() { return getToken(MySQLParser.LEFT_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode RIGHT_SYMBOL() { return getToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TrimFunctionContext trimFunction() {
			return getRuleContext(TrimFunctionContext.class,0);
		}
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode ADDDATE_SYMBOL() { return getToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public TerminalNode SUBDATE_SYMBOL() { return getToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode CURDATE_SYMBOL() { return getToken(MySQLParser.CURDATE_SYMBOL, 0); }
		public TerminalNode CURTIME_SYMBOL() { return getToken(MySQLParser.CURTIME_SYMBOL, 0); }
		public TimeFunctionParametersContext timeFunctionParameters() {
			return getRuleContext(TimeFunctionParametersContext.class,0);
		}
		public TerminalNode DATE_ADD_SYMBOL() { return getToken(MySQLParser.DATE_ADD_SYMBOL, 0); }
		public TerminalNode DATE_SUB_SYMBOL() { return getToken(MySQLParser.DATE_SUB_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode EXTRACT_SYMBOL() { return getToken(MySQLParser.EXTRACT_SYMBOL, 0); }
		public DateTimeTtypeContext dateTimeTtype() {
			return getRuleContext(DateTimeTtypeContext.class,0);
		}
		public TerminalNode GET_FORMAT_SYMBOL() { return getToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public TerminalNode NOW_SYMBOL() { return getToken(MySQLParser.NOW_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode POSITION_SYMBOL() { return getToken(MySQLParser.POSITION_SYMBOL, 0); }
		public SubstringFunctionContext substringFunction() {
			return getRuleContext(SubstringFunctionContext.class,0);
		}
		public TerminalNode SYSDATE_SYMBOL() { return getToken(MySQLParser.SYSDATE_SYMBOL, 0); }
		public IntervalTimeStampContext intervalTimeStamp() {
			return getRuleContext(IntervalTimeStampContext.class,0);
		}
		public TerminalNode TIMESTAMP_ADD_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_DIFF_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public TerminalNode UTC_DATE_SYMBOL() { return getToken(MySQLParser.UTC_DATE_SYMBOL, 0); }
		public TerminalNode UTC_TIME_SYMBOL() { return getToken(MySQLParser.UTC_TIME_SYMBOL, 0); }
		public TerminalNode UTC_TIMESTAMP_SYMBOL() { return getToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0); }
		public TerminalNode ASCII_SYMBOL() { return getToken(MySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public ExprListWithParenthesesContext exprListWithParentheses() {
			return getRuleContext(ExprListWithParenthesesContext.class,0);
		}
		public TerminalNode COALESCE_SYMBOL() { return getToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public TerminalNode IF_SYMBOL() { return getToken(MySQLParser.IF_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode MOD_SYMBOL() { return getToken(MySQLParser.MOD_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode OLD_PASSWORD_SYMBOL() { return getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode REPEAT_SYMBOL() { return getToken(MySQLParser.REPEAT_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode REVERSE_SYMBOL() { return getToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode WEIGHT_STRING_SYMBOL() { return getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public WsNumCodepointsContext wsNumCodepoints() {
			return getRuleContext(WsNumCodepointsContext.class,0);
		}
		public List<Ulong_numberContext> ulong_number() {
			return getRuleContexts(Ulong_numberContext.class);
		}
		public Ulong_numberContext ulong_number(int i) {
			return getRuleContext(Ulong_numberContext.class,i);
		}
		public WeightStringLevelsContext weightStringLevels() {
			return getRuleContext(WeightStringLevelsContext.class,0);
		}
		public GeometryFunctionContext geometryFunction() {
			return getRuleContext(GeometryFunctionContext.class,0);
		}
		public RuntimeFunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_runtimeFunctionCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRuntimeFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRuntimeFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRuntimeFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuntimeFunctionCallContext runtimeFunctionCall() throws RecognitionException {
		RuntimeFunctionCallContext _localctx = new RuntimeFunctionCallContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_runtimeFunctionCall);
		int _la;
		try {
			setState(5924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5602);
				((RuntimeFunctionCallContext)_localctx).name = match(CHAR_SYMBOL);
				setState(5603);
				match(OPEN_PAR_SYMBOL);
				setState(5604);
				exprList();
				setState(5607);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING_SYMBOL) {
					{
					setState(5605);
					match(USING_SYMBOL);
					setState(5606);
					charsetName();
					}
				}

				setState(5609);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5611);
				((RuntimeFunctionCallContext)_localctx).name = match(CURRENT_USER_SYMBOL);
				setState(5613);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,720,_ctx) ) {
				case 1:
					{
					setState(5612);
					parentheses();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5615);
				((RuntimeFunctionCallContext)_localctx).name = match(DATE_SYMBOL);
				setState(5616);
				match(OPEN_PAR_SYMBOL);
				setState(5617);
				expr(0);
				setState(5618);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5620);
				((RuntimeFunctionCallContext)_localctx).name = match(DAY_SYMBOL);
				setState(5621);
				match(OPEN_PAR_SYMBOL);
				setState(5622);
				expr(0);
				setState(5623);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5625);
				((RuntimeFunctionCallContext)_localctx).name = match(HOUR_SYMBOL);
				setState(5626);
				match(OPEN_PAR_SYMBOL);
				setState(5627);
				expr(0);
				setState(5628);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5630);
				((RuntimeFunctionCallContext)_localctx).name = match(INSERT_SYMBOL);
				setState(5631);
				match(OPEN_PAR_SYMBOL);
				setState(5632);
				expr(0);
				setState(5633);
				match(COMMA_SYMBOL);
				setState(5634);
				expr(0);
				setState(5635);
				match(COMMA_SYMBOL);
				setState(5636);
				expr(0);
				setState(5637);
				match(COMMA_SYMBOL);
				setState(5638);
				expr(0);
				setState(5639);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5641);
				((RuntimeFunctionCallContext)_localctx).name = match(INTERVAL_SYMBOL);
				setState(5642);
				match(OPEN_PAR_SYMBOL);
				setState(5643);
				expr(0);
				setState(5646); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5644);
					match(COMMA_SYMBOL);
					setState(5645);
					expr(0);
					}
					}
					setState(5648); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA_SYMBOL );
				setState(5650);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5652);
				((RuntimeFunctionCallContext)_localctx).name = match(LEFT_SYMBOL);
				setState(5653);
				match(OPEN_PAR_SYMBOL);
				setState(5654);
				expr(0);
				setState(5655);
				match(COMMA_SYMBOL);
				setState(5656);
				expr(0);
				setState(5657);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5659);
				((RuntimeFunctionCallContext)_localctx).name = match(MINUTE_SYMBOL);
				setState(5660);
				match(OPEN_PAR_SYMBOL);
				setState(5661);
				expr(0);
				setState(5662);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5664);
				((RuntimeFunctionCallContext)_localctx).name = match(MONTH_SYMBOL);
				setState(5665);
				match(OPEN_PAR_SYMBOL);
				setState(5666);
				expr(0);
				setState(5667);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5669);
				((RuntimeFunctionCallContext)_localctx).name = match(RIGHT_SYMBOL);
				setState(5670);
				match(OPEN_PAR_SYMBOL);
				setState(5671);
				expr(0);
				setState(5672);
				match(COMMA_SYMBOL);
				setState(5673);
				expr(0);
				setState(5674);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5676);
				((RuntimeFunctionCallContext)_localctx).name = match(SECOND_SYMBOL);
				setState(5677);
				match(OPEN_PAR_SYMBOL);
				setState(5678);
				expr(0);
				setState(5679);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5681);
				((RuntimeFunctionCallContext)_localctx).name = match(TIME_SYMBOL);
				setState(5682);
				match(OPEN_PAR_SYMBOL);
				setState(5683);
				expr(0);
				setState(5684);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5686);
				((RuntimeFunctionCallContext)_localctx).name = match(TIMESTAMP_SYMBOL);
				setState(5687);
				match(OPEN_PAR_SYMBOL);
				setState(5688);
				expr(0);
				setState(5691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(5689);
					match(COMMA_SYMBOL);
					setState(5690);
					expr(0);
					}
				}

				setState(5693);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5695);
				trimFunction();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5696);
				((RuntimeFunctionCallContext)_localctx).name = match(USER_SYMBOL);
				setState(5697);
				parentheses();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5698);
				((RuntimeFunctionCallContext)_localctx).name = match(VALUES_SYMBOL);
				setState(5699);
				match(OPEN_PAR_SYMBOL);
				setState(5700);
				expr(0);
				setState(5701);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5703);
				((RuntimeFunctionCallContext)_localctx).name = match(YEAR_SYMBOL);
				setState(5704);
				match(OPEN_PAR_SYMBOL);
				setState(5705);
				expr(0);
				setState(5706);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5708);
				((RuntimeFunctionCallContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ADDDATE_SYMBOL || _la==SUBDATE_SYMBOL) ) {
					((RuntimeFunctionCallContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5709);
				match(OPEN_PAR_SYMBOL);
				setState(5710);
				expr(0);
				setState(5711);
				match(COMMA_SYMBOL);
				setState(5717);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
				case 1:
					{
					setState(5712);
					expr(0);
					}
					break;
				case 2:
					{
					setState(5713);
					match(INTERVAL_SYMBOL);
					setState(5714);
					expr(0);
					setState(5715);
					interval();
					}
					break;
				}
				setState(5719);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5721);
				((RuntimeFunctionCallContext)_localctx).name = match(CURDATE_SYMBOL);
				setState(5723);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
				case 1:
					{
					setState(5722);
					parentheses();
					}
					break;
				}
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(5725);
				((RuntimeFunctionCallContext)_localctx).name = match(CURTIME_SYMBOL);
				setState(5727);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,725,_ctx) ) {
				case 1:
					{
					setState(5726);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(5729);
				((RuntimeFunctionCallContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATE_ADD_SYMBOL || _la==DATE_SUB_SYMBOL) ) {
					((RuntimeFunctionCallContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5730);
				match(OPEN_PAR_SYMBOL);
				setState(5731);
				expr(0);
				setState(5732);
				match(COMMA_SYMBOL);
				setState(5733);
				match(INTERVAL_SYMBOL);
				setState(5734);
				expr(0);
				setState(5735);
				interval();
				setState(5736);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(5738);
				((RuntimeFunctionCallContext)_localctx).name = match(EXTRACT_SYMBOL);
				setState(5739);
				match(OPEN_PAR_SYMBOL);
				setState(5740);
				interval();
				setState(5741);
				match(FROM_SYMBOL);
				setState(5742);
				expr(0);
				setState(5743);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(5745);
				((RuntimeFunctionCallContext)_localctx).name = match(GET_FORMAT_SYMBOL);
				setState(5746);
				match(OPEN_PAR_SYMBOL);
				setState(5747);
				dateTimeTtype();
				setState(5748);
				match(COMMA_SYMBOL);
				setState(5749);
				expr(0);
				setState(5750);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(5752);
				((RuntimeFunctionCallContext)_localctx).name = match(NOW_SYMBOL);
				setState(5754);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,726,_ctx) ) {
				case 1:
					{
					setState(5753);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(5756);
				((RuntimeFunctionCallContext)_localctx).name = match(POSITION_SYMBOL);
				setState(5757);
				match(OPEN_PAR_SYMBOL);
				setState(5758);
				bitExpr(0);
				setState(5759);
				match(IN_SYMBOL);
				setState(5760);
				expr(0);
				setState(5761);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(5763);
				substringFunction();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(5764);
				((RuntimeFunctionCallContext)_localctx).name = match(SYSDATE_SYMBOL);
				setState(5766);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,727,_ctx) ) {
				case 1:
					{
					setState(5765);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(5768);
				((RuntimeFunctionCallContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==TIMESTAMP_ADD_SYMBOL || _la==TIMESTAMP_DIFF_SYMBOL) ) {
					((RuntimeFunctionCallContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5769);
				match(OPEN_PAR_SYMBOL);
				setState(5770);
				intervalTimeStamp();
				setState(5771);
				match(COMMA_SYMBOL);
				setState(5772);
				expr(0);
				setState(5773);
				match(COMMA_SYMBOL);
				setState(5774);
				expr(0);
				setState(5775);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(5777);
				((RuntimeFunctionCallContext)_localctx).name = match(UTC_DATE_SYMBOL);
				setState(5779);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
				case 1:
					{
					setState(5778);
					parentheses();
					}
					break;
				}
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(5781);
				((RuntimeFunctionCallContext)_localctx).name = match(UTC_TIME_SYMBOL);
				setState(5783);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
				case 1:
					{
					setState(5782);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(5785);
				((RuntimeFunctionCallContext)_localctx).name = match(UTC_TIMESTAMP_SYMBOL);
				setState(5787);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,730,_ctx) ) {
				case 1:
					{
					setState(5786);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(5789);
				((RuntimeFunctionCallContext)_localctx).name = match(ASCII_SYMBOL);
				setState(5790);
				match(OPEN_PAR_SYMBOL);
				setState(5791);
				expr(0);
				setState(5792);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(5794);
				((RuntimeFunctionCallContext)_localctx).name = match(CHARSET_SYMBOL);
				setState(5795);
				match(OPEN_PAR_SYMBOL);
				setState(5796);
				expr(0);
				setState(5797);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(5799);
				((RuntimeFunctionCallContext)_localctx).name = match(COALESCE_SYMBOL);
				setState(5800);
				exprListWithParentheses();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(5801);
				((RuntimeFunctionCallContext)_localctx).name = match(COLLATION_SYMBOL);
				setState(5802);
				match(OPEN_PAR_SYMBOL);
				setState(5803);
				expr(0);
				setState(5804);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(5806);
				((RuntimeFunctionCallContext)_localctx).name = match(DATABASE_SYMBOL);
				setState(5807);
				parentheses();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(5808);
				((RuntimeFunctionCallContext)_localctx).name = match(IF_SYMBOL);
				setState(5809);
				match(OPEN_PAR_SYMBOL);
				setState(5810);
				expr(0);
				setState(5811);
				match(COMMA_SYMBOL);
				setState(5812);
				expr(0);
				setState(5813);
				match(COMMA_SYMBOL);
				setState(5814);
				expr(0);
				setState(5815);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(5817);
				((RuntimeFunctionCallContext)_localctx).name = match(FORMAT_SYMBOL);
				setState(5818);
				match(OPEN_PAR_SYMBOL);
				setState(5819);
				expr(0);
				setState(5820);
				match(COMMA_SYMBOL);
				setState(5821);
				expr(0);
				setState(5824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(5822);
					match(COMMA_SYMBOL);
					setState(5823);
					expr(0);
					}
				}

				setState(5826);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(5828);
				((RuntimeFunctionCallContext)_localctx).name = match(MICROSECOND_SYMBOL);
				setState(5829);
				match(OPEN_PAR_SYMBOL);
				setState(5830);
				expr(0);
				setState(5831);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(5833);
				((RuntimeFunctionCallContext)_localctx).name = match(MOD_SYMBOL);
				setState(5834);
				match(OPEN_PAR_SYMBOL);
				setState(5835);
				expr(0);
				setState(5836);
				match(COMMA_SYMBOL);
				setState(5837);
				expr(0);
				setState(5838);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(5840);
				if (!(serverVersion < 50607)) throw new FailedPredicateException(this, "serverVersion < 50607");
				setState(5841);
				((RuntimeFunctionCallContext)_localctx).name = match(OLD_PASSWORD_SYMBOL);
				setState(5842);
				match(OPEN_PAR_SYMBOL);
				setState(5843);
				textLiteral();
				setState(5844);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(5846);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(5847);
				((RuntimeFunctionCallContext)_localctx).name = match(PASSWORD_SYMBOL);
				setState(5848);
				match(OPEN_PAR_SYMBOL);
				setState(5849);
				expr(0);
				setState(5850);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(5852);
				((RuntimeFunctionCallContext)_localctx).name = match(QUARTER_SYMBOL);
				setState(5853);
				match(OPEN_PAR_SYMBOL);
				setState(5854);
				expr(0);
				setState(5855);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(5857);
				((RuntimeFunctionCallContext)_localctx).name = match(REPEAT_SYMBOL);
				setState(5858);
				match(OPEN_PAR_SYMBOL);
				setState(5859);
				expr(0);
				setState(5860);
				match(COMMA_SYMBOL);
				setState(5861);
				expr(0);
				setState(5862);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(5864);
				((RuntimeFunctionCallContext)_localctx).name = match(REPLACE_SYMBOL);
				setState(5865);
				match(OPEN_PAR_SYMBOL);
				setState(5866);
				expr(0);
				setState(5867);
				match(COMMA_SYMBOL);
				setState(5868);
				expr(0);
				setState(5869);
				match(COMMA_SYMBOL);
				setState(5870);
				expr(0);
				setState(5871);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(5873);
				((RuntimeFunctionCallContext)_localctx).name = match(REVERSE_SYMBOL);
				setState(5874);
				match(OPEN_PAR_SYMBOL);
				setState(5875);
				expr(0);
				setState(5876);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(5878);
				((RuntimeFunctionCallContext)_localctx).name = match(ROW_COUNT_SYMBOL);
				setState(5879);
				parentheses();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(5880);
				((RuntimeFunctionCallContext)_localctx).name = match(TRUNCATE_SYMBOL);
				setState(5881);
				match(OPEN_PAR_SYMBOL);
				setState(5882);
				expr(0);
				setState(5883);
				match(COMMA_SYMBOL);
				setState(5884);
				expr(0);
				setState(5885);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(5887);
				((RuntimeFunctionCallContext)_localctx).name = match(WEEK_SYMBOL);
				setState(5888);
				match(OPEN_PAR_SYMBOL);
				setState(5889);
				expr(0);
				setState(5892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(5890);
					match(COMMA_SYMBOL);
					setState(5891);
					expr(0);
					}
				}

				setState(5894);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(5896);
				if (!(serverVersion >= 50600)) throw new FailedPredicateException(this, "serverVersion >= 50600");
				setState(5897);
				((RuntimeFunctionCallContext)_localctx).name = match(WEIGHT_STRING_SYMBOL);
				setState(5898);
				match(OPEN_PAR_SYMBOL);
				setState(5899);
				expr(0);
				setState(5919);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,735,_ctx) ) {
				case 1:
					{
					setState(5903);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
					case 1:
						{
						setState(5900);
						match(AS_SYMBOL);
						setState(5901);
						match(CHAR_SYMBOL);
						setState(5902);
						wsNumCodepoints();
						}
						break;
					}
					setState(5907);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,734,_ctx) ) {
					case 1:
						{
						setState(5905);
						if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
						setState(5906);
						weightStringLevels();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(5909);
					match(AS_SYMBOL);
					setState(5910);
					match(BINARY_SYMBOL);
					setState(5911);
					wsNumCodepoints();
					}
					break;
				case 3:
					{
					setState(5912);
					match(COMMA_SYMBOL);
					setState(5913);
					ulong_number();
					setState(5914);
					match(COMMA_SYMBOL);
					setState(5915);
					ulong_number();
					setState(5916);
					match(COMMA_SYMBOL);
					setState(5917);
					ulong_number();
					}
					break;
				}
				setState(5921);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(5923);
				geometryFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GeometryFunctionContext extends ParserRuleContext {
		public Token name;
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public ExprListWithParenthesesContext exprListWithParentheses() {
			return getRuleContext(ExprListWithParenthesesContext.class,0);
		}
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public GeometryFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_geometryFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGeometryFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGeometryFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGeometryFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeometryFunctionContext geometryFunction() throws RecognitionException {
		GeometryFunctionContext _localctx = new GeometryFunctionContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_geometryFunction);
		try {
			setState(5957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,738,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5926);
				if (!(serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion < 50706");
				setState(5927);
				((GeometryFunctionContext)_localctx).name = match(CONTAINS_SYMBOL);
				setState(5928);
				match(OPEN_PAR_SYMBOL);
				setState(5929);
				expr(0);
				setState(5930);
				match(COMMA_SYMBOL);
				setState(5931);
				expr(0);
				setState(5932);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5934);
				((GeometryFunctionContext)_localctx).name = match(GEOMETRYCOLLECTION_SYMBOL);
				setState(5935);
				match(OPEN_PAR_SYMBOL);
				setState(5937);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
				case 1:
					{
					setState(5936);
					exprList();
					}
					break;
				}
				setState(5939);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5940);
				((GeometryFunctionContext)_localctx).name = match(LINESTRING_SYMBOL);
				setState(5941);
				exprListWithParentheses();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5942);
				((GeometryFunctionContext)_localctx).name = match(MULTILINESTRING_SYMBOL);
				setState(5943);
				exprListWithParentheses();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5944);
				((GeometryFunctionContext)_localctx).name = match(MULTIPOINT_SYMBOL);
				setState(5945);
				exprListWithParentheses();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5946);
				((GeometryFunctionContext)_localctx).name = match(MULTIPOLYGON_SYMBOL);
				setState(5947);
				exprListWithParentheses();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5948);
				((GeometryFunctionContext)_localctx).name = match(POINT_SYMBOL);
				setState(5949);
				match(OPEN_PAR_SYMBOL);
				setState(5950);
				expr(0);
				setState(5951);
				match(COMMA_SYMBOL);
				setState(5952);
				expr(0);
				setState(5953);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5955);
				((GeometryFunctionContext)_localctx).name = match(POLYGON_SYMBOL);
				setState(5956);
				exprListWithParentheses();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeFunctionParametersContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FractionalPrecisionContext fractionalPrecision() {
			return getRuleContext(FractionalPrecisionContext.class,0);
		}
		public TimeFunctionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeFunctionParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTimeFunctionParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTimeFunctionParameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTimeFunctionParameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeFunctionParametersContext timeFunctionParameters() throws RecognitionException {
		TimeFunctionParametersContext _localctx = new TimeFunctionParametersContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_timeFunctionParameters);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5959);
			match(OPEN_PAR_SYMBOL);
			setState(5961);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,739,_ctx) ) {
			case 1:
				{
				setState(5960);
				fractionalPrecision();
				}
				break;
			}
			setState(5963);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FractionalPrecisionContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public FractionalPrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fractionalPrecision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFractionalPrecision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFractionalPrecision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFractionalPrecision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FractionalPrecisionContext fractionalPrecision() throws RecognitionException {
		FractionalPrecisionContext _localctx = new FractionalPrecisionContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_fractionalPrecision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5965);
			if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
			setState(5966);
			match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WeightStringLevelsContext extends ParserRuleContext {
		public TerminalNode LEVEL_SYMBOL() { return getToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public List<Real_ulong_numberContext> real_ulong_number() {
			return getRuleContexts(Real_ulong_numberContext.class);
		}
		public Real_ulong_numberContext real_ulong_number(int i) {
			return getRuleContext(Real_ulong_numberContext.class,i);
		}
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public List<WeightStringLevelListItemContext> weightStringLevelListItem() {
			return getRuleContexts(WeightStringLevelListItemContext.class);
		}
		public WeightStringLevelListItemContext weightStringLevelListItem(int i) {
			return getRuleContext(WeightStringLevelListItemContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WeightStringLevelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_weightStringLevels; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWeightStringLevels(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWeightStringLevels(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWeightStringLevels(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WeightStringLevelsContext weightStringLevels() throws RecognitionException {
		WeightStringLevelsContext _localctx = new WeightStringLevelsContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_weightStringLevels);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5968);
			match(LEVEL_SYMBOL);
			setState(5981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,741,_ctx) ) {
			case 1:
				{
				setState(5969);
				real_ulong_number();
				setState(5970);
				match(MINUS_OPERATOR);
				setState(5971);
				real_ulong_number();
				}
				break;
			case 2:
				{
				setState(5973);
				weightStringLevelListItem();
				setState(5978);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(5974);
					match(COMMA_SYMBOL);
					setState(5975);
					weightStringLevelListItem();
					}
					}
					setState(5980);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WeightStringLevelListItemContext extends ParserRuleContext {
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode REVERSE_SYMBOL() { return getToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ASC_SYMBOL() { return getToken(MySQLParser.ASC_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MySQLParser.DESC_SYMBOL, 0); }
		public WeightStringLevelListItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_weightStringLevelListItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWeightStringLevelListItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWeightStringLevelListItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWeightStringLevelListItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WeightStringLevelListItemContext weightStringLevelListItem() throws RecognitionException {
		WeightStringLevelListItemContext _localctx = new WeightStringLevelListItemContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_weightStringLevelListItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5983);
			real_ulong_number();
			setState(5989);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASC_SYMBOL:
			case DESC_SYMBOL:
				{
				setState(5984);
				_la = _input.LA(1);
				if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REVERSE_SYMBOL) {
					{
					setState(5985);
					match(REVERSE_SYMBOL);
					}
				}

				}
				break;
			case REVERSE_SYMBOL:
				{
				setState(5988);
				match(REVERSE_SYMBOL);
				}
				break;
			case COMMA_SYMBOL:
			case CLOSE_PAR_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateTimeTtypeContext extends ParserRuleContext {
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public DateTimeTtypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateTimeTtype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDateTimeTtype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDateTimeTtype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDateTimeTtype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DateTimeTtypeContext dateTimeTtype() throws RecognitionException {
		DateTimeTtypeContext _localctx = new DateTimeTtypeContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_dateTimeTtype);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5991);
			_la = _input.LA(1);
			if ( !(_la==DATETIME_SYMBOL || _la==DATE_SYMBOL || _la==TIMESTAMP_SYMBOL || _la==TIME_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrimFunctionContext extends ParserRuleContext {
		public TerminalNode TRIM_SYMBOL() { return getToken(MySQLParser.TRIM_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LEADING_SYMBOL() { return getToken(MySQLParser.LEADING_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode TRAILING_SYMBOL() { return getToken(MySQLParser.TRAILING_SYMBOL, 0); }
		public TerminalNode BOTH_SYMBOL() { return getToken(MySQLParser.BOTH_SYMBOL, 0); }
		public TrimFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTrimFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTrimFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTrimFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrimFunctionContext trimFunction() throws RecognitionException {
		TrimFunctionContext _localctx = new TrimFunctionContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_trimFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5993);
			match(TRIM_SYMBOL);
			setState(5994);
			match(OPEN_PAR_SYMBOL);
			setState(6018);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,748,_ctx) ) {
			case 1:
				{
				setState(5995);
				expr(0);
				setState(5998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					setState(5996);
					match(FROM_SYMBOL);
					setState(5997);
					expr(0);
					}
				}

				}
				break;
			case 2:
				{
				setState(6000);
				match(LEADING_SYMBOL);
				setState(6002);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,745,_ctx) ) {
				case 1:
					{
					setState(6001);
					expr(0);
					}
					break;
				}
				setState(6004);
				match(FROM_SYMBOL);
				setState(6005);
				expr(0);
				}
				break;
			case 3:
				{
				setState(6006);
				match(TRAILING_SYMBOL);
				setState(6008);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
				case 1:
					{
					setState(6007);
					expr(0);
					}
					break;
				}
				setState(6010);
				match(FROM_SYMBOL);
				setState(6011);
				expr(0);
				}
				break;
			case 4:
				{
				setState(6012);
				match(BOTH_SYMBOL);
				setState(6014);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
				case 1:
					{
					setState(6013);
					expr(0);
					}
					break;
				}
				setState(6016);
				match(FROM_SYMBOL);
				setState(6017);
				expr(0);
				}
				break;
			}
			setState(6020);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstringFunctionContext extends ParserRuleContext {
		public TerminalNode SUBSTRING_SYMBOL() { return getToken(MySQLParser.SUBSTRING_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public SubstringFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substringFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSubstringFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSubstringFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSubstringFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstringFunctionContext substringFunction() throws RecognitionException {
		SubstringFunctionContext _localctx = new SubstringFunctionContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_substringFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6022);
			match(SUBSTRING_SYMBOL);
			setState(6023);
			match(OPEN_PAR_SYMBOL);
			setState(6024);
			expr(0);
			setState(6037);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMA_SYMBOL:
				{
				setState(6025);
				match(COMMA_SYMBOL);
				setState(6026);
				expr(0);
				setState(6029);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6027);
					match(COMMA_SYMBOL);
					setState(6028);
					expr(0);
					}
				}

				}
				break;
			case FROM_SYMBOL:
				{
				setState(6031);
				match(FROM_SYMBOL);
				setState(6032);
				expr(0);
				setState(6035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(6033);
					match(FOR_SYMBOL);
					setState(6034);
					expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6039);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public UdfExprListContext udfExprList() {
			return getRuleContext(UdfExprListContext.class,0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_functionCall);
		try {
			setState(6055);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6041);
				pureIdentifier();
				setState(6042);
				match(OPEN_PAR_SYMBOL);
				setState(6044);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,752,_ctx) ) {
				case 1:
					{
					setState(6043);
					udfExprList();
					}
					break;
				}
				setState(6046);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6048);
				qualifiedIdentifier();
				setState(6049);
				match(OPEN_PAR_SYMBOL);
				setState(6051);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,753,_ctx) ) {
				case 1:
					{
					setState(6050);
					exprList();
					}
					break;
				}
				setState(6053);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UdfExprListContext extends ParserRuleContext {
		public List<UdfExprContext> udfExpr() {
			return getRuleContexts(UdfExprContext.class);
		}
		public UdfExprContext udfExpr(int i) {
			return getRuleContext(UdfExprContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UdfExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udfExprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUdfExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUdfExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUdfExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UdfExprListContext udfExprList() throws RecognitionException {
		UdfExprListContext _localctx = new UdfExprListContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_udfExprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6057);
			udfExpr();
			setState(6062);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(6058);
				match(COMMA_SYMBOL);
				setState(6059);
				udfExpr();
				}
				}
				setState(6064);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UdfExprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SelectAliasContext selectAlias() {
			return getRuleContext(SelectAliasContext.class,0);
		}
		public UdfExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udfExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUdfExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUdfExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUdfExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UdfExprContext udfExpr() throws RecognitionException {
		UdfExprContext _localctx = new UdfExprContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_udfExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6065);
			expr(0);
			setState(6067);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,756,_ctx) ) {
			case 1:
				{
				setState(6066);
				selectAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableContext extends ParserRuleContext {
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public TerminalNode ASSIGN_OPERATOR() { return getToken(MySQLParser.ASSIGN_OPERATOR, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SystemVariableContext systemVariable() {
			return getRuleContext(SystemVariableContext.class,0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_variable);
		try {
			setState(6075);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN_SYMBOL:
			case AT_TEXT_SUFFIX:
				enterOuterAlt(_localctx, 1);
				{
				setState(6069);
				userVariable();
				setState(6072);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,757,_ctx) ) {
				case 1:
					{
					setState(6070);
					match(ASSIGN_OPERATOR);
					setState(6071);
					expr(0);
					}
					break;
				}
				}
				break;
			case AT_AT_SIGN_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6074);
				systemVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariableContext extends ParserRuleContext {
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public UserVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUserVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUserVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUserVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserVariableContext userVariable() throws RecognitionException {
		UserVariableContext _localctx = new UserVariableContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_userVariable);
		try {
			setState(6080);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(6077);
				match(AT_SIGN_SYMBOL);
				setState(6078);
				textOrIdentifier();
				}
				}
				break;
			case AT_TEXT_SUFFIX:
				enterOuterAlt(_localctx, 2);
				{
				setState(6079);
				match(AT_TEXT_SUFFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SystemVariableContext extends ParserRuleContext {
		public TerminalNode AT_AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public VarIdentTypeContext varIdentType() {
			return getRuleContext(VarIdentTypeContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public SystemVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_systemVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSystemVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSystemVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSystemVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SystemVariableContext systemVariable() throws RecognitionException {
		SystemVariableContext _localctx = new SystemVariableContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_systemVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6082);
			match(AT_AT_SIGN_SYMBOL);
			setState(6084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,760,_ctx) ) {
			case 1:
				{
				setState(6083);
				varIdentType();
				}
				break;
			}
			setState(6086);
			textOrIdentifier();
			setState(6088);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,761,_ctx) ) {
			case 1:
				{
				setState(6087);
				dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InternalVariableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public InternalVariableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_internalVariableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInternalVariableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInternalVariableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInternalVariableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InternalVariableNameContext internalVariableName() throws RecognitionException {
		InternalVariableNameContext _localctx = new InternalVariableNameContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_internalVariableName);
		int _la;
		try {
			setState(6096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6090);
				identifier();
				setState(6092);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					setState(6091);
					dotIdentifier();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6094);
				match(DEFAULT_SYMBOL);
				setState(6095);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenExpressionContext extends ParserRuleContext {
		public TerminalNode WHEN_SYMBOL() { return getToken(MySQLParser.WHEN_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public WhenExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWhenExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWhenExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWhenExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenExpressionContext whenExpression() throws RecognitionException {
		WhenExpressionContext _localctx = new WhenExpressionContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_whenExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6098);
			match(WHEN_SYMBOL);
			setState(6099);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThenExpressionContext extends ParserRuleContext {
		public TerminalNode THEN_SYMBOL() { return getToken(MySQLParser.THEN_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ThenExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_thenExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterThenExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitThenExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitThenExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThenExpressionContext thenExpression() throws RecognitionException {
		ThenExpressionContext _localctx = new ThenExpressionContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_thenExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6101);
			match(THEN_SYMBOL);
			setState(6102);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElseExpressionContext extends ParserRuleContext {
		public TerminalNode ELSE_SYMBOL() { return getToken(MySQLParser.ELSE_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ElseExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elseExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterElseExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitElseExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitElseExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElseExpressionContext elseExpression() throws RecognitionException {
		ElseExpressionContext _localctx = new ElseExpressionContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_elseExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6104);
			match(ELSE_SYMBOL);
			setState(6105);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastTypeContext extends ParserRuleContext {
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return getRuleContext(CharsetWithOptBinaryContext.class,0);
		}
		public NcharContext nchar() {
			return getRuleContext(NcharContext.class,0);
		}
		public TerminalNode SIGNED_SYMBOL() { return getToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public TerminalNode INT_SYMBOL() { return getToken(MySQLParser.INT_SYMBOL, 0); }
		public TerminalNode UNSIGNED_SYMBOL() { return getToken(MySQLParser.UNSIGNED_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return getRuleContext(TypeDatetimePrecisionContext.class,0);
		}
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode DECIMAL_SYMBOL() { return getToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public FloatOptionsContext floatOptions() {
			return getRuleContext(FloatOptionsContext.class,0);
		}
		public TerminalNode JSON_SYMBOL() { return getToken(MySQLParser.JSON_SYMBOL, 0); }
		public CastTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCastType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCastType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCastType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastTypeContext castType() throws RecognitionException {
		CastTypeContext _localctx = new CastTypeContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_castType);
		int _la;
		try {
			setState(6145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,773,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6107);
				match(BINARY_SYMBOL);
				setState(6109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					setState(6108);
					fieldLength();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6111);
				match(CHAR_SYMBOL);
				setState(6113);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,765,_ctx) ) {
				case 1:
					{
					setState(6112);
					fieldLength();
					}
					break;
				}
				setState(6116);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
				case 1:
					{
					setState(6115);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6118);
				nchar();
				setState(6120);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					setState(6119);
					fieldLength();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6122);
				match(SIGNED_SYMBOL);
				setState(6124);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INT_SYMBOL) {
					{
					setState(6123);
					match(INT_SYMBOL);
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6126);
				match(UNSIGNED_SYMBOL);
				setState(6128);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INT_SYMBOL) {
					{
					setState(6127);
					match(INT_SYMBOL);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6130);
				match(DATE_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6131);
				match(TIME_SYMBOL);
				setState(6133);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
				case 1:
					{
					setState(6132);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6135);
				match(DATETIME_SYMBOL);
				setState(6137);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,771,_ctx) ) {
				case 1:
					{
					setState(6136);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6139);
				match(DECIMAL_SYMBOL);
				setState(6141);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					setState(6140);
					floatOptions();
					}
				}

				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6143);
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				setState(6144);
				match(JSON_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprListContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprListContext exprList() throws RecognitionException {
		ExprListContext _localctx = new ExprListContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_exprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6147);
			expr(0);
			setState(6152);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(6148);
				match(COMMA_SYMBOL);
				setState(6149);
				expr(0);
				}
				}
				setState(6154);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetContext extends ParserRuleContext {
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public CharsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCharset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetContext charset() throws RecognitionException {
		CharsetContext _localctx = new CharsetContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_charset);
		try {
			setState(6158);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6155);
				match(CHAR_SYMBOL);
				setState(6156);
				match(SET_SYMBOL);
				}
				break;
			case CHARSET_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6157);
				match(CHARSET_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotRuleContext extends ParserRuleContext {
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode NOT2_SYMBOL() { return getToken(MySQLParser.NOT2_SYMBOL, 0); }
		public NotRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNotRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNotRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNotRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotRuleContext notRule() throws RecognitionException {
		NotRuleContext _localctx = new NotRuleContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_notRule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6160);
			_la = _input.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==NOT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Not2RuleContext extends ParserRuleContext {
		public TerminalNode LOGICAL_NOT_OPERATOR() { return getToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0); }
		public TerminalNode NOT2_SYMBOL() { return getToken(MySQLParser.NOT2_SYMBOL, 0); }
		public Not2RuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not2Rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNot2Rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNot2Rule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNot2Rule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Not2RuleContext not2Rule() throws RecognitionException {
		Not2RuleContext _localctx = new Not2RuleContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_not2Rule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6162);
			_la = _input.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==LOGICAL_NOT_OPERATOR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalContext extends ParserRuleContext {
		public IntervalTimeStampContext intervalTimeStamp() {
			return getRuleContext(IntervalTimeStampContext.class,0);
		}
		public TerminalNode SECOND_MICROSECOND_SYMBOL() { return getToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0); }
		public TerminalNode MINUTE_MICROSECOND_SYMBOL() { return getToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0); }
		public TerminalNode MINUTE_SECOND_SYMBOL() { return getToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0); }
		public TerminalNode HOUR_MICROSECOND_SYMBOL() { return getToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0); }
		public TerminalNode HOUR_SECOND_SYMBOL() { return getToken(MySQLParser.HOUR_SECOND_SYMBOL, 0); }
		public TerminalNode HOUR_MINUTE_SYMBOL() { return getToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0); }
		public TerminalNode DAY_MICROSECOND_SYMBOL() { return getToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0); }
		public TerminalNode DAY_SECOND_SYMBOL() { return getToken(MySQLParser.DAY_SECOND_SYMBOL, 0); }
		public TerminalNode DAY_MINUTE_SYMBOL() { return getToken(MySQLParser.DAY_MINUTE_SYMBOL, 0); }
		public TerminalNode DAY_HOUR_SYMBOL() { return getToken(MySQLParser.DAY_HOUR_SYMBOL, 0); }
		public TerminalNode YEAR_MONTH_SYMBOL() { return getToken(MySQLParser.YEAR_MONTH_SYMBOL, 0); }
		public IntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalContext interval() throws RecognitionException {
		IntervalContext _localctx = new IntervalContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_interval);
		int _la;
		try {
			setState(6166);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DAY_SYMBOL:
			case HOUR_SYMBOL:
			case MICROSECOND_SYMBOL:
			case MINUTE_SYMBOL:
			case MONTH_SYMBOL:
			case QUARTER_SYMBOL:
			case SECOND_SYMBOL:
			case WEEK_SYMBOL:
			case YEAR_SYMBOL:
			case FRAC_SECOND_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6164);
				intervalTimeStamp();
				}
				break;
			case DAY_HOUR_SYMBOL:
			case DAY_MICROSECOND_SYMBOL:
			case DAY_MINUTE_SYMBOL:
			case DAY_SECOND_SYMBOL:
			case HOUR_MICROSECOND_SYMBOL:
			case HOUR_MINUTE_SYMBOL:
			case HOUR_SECOND_SYMBOL:
			case MINUTE_MICROSECOND_SYMBOL:
			case MINUTE_SECOND_SYMBOL:
			case SECOND_MICROSECOND_SYMBOL:
			case YEAR_MONTH_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6165);
				_la = _input.LA(1);
				if ( !(((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & ((1L << (DAY_HOUR_SYMBOL - 471)) | (1L << (DAY_MICROSECOND_SYMBOL - 471)) | (1L << (DAY_MINUTE_SYMBOL - 471)) | (1L << (DAY_SECOND_SYMBOL - 471)) | (1L << (HOUR_MICROSECOND_SYMBOL - 471)) | (1L << (HOUR_MINUTE_SYMBOL - 471)) | (1L << (HOUR_SECOND_SYMBOL - 471)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (MINUTE_MICROSECOND_SYMBOL - 564)) | (1L << (MINUTE_SECOND_SYMBOL - 564)) | (1L << (SECOND_MICROSECOND_SYMBOL - 564)))) != 0) || _la==YEAR_MONTH_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTimeStampContext extends ParserRuleContext {
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode FRAC_SECOND_SYMBOL() { return getToken(MySQLParser.FRAC_SECOND_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MySQLParser.HOUR_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public IntervalTimeStampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTimeStamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIntervalTimeStamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIntervalTimeStamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIntervalTimeStamp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTimeStampContext intervalTimeStamp() throws RecognitionException {
		IntervalTimeStampContext _localctx = new IntervalTimeStampContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_intervalTimeStamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6168);
			_la = _input.LA(1);
			if ( !(_la==DAY_SYMBOL || _la==HOUR_SYMBOL || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (MICROSECOND_SYMBOL - 217)) | (1L << (MINUTE_SYMBOL - 217)) | (1L << (MONTH_SYMBOL - 217)) | (1L << (QUARTER_SYMBOL - 217)))) != 0) || _la==SECOND_SYMBOL || _la==WEEK_SYMBOL || _la==YEAR_SYMBOL || _la==FRAC_SECOND_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprListWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprListWithParentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExprListWithParentheses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExprListWithParentheses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExprListWithParentheses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprListWithParenthesesContext exprListWithParentheses() throws RecognitionException {
		ExprListWithParenthesesContext _localctx = new ExprListWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_exprListWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6170);
			match(OPEN_PAR_SYMBOL);
			setState(6171);
			exprList();
			setState(6172);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderOrGroupListContext extends ParserRuleContext {
		public List<OrderExpressionContext> orderExpression() {
			return getRuleContexts(OrderExpressionContext.class);
		}
		public OrderExpressionContext orderExpression(int i) {
			return getRuleContext(OrderExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public OrderOrGroupListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderOrGroupList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOrderOrGroupList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOrderOrGroupList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOrderOrGroupList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderOrGroupListContext orderOrGroupList() throws RecognitionException {
		OrderOrGroupListContext _localctx = new OrderOrGroupListContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_orderOrGroupList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6174);
			orderExpression();
			setState(6179);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,777,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6175);
					match(COMMA_SYMBOL);
					setState(6176);
					orderExpression();
					}
					} 
				}
				setState(6181);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,777,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderExpressionContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public DirectionContext direction() {
			return getRuleContext(DirectionContext.class,0);
		}
		public OrderExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOrderExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOrderExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOrderExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderExpressionContext orderExpression() throws RecognitionException {
		OrderExpressionContext _localctx = new OrderExpressionContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_orderExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6182);
			expr(0);
			setState(6184);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
			case 1:
				{
				setState(6183);
				direction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode CHANNEL_SYMBOL() { return getToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public ChannelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterChannel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitChannel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitChannel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChannelContext channel() throws RecognitionException {
		ChannelContext _localctx = new ChannelContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_channel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6186);
			if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
			setState(6187);
			match(FOR_SYMBOL);
			setState(6188);
			match(CHANNEL_SYMBOL);
			setState(6189);
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public SimpleStatementContext simpleStatement() {
			return getRuleContext(SimpleStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public LabeledBlockContext labeledBlock() {
			return getRuleContext(LabeledBlockContext.class,0);
		}
		public UnlabeledBlockContext unlabeledBlock() {
			return getRuleContext(UnlabeledBlockContext.class,0);
		}
		public LabeledControlContext labeledControl() {
			return getRuleContext(LabeledControlContext.class,0);
		}
		public UnlabeledControlContext unlabeledControl() {
			return getRuleContext(UnlabeledControlContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public CursorOpenContext cursorOpen() {
			return getRuleContext(CursorOpenContext.class,0);
		}
		public CursorFetchContext cursorFetch() {
			return getRuleContext(CursorFetchContext.class,0);
		}
		public CursorCloseContext cursorClose() {
			return getRuleContext(CursorCloseContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCompoundStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCompoundStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCompoundStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_compoundStatement);
		try {
			setState(6204);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,779,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6191);
				simpleStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6192);
				returnStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6193);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6194);
				caseStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6195);
				labeledBlock();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6196);
				unlabeledBlock();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6197);
				labeledControl();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6198);
				unlabeledControl();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6199);
				leaveStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6200);
				iterateStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6201);
				cursorOpen();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6202);
				cursorFetch();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6203);
				cursorClose();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN_SYMBOL() { return getToken(MySQLParser.RETURN_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterReturnStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitReturnStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitReturnStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6206);
			match(RETURN_SYMBOL);
			setState(6207);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public List<TerminalNode> IF_SYMBOL() { return getTokens(MySQLParser.IF_SYMBOL); }
		public TerminalNode IF_SYMBOL(int i) {
			return getToken(MySQLParser.IF_SYMBOL, i);
		}
		public IfBodyContext ifBody() {
			return getRuleContext(IfBodyContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIfStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIfStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIfStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_ifStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6209);
			match(IF_SYMBOL);
			setState(6210);
			ifBody();
			setState(6211);
			match(END_SYMBOL);
			setState(6212);
			match(IF_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfBodyContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ThenStatementContext thenStatement() {
			return getRuleContext(ThenStatementContext.class,0);
		}
		public TerminalNode ELSEIF_SYMBOL() { return getToken(MySQLParser.ELSEIF_SYMBOL, 0); }
		public IfBodyContext ifBody() {
			return getRuleContext(IfBodyContext.class,0);
		}
		public TerminalNode ELSE_SYMBOL() { return getToken(MySQLParser.ELSE_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public IfBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIfBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIfBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIfBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfBodyContext ifBody() throws RecognitionException {
		IfBodyContext _localctx = new IfBodyContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_ifBody);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6214);
			expr(0);
			setState(6215);
			thenStatement();
			setState(6220);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ELSEIF_SYMBOL:
				{
				setState(6216);
				match(ELSEIF_SYMBOL);
				setState(6217);
				ifBody();
				}
				break;
			case ELSE_SYMBOL:
				{
				setState(6218);
				match(ELSE_SYMBOL);
				setState(6219);
				compoundStatementList();
				}
				break;
			case END_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThenStatementContext extends ParserRuleContext {
		public TerminalNode THEN_SYMBOL() { return getToken(MySQLParser.THEN_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public ThenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_thenStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterThenStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitThenStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitThenStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThenStatementContext thenStatement() throws RecognitionException {
		ThenStatementContext _localctx = new ThenStatementContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_thenStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6222);
			match(THEN_SYMBOL);
			setState(6223);
			compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementListContext extends ParserRuleContext {
		public List<CompoundStatementContext> compoundStatement() {
			return getRuleContexts(CompoundStatementContext.class);
		}
		public CompoundStatementContext compoundStatement(int i) {
			return getRuleContext(CompoundStatementContext.class,i);
		}
		public List<TerminalNode> SEMICOLON_SYMBOL() { return getTokens(MySQLParser.SEMICOLON_SYMBOL); }
		public TerminalNode SEMICOLON_SYMBOL(int i) {
			return getToken(MySQLParser.SEMICOLON_SYMBOL, i);
		}
		public CompoundStatementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCompoundStatementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCompoundStatementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCompoundStatementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementListContext compoundStatementList() throws RecognitionException {
		CompoundStatementListContext _localctx = new CompoundStatementListContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_compoundStatementList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6228); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6225);
					compoundStatement();
					setState(6226);
					match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6230); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,781,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE_SYMBOL() { return getTokens(MySQLParser.CASE_SYMBOL); }
		public TerminalNode CASE_SYMBOL(int i) {
			return getToken(MySQLParser.CASE_SYMBOL, i);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<WhenExpressionContext> whenExpression() {
			return getRuleContexts(WhenExpressionContext.class);
		}
		public WhenExpressionContext whenExpression(int i) {
			return getRuleContext(WhenExpressionContext.class,i);
		}
		public List<ThenStatementContext> thenStatement() {
			return getRuleContexts(ThenStatementContext.class);
		}
		public ThenStatementContext thenStatement(int i) {
			return getRuleContext(ThenStatementContext.class,i);
		}
		public ElseStatementContext elseStatement() {
			return getRuleContext(ElseStatementContext.class,0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_caseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6232);
			match(CASE_SYMBOL);
			setState(6234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,782,_ctx) ) {
			case 1:
				{
				setState(6233);
				expr(0);
				}
				break;
			}
			setState(6239); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6236);
				whenExpression();
				setState(6237);
				thenStatement();
				}
				}
				setState(6241); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN_SYMBOL );
			setState(6244);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE_SYMBOL) {
				{
				setState(6243);
				elseStatement();
				}
			}

			setState(6246);
			match(END_SYMBOL);
			setState(6247);
			match(CASE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElseStatementContext extends ParserRuleContext {
		public TerminalNode ELSE_SYMBOL() { return getToken(MySQLParser.ELSE_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterElseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitElseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitElseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElseStatementContext elseStatement() throws RecognitionException {
		ElseStatementContext _localctx = new ElseStatementContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_elseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6249);
			match(ELSE_SYMBOL);
			setState(6250);
			compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabeledBlockContext extends ParserRuleContext {
		public LabelContext label() {
			return getRuleContext(LabelContext.class,0);
		}
		public BeginEndBlockContext beginEndBlock() {
			return getRuleContext(BeginEndBlockContext.class,0);
		}
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public LabeledBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLabeledBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLabeledBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLabeledBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabeledBlockContext labeledBlock() throws RecognitionException {
		LabeledBlockContext _localctx = new LabeledBlockContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_labeledBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6252);
			label();
			setState(6253);
			beginEndBlock();
			setState(6255);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
			case 1:
				{
				setState(6254);
				labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlabeledBlockContext extends ParserRuleContext {
		public BeginEndBlockContext beginEndBlock() {
			return getRuleContext(BeginEndBlockContext.class,0);
		}
		public UnlabeledBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlabeledBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUnlabeledBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUnlabeledBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUnlabeledBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlabeledBlockContext unlabeledBlock() throws RecognitionException {
		UnlabeledBlockContext _localctx = new UnlabeledBlockContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_unlabeledBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6257);
			beginEndBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelContext extends ParserRuleContext {
		public LabelIdentifierContext labelIdentifier() {
			return getRuleContext(LabelIdentifierContext.class,0);
		}
		public TerminalNode COLON_SYMBOL() { return getToken(MySQLParser.COLON_SYMBOL, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabelContext label() throws RecognitionException {
		LabelContext _localctx = new LabelContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_label);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6259);
			labelIdentifier();
			setState(6260);
			match(COLON_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginEndBlockContext extends ParserRuleContext {
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public SpDeclarationsContext spDeclarations() {
			return getRuleContext(SpDeclarationsContext.class,0);
		}
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public BeginEndBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginEndBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterBeginEndBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitBeginEndBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitBeginEndBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginEndBlockContext beginEndBlock() throws RecognitionException {
		BeginEndBlockContext _localctx = new BeginEndBlockContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_beginEndBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6262);
			match(BEGIN_SYMBOL);
			setState(6264);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
			case 1:
				{
				setState(6263);
				spDeclarations();
				}
				break;
			}
			setState(6267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
			case 1:
				{
				setState(6266);
				compoundStatementList();
				}
				break;
			}
			setState(6269);
			match(END_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabeledControlContext extends ParserRuleContext {
		public LabelContext label() {
			return getRuleContext(LabelContext.class,0);
		}
		public UnlabeledControlContext unlabeledControl() {
			return getRuleContext(UnlabeledControlContext.class,0);
		}
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public LabeledControlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledControl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLabeledControl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLabeledControl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLabeledControl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabeledControlContext labeledControl() throws RecognitionException {
		LabeledControlContext _localctx = new LabeledControlContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_labeledControl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6271);
			label();
			setState(6272);
			unlabeledControl();
			setState(6274);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
			case 1:
				{
				setState(6273);
				labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlabeledControlContext extends ParserRuleContext {
		public LoopBlockContext loopBlock() {
			return getRuleContext(LoopBlockContext.class,0);
		}
		public WhileDoBlockContext whileDoBlock() {
			return getRuleContext(WhileDoBlockContext.class,0);
		}
		public RepeatUntilBlockContext repeatUntilBlock() {
			return getRuleContext(RepeatUntilBlockContext.class,0);
		}
		public UnlabeledControlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlabeledControl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUnlabeledControl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUnlabeledControl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUnlabeledControl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlabeledControlContext unlabeledControl() throws RecognitionException {
		UnlabeledControlContext _localctx = new UnlabeledControlContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_unlabeledControl);
		try {
			setState(6279);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOOP_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6276);
				loopBlock();
				}
				break;
			case WHILE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6277);
				whileDoBlock();
				}
				break;
			case REPEAT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6278);
				repeatUntilBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopBlockContext extends ParserRuleContext {
		public List<TerminalNode> LOOP_SYMBOL() { return getTokens(MySQLParser.LOOP_SYMBOL); }
		public TerminalNode LOOP_SYMBOL(int i) {
			return getToken(MySQLParser.LOOP_SYMBOL, i);
		}
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public LoopBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLoopBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLoopBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLoopBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopBlockContext loopBlock() throws RecognitionException {
		LoopBlockContext _localctx = new LoopBlockContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_loopBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6281);
			match(LOOP_SYMBOL);
			setState(6282);
			compoundStatementList();
			setState(6283);
			match(END_SYMBOL);
			setState(6284);
			match(LOOP_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileDoBlockContext extends ParserRuleContext {
		public List<TerminalNode> WHILE_SYMBOL() { return getTokens(MySQLParser.WHILE_SYMBOL); }
		public TerminalNode WHILE_SYMBOL(int i) {
			return getToken(MySQLParser.WHILE_SYMBOL, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public WhileDoBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileDoBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWhileDoBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWhileDoBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWhileDoBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhileDoBlockContext whileDoBlock() throws RecognitionException {
		WhileDoBlockContext _localctx = new WhileDoBlockContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_whileDoBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6286);
			match(WHILE_SYMBOL);
			setState(6287);
			expr(0);
			setState(6288);
			match(DO_SYMBOL);
			setState(6289);
			compoundStatementList();
			setState(6290);
			match(END_SYMBOL);
			setState(6291);
			match(WHILE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatUntilBlockContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT_SYMBOL() { return getTokens(MySQLParser.REPEAT_SYMBOL); }
		public TerminalNode REPEAT_SYMBOL(int i) {
			return getToken(MySQLParser.REPEAT_SYMBOL, i);
		}
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public TerminalNode UNTIL_SYMBOL() { return getToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public RepeatUntilBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatUntilBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRepeatUntilBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRepeatUntilBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRepeatUntilBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatUntilBlockContext repeatUntilBlock() throws RecognitionException {
		RepeatUntilBlockContext _localctx = new RepeatUntilBlockContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_repeatUntilBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6293);
			match(REPEAT_SYMBOL);
			setState(6294);
			compoundStatementList();
			setState(6295);
			match(UNTIL_SYMBOL);
			setState(6296);
			expr(0);
			setState(6297);
			match(END_SYMBOL);
			setState(6298);
			match(REPEAT_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpDeclarationsContext extends ParserRuleContext {
		public List<SpDeclarationContext> spDeclaration() {
			return getRuleContexts(SpDeclarationContext.class);
		}
		public SpDeclarationContext spDeclaration(int i) {
			return getRuleContext(SpDeclarationContext.class,i);
		}
		public List<TerminalNode> SEMICOLON_SYMBOL() { return getTokens(MySQLParser.SEMICOLON_SYMBOL); }
		public TerminalNode SEMICOLON_SYMBOL(int i) {
			return getToken(MySQLParser.SEMICOLON_SYMBOL, i);
		}
		public SpDeclarationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spDeclarations; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSpDeclarations(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSpDeclarations(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSpDeclarations(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpDeclarationsContext spDeclarations() throws RecognitionException {
		SpDeclarationsContext _localctx = new SpDeclarationsContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_spDeclarations);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6303); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6300);
					spDeclaration();
					setState(6301);
					match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6305); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,790,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpDeclarationContext extends ParserRuleContext {
		public VariableDeclarationContext variableDeclaration() {
			return getRuleContext(VariableDeclarationContext.class,0);
		}
		public ConditionDeclarationContext conditionDeclaration() {
			return getRuleContext(ConditionDeclarationContext.class,0);
		}
		public HandlerDeclarationContext handlerDeclaration() {
			return getRuleContext(HandlerDeclarationContext.class,0);
		}
		public CursorDeclarationContext cursorDeclaration() {
			return getRuleContext(CursorDeclarationContext.class,0);
		}
		public SpDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSpDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSpDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSpDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpDeclarationContext spDeclaration() throws RecognitionException {
		SpDeclarationContext _localctx = new SpDeclarationContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_spDeclaration);
		try {
			setState(6311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6307);
				variableDeclaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6308);
				conditionDeclaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6309);
				handlerDeclaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6310);
				cursorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterVariableDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitVariableDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitVariableDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableDeclarationContext variableDeclaration() throws RecognitionException {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_variableDeclaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6313);
			match(DECLARE_SYMBOL);
			setState(6314);
			identifierList();
			setState(6315);
			dataType();
			setState(6318);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE_SYMBOL) {
				{
				setState(6316);
				match(COLLATE_SYMBOL);
				setState(6317);
				collationName();
				}
			}

			setState(6322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(6320);
				match(DEFAULT_SYMBOL);
				setState(6321);
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CONDITION_SYMBOL() { return getToken(MySQLParser.CONDITION_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public SpConditionContext spCondition() {
			return getRuleContext(SpConditionContext.class,0);
		}
		public ConditionDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterConditionDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitConditionDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitConditionDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionDeclarationContext conditionDeclaration() throws RecognitionException {
		ConditionDeclarationContext _localctx = new ConditionDeclarationContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_conditionDeclaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6324);
			match(DECLARE_SYMBOL);
			setState(6325);
			identifier();
			setState(6326);
			match(CONDITION_SYMBOL);
			setState(6327);
			match(FOR_SYMBOL);
			setState(6328);
			spCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpConditionContext extends ParserRuleContext {
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public SqlstateContext sqlstate() {
			return getRuleContext(SqlstateContext.class,0);
		}
		public SpConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSpCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSpCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSpCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpConditionContext spCondition() throws RecognitionException {
		SpConditionContext _localctx = new SpConditionContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_spCondition);
		try {
			setState(6332);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6330);
				ulong_number();
				}
				break;
			case SQLSTATE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6331);
				sqlstate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlstateContext extends ParserRuleContext {
		public TerminalNode SQLSTATE_SYMBOL() { return getToken(MySQLParser.SQLSTATE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public SqlstateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlstate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSqlstate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSqlstate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSqlstate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlstateContext sqlstate() throws RecognitionException {
		SqlstateContext _localctx = new SqlstateContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_sqlstate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6334);
			match(SQLSTATE_SYMBOL);
			setState(6336);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
			case 1:
				{
				setState(6335);
				match(VALUE_SYMBOL);
				}
				break;
			}
			setState(6338);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public TerminalNode HANDLER_SYMBOL() { return getToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public List<HandlerConditionContext> handlerCondition() {
			return getRuleContexts(HandlerConditionContext.class);
		}
		public HandlerConditionContext handlerCondition(int i) {
			return getRuleContext(HandlerConditionContext.class,i);
		}
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode CONTINUE_SYMBOL() { return getToken(MySQLParser.CONTINUE_SYMBOL, 0); }
		public TerminalNode EXIT_SYMBOL() { return getToken(MySQLParser.EXIT_SYMBOL, 0); }
		public TerminalNode UNDO_SYMBOL() { return getToken(MySQLParser.UNDO_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public HandlerDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterHandlerDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitHandlerDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitHandlerDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerDeclarationContext handlerDeclaration() throws RecognitionException {
		HandlerDeclarationContext _localctx = new HandlerDeclarationContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_handlerDeclaration);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6340);
			match(DECLARE_SYMBOL);
			setState(6341);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE_SYMBOL || _la==EXIT_SYMBOL || _la==UNDO_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6342);
			match(HANDLER_SYMBOL);
			setState(6343);
			match(FOR_SYMBOL);
			setState(6344);
			handlerCondition();
			setState(6349);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,796,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6345);
					match(COMMA_SYMBOL);
					setState(6346);
					handlerCondition();
					}
					} 
				}
				setState(6351);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,796,_ctx);
			}
			setState(6352);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionContext extends ParserRuleContext {
		public SpConditionContext spCondition() {
			return getRuleContext(SpConditionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SQLWARNING_SYMBOL() { return getToken(MySQLParser.SQLWARNING_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode FOUND_SYMBOL() { return getToken(MySQLParser.FOUND_SYMBOL, 0); }
		public TerminalNode SQLEXCEPTION_SYMBOL() { return getToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0); }
		public HandlerConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterHandlerCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitHandlerCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitHandlerCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerConditionContext handlerCondition() throws RecognitionException {
		HandlerConditionContext _localctx = new HandlerConditionContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_handlerCondition);
		try {
			setState(6361);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6354);
				spCondition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6355);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6356);
				match(SQLWARNING_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6357);
				notRule();
				setState(6358);
				match(FOUND_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6360);
				match(SQLEXCEPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CURSOR_SYMBOL() { return getToken(MySQLParser.CURSOR_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public CursorDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCursorDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCursorDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCursorDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorDeclarationContext cursorDeclaration() throws RecognitionException {
		CursorDeclarationContext _localctx = new CursorDeclarationContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_cursorDeclaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6363);
			match(DECLARE_SYMBOL);
			setState(6364);
			identifier();
			setState(6365);
			match(CURSOR_SYMBOL);
			setState(6366);
			match(FOR_SYMBOL);
			setState(6367);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE_SYMBOL() { return getToken(MySQLParser.ITERATE_SYMBOL, 0); }
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIterateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIterateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIterateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6369);
			match(ITERATE_SYMBOL);
			setState(6370);
			labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE_SYMBOL() { return getToken(MySQLParser.LEAVE_SYMBOL, 0); }
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLeaveStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLeaveStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLeaveStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6372);
			match(LEAVE_SYMBOL);
			setState(6373);
			labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GetDiagnosticsContext extends ParserRuleContext {
		public TerminalNode GET_SYMBOL() { return getToken(MySQLParser.GET_SYMBOL, 0); }
		public TerminalNode DIAGNOSTICS_SYMBOL() { return getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public List<StatementInformationItemContext> statementInformationItem() {
			return getRuleContexts(StatementInformationItemContext.class);
		}
		public StatementInformationItemContext statementInformationItem(int i) {
			return getRuleContext(StatementInformationItemContext.class,i);
		}
		public TerminalNode CONDITION_SYMBOL() { return getToken(MySQLParser.CONDITION_SYMBOL, 0); }
		public SignalAllowedExprContext signalAllowedExpr() {
			return getRuleContext(SignalAllowedExprContext.class,0);
		}
		public List<ConditionInformationItemContext> conditionInformationItem() {
			return getRuleContexts(ConditionInformationItemContext.class);
		}
		public ConditionInformationItemContext conditionInformationItem(int i) {
			return getRuleContext(ConditionInformationItemContext.class,i);
		}
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode STACKED_SYMBOL() { return getToken(MySQLParser.STACKED_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public GetDiagnosticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getDiagnostics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGetDiagnostics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGetDiagnostics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGetDiagnostics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GetDiagnosticsContext getDiagnostics() throws RecognitionException {
		GetDiagnosticsContext _localctx = new GetDiagnosticsContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_getDiagnostics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6375);
			match(GET_SYMBOL);
			setState(6379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
			case 1:
				{
				setState(6376);
				match(CURRENT_SYMBOL);
				}
				break;
			case 2:
				{
				setState(6377);
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				setState(6378);
				match(STACKED_SYMBOL);
				}
				break;
			}
			setState(6381);
			match(DIAGNOSTICS_SYMBOL);
			setState(6400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
			case 1:
				{
				setState(6382);
				statementInformationItem();
				setState(6387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(6383);
					match(COMMA_SYMBOL);
					setState(6384);
					statementInformationItem();
					}
					}
					setState(6389);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(6390);
				match(CONDITION_SYMBOL);
				setState(6391);
				signalAllowedExpr();
				setState(6392);
				conditionInformationItem();
				setState(6397);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(6393);
					match(COMMA_SYMBOL);
					setState(6394);
					conditionInformationItem();
					}
					}
					setState(6399);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalAllowedExprContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public SignalAllowedExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalAllowedExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSignalAllowedExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSignalAllowedExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSignalAllowedExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalAllowedExprContext signalAllowedExpr() throws RecognitionException {
		SignalAllowedExprContext _localctx = new SignalAllowedExprContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_signalAllowedExpr);
		try {
			setState(6405);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,802,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6402);
				literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6403);
				variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6404);
				qualifiedIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementInformationItemContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode NUMBER_SYMBOL() { return getToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StatementInformationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementInformationItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterStatementInformationItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitStatementInformationItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitStatementInformationItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementInformationItemContext statementInformationItem() throws RecognitionException {
		StatementInformationItemContext _localctx = new StatementInformationItemContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_statementInformationItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,803,_ctx) ) {
			case 1:
				{
				setState(6407);
				variable();
				}
				break;
			case 2:
				{
				setState(6408);
				identifier();
				}
				break;
			}
			setState(6411);
			match(EQUAL_OPERATOR);
			setState(6412);
			_la = _input.LA(1);
			if ( !(_la==NUMBER_SYMBOL || _la==ROW_COUNT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionInformationItemContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SignalInformationItemNameContext signalInformationItemName() {
			return getRuleContext(SignalInformationItemNameContext.class,0);
		}
		public TerminalNode RETURNED_SQLSTATE_SYMBOL() { return getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public ConditionInformationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionInformationItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterConditionInformationItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitConditionInformationItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitConditionInformationItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionInformationItemContext conditionInformationItem() throws RecognitionException {
		ConditionInformationItemContext _localctx = new ConditionInformationItemContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_conditionInformationItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6416);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
			case 1:
				{
				setState(6414);
				variable();
				}
				break;
			case 2:
				{
				setState(6415);
				identifier();
				}
				break;
			}
			setState(6418);
			match(EQUAL_OPERATOR);
			setState(6421);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CATALOG_NAME_SYMBOL:
			case CLASS_ORIGIN_SYMBOL:
			case COLUMN_NAME_SYMBOL:
			case CONSTRAINT_CATALOG_SYMBOL:
			case CONSTRAINT_SCHEMA_SYMBOL:
			case CONSTRAINT_NAME_SYMBOL:
			case CURSOR_NAME_SYMBOL:
			case MESSAGE_TEXT_SYMBOL:
			case MYSQL_ERRNO_SYMBOL:
			case SCHEMA_NAME_SYMBOL:
			case SUBCLASS_ORIGIN_SYMBOL:
			case TABLE_NAME_SYMBOL:
				{
				setState(6419);
				signalInformationItemName();
				}
				break;
			case RETURNED_SQLSTATE_SYMBOL:
				{
				setState(6420);
				match(RETURNED_SQLSTATE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalInformationItemNameContext extends ParserRuleContext {
		public TerminalNode CLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode SUBCLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_CATALOG_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_NAME_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public TerminalNode CATALOG_NAME_SYMBOL() { return getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public TerminalNode SCHEMA_NAME_SYMBOL() { return getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public TerminalNode TABLE_NAME_SYMBOL() { return getToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public TerminalNode COLUMN_NAME_SYMBOL() { return getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public TerminalNode CURSOR_NAME_SYMBOL() { return getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public TerminalNode MESSAGE_TEXT_SYMBOL() { return getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public TerminalNode MYSQL_ERRNO_SYMBOL() { return getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public SignalInformationItemNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalInformationItemName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSignalInformationItemName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSignalInformationItemName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSignalInformationItemName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalInformationItemNameContext signalInformationItemName() throws RecognitionException {
		SignalInformationItemNameContext _localctx = new SignalInformationItemNameContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_signalInformationItemName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6423);
			_la = _input.LA(1);
			if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (CATALOG_NAME_SYMBOL - 78)) | (1L << (CLASS_ORIGIN_SYMBOL - 78)) | (1L << (COLUMN_NAME_SYMBOL - 78)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 78)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 78)) | (1L << (CONSTRAINT_NAME_SYMBOL - 78)) | (1L << (CURSOR_NAME_SYMBOL - 78)))) != 0) || _la==MESSAGE_TEXT_SYMBOL || _la==MYSQL_ERRNO_SYMBOL || ((((_la - 304)) & ~0x3f) == 0 && ((1L << (_la - 304)) & ((1L << (SCHEMA_NAME_SYMBOL - 304)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 304)) | (1L << (TABLE_NAME_SYMBOL - 304)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL_SYMBOL() { return getToken(MySQLParser.SIGNAL_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SqlstateContext sqlstate() {
			return getRuleContext(SqlstateContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public List<SignalInformationItemContext> signalInformationItem() {
			return getRuleContexts(SignalInformationItemContext.class);
		}
		public SignalInformationItemContext signalInformationItem(int i) {
			return getRuleContext(SignalInformationItemContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6425);
			match(SIGNAL_SYMBOL);
			setState(6428);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,806,_ctx) ) {
			case 1:
				{
				setState(6426);
				identifier();
				}
				break;
			case 2:
				{
				setState(6427);
				sqlstate();
				}
				break;
			}
			setState(6439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET_SYMBOL) {
				{
				setState(6430);
				match(SET_SYMBOL);
				setState(6431);
				signalInformationItem();
				setState(6436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(6432);
					match(COMMA_SYMBOL);
					setState(6433);
					signalInformationItem();
					}
					}
					setState(6438);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResignalStatementContext extends ParserRuleContext {
		public TerminalNode RESIGNAL_SYMBOL() { return getToken(MySQLParser.RESIGNAL_SYMBOL, 0); }
		public TerminalNode SQLSTATE_SYMBOL() { return getToken(MySQLParser.SQLSTATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public List<SignalInformationItemContext> signalInformationItem() {
			return getRuleContexts(SignalInformationItemContext.class);
		}
		public SignalInformationItemContext signalInformationItem(int i) {
			return getRuleContext(SignalInformationItemContext.class,i);
		}
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ResignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resignalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterResignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitResignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitResignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResignalStatementContext resignalStatement() throws RecognitionException {
		ResignalStatementContext _localctx = new ResignalStatementContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_resignalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6441);
			match(RESIGNAL_SYMBOL);
			setState(6447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQLSTATE_SYMBOL) {
				{
				setState(6442);
				match(SQLSTATE_SYMBOL);
				setState(6444);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
				case 1:
					{
					setState(6443);
					match(VALUE_SYMBOL);
					}
					break;
				}
				setState(6446);
				textOrIdentifier();
				}
			}

			setState(6458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET_SYMBOL) {
				{
				setState(6449);
				match(SET_SYMBOL);
				setState(6450);
				signalInformationItem();
				setState(6455);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(6451);
					match(COMMA_SYMBOL);
					setState(6452);
					signalInformationItem();
					}
					}
					setState(6457);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalInformationItemContext extends ParserRuleContext {
		public SignalInformationItemNameContext signalInformationItemName() {
			return getRuleContext(SignalInformationItemNameContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public SignalAllowedExprContext signalAllowedExpr() {
			return getRuleContext(SignalAllowedExprContext.class,0);
		}
		public SignalInformationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalInformationItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSignalInformationItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSignalInformationItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSignalInformationItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalInformationItemContext signalInformationItem() throws RecognitionException {
		SignalInformationItemContext _localctx = new SignalInformationItemContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_signalInformationItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6460);
			signalInformationItemName();
			setState(6461);
			match(EQUAL_OPERATOR);
			setState(6462);
			signalAllowedExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorOpenContext extends ParserRuleContext {
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CursorOpenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorOpen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCursorOpen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCursorOpen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCursorOpen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorOpenContext cursorOpen() throws RecognitionException {
		CursorOpenContext _localctx = new CursorOpenContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_cursorOpen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6464);
			match(OPEN_SYMBOL);
			setState(6465);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorCloseContext extends ParserRuleContext {
		public TerminalNode CLOSE_SYMBOL() { return getToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CursorCloseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorClose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCursorClose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCursorClose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCursorClose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorCloseContext cursorClose() throws RecognitionException {
		CursorCloseContext _localctx = new CursorCloseContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_cursorClose);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6467);
			match(CLOSE_SYMBOL);
			setState(6468);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorFetchContext extends ParserRuleContext {
		public TerminalNode FETCH_SYMBOL() { return getToken(MySQLParser.FETCH_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public CursorFetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorFetch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCursorFetch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCursorFetch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCursorFetch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorFetchContext cursorFetch() throws RecognitionException {
		CursorFetchContext _localctx = new CursorFetchContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_cursorFetch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6470);
			match(FETCH_SYMBOL);
			setState(6471);
			identifier();
			setState(6472);
			match(INTO_SYMBOL);
			setState(6473);
			identifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleContext extends ParserRuleContext {
		public TerminalNode AT_SYMBOL() { return getToken(MySQLParser.AT_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode EVERY_SYMBOL() { return getToken(MySQLParser.EVERY_SYMBOL, 0); }
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode STARTS_SYMBOL() { return getToken(MySQLParser.STARTS_SYMBOL, 0); }
		public TerminalNode ENDS_SYMBOL() { return getToken(MySQLParser.ENDS_SYMBOL, 0); }
		public ScheduleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schedule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSchedule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScheduleContext schedule() throws RecognitionException {
		ScheduleContext _localctx = new ScheduleContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_schedule);
		int _la;
		try {
			setState(6488);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6475);
				match(AT_SYMBOL);
				setState(6476);
				expr(0);
				}
				break;
			case EVERY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6477);
				match(EVERY_SYMBOL);
				setState(6478);
				expr(0);
				setState(6479);
				interval();
				setState(6482);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTS_SYMBOL) {
					{
					setState(6480);
					match(STARTS_SYMBOL);
					setState(6481);
					expr(0);
					}
				}

				setState(6486);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDS_SYMBOL) {
					{
					setState(6484);
					match(ENDS_SYMBOL);
					setState(6485);
					expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public FieldDefinitionContext fieldDefinition() {
			return getRuleContext(FieldDefinitionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FieldIdentifierContext fieldIdentifier() {
			return getRuleContext(FieldIdentifierContext.class,0);
		}
		public CheckOrReferencesContext checkOrReferences() {
			return getRuleContext(CheckOrReferencesContext.class,0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_columnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,816,_ctx) ) {
			case 1:
				{
				setState(6490);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(6491);
				identifier();
				}
				break;
			case 2:
				{
				setState(6492);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(6493);
				fieldIdentifier();
				}
				break;
			}
			setState(6496);
			fieldDefinition();
			setState(6498);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHECK_SYMBOL || _la==REFERENCES_SYMBOL) {
				{
				setState(6497);
				checkOrReferences();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckOrReferencesContext extends ParserRuleContext {
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ReferencesContext references() {
			return getRuleContext(ReferencesContext.class,0);
		}
		public CheckOrReferencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkOrReferences; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCheckOrReferences(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCheckOrReferences(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCheckOrReferences(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckOrReferencesContext checkOrReferences() throws RecognitionException {
		CheckOrReferencesContext _localctx = new CheckOrReferencesContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_checkOrReferences);
		try {
			setState(6502);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECK_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6500);
				checkConstraint();
				}
				break;
			case REFERENCES_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6501);
				references();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckConstraintContext extends ParserRuleContext {
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CheckConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCheckConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCheckConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCheckConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckConstraintContext checkConstraint() throws RecognitionException {
		CheckConstraintContext _localctx = new CheckConstraintContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_checkConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6504);
			match(CHECK_SYMBOL);
			setState(6505);
			match(OPEN_PAR_SYMBOL);
			setState(6506);
			expr(0);
			setState(6507);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintDefContext extends ParserRuleContext {
		public Token type;
		public KeyListContext keyList() {
			return getRuleContext(KeyListContext.class,0);
		}
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IndexNameAndTypeContext indexNameAndType() {
			return getRuleContext(IndexNameAndTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode FULLTEXT_SYMBOL() { return getToken(MySQLParser.FULLTEXT_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public List<FulltextIndexOptionContext> fulltextIndexOption() {
			return getRuleContexts(FulltextIndexOptionContext.class);
		}
		public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return getRuleContext(FulltextIndexOptionContext.class,i);
		}
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public List<SpatialIndexOptionContext> spatialIndexOption() {
			return getRuleContexts(SpatialIndexOptionContext.class);
		}
		public SpatialIndexOptionContext spatialIndexOption(int i) {
			return getRuleContext(SpatialIndexOptionContext.class,i);
		}
		public ReferencesContext references() {
			return getRuleContext(ReferencesContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SYMBOL, 0); }
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public TerminalNode FOREIGN_SYMBOL() { return getToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TableConstraintDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraintDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableConstraintDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableConstraintDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableConstraintDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintDefContext tableConstraintDef() throws RecognitionException {
		TableConstraintDefContext _localctx = new TableConstraintDefContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_tableConstraintDef);
		int _la;
		try {
			int _alt;
			setState(6591);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX_SYMBOL:
			case KEY_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6509);
				((TableConstraintDefContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
					((TableConstraintDefContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6511);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,819,_ctx) ) {
				case 1:
					{
					setState(6510);
					indexNameAndType();
					}
					break;
				}
				setState(6513);
				keyList();
				setState(6517);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,820,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6514);
						indexOption();
						}
						} 
					}
					setState(6519);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,820,_ctx);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6520);
				((TableConstraintDefContext)_localctx).type = match(FULLTEXT_SYMBOL);
				setState(6522);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
				case 1:
					{
					setState(6521);
					keyOrIndex();
					}
					break;
				}
				setState(6525);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,822,_ctx) ) {
				case 1:
					{
					setState(6524);
					indexName();
					}
					break;
				}
				setState(6527);
				keyList();
				setState(6531);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,823,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6528);
						fulltextIndexOption();
						}
						} 
					}
					setState(6533);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,823,_ctx);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6534);
				((TableConstraintDefContext)_localctx).type = match(SPATIAL_SYMBOL);
				setState(6536);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,824,_ctx) ) {
				case 1:
					{
					setState(6535);
					keyOrIndex();
					}
					break;
				}
				setState(6539);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,825,_ctx) ) {
				case 1:
					{
					setState(6538);
					indexName();
					}
					break;
				}
				setState(6541);
				keyList();
				setState(6545);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,826,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6542);
						spatialIndexOption();
						}
						} 
					}
					setState(6547);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,826,_ctx);
				}
				}
				break;
			case CHECK_SYMBOL:
			case CONSTRAINT_SYMBOL:
			case FOREIGN_SYMBOL:
			case PRIMARY_SYMBOL:
			case UNIQUE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(6552);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					setState(6548);
					match(CONSTRAINT_SYMBOL);
					setState(6550);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,827,_ctx) ) {
					case 1:
						{
						setState(6549);
						identifier();
						}
						break;
					}
					}
				}

				setState(6589);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY_SYMBOL:
					{
					setState(6554);
					((TableConstraintDefContext)_localctx).type = match(PRIMARY_SYMBOL);
					setState(6555);
					match(KEY_SYMBOL);
					setState(6557);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
					case 1:
						{
						setState(6556);
						indexNameAndType();
						}
						break;
					}
					setState(6559);
					keyList();
					setState(6563);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,830,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6560);
							indexOption();
							}
							} 
						}
						setState(6565);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,830,_ctx);
					}
					}
					break;
				case UNIQUE_SYMBOL:
					{
					setState(6566);
					((TableConstraintDefContext)_localctx).type = match(UNIQUE_SYMBOL);
					setState(6568);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,831,_ctx) ) {
					case 1:
						{
						setState(6567);
						keyOrIndex();
						}
						break;
					}
					setState(6571);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,832,_ctx) ) {
					case 1:
						{
						setState(6570);
						indexNameAndType();
						}
						break;
					}
					setState(6573);
					keyList();
					setState(6577);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,833,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6574);
							indexOption();
							}
							} 
						}
						setState(6579);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,833,_ctx);
					}
					}
					break;
				case FOREIGN_SYMBOL:
					{
					setState(6580);
					((TableConstraintDefContext)_localctx).type = match(FOREIGN_SYMBOL);
					setState(6581);
					match(KEY_SYMBOL);
					setState(6583);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,834,_ctx) ) {
					case 1:
						{
						setState(6582);
						indexName();
						}
						break;
					}
					setState(6585);
					keyList();
					setState(6586);
					references();
					}
					break;
				case CHECK_SYMBOL:
					{
					setState(6588);
					checkConstraint();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<ColumnAttributeContext> columnAttribute() {
			return getRuleContexts(ColumnAttributeContext.class);
		}
		public ColumnAttributeContext columnAttribute(int i) {
			return getRuleContext(ColumnAttributeContext.class,i);
		}
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode GENERATED_SYMBOL() { return getToken(MySQLParser.GENERATED_SYMBOL, 0); }
		public TerminalNode ALWAYS_SYMBOL() { return getToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public TerminalNode VIRTUAL_SYMBOL() { return getToken(MySQLParser.VIRTUAL_SYMBOL, 0); }
		public TerminalNode STORED_SYMBOL() { return getToken(MySQLParser.STORED_SYMBOL, 0); }
		public List<GcolAttributeContext> gcolAttribute() {
			return getRuleContexts(GcolAttributeContext.class);
		}
		public GcolAttributeContext gcolAttribute(int i) {
			return getRuleContext(GcolAttributeContext.class,i);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFieldDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFieldDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFieldDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldDefinitionContext fieldDefinition() throws RecognitionException {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_fieldDefinition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6593);
			dataType();
			setState(6632);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,844,_ctx) ) {
			case 1:
				{
				setState(6597);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,837,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6594);
						columnAttribute();
						}
						} 
					}
					setState(6599);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,837,_ctx);
				}
				}
				break;
			case 2:
				{
				setState(6600);
				if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
				setState(6603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					setState(6601);
					match(COLLATE_SYMBOL);
					setState(6602);
					collationName();
					}
				}

				setState(6607);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED_SYMBOL) {
					{
					setState(6605);
					match(GENERATED_SYMBOL);
					setState(6606);
					match(ALWAYS_SYMBOL);
					}
				}

				setState(6609);
				match(AS_SYMBOL);
				setState(6610);
				match(OPEN_PAR_SYMBOL);
				setState(6611);
				expr(0);
				setState(6612);
				match(CLOSE_PAR_SYMBOL);
				setState(6614);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,840,_ctx) ) {
				case 1:
					{
					setState(6613);
					_la = _input.LA(1);
					if ( !(_la==STORED_SYMBOL || _la==VIRTUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(6630);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,843,_ctx) ) {
				case 1:
					{
					setState(6616);
					if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
					setState(6620);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,841,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6617);
							gcolAttribute();
							}
							} 
						}
						setState(6622);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,841,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(6623);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(6627);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,842,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6624);
							columnAttribute();
							}
							} 
						}
						setState(6629);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,842,_ctx);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnAttributeContext extends ParserRuleContext {
		public Token value;
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public SignedLiteralContext signedLiteral() {
			return getRuleContext(SignedLiteralContext.class,0);
		}
		public TerminalNode NOW_SYMBOL() { return getToken(MySQLParser.NOW_SYMBOL, 0); }
		public TimeFunctionParametersContext timeFunctionParameters() {
			return getRuleContext(TimeFunctionParametersContext.class,0);
		}
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public TerminalNode COLUMN_FORMAT_SYMBOL() { return getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode DISK_SYMBOL() { return getToken(MySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode SRID_SYMBOL() { return getToken(MySQLParser.SRID_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public ColumnAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAttribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterColumnAttribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitColumnAttribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitColumnAttribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnAttributeContext columnAttribute() throws RecognitionException {
		ColumnAttributeContext _localctx = new ColumnAttributeContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_columnAttribute);
		int _la;
		try {
			setState(6675);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(6634);
					match(NOT_SYMBOL);
					}
				}

				setState(6637);
				nullLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6638);
				((ColumnAttributeContext)_localctx).value = match(DEFAULT_SYMBOL);
				setState(6644);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,847,_ctx) ) {
				case 1:
					{
					setState(6639);
					signedLiteral();
					}
					break;
				case 2:
					{
					setState(6640);
					match(NOW_SYMBOL);
					setState(6642);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,846,_ctx) ) {
					case 1:
						{
						setState(6641);
						timeFunctionParameters();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6646);
				((ColumnAttributeContext)_localctx).value = match(ON_SYMBOL);
				setState(6647);
				match(UPDATE_SYMBOL);
				setState(6648);
				match(NOW_SYMBOL);
				setState(6650);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,848,_ctx) ) {
				case 1:
					{
					setState(6649);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6652);
				((ColumnAttributeContext)_localctx).value = match(AUTO_INCREMENT_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6653);
				((ColumnAttributeContext)_localctx).value = match(SERIAL_SYMBOL);
				setState(6654);
				match(DEFAULT_SYMBOL);
				setState(6655);
				match(VALUE_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6656);
				((ColumnAttributeContext)_localctx).value = match(UNIQUE_SYMBOL);
				setState(6658);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
				case 1:
					{
					setState(6657);
					match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6661);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					setState(6660);
					match(PRIMARY_SYMBOL);
					}
				}

				setState(6663);
				((ColumnAttributeContext)_localctx).value = match(KEY_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6664);
				((ColumnAttributeContext)_localctx).value = match(COMMENT_SYMBOL);
				setState(6665);
				textLiteral();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6666);
				((ColumnAttributeContext)_localctx).value = match(COLLATE_SYMBOL);
				setState(6667);
				collationName();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6668);
				((ColumnAttributeContext)_localctx).value = match(COLUMN_FORMAT_SYMBOL);
				setState(6669);
				_la = _input.LA(1);
				if ( !(_la==DYNAMIC_SYMBOL || _la==FIXED_SYMBOL || _la==DEFAULT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6670);
				((ColumnAttributeContext)_localctx).value = match(STORAGE_SYMBOL);
				setState(6671);
				_la = _input.LA(1);
				if ( !(_la==DISK_SYMBOL || _la==MEMORY_SYMBOL || _la==DEFAULT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6672);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(6673);
				match(SRID_SYMBOL);
				setState(6674);
				real_ulonglong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GcolAttributeContext extends ParserRuleContext {
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public GcolAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gcolAttribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGcolAttribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGcolAttribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGcolAttribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GcolAttributeContext gcolAttribute() throws RecognitionException {
		GcolAttributeContext _localctx = new GcolAttributeContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_gcolAttribute);
		int _la;
		try {
			setState(6691);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6677);
				match(UNIQUE_SYMBOL);
				setState(6679);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
				case 1:
					{
					setState(6678);
					match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6681);
				match(COMMENT_SYMBOL);
				setState(6682);
				textString();
				}
				break;
			case NOT2_SYMBOL:
			case NOT_SYMBOL:
			case NULL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
					{
					setState(6683);
					notRule();
					}
				}

				setState(6686);
				match(NULL_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
			case PRIMARY_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(6688);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					setState(6687);
					match(PRIMARY_SYMBOL);
					}
				}

				setState(6690);
				match(KEY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferencesContext extends ParserRuleContext {
		public Token match;
		public Token option;
		public TerminalNode REFERENCES_SYMBOL() { return getToken(MySQLParser.REFERENCES_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public TerminalNode MATCH_SYMBOL() { return getToken(MySQLParser.MATCH_SYMBOL, 0); }
		public List<TerminalNode> ON_SYMBOL() { return getTokens(MySQLParser.ON_SYMBOL); }
		public TerminalNode ON_SYMBOL(int i) {
			return getToken(MySQLParser.ON_SYMBOL, i);
		}
		public List<DeleteOptionContext> deleteOption() {
			return getRuleContexts(DeleteOptionContext.class);
		}
		public DeleteOptionContext deleteOption(int i) {
			return getRuleContext(DeleteOptionContext.class,i);
		}
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode DELETE_SYMBOL() { return getToken(MySQLParser.DELETE_SYMBOL, 0); }
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode PARTIAL_SYMBOL() { return getToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public TerminalNode SIMPLE_SYMBOL() { return getToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public ReferencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterReferences(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitReferences(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitReferences(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferencesContext references() throws RecognitionException {
		ReferencesContext _localctx = new ReferencesContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_references);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6693);
			match(REFERENCES_SYMBOL);
			setState(6694);
			tableRef();
			setState(6696);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,856,_ctx) ) {
			case 1:
				{
				setState(6695);
				identifierListWithParentheses();
				}
				break;
			}
			setState(6700);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,857,_ctx) ) {
			case 1:
				{
				setState(6698);
				match(MATCH_SYMBOL);
				setState(6699);
				((ReferencesContext)_localctx).match = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL_SYMBOL || _la==PARTIAL_SYMBOL || _la==SIMPLE_SYMBOL) ) {
					((ReferencesContext)_localctx).match = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(6718);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,860,_ctx) ) {
			case 1:
				{
				setState(6702);
				match(ON_SYMBOL);
				setState(6703);
				((ReferencesContext)_localctx).option = match(UPDATE_SYMBOL);
				setState(6704);
				deleteOption();
				setState(6708);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
				case 1:
					{
					setState(6705);
					match(ON_SYMBOL);
					setState(6706);
					match(DELETE_SYMBOL);
					setState(6707);
					deleteOption();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(6710);
				match(ON_SYMBOL);
				setState(6711);
				((ReferencesContext)_localctx).option = match(DELETE_SYMBOL);
				setState(6712);
				deleteOption();
				setState(6716);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,859,_ctx) ) {
				case 1:
					{
					setState(6713);
					match(ON_SYMBOL);
					setState(6714);
					match(UPDATE_SYMBOL);
					setState(6715);
					deleteOption();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteOptionContext extends ParserRuleContext {
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode ACTION_SYMBOL() { return getToken(MySQLParser.ACTION_SYMBOL, 0); }
		public DeleteOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDeleteOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDeleteOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDeleteOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteOptionContext deleteOption() throws RecognitionException {
		DeleteOptionContext _localctx = new DeleteOptionContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_deleteOption);
		int _la;
		try {
			setState(6725);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE_SYMBOL:
			case RESTRICT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6720);
				_la = _input.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SET_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6721);
				match(SET_SYMBOL);
				setState(6722);
				nullLiteral();
				}
				break;
			case NO_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6723);
				match(NO_SYMBOL);
				setState(6724);
				match(ACTION_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<KeyPartContext> keyPart() {
			return getRuleContexts(KeyPartContext.class);
		}
		public KeyPartContext keyPart(int i) {
			return getRuleContext(KeyPartContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyListContext keyList() throws RecognitionException {
		KeyListContext _localctx = new KeyListContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_keyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6727);
			match(OPEN_PAR_SYMBOL);
			setState(6728);
			keyPart();
			setState(6733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(6729);
				match(COMMA_SYMBOL);
				setState(6730);
				keyPart();
				}
				}
				setState(6735);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6736);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyPartContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public DirectionContext direction() {
			return getRuleContext(DirectionContext.class,0);
		}
		public KeyPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyPart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyPart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyPartContext keyPart() throws RecognitionException {
		KeyPartContext _localctx = new KeyPartContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_keyPart);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6738);
			identifier();
			setState(6740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(6739);
				fieldLength();
				}
			}

			setState(6743);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				setState(6742);
				direction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public Token algorithm;
		public TerminalNode BTREE_SYMBOL() { return getToken(MySQLParser.BTREE_SYMBOL, 0); }
		public TerminalNode RTREE_SYMBOL() { return getToken(MySQLParser.RTREE_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6745);
			((IndexTypeContext)_localctx).algorithm = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BTREE_SYMBOL || _la==HASH_SYMBOL || _la==RTREE_SYMBOL) ) {
				((IndexTypeContext)_localctx).algorithm = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return getRuleContext(CommonIndexOptionContext.class,0);
		}
		public IndexTypeClauseContext indexTypeClause() {
			return getRuleContext(IndexTypeClauseContext.class,0);
		}
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_indexOption);
		try {
			setState(6749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,865,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6747);
				commonIndexOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6748);
				indexTypeClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonIndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public VisibilityContext visibility() {
			return getRuleContext(VisibilityContext.class,0);
		}
		public CommonIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonIndexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCommonIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCommonIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCommonIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonIndexOptionContext commonIndexOption() throws RecognitionException {
		CommonIndexOptionContext _localctx = new CommonIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_commonIndexOption);
		int _la;
		try {
			setState(6761);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6751);
				match(KEY_BLOCK_SIZE_SYMBOL);
				setState(6753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(6752);
					match(EQUAL_OPERATOR);
					}
				}

				setState(6755);
				ulong_number();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6756);
				if (!(serverVersion >= 50600)) throw new FailedPredicateException(this, "serverVersion >= 50600");
				setState(6757);
				match(COMMENT_SYMBOL);
				setState(6758);
				textLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6759);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(6760);
				visibility();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VisibilityContext extends ParserRuleContext {
		public TerminalNode VISIBLE_SYMBOL() { return getToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public TerminalNode INVISIBLE_SYMBOL() { return getToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_visibility; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterVisibility(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitVisibility(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitVisibility(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VisibilityContext visibility() throws RecognitionException {
		VisibilityContext _localctx = new VisibilityContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_visibility);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6763);
			_la = _input.LA(1);
			if ( !(_la==INVISIBLE_SYMBOL || _la==VISIBLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeClauseContext extends ParserRuleContext {
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public IndexTypeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexTypeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexTypeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexTypeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexTypeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeClauseContext indexTypeClause() throws RecognitionException {
		IndexTypeClauseContext _localctx = new IndexTypeClauseContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_indexTypeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6765);
			_la = _input.LA(1);
			if ( !(_la==TYPE_SYMBOL || _la==USING_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6766);
			indexType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FulltextIndexOptionContext extends ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return getRuleContext(CommonIndexOptionContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode PARSER_SYMBOL() { return getToken(MySQLParser.PARSER_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FulltextIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fulltextIndexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFulltextIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFulltextIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFulltextIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FulltextIndexOptionContext fulltextIndexOption() throws RecognitionException {
		FulltextIndexOptionContext _localctx = new FulltextIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_fulltextIndexOption);
		try {
			setState(6772);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6768);
				commonIndexOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6769);
				match(WITH_SYMBOL);
				setState(6770);
				match(PARSER_SYMBOL);
				setState(6771);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpatialIndexOptionContext extends ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return getRuleContext(CommonIndexOptionContext.class,0);
		}
		public SpatialIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spatialIndexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSpatialIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSpatialIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSpatialIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpatialIndexOptionContext spatialIndexOption() throws RecognitionException {
		SpatialIndexOptionContext _localctx = new SpatialIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_spatialIndexOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6774);
			commonIndexOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode EOF() { return getToken(MySQLParser.EOF, 0); }
		public DataTypeDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDataTypeDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDataTypeDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDataTypeDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeDefinitionContext dataTypeDefinition() throws RecognitionException {
		DataTypeDefinitionContext _localctx = new DataTypeDefinitionContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_dataTypeDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6776);
			dataType();
			setState(6777);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode INT_SYMBOL() { return getToken(MySQLParser.INT_SYMBOL, 0); }
		public TerminalNode TINYINT_SYMBOL() { return getToken(MySQLParser.TINYINT_SYMBOL, 0); }
		public TerminalNode SMALLINT_SYMBOL() { return getToken(MySQLParser.SMALLINT_SYMBOL, 0); }
		public TerminalNode MEDIUMINT_SYMBOL() { return getToken(MySQLParser.MEDIUMINT_SYMBOL, 0); }
		public TerminalNode BIGINT_SYMBOL() { return getToken(MySQLParser.BIGINT_SYMBOL, 0); }
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public FieldOptionsContext fieldOptions() {
			return getRuleContext(FieldOptionsContext.class,0);
		}
		public TerminalNode REAL_SYMBOL() { return getToken(MySQLParser.REAL_SYMBOL, 0); }
		public TerminalNode DOUBLE_SYMBOL() { return getToken(MySQLParser.DOUBLE_SYMBOL, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode PRECISION_SYMBOL() { return getToken(MySQLParser.PRECISION_SYMBOL, 0); }
		public TerminalNode FLOAT_SYMBOL() { return getToken(MySQLParser.FLOAT_SYMBOL, 0); }
		public TerminalNode DECIMAL_SYMBOL() { return getToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public TerminalNode NUMERIC_SYMBOL() { return getToken(MySQLParser.NUMERIC_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public FloatOptionsContext floatOptions() {
			return getRuleContext(FloatOptionsContext.class,0);
		}
		public TerminalNode BIT_SYMBOL() { return getToken(MySQLParser.BIT_SYMBOL, 0); }
		public TerminalNode BOOL_SYMBOL() { return getToken(MySQLParser.BOOL_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return getRuleContext(CharsetWithOptBinaryContext.class,0);
		}
		public NcharContext nchar() {
			return getRuleContext(NcharContext.class,0);
		}
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode VARYING_SYMBOL() { return getToken(MySQLParser.VARYING_SYMBOL, 0); }
		public TerminalNode VARCHAR_SYMBOL() { return getToken(MySQLParser.VARCHAR_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public TerminalNode NVARCHAR_SYMBOL() { return getToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public TerminalNode NCHAR_SYMBOL() { return getToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode VARBINARY_SYMBOL() { return getToken(MySQLParser.VARBINARY_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return getRuleContext(TypeDatetimePrecisionContext.class,0);
		}
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode TINYBLOB_SYMBOL() { return getToken(MySQLParser.TINYBLOB_SYMBOL, 0); }
		public TerminalNode BLOB_SYMBOL() { return getToken(MySQLParser.BLOB_SYMBOL, 0); }
		public TerminalNode MEDIUMBLOB_SYMBOL() { return getToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0); }
		public TerminalNode LONGBLOB_SYMBOL() { return getToken(MySQLParser.LONGBLOB_SYMBOL, 0); }
		public TerminalNode LONG_SYMBOL() { return getToken(MySQLParser.LONG_SYMBOL, 0); }
		public TerminalNode TINYTEXT_SYMBOL() { return getToken(MySQLParser.TINYTEXT_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TerminalNode MEDIUMTEXT_SYMBOL() { return getToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0); }
		public TerminalNode LONGTEXT_SYMBOL() { return getToken(MySQLParser.LONGTEXT_SYMBOL, 0); }
		public StringListContext stringList() {
			return getRuleContext(StringListContext.class,0);
		}
		public TerminalNode ENUM_SYMBOL() { return getToken(MySQLParser.ENUM_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode JSON_SYMBOL() { return getToken(MySQLParser.JSON_SYMBOL, 0); }
		public TerminalNode GEOMETRY_SYMBOL() { return getToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_dataType);
		int _la;
		try {
			setState(6926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,902,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6779);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BIGINT_SYMBOL || _la==INT_SYMBOL || _la==MEDIUMINT_SYMBOL || _la==SMALLINT_SYMBOL || _la==TINYINT_SYMBOL) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6781);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,869,_ctx) ) {
				case 1:
					{
					setState(6780);
					fieldLength();
					}
					break;
				}
				setState(6784);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
				case 1:
					{
					setState(6783);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6791);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case REAL_SYMBOL:
					{
					setState(6786);
					((DataTypeContext)_localctx).type = match(REAL_SYMBOL);
					}
					break;
				case DOUBLE_SYMBOL:
					{
					setState(6787);
					((DataTypeContext)_localctx).type = match(DOUBLE_SYMBOL);
					setState(6789);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,871,_ctx) ) {
					case 1:
						{
						setState(6788);
						match(PRECISION_SYMBOL);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6794);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
				case 1:
					{
					setState(6793);
					precision();
					}
					break;
				}
				setState(6797);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,874,_ctx) ) {
				case 1:
					{
					setState(6796);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6799);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIXED_SYMBOL || _la==DECIMAL_SYMBOL || _la==FLOAT_SYMBOL || _la==NUMERIC_SYMBOL) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6801);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,875,_ctx) ) {
				case 1:
					{
					setState(6800);
					floatOptions();
					}
					break;
				}
				setState(6804);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,876,_ctx) ) {
				case 1:
					{
					setState(6803);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6806);
				((DataTypeContext)_localctx).type = match(BIT_SYMBOL);
				setState(6808);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,877,_ctx) ) {
				case 1:
					{
					setState(6807);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6810);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOOL_SYMBOL || _la==BOOLEAN_SYMBOL) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6811);
				((DataTypeContext)_localctx).type = match(CHAR_SYMBOL);
				setState(6813);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
				case 1:
					{
					setState(6812);
					fieldLength();
					}
					break;
				}
				setState(6816);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,879,_ctx) ) {
				case 1:
					{
					setState(6815);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6818);
				nchar();
				setState(6820);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,880,_ctx) ) {
				case 1:
					{
					setState(6819);
					fieldLength();
					}
					break;
				}
				setState(6823);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,881,_ctx) ) {
				case 1:
					{
					setState(6822);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6825);
				((DataTypeContext)_localctx).type = match(BINARY_SYMBOL);
				setState(6827);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,882,_ctx) ) {
				case 1:
					{
					setState(6826);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6832);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR_SYMBOL:
					{
					setState(6829);
					((DataTypeContext)_localctx).type = match(CHAR_SYMBOL);
					setState(6830);
					match(VARYING_SYMBOL);
					}
					break;
				case VARCHAR_SYMBOL:
					{
					setState(6831);
					((DataTypeContext)_localctx).type = match(VARCHAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6834);
				fieldLength();
				setState(6836);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,884,_ctx) ) {
				case 1:
					{
					setState(6835);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6848);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,885,_ctx) ) {
				case 1:
					{
					setState(6838);
					((DataTypeContext)_localctx).type = match(NATIONAL_SYMBOL);
					setState(6839);
					match(VARCHAR_SYMBOL);
					}
					break;
				case 2:
					{
					setState(6840);
					((DataTypeContext)_localctx).type = match(NVARCHAR_SYMBOL);
					}
					break;
				case 3:
					{
					setState(6841);
					((DataTypeContext)_localctx).type = match(NCHAR_SYMBOL);
					setState(6842);
					match(VARCHAR_SYMBOL);
					}
					break;
				case 4:
					{
					setState(6843);
					((DataTypeContext)_localctx).type = match(NATIONAL_SYMBOL);
					setState(6844);
					match(CHAR_SYMBOL);
					setState(6845);
					match(VARYING_SYMBOL);
					}
					break;
				case 5:
					{
					setState(6846);
					((DataTypeContext)_localctx).type = match(NCHAR_SYMBOL);
					setState(6847);
					match(VARYING_SYMBOL);
					}
					break;
				}
				setState(6850);
				fieldLength();
				setState(6852);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,886,_ctx) ) {
				case 1:
					{
					setState(6851);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6854);
				((DataTypeContext)_localctx).type = match(VARBINARY_SYMBOL);
				setState(6855);
				fieldLength();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6856);
				((DataTypeContext)_localctx).type = match(YEAR_SYMBOL);
				setState(6858);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,887,_ctx) ) {
				case 1:
					{
					setState(6857);
					fieldLength();
					}
					break;
				}
				setState(6861);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,888,_ctx) ) {
				case 1:
					{
					setState(6860);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6863);
				((DataTypeContext)_localctx).type = match(DATE_SYMBOL);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6864);
				((DataTypeContext)_localctx).type = match(TIME_SYMBOL);
				setState(6866);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,889,_ctx) ) {
				case 1:
					{
					setState(6865);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6868);
				((DataTypeContext)_localctx).type = match(TIMESTAMP_SYMBOL);
				setState(6870);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,890,_ctx) ) {
				case 1:
					{
					setState(6869);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6872);
				((DataTypeContext)_localctx).type = match(DATETIME_SYMBOL);
				setState(6874);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,891,_ctx) ) {
				case 1:
					{
					setState(6873);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6876);
				((DataTypeContext)_localctx).type = match(TINYBLOB_SYMBOL);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6877);
				((DataTypeContext)_localctx).type = match(BLOB_SYMBOL);
				setState(6879);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,892,_ctx) ) {
				case 1:
					{
					setState(6878);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6881);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LONGBLOB_SYMBOL || _la==MEDIUMBLOB_SYMBOL) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6882);
				((DataTypeContext)_localctx).type = match(LONG_SYMBOL);
				setState(6883);
				match(VARBINARY_SYMBOL);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6884);
				((DataTypeContext)_localctx).type = match(LONG_SYMBOL);
				setState(6888);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,893,_ctx) ) {
				case 1:
					{
					setState(6885);
					match(CHAR_SYMBOL);
					setState(6886);
					match(VARYING_SYMBOL);
					}
					break;
				case 2:
					{
					setState(6887);
					match(VARCHAR_SYMBOL);
					}
					break;
				}
				setState(6891);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,894,_ctx) ) {
				case 1:
					{
					setState(6890);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6893);
				((DataTypeContext)_localctx).type = match(TINYTEXT_SYMBOL);
				setState(6895);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,895,_ctx) ) {
				case 1:
					{
					setState(6894);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6897);
				((DataTypeContext)_localctx).type = match(TEXT_SYMBOL);
				setState(6899);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,896,_ctx) ) {
				case 1:
					{
					setState(6898);
					fieldLength();
					}
					break;
				}
				setState(6902);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,897,_ctx) ) {
				case 1:
					{
					setState(6901);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6904);
				((DataTypeContext)_localctx).type = match(MEDIUMTEXT_SYMBOL);
				setState(6906);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,898,_ctx) ) {
				case 1:
					{
					setState(6905);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6908);
				((DataTypeContext)_localctx).type = match(LONGTEXT_SYMBOL);
				setState(6910);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
				case 1:
					{
					setState(6909);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6912);
				((DataTypeContext)_localctx).type = match(ENUM_SYMBOL);
				setState(6913);
				stringList();
				setState(6915);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,900,_ctx) ) {
				case 1:
					{
					setState(6914);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6917);
				((DataTypeContext)_localctx).type = match(SET_SYMBOL);
				setState(6918);
				stringList();
				setState(6920);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
				case 1:
					{
					setState(6919);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6922);
				((DataTypeContext)_localctx).type = match(SERIAL_SYMBOL);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6923);
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				setState(6924);
				((DataTypeContext)_localctx).type = match(JSON_SYMBOL);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6925);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (GEOMETRY_SYMBOL - 151)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 151)) | (1L << (LINESTRING_SYMBOL - 151)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (MULTILINESTRING_SYMBOL - 224)) | (1L << (MULTIPOINT_SYMBOL - 224)) | (1L << (MULTIPOLYGON_SYMBOL - 224)) | (1L << (POINT_SYMBOL - 224)) | (1L << (POLYGON_SYMBOL - 224)))) != 0)) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NcharContext extends ParserRuleContext {
		public Token type;
		public TerminalNode NCHAR_SYMBOL() { return getToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public NcharContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nchar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNchar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNchar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNchar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NcharContext nchar() throws RecognitionException {
		NcharContext _localctx = new NcharContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_nchar);
		try {
			setState(6931);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NCHAR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6928);
				((NcharContext)_localctx).type = match(NCHAR_SYMBOL);
				}
				break;
			case NATIONAL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6929);
				((NcharContext)_localctx).type = match(NATIONAL_SYMBOL);
				setState(6930);
				match(CHAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarcharContext extends ParserRuleContext {
		public Token type;
		public TerminalNode VARYING_SYMBOL() { return getToken(MySQLParser.VARYING_SYMBOL, 0); }
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode VARCHAR_SYMBOL() { return getToken(MySQLParser.VARCHAR_SYMBOL, 0); }
		public VarcharContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varchar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterVarchar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitVarchar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitVarchar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarcharContext varchar() throws RecognitionException {
		VarcharContext _localctx = new VarcharContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_varchar);
		try {
			setState(6936);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6933);
				((VarcharContext)_localctx).type = match(CHAR_SYMBOL);
				setState(6934);
				match(VARYING_SYMBOL);
				}
				break;
			case VARCHAR_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6935);
				((VarcharContext)_localctx).type = match(VARCHAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NvarcharContext extends ParserRuleContext {
		public Token type;
		public TerminalNode VARCHAR_SYMBOL() { return getToken(MySQLParser.VARCHAR_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public TerminalNode NVARCHAR_SYMBOL() { return getToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public TerminalNode NCHAR_SYMBOL() { return getToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode VARYING_SYMBOL() { return getToken(MySQLParser.VARYING_SYMBOL, 0); }
		public NvarcharContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nvarchar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNvarchar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNvarchar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNvarchar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NvarcharContext nvarchar() throws RecognitionException {
		NvarcharContext _localctx = new NvarcharContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_nvarchar);
		try {
			setState(6948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,905,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6938);
				((NvarcharContext)_localctx).type = match(NATIONAL_SYMBOL);
				setState(6939);
				match(VARCHAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6940);
				((NvarcharContext)_localctx).type = match(NVARCHAR_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6941);
				((NvarcharContext)_localctx).type = match(NCHAR_SYMBOL);
				setState(6942);
				match(VARCHAR_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6943);
				((NvarcharContext)_localctx).type = match(NATIONAL_SYMBOL);
				setState(6944);
				match(CHAR_SYMBOL);
				setState(6945);
				match(VARYING_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6946);
				((NvarcharContext)_localctx).type = match(NCHAR_SYMBOL);
				setState(6947);
				match(VARYING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldLengthContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public TerminalNode DECIMAL_NUMBER() { return getToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFieldLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFieldLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFieldLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldLengthContext fieldLength() throws RecognitionException {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_fieldLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6950);
			match(OPEN_PAR_SYMBOL);
			setState(6953);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
				{
				setState(6951);
				real_ulonglong_number();
				}
				break;
			case DECIMAL_NUMBER:
				{
				setState(6952);
				match(DECIMAL_NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6955);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldOptionsContext extends ParserRuleContext {
		public List<TerminalNode> SIGNED_SYMBOL() { return getTokens(MySQLParser.SIGNED_SYMBOL); }
		public TerminalNode SIGNED_SYMBOL(int i) {
			return getToken(MySQLParser.SIGNED_SYMBOL, i);
		}
		public List<TerminalNode> UNSIGNED_SYMBOL() { return getTokens(MySQLParser.UNSIGNED_SYMBOL); }
		public TerminalNode UNSIGNED_SYMBOL(int i) {
			return getToken(MySQLParser.UNSIGNED_SYMBOL, i);
		}
		public List<TerminalNode> ZEROFILL_SYMBOL() { return getTokens(MySQLParser.ZEROFILL_SYMBOL); }
		public TerminalNode ZEROFILL_SYMBOL(int i) {
			return getToken(MySQLParser.ZEROFILL_SYMBOL, i);
		}
		public FieldOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFieldOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFieldOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFieldOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldOptionsContext fieldOptions() throws RecognitionException {
		FieldOptionsContext _localctx = new FieldOptionsContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_fieldOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6958); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6957);
					_la = _input.LA(1);
					if ( !(_la==SIGNED_SYMBOL || _la==UNSIGNED_SYMBOL || _la==ZEROFILL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6960); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,907,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetWithOptBinaryContext extends ParserRuleContext {
		public AsciiContext ascii() {
			return getRuleContext(AsciiContext.class,0);
		}
		public UnicodeContext unicode() {
			return getRuleContext(UnicodeContext.class,0);
		}
		public TerminalNode BYTE_SYMBOL() { return getToken(MySQLParser.BYTE_SYMBOL, 0); }
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public CharsetWithOptBinaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetWithOptBinary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCharsetWithOptBinary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCharsetWithOptBinary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCharsetWithOptBinary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetWithOptBinaryContext charsetWithOptBinary() throws RecognitionException {
		CharsetWithOptBinaryContext _localctx = new CharsetWithOptBinaryContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_charsetWithOptBinary);
		try {
			setState(6976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,910,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6962);
				ascii();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6963);
				unicode();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6964);
				match(BYTE_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6965);
				charset();
				setState(6966);
				charsetName();
				setState(6968);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,908,_ctx) ) {
				case 1:
					{
					setState(6967);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6970);
				match(BINARY_SYMBOL);
				setState(6974);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,909,_ctx) ) {
				case 1:
					{
					setState(6971);
					charset();
					setState(6972);
					charsetName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsciiContext extends ParserRuleContext {
		public TerminalNode ASCII_SYMBOL() { return getToken(MySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public AsciiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ascii; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAscii(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAscii(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAscii(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsciiContext ascii() throws RecognitionException {
		AsciiContext _localctx = new AsciiContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_ascii);
		try {
			setState(6985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,912,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6978);
				match(ASCII_SYMBOL);
				setState(6980);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,911,_ctx) ) {
				case 1:
					{
					setState(6979);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6982);
				if (!(serverVersion >= 50500)) throw new FailedPredicateException(this, "serverVersion >= 50500");
				setState(6983);
				match(BINARY_SYMBOL);
				setState(6984);
				match(ASCII_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnicodeContext extends ParserRuleContext {
		public TerminalNode UNICODE_SYMBOL() { return getToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public UnicodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUnicode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUnicode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUnicode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnicodeContext unicode() throws RecognitionException {
		UnicodeContext _localctx = new UnicodeContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_unicode);
		try {
			setState(6994);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,914,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6987);
				match(UNICODE_SYMBOL);
				setState(6989);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,913,_ctx) ) {
				case 1:
					{
					setState(6988);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6991);
				if (!(serverVersion >= 50500)) throw new FailedPredicateException(this, "serverVersion >= 50500");
				setState(6992);
				match(BINARY_SYMBOL);
				setState(6993);
				match(UNICODE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WsNumCodepointsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WsNumCodepointsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wsNumCodepoints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWsNumCodepoints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWsNumCodepoints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWsNumCodepoints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WsNumCodepointsContext wsNumCodepoints() throws RecognitionException {
		WsNumCodepointsContext _localctx = new WsNumCodepointsContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_wsNumCodepoints);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6996);
			match(OPEN_PAR_SYMBOL);
			setState(6997);
			real_ulong_number();
			setState(6998);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeDatetimePrecisionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TypeDatetimePrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeDatetimePrecision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTypeDatetimePrecision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTypeDatetimePrecision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTypeDatetimePrecision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeDatetimePrecisionContext typeDatetimePrecision() throws RecognitionException {
		TypeDatetimePrecisionContext _localctx = new TypeDatetimePrecisionContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_typeDatetimePrecision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7000);
			if (!(serverVersion >= 50600)) throw new FailedPredicateException(this, "serverVersion >= 50600");
			setState(7001);
			match(OPEN_PAR_SYMBOL);
			setState(7002);
			match(INT_NUMBER);
			setState(7003);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCharsetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCharsetName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCharsetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_charsetName);
		try {
			setState(7009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,915,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7005);
				textOrIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7006);
				match(BINARY_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7007);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(7008);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_collationName);
		try {
			setState(7014);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7011);
				textOrIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7012);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(7013);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableOptionsContext extends ParserRuleContext {
		public List<CreateTableOptionContext> createTableOption() {
			return getRuleContexts(CreateTableOptionContext.class);
		}
		public CreateTableOptionContext createTableOption(int i) {
			return getRuleContext(CreateTableOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateTableOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateTableOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateTableOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateTableOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableOptionsContext createTableOptions() throws RecognitionException {
		CreateTableOptionsContext _localctx = new CreateTableOptionsContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_createTableOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7016);
			createTableOption();
			setState(7023);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,918,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7018);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,917,_ctx) ) {
					case 1:
						{
						setState(7017);
						match(COMMA_SYMBOL);
						}
						break;
					}
					setState(7020);
					createTableOption();
					}
					} 
				}
				setState(7025);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,918,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableOptionsSpaceSeparatedContext extends ParserRuleContext {
		public List<CreateTableOptionContext> createTableOption() {
			return getRuleContexts(CreateTableOptionContext.class);
		}
		public CreateTableOptionContext createTableOption(int i) {
			return getRuleContext(CreateTableOptionContext.class,i);
		}
		public CreateTableOptionsSpaceSeparatedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableOptionsSpaceSeparated; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateTableOptionsSpaceSeparated(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateTableOptionsSpaceSeparated(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateTableOptionsSpaceSeparated(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated() throws RecognitionException {
		CreateTableOptionsSpaceSeparatedContext _localctx = new CreateTableOptionsSpaceSeparatedContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_createTableOptionsSpaceSeparated);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7027); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7026);
					createTableOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7029); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,919,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableOptionContext extends ParserRuleContext {
		public Token option;
		public Token format;
		public Token method;
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode AVG_ROW_LENGTH_SYMBOL() { return getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TerminalNode COMPRESSION_SYMBOL() { return getToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TernaryOptionContext ternaryOption() {
			return getRuleContext(TernaryOptionContext.class,0);
		}
		public TerminalNode PACK_KEYS_SYMBOL() { return getToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public TerminalNode STATS_AUTO_RECALC_SYMBOL() { return getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public TerminalNode STATS_PERSISTENT_SYMBOL() { return getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public TerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode TABLE_CHECKSUM_SYMBOL() { return getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public TerminalNode DELAY_KEY_WRITE_SYMBOL() { return getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public TerminalNode ROW_FORMAT_SYMBOL() { return getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode COMPRESSED_SYMBOL() { return getToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public TerminalNode REDUNDANT_SYMBOL() { return getToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public TerminalNode COMPACT_SYMBOL() { return getToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TableRefListContext tableRefList() {
			return getRuleContext(TableRefListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode UNION_SYMBOL() { return getToken(MySQLParser.UNION_SYMBOL, 0); }
		public DefaultCharsetContext defaultCharset() {
			return getRuleContext(DefaultCharsetContext.class,0);
		}
		public DefaultCollationContext defaultCollation() {
			return getRuleContext(DefaultCollationContext.class,0);
		}
		public TerminalNode INSERT_METHOD_SYMBOL() { return getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode DISK_SYMBOL() { return getToken(MySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public CreateTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableOptionContext createTableOption() throws RecognitionException {
		CreateTableOptionContext _localctx = new CreateTableOptionContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_createTableOption);
		int _la;
		try {
			setState(7158);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,943,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7031);
				((CreateTableOptionContext)_localctx).option = match(ENGINE_SYMBOL);
				setState(7033);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
				case 1:
					{
					setState(7032);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7035);
				engineRef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7036);
				if (!(serverVersion < 50500)) throw new FailedPredicateException(this, "serverVersion < 50500");
				setState(7037);
				((CreateTableOptionContext)_localctx).option = match(TYPE_SYMBOL);
				setState(7039);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,921,_ctx) ) {
				case 1:
					{
					setState(7038);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7041);
				engineRef();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7042);
				((CreateTableOptionContext)_localctx).option = match(MAX_ROWS_SYMBOL);
				setState(7044);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7043);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7046);
				ulonglong_number();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7047);
				((CreateTableOptionContext)_localctx).option = match(MIN_ROWS_SYMBOL);
				setState(7049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7048);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7051);
				ulonglong_number();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7052);
				((CreateTableOptionContext)_localctx).option = match(AVG_ROW_LENGTH_SYMBOL);
				setState(7054);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7053);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7056);
				ulong_number();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7057);
				((CreateTableOptionContext)_localctx).option = match(PASSWORD_SYMBOL);
				setState(7059);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,925,_ctx) ) {
				case 1:
					{
					setState(7058);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7061);
				textString();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7062);
				((CreateTableOptionContext)_localctx).option = match(COMMENT_SYMBOL);
				setState(7064);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,926,_ctx) ) {
				case 1:
					{
					setState(7063);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7066);
				textString();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7067);
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				setState(7068);
				((CreateTableOptionContext)_localctx).option = match(COMPRESSION_SYMBOL);
				setState(7070);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
				case 1:
					{
					setState(7069);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7072);
				textString();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7073);
				if (!(serverVersion >= 50711)) throw new FailedPredicateException(this, "serverVersion >= 50711");
				setState(7074);
				((CreateTableOptionContext)_localctx).option = match(ENCRYPTION_SYMBOL);
				setState(7076);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,928,_ctx) ) {
				case 1:
					{
					setState(7075);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7078);
				textString();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7079);
				((CreateTableOptionContext)_localctx).option = match(AUTO_INCREMENT_SYMBOL);
				setState(7081);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7080);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7083);
				ulonglong_number();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7084);
				((CreateTableOptionContext)_localctx).option = match(PACK_KEYS_SYMBOL);
				setState(7086);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7085);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7088);
				ternaryOption();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7089);
				if (!(serverVersion >= 50600)) throw new FailedPredicateException(this, "serverVersion >= 50600");
				setState(7090);
				((CreateTableOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & ((1L << (STATS_AUTO_RECALC_SYMBOL - 324)) | (1L << (STATS_PERSISTENT_SYMBOL - 324)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 324)))) != 0)) ) {
					((CreateTableOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7092);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7091);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7094);
				ternaryOption();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7095);
				((CreateTableOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM_SYMBOL || _la==TABLE_CHECKSUM_SYMBOL) ) {
					((CreateTableOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7097);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7096);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7099);
				ulong_number();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7100);
				((CreateTableOptionContext)_localctx).option = match(DELAY_KEY_WRITE_SYMBOL);
				setState(7102);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7101);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7104);
				ulong_number();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7105);
				((CreateTableOptionContext)_localctx).option = match(ROW_FORMAT_SYMBOL);
				setState(7107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7106);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7109);
				((CreateTableOptionContext)_localctx).format = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (COMPACT_SYMBOL - 92)) | (1L << (COMPRESSED_SYMBOL - 92)) | (1L << (DYNAMIC_SYMBOL - 92)) | (1L << (FIXED_SYMBOL - 92)))) != 0) || _la==REDUNDANT_SYMBOL || _la==DEFAULT_SYMBOL) ) {
					((CreateTableOptionContext)_localctx).format = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7110);
				((CreateTableOptionContext)_localctx).option = match(UNION_SYMBOL);
				setState(7112);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7111);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7114);
				match(OPEN_PAR_SYMBOL);
				setState(7115);
				tableRefList();
				setState(7116);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7118);
				defaultCharset();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7119);
				defaultCollation();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7120);
				((CreateTableOptionContext)_localctx).option = match(INSERT_METHOD_SYMBOL);
				setState(7122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7121);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7124);
				((CreateTableOptionContext)_localctx).method = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_SYMBOL || _la==FIRST_SYMBOL || _la==LAST_SYMBOL) ) {
					((CreateTableOptionContext)_localctx).method = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7125);
				((CreateTableOptionContext)_localctx).option = match(DATA_SYMBOL);
				setState(7126);
				match(DIRECTORY_SYMBOL);
				setState(7128);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,937,_ctx) ) {
				case 1:
					{
					setState(7127);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7130);
				textString();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7131);
				((CreateTableOptionContext)_localctx).option = match(INDEX_SYMBOL);
				setState(7132);
				match(DIRECTORY_SYMBOL);
				setState(7134);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,938,_ctx) ) {
				case 1:
					{
					setState(7133);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7136);
				textString();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7137);
				((CreateTableOptionContext)_localctx).option = match(TABLESPACE_SYMBOL);
				setState(7143);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,940,_ctx) ) {
				case 1:
					{
					setState(7138);
					if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
					setState(7140);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,939,_ctx) ) {
					case 1:
						{
						setState(7139);
						match(EQUAL_OPERATOR);
						}
						break;
					}
					}
					break;
				case 2:
					{
					}
					break;
				}
				setState(7145);
				identifier();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7146);
				((CreateTableOptionContext)_localctx).option = match(STORAGE_SYMBOL);
				setState(7147);
				_la = _input.LA(1);
				if ( !(_la==DISK_SYMBOL || _la==MEMORY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7148);
				((CreateTableOptionContext)_localctx).option = match(CONNECTION_SYMBOL);
				setState(7150);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
				case 1:
					{
					setState(7149);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7152);
				textString();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(7153);
				((CreateTableOptionContext)_localctx).option = match(KEY_BLOCK_SIZE_SYMBOL);
				setState(7155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7154);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7157);
				ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TernaryOptionContext extends ParserRuleContext {
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TernaryOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ternaryOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTernaryOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTernaryOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTernaryOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TernaryOptionContext ternaryOption() throws RecognitionException {
		TernaryOptionContext _localctx = new TernaryOptionContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_ternaryOption);
		try {
			setState(7162);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7160);
				ulong_number();
				}
				break;
			case DEFAULT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7161);
				match(DEFAULT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultCollationContext extends ParserRuleContext {
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultCollation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDefaultCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDefaultCollation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDefaultCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultCollationContext defaultCollation() throws RecognitionException {
		DefaultCollationContext _localctx = new DefaultCollationContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_defaultCollation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7165);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(7164);
				match(DEFAULT_SYMBOL);
				}
			}

			setState(7167);
			match(COLLATE_SYMBOL);
			setState(7169);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,946,_ctx) ) {
			case 1:
				{
				setState(7168);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(7171);
			collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultCharsetContext extends ParserRuleContext {
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultCharsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultCharset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDefaultCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDefaultCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDefaultCharset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultCharsetContext defaultCharset() throws RecognitionException {
		DefaultCharsetContext _localctx = new DefaultCharsetContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_defaultCharset);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(7173);
				match(DEFAULT_SYMBOL);
				}
			}

			setState(7176);
			charset();
			setState(7178);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,948,_ctx) ) {
			case 1:
				{
				setState(7177);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(7180);
			charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public PartitionTypeDefContext partitionTypeDef() {
			return getRuleContext(PartitionTypeDefContext.class,0);
		}
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public SubPartitionsContext subPartitions() {
			return getRuleContext(SubPartitionsContext.class,0);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_partitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7182);
			if (!(serverVersion >= 50100)) throw new FailedPredicateException(this, "serverVersion >= 50100");
			setState(7183);
			match(PARTITION_SYMBOL);
			setState(7184);
			match(BY_SYMBOL);
			setState(7185);
			partitionTypeDef();
			setState(7188);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,949,_ctx) ) {
			case 1:
				{
				setState(7186);
				match(PARTITIONS_SYMBOL);
				setState(7187);
				real_ulong_number();
				}
				break;
			}
			setState(7191);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,950,_ctx) ) {
			case 1:
				{
				setState(7190);
				subPartitions();
				}
				break;
			}
			setState(7194);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,951,_ctx) ) {
			case 1:
				{
				setState(7193);
				partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionTypeDefContext extends ParserRuleContext {
		public PartitionTypeDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionTypeDef; }
	 
		public PartitionTypeDefContext() { }
		public void copyFrom(PartitionTypeDefContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionDefRangeListContext extends PartitionTypeDefContext {
		public TerminalNode RANGE_SYMBOL() { return getToken(MySQLParser.RANGE_SYMBOL, 0); }
		public TerminalNode LIST_SYMBOL() { return getToken(MySQLParser.LIST_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public PartitionDefRangeListContext(PartitionTypeDefContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionDefRangeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionDefRangeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionDefRangeList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionDefKeyContext extends PartitionTypeDefContext {
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode LINEAR_SYMBOL() { return getToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return getRuleContext(PartitionKeyAlgorithmContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public PartitionDefKeyContext(PartitionTypeDefContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionDefKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionDefKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionDefKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionDefHashContext extends PartitionTypeDefContext {
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode LINEAR_SYMBOL() { return getToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public PartitionDefHashContext(PartitionTypeDefContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionDefHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionDefHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionDefHash(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionTypeDefContext partitionTypeDef() throws RecognitionException {
		PartitionTypeDefContext _localctx = new PartitionTypeDefContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_partitionTypeDef);
		int _la;
		try {
			setState(7230);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,958,_ctx) ) {
			case 1:
				_localctx = new PartitionDefKeyContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(7197);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					setState(7196);
					match(LINEAR_SYMBOL);
					}
				}

				setState(7199);
				match(KEY_SYMBOL);
				setState(7201);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,953,_ctx) ) {
				case 1:
					{
					setState(7200);
					partitionKeyAlgorithm();
					}
					break;
				}
				setState(7203);
				match(OPEN_PAR_SYMBOL);
				setState(7205);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,954,_ctx) ) {
				case 1:
					{
					setState(7204);
					identifierList();
					}
					break;
				}
				setState(7207);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				_localctx = new PartitionDefHashContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(7209);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					setState(7208);
					match(LINEAR_SYMBOL);
					}
				}

				setState(7211);
				match(HASH_SYMBOL);
				setState(7212);
				match(OPEN_PAR_SYMBOL);
				setState(7213);
				bitExpr(0);
				setState(7214);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				_localctx = new PartitionDefRangeListContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(7216);
				_la = _input.LA(1);
				if ( !(_la==LIST_SYMBOL || _la==RANGE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7228);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,957,_ctx) ) {
				case 1:
					{
					setState(7217);
					match(OPEN_PAR_SYMBOL);
					setState(7218);
					bitExpr(0);
					setState(7219);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				case 2:
					{
					setState(7221);
					if (!(serverVersion >= 50500)) throw new FailedPredicateException(this, "serverVersion >= 50500");
					setState(7222);
					match(COLUMNS_SYMBOL);
					setState(7223);
					match(OPEN_PAR_SYMBOL);
					setState(7225);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,956,_ctx) ) {
					case 1:
						{
						setState(7224);
						identifierList();
						}
						break;
					}
					setState(7227);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubPartitionsContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public TerminalNode LINEAR_SYMBOL() { return getToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public TerminalNode SUBPARTITIONS_SYMBOL() { return getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return getRuleContext(PartitionKeyAlgorithmContext.class,0);
		}
		public SubPartitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subPartitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSubPartitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSubPartitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSubPartitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubPartitionsContext subPartitions() throws RecognitionException {
		SubPartitionsContext _localctx = new SubPartitionsContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_subPartitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7232);
			match(SUBPARTITION_SYMBOL);
			setState(7233);
			match(BY_SYMBOL);
			setState(7235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINEAR_SYMBOL) {
				{
				setState(7234);
				match(LINEAR_SYMBOL);
				}
			}

			setState(7247);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HASH_SYMBOL:
				{
				setState(7237);
				match(HASH_SYMBOL);
				setState(7238);
				match(OPEN_PAR_SYMBOL);
				setState(7239);
				bitExpr(0);
				setState(7240);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
				{
				setState(7242);
				match(KEY_SYMBOL);
				setState(7244);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,960,_ctx) ) {
				case 1:
					{
					setState(7243);
					partitionKeyAlgorithm();
					}
					break;
				}
				setState(7246);
				identifierListWithParentheses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,962,_ctx) ) {
			case 1:
				{
				setState(7249);
				match(SUBPARTITIONS_SYMBOL);
				setState(7250);
				real_ulong_number();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionKeyAlgorithmContext extends ParserRuleContext {
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public PartitionKeyAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionKeyAlgorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionKeyAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionKeyAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionKeyAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionKeyAlgorithmContext partitionKeyAlgorithm() throws RecognitionException {
		PartitionKeyAlgorithmContext _localctx = new PartitionKeyAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_partitionKeyAlgorithm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7253);
			if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
			setState(7254);
			match(ALGORITHM_SYMBOL);
			setState(7255);
			match(EQUAL_OPERATOR);
			setState(7256);
			real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7258);
			match(OPEN_PAR_SYMBOL);
			setState(7259);
			partitionDefinition();
			setState(7264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7260);
				match(COMMA_SYMBOL);
				setState(7261);
				partitionDefinition();
				}
				}
				setState(7266);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7267);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySQLParser.LESS_SYMBOL, 0); }
		public TerminalNode THAN_SYMBOL() { return getToken(MySQLParser.THAN_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public PartitionValuesInContext partitionValuesIn() {
			return getRuleContext(PartitionValuesInContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionValueItemListParenContext partitionValueItemListParen() {
			return getRuleContext(PartitionValueItemListParenContext.class,0);
		}
		public TerminalNode MAXVALUE_SYMBOL() { return getToken(MySQLParser.MAXVALUE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_partitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7269);
			match(PARTITION_SYMBOL);
			setState(7270);
			identifier();
			setState(7281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,965,_ctx) ) {
			case 1:
				{
				setState(7271);
				match(VALUES_SYMBOL);
				setState(7272);
				match(LESS_SYMBOL);
				setState(7273);
				match(THAN_SYMBOL);
				setState(7276);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					setState(7274);
					partitionValueItemListParen();
					}
					break;
				case MAXVALUE_SYMBOL:
					{
					setState(7275);
					match(MAXVALUE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(7278);
				match(VALUES_SYMBOL);
				setState(7279);
				match(IN_SYMBOL);
				setState(7280);
				partitionValuesIn();
				}
				break;
			}
			setState(7286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (MAX_ROWS_SYMBOL - 184)) | (1L << (MIN_ROWS_SYMBOL - 184)) | (1L << (NODEGROUP_SYMBOL - 184)))) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL || _la==INDEX_SYMBOL) {
				{
				{
				setState(7283);
				partitionOption();
				}
				}
				setState(7288);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(7289);
				match(OPEN_PAR_SYMBOL);
				setState(7290);
				subpartitionDefinition();
				setState(7295);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(7291);
					match(COMMA_SYMBOL);
					setState(7292);
					subpartitionDefinition();
					}
					}
					setState(7297);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7298);
				match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionValuesInContext extends ParserRuleContext {
		public List<PartitionValueItemListParenContext> partitionValueItemListParen() {
			return getRuleContexts(PartitionValueItemListParenContext.class);
		}
		public PartitionValueItemListParenContext partitionValueItemListParen(int i) {
			return getRuleContext(PartitionValueItemListParenContext.class,i);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionValuesInContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValuesIn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionValuesIn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionValuesIn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionValuesIn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionValuesInContext partitionValuesIn() throws RecognitionException {
		PartitionValuesInContext _localctx = new PartitionValuesInContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_partitionValuesIn);
		int _la;
		try {
			setState(7314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,970,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7302);
				partitionValueItemListParen();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7303);
				match(OPEN_PAR_SYMBOL);
				setState(7304);
				partitionValueItemListParen();
				setState(7309);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(7305);
					match(COMMA_SYMBOL);
					setState(7306);
					partitionValueItemListParen();
					}
					}
					setState(7311);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7312);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public Token option;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_partitionOption);
		int _la;
		try {
			setState(7350);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLESPACE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7316);
				((PartitionOptionContext)_localctx).option = match(TABLESPACE_SYMBOL);
				setState(7318);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,971,_ctx) ) {
				case 1:
					{
					setState(7317);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7320);
				identifier();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7322);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					setState(7321);
					((PartitionOptionContext)_localctx).option = match(STORAGE_SYMBOL);
					}
				}

				setState(7324);
				match(ENGINE_SYMBOL);
				setState(7326);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,973,_ctx) ) {
				case 1:
					{
					setState(7325);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7328);
				engineRef();
				}
				break;
			case NODEGROUP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7329);
				((PartitionOptionContext)_localctx).option = match(NODEGROUP_SYMBOL);
				setState(7331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7330);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7333);
				real_ulong_number();
				}
				break;
			case MAX_ROWS_SYMBOL:
			case MIN_ROWS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(7334);
				((PartitionOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MAX_ROWS_SYMBOL || _la==MIN_ROWS_SYMBOL) ) {
					((PartitionOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7335);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7338);
				real_ulong_number();
				}
				break;
			case DATA_SYMBOL:
			case INDEX_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(7339);
				((PartitionOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATA_SYMBOL || _la==INDEX_SYMBOL) ) {
					((PartitionOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7340);
				match(DIRECTORY_SYMBOL);
				setState(7342);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,976,_ctx) ) {
				case 1:
					{
					setState(7341);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7344);
				textLiteral();
				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(7345);
				((PartitionOptionContext)_localctx).option = match(COMMENT_SYMBOL);
				setState(7347);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,977,_ctx) ) {
				case 1:
					{
					setState(7346);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7349);
				textLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSubpartitionDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSubpartitionDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSubpartitionDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7352);
			match(SUBPARTITION_SYMBOL);
			setState(7353);
			textOrIdentifier();
			setState(7357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (MAX_ROWS_SYMBOL - 184)) | (1L << (MIN_ROWS_SYMBOL - 184)) | (1L << (NODEGROUP_SYMBOL - 184)))) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL || _la==INDEX_SYMBOL) {
				{
				{
				setState(7354);
				partitionOption();
				}
				}
				setState(7359);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionValueItemListParenContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<PartitionValueItemContext> partitionValueItem() {
			return getRuleContexts(PartitionValueItemContext.class);
		}
		public PartitionValueItemContext partitionValueItem(int i) {
			return getRuleContext(PartitionValueItemContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionValueItemListParenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValueItemListParen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionValueItemListParen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionValueItemListParen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionValueItemListParen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionValueItemListParenContext partitionValueItemListParen() throws RecognitionException {
		PartitionValueItemListParenContext _localctx = new PartitionValueItemListParenContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_partitionValueItemListParen);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7360);
			match(OPEN_PAR_SYMBOL);
			setState(7361);
			partitionValueItem();
			setState(7366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7362);
				match(COMMA_SYMBOL);
				setState(7363);
				partitionValueItem();
				}
				}
				setState(7368);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7369);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionValueItemContext extends ParserRuleContext {
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode MAXVALUE_SYMBOL() { return getToken(MySQLParser.MAXVALUE_SYMBOL, 0); }
		public PartitionValueItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValueItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionValueItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionValueItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionValueItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionValueItemContext partitionValueItem() throws RecognitionException {
		PartitionValueItemContext _localctx = new PartitionValueItemContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_partitionValueItem);
		try {
			setState(7373);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,981,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7371);
				bitExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7372);
				match(MAXVALUE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinerClauseContext extends ParserRuleContext {
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public DefinerClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definerClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDefinerClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDefinerClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDefinerClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinerClauseContext definerClause() throws RecognitionException {
		DefinerClauseContext _localctx = new DefinerClauseContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_definerClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7375);
			match(DEFINER_SYMBOL);
			setState(7376);
			match(EQUAL_OPERATOR);
			setState(7377);
			user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF_SYMBOL() { return getToken(MySQLParser.IF_SYMBOL, 0); }
		public TerminalNode EXISTS_SYMBOL() { return getToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIfExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7379);
			match(IF_SYMBOL);
			setState(7380);
			match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF_SYMBOL() { return getToken(MySQLParser.IF_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode EXISTS_SYMBOL() { return getToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7382);
			match(IF_SYMBOL);
			setState(7383);
			notRule();
			setState(7384);
			match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token type;
		public FunctionParameterContext functionParameter() {
			return getRuleContext(FunctionParameterContext.class,0);
		}
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode OUT_SYMBOL() { return getToken(MySQLParser.OUT_SYMBOL, 0); }
		public TerminalNode INOUT_SYMBOL() { return getToken(MySQLParser.INOUT_SYMBOL, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterProcedureParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitProcedureParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitProcedureParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7387);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,982,_ctx) ) {
			case 1:
				{
				setState(7386);
				((ProcedureParameterContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INOUT_SYMBOL || _la==IN_SYMBOL || _la==OUT_SYMBOL) ) {
					((ProcedureParameterContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(7389);
			functionParameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterContext extends ParserRuleContext {
		public ParameterNameContext parameterName() {
			return getRuleContext(ParameterNameContext.class,0);
		}
		public TypeWithOptCollateContext typeWithOptCollate() {
			return getRuleContext(TypeWithOptCollateContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFunctionParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFunctionParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFunctionParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7391);
			parameterName();
			setState(7392);
			typeWithOptCollate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeWithOptCollateContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TypeWithOptCollateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeWithOptCollate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTypeWithOptCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTypeWithOptCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTypeWithOptCollate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeWithOptCollateContext typeWithOptCollate() throws RecognitionException {
		TypeWithOptCollateContext _localctx = new TypeWithOptCollateContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_typeWithOptCollate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7394);
			dataType();
			setState(7397);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,983,_ctx) ) {
			case 1:
				{
				setState(7395);
				match(COLLATE_SYMBOL);
				setState(7396);
				collationName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaIdentifierPairContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<SchemaRefContext> schemaRef() {
			return getRuleContexts(SchemaRefContext.class);
		}
		public SchemaRefContext schemaRef(int i) {
			return getRuleContext(SchemaRefContext.class,i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SchemaIdentifierPairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaIdentifierPair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSchemaIdentifierPair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSchemaIdentifierPair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSchemaIdentifierPair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaIdentifierPairContext schemaIdentifierPair() throws RecognitionException {
		SchemaIdentifierPairContext _localctx = new SchemaIdentifierPairContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_schemaIdentifierPair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7399);
			match(OPEN_PAR_SYMBOL);
			setState(7400);
			schemaRef();
			setState(7401);
			match(COMMA_SYMBOL);
			setState(7402);
			schemaRef();
			setState(7403);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewRefListContext extends ParserRuleContext {
		public List<ViewRefContext> viewRef() {
			return getRuleContexts(ViewRefContext.class);
		}
		public ViewRefContext viewRef(int i) {
			return getRuleContext(ViewRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ViewRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewRefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewRefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewRefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewRefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewRefListContext viewRefList() throws RecognitionException {
		ViewRefListContext _localctx = new ViewRefListContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_viewRefList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7405);
			viewRef();
			setState(7410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7406);
				match(COMMA_SYMBOL);
				setState(7407);
				viewRef();
				}
				}
				setState(7412);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateListContext extends ParserRuleContext {
		public List<UpdateElementContext> updateElement() {
			return getRuleContexts(UpdateElementContext.class);
		}
		public UpdateElementContext updateElement(int i) {
			return getRuleContext(UpdateElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UpdateListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUpdateList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUpdateList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUpdateList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateListContext updateList() throws RecognitionException {
		UpdateListContext _localctx = new UpdateListContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_updateList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7413);
			updateElement();
			setState(7418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7414);
				match(COMMA_SYMBOL);
				setState(7415);
				updateElement();
				}
				}
				setState(7420);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateElementContext extends ParserRuleContext {
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public UpdateElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUpdateElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUpdateElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUpdateElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateElementContext updateElement() throws RecognitionException {
		UpdateElementContext _localctx = new UpdateElementContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_updateElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7421);
			columnRef();
			setState(7422);
			match(EQUAL_OPERATOR);
			setState(7425);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,986,_ctx) ) {
			case 1:
				{
				setState(7423);
				expr(0);
				}
				break;
			case 2:
				{
				setState(7424);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetClauseContext extends ParserRuleContext {
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCharsetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCharsetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCharsetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetClauseContext charsetClause() throws RecognitionException {
		CharsetClauseContext _localctx = new CharsetClauseContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_charsetClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7427);
			charset();
			setState(7428);
			charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldsClauseContext extends ParserRuleContext {
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public List<FieldTermContext> fieldTerm() {
			return getRuleContexts(FieldTermContext.class);
		}
		public FieldTermContext fieldTerm(int i) {
			return getRuleContext(FieldTermContext.class,i);
		}
		public FieldsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFieldsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFieldsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFieldsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldsClauseContext fieldsClause() throws RecognitionException {
		FieldsClauseContext _localctx = new FieldsClauseContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_fieldsClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7430);
			match(COLUMNS_SYMBOL);
			setState(7432); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7431);
					fieldTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7434); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,987,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldTermContext extends ParserRuleContext {
		public TerminalNode TERMINATED_SYMBOL() { return getToken(MySQLParser.TERMINATED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode ENCLOSED_SYMBOL() { return getToken(MySQLParser.ENCLOSED_SYMBOL, 0); }
		public TerminalNode OPTIONALLY_SYMBOL() { return getToken(MySQLParser.OPTIONALLY_SYMBOL, 0); }
		public TerminalNode ESCAPED_SYMBOL() { return getToken(MySQLParser.ESCAPED_SYMBOL, 0); }
		public FieldTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFieldTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFieldTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFieldTerm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldTermContext fieldTerm() throws RecognitionException {
		FieldTermContext _localctx = new FieldTermContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_fieldTerm);
		int _la;
		try {
			setState(7448);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7436);
				match(TERMINATED_SYMBOL);
				setState(7437);
				match(BY_SYMBOL);
				setState(7438);
				textString();
				}
				break;
			case ENCLOSED_SYMBOL:
			case OPTIONALLY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7440);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY_SYMBOL) {
					{
					setState(7439);
					match(OPTIONALLY_SYMBOL);
					}
				}

				setState(7442);
				match(ENCLOSED_SYMBOL);
				setState(7443);
				match(BY_SYMBOL);
				setState(7444);
				textString();
				}
				break;
			case ESCAPED_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7445);
				match(ESCAPED_SYMBOL);
				setState(7446);
				match(BY_SYMBOL);
				setState(7447);
				textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LinesClauseContext extends ParserRuleContext {
		public TerminalNode LINES_SYMBOL() { return getToken(MySQLParser.LINES_SYMBOL, 0); }
		public List<LineTermContext> lineTerm() {
			return getRuleContexts(LineTermContext.class);
		}
		public LineTermContext lineTerm(int i) {
			return getRuleContext(LineTermContext.class,i);
		}
		public LinesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLinesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLinesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLinesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LinesClauseContext linesClause() throws RecognitionException {
		LinesClauseContext _localctx = new LinesClauseContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_linesClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7450);
			match(LINES_SYMBOL);
			setState(7452); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7451);
					lineTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7454); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,990,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LineTermContext extends ParserRuleContext {
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode TERMINATED_SYMBOL() { return getToken(MySQLParser.TERMINATED_SYMBOL, 0); }
		public TerminalNode STARTING_SYMBOL() { return getToken(MySQLParser.STARTING_SYMBOL, 0); }
		public LineTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lineTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLineTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLineTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLineTerm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LineTermContext lineTerm() throws RecognitionException {
		LineTermContext _localctx = new LineTermContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_lineTerm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7456);
			_la = _input.LA(1);
			if ( !(_la==STARTING_SYMBOL || _la==TERMINATED_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7457);
			match(BY_SYMBOL);
			setState(7458);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserListContext extends ParserRuleContext {
		public List<UserContext> user() {
			return getRuleContexts(UserContext.class);
		}
		public UserContext user(int i) {
			return getRuleContext(UserContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UserListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUserList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUserList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUserList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserListContext userList() throws RecognitionException {
		UserListContext _localctx = new UserListContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_userList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7460);
			user();
			setState(7465);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,991,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7461);
					match(COMMA_SYMBOL);
					setState(7462);
					user();
					}
					} 
				}
				setState(7467);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,991,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOrAlterUserListContext extends ParserRuleContext {
		public List<CreateOrAlterUserContext> createOrAlterUser() {
			return getRuleContexts(CreateOrAlterUserContext.class);
		}
		public CreateOrAlterUserContext createOrAlterUser(int i) {
			return getRuleContext(CreateOrAlterUserContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateOrAlterUserListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOrAlterUserList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateOrAlterUserList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateOrAlterUserList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateOrAlterUserList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOrAlterUserListContext createOrAlterUserList() throws RecognitionException {
		CreateOrAlterUserListContext _localctx = new CreateOrAlterUserListContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_createOrAlterUserList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7468);
			createOrAlterUser();
			setState(7473);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,992,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7469);
					match(COMMA_SYMBOL);
					setState(7470);
					createOrAlterUser();
					}
					} 
				}
				setState(7475);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,992,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOrAlterUserContext extends ParserRuleContext {
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public CreateOrAlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOrAlterUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateOrAlterUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateOrAlterUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateOrAlterUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOrAlterUserContext createOrAlterUser() throws RecognitionException {
		CreateOrAlterUserContext _localctx = new CreateOrAlterUserContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_createOrAlterUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7476);
			user();
			setState(7497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,997,_ctx) ) {
			case 1:
				{
				setState(7477);
				match(IDENTIFIED_SYMBOL);
				setState(7495);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,996,_ctx) ) {
				case 1:
					{
					setState(7478);
					match(BY_SYMBOL);
					setState(7481);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,993,_ctx) ) {
					case 1:
						{
						setState(7479);
						if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
						setState(7480);
						match(PASSWORD_SYMBOL);
						}
						break;
					}
					setState(7483);
					textString();
					}
					break;
				case 2:
					{
					setState(7484);
					if (!(serverVersion >= 50600)) throw new FailedPredicateException(this, "serverVersion >= 50600");
					setState(7485);
					match(WITH_SYMBOL);
					setState(7486);
					textOrIdentifier();
					setState(7493);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,995,_ctx) ) {
					case 1:
						{
						setState(7490);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,994,_ctx) ) {
						case 1:
							{
							setState(7487);
							match(AS_SYMBOL);
							}
							break;
						case 2:
							{
							setState(7488);
							if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
							setState(7489);
							match(BY_SYMBOL);
							}
							break;
						}
						setState(7492);
						textString();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserContext extends ParserRuleContext {
		public List<TextOrIdentifierContext> textOrIdentifier() {
			return getRuleContexts(TextOrIdentifierContext.class);
		}
		public TextOrIdentifierContext textOrIdentifier(int i) {
			return getRuleContext(TextOrIdentifierContext.class,i);
		}
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public TerminalNode CURRENT_USER_SYMBOL() { return getToken(MySQLParser.CURRENT_USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public UserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserContext user() throws RecognitionException {
		UserContext _localctx = new UserContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_user);
		try {
			setState(7509);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1000,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7499);
				textOrIdentifier();
				setState(7503);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,998,_ctx) ) {
				case 1:
					{
					setState(7500);
					match(AT_SIGN_SYMBOL);
					setState(7501);
					textOrIdentifier();
					}
					break;
				case 2:
					{
					setState(7502);
					match(AT_TEXT_SUFFIX);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7505);
				match(CURRENT_USER_SYMBOL);
				setState(7507);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,999,_ctx) ) {
				case 1:
					{
					setState(7506);
					parentheses();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikeClauseContext extends ParserRuleContext {
		public TerminalNode LIKE_SYMBOL() { return getToken(MySQLParser.LIKE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public LikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLikeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLikeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLikeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikeClauseContext likeClause() throws RecognitionException {
		LikeClauseContext _localctx = new LikeClauseContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_likeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7511);
			match(LIKE_SYMBOL);
			setState(7512);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikeOrWhereContext extends ParserRuleContext {
		public LikeClauseContext likeClause() {
			return getRuleContext(LikeClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public LikeOrWhereContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeOrWhere; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLikeOrWhere(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLikeOrWhere(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLikeOrWhere(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikeOrWhereContext likeOrWhere() throws RecognitionException {
		LikeOrWhereContext _localctx = new LikeOrWhereContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_likeOrWhere);
		try {
			setState(7516);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7514);
				likeClause();
				}
				break;
			case WHERE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7515);
				whereClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnlineOptionContext extends ParserRuleContext {
		public TerminalNode ONLINE_SYMBOL() { return getToken(MySQLParser.ONLINE_SYMBOL, 0); }
		public TerminalNode OFFLINE_SYMBOL() { return getToken(MySQLParser.OFFLINE_SYMBOL, 0); }
		public OnlineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onlineOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOnlineOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOnlineOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOnlineOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnlineOptionContext onlineOption() throws RecognitionException {
		OnlineOptionContext _localctx = new OnlineOptionContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_onlineOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7518);
			if (!(serverVersion < 50600)) throw new FailedPredicateException(this, "serverVersion < 50600");
			setState(7519);
			_la = _input.LA(1);
			if ( !(_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NoWriteToBinLogContext extends ParserRuleContext {
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG_SYMBOL() { return getToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0); }
		public NoWriteToBinLogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_noWriteToBinLog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNoWriteToBinLog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNoWriteToBinLog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNoWriteToBinLog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NoWriteToBinLogContext noWriteToBinLog() throws RecognitionException {
		NoWriteToBinLogContext _localctx = new NoWriteToBinLogContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_noWriteToBinLog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7521);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsePartitionContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public UsePartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usePartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUsePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUsePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUsePartition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsePartitionContext usePartition() throws RecognitionException {
		UsePartitionContext _localctx = new UsePartitionContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_usePartition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7523);
			if (!(serverVersion >= 50602)) throw new FailedPredicateException(this, "serverVersion >= 50602");
			setState(7524);
			match(PARTITION_SYMBOL);
			setState(7525);
			identifierListWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldIdentifierContext extends ParserRuleContext {
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public FieldIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFieldIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFieldIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFieldIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldIdentifierContext fieldIdentifier() throws RecognitionException {
		FieldIdentifierContext _localctx = new FieldIdentifierContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_fieldIdentifier);
		try {
			setState(7532);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1003,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7527);
				dotIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7528);
				qualifiedIdentifier();
				setState(7530);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1002,_ctx) ) {
				case 1:
					{
					setState(7529);
					dotIdentifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnInternalRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColumnInternalRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnInternalRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterColumnInternalRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitColumnInternalRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitColumnInternalRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnInternalRefContext columnInternalRef() throws RecognitionException {
		ColumnInternalRefContext _localctx = new ColumnInternalRefContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_columnInternalRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7534);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnInternalRefListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ColumnInternalRefContext> columnInternalRef() {
			return getRuleContexts(ColumnInternalRefContext.class);
		}
		public ColumnInternalRefContext columnInternalRef(int i) {
			return getRuleContext(ColumnInternalRefContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ColumnInternalRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnInternalRefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterColumnInternalRefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitColumnInternalRefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitColumnInternalRefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnInternalRefListContext columnInternalRefList() throws RecognitionException {
		ColumnInternalRefListContext _localctx = new ColumnInternalRefListContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_columnInternalRefList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7536);
			match(OPEN_PAR_SYMBOL);
			setState(7537);
			columnInternalRef();
			setState(7542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7538);
				match(COMMA_SYMBOL);
				setState(7539);
				columnInternalRef();
				}
				}
				setState(7544);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7545);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnRefContext extends ParserRuleContext {
		public FieldIdentifierContext fieldIdentifier() {
			return getRuleContext(FieldIdentifierContext.class,0);
		}
		public ColumnRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterColumnRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitColumnRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitColumnRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnRefContext columnRef() throws RecognitionException {
		ColumnRefContext _localctx = new ColumnRefContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_columnRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7547);
			fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertIdentifierContext extends ParserRuleContext {
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public TableWildContext tableWild() {
			return getRuleContext(TableWildContext.class,0);
		}
		public InsertIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInsertIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInsertIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInsertIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertIdentifierContext insertIdentifier() throws RecognitionException {
		InsertIdentifierContext _localctx = new InsertIdentifierContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_insertIdentifier);
		try {
			setState(7551);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1005,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7549);
				columnRef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7550);
				tableWild();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7553);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexRefContext extends ParserRuleContext {
		public FieldIdentifierContext fieldIdentifier() {
			return getRuleContext(FieldIdentifierContext.class,0);
		}
		public IndexRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexRefContext indexRef() throws RecognitionException {
		IndexRefContext _localctx = new IndexRefContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_indexRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7555);
			fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableWildContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TableWildContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableWild; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableWild(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableWild(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableWild(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableWildContext tableWild() throws RecognitionException {
		TableWildContext _localctx = new TableWildContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_tableWild);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7557);
			identifier();
			setState(7564);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1006,_ctx) ) {
			case 1:
				{
				setState(7558);
				match(DOT_SYMBOL);
				setState(7559);
				match(MULT_OPERATOR);
				}
				break;
			case 2:
				{
				setState(7560);
				dotIdentifier();
				setState(7561);
				match(DOT_SYMBOL);
				setState(7562);
				match(MULT_OPERATOR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7566);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSchemaRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSchemaRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSchemaRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaRefContext schemaRef() throws RecognitionException {
		SchemaRefContext _localctx = new SchemaRefContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_schemaRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7568);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterProcedureName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitProcedureName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitProcedureName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureNameContext procedureName() throws RecognitionException {
		ProcedureNameContext _localctx = new ProcedureNameContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_procedureName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7570);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public ProcedureRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterProcedureRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitProcedureRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitProcedureRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureRefContext procedureRef() throws RecognitionException {
		ProcedureRefContext _localctx = new ProcedureRefContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_procedureRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7572);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_functionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7574);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public FunctionRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFunctionRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFunctionRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFunctionRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionRefContext functionRef() throws RecognitionException {
		FunctionRefContext _localctx = new FunctionRefContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_functionRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7576);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public TriggerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTriggerName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTriggerName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTriggerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerNameContext triggerName() throws RecognitionException {
		TriggerNameContext _localctx = new TriggerNameContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_triggerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7578);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public TriggerRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTriggerRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTriggerRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTriggerRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerRefContext triggerRef() throws RecognitionException {
		TriggerRefContext _localctx = new TriggerRefContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_triggerRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7580);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public ViewNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewNameContext viewName() throws RecognitionException {
		ViewNameContext _localctx = new ViewNameContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_viewName);
		try {
			setState(7584);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1007,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7582);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7583);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public ViewRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewRefContext viewRef() throws RecognitionException {
		ViewRefContext _localctx = new ViewRefContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_viewRef);
		try {
			setState(7588);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1008,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7586);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7587);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TablespaceNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTablespaceName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTablespaceName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTablespaceName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceNameContext tablespaceName() throws RecognitionException {
		TablespaceNameContext _localctx = new TablespaceNameContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_tablespaceName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7590);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TablespaceRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTablespaceRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTablespaceRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTablespaceRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceRefContext tablespaceRef() throws RecognitionException {
		TablespaceRefContext _localctx = new TablespaceRefContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_tablespaceRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7592);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogfileGroupNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LogfileGroupNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLogfileGroupName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLogfileGroupName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLogfileGroupName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogfileGroupNameContext logfileGroupName() throws RecognitionException {
		LogfileGroupNameContext _localctx = new LogfileGroupNameContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_logfileGroupName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7594);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogfileGroupRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LogfileGroupRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLogfileGroupRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLogfileGroupRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLogfileGroupRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogfileGroupRefContext logfileGroupRef() throws RecognitionException {
		LogfileGroupRefContext _localctx = new LogfileGroupRefContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_logfileGroupRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7596);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public EventNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterEventName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitEventName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitEventName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventNameContext eventName() throws RecognitionException {
		EventNameContext _localctx = new EventNameContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_eventName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7598);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public EventRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterEventRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitEventRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitEventRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventRefContext eventRef() throws RecognitionException {
		EventRefContext _localctx = new EventRefContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_eventRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7600);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UdfNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UdfNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udfName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUdfName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUdfName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUdfName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UdfNameContext udfName() throws RecognitionException {
		UdfNameContext _localctx = new UdfNameContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_udfName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7602);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerNameContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ServerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterServerName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitServerName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitServerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerNameContext serverName() throws RecognitionException {
		ServerNameContext _localctx = new ServerNameContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_serverName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7604);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerRefContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ServerRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterServerRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitServerRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitServerRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerRefContext serverRef() throws RecognitionException {
		ServerRefContext _localctx = new ServerRefContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_serverRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7606);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineRefContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public EngineRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterEngineRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitEngineRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitEngineRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineRefContext engineRef() throws RecognitionException {
		EngineRefContext _localctx = new EngineRefContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_engineRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7608);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_tableName);
		try {
			setState(7612);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1009,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7610);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7611);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterTableRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public FilterTableRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterTableRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFilterTableRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFilterTableRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFilterTableRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterTableRefContext filterTableRef() throws RecognitionException {
		FilterTableRefContext _localctx = new FilterTableRefContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_filterTableRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7614);
			identifier();
			setState(7615);
			dotIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRefWithWildcardContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TableRefWithWildcardContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRefWithWildcard; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableRefWithWildcard(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableRefWithWildcard(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableRefWithWildcard(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableRefWithWildcardContext tableRefWithWildcard() throws RecognitionException {
		TableRefWithWildcardContext _localctx = new TableRefWithWildcardContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_tableRefWithWildcard);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7617);
			identifier();
			setState(7625);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1011,_ctx) ) {
			case 1:
				{
				setState(7618);
				match(DOT_SYMBOL);
				setState(7619);
				match(MULT_OPERATOR);
				}
				break;
			case 2:
				{
				setState(7620);
				dotIdentifier();
				setState(7623);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1010,_ctx) ) {
				case 1:
					{
					setState(7621);
					match(DOT_SYMBOL);
					setState(7622);
					match(MULT_OPERATOR);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TableRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableRefContext tableRef() throws RecognitionException {
		TableRefContext _localctx = new TableRefContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_tableRef);
		try {
			setState(7629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1012,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7627);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7628);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRefListContext extends ParserRuleContext {
		public List<TableRefContext> tableRef() {
			return getRuleContexts(TableRefContext.class);
		}
		public TableRefContext tableRef(int i) {
			return getRuleContext(TableRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableRefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableRefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableRefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableRefListContext tableRefList() throws RecognitionException {
		TableRefListContext _localctx = new TableRefListContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_tableRefList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7631);
			tableRef();
			setState(7636);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1013,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7632);
					match(COMMA_SYMBOL);
					setState(7633);
					tableRef();
					}
					} 
				}
				setState(7638);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1013,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasRefListContext extends ParserRuleContext {
		public List<TableRefWithWildcardContext> tableRefWithWildcard() {
			return getRuleContexts(TableRefWithWildcardContext.class);
		}
		public TableRefWithWildcardContext tableRefWithWildcard(int i) {
			return getRuleContext(TableRefWithWildcardContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableAliasRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAliasRefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableAliasRefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableAliasRefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableAliasRefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAliasRefListContext tableAliasRefList() throws RecognitionException {
		TableAliasRefListContext _localctx = new TableAliasRefListContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_tableAliasRefList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7639);
			tableRefWithWildcard();
			setState(7644);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1014,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7640);
					match(COMMA_SYMBOL);
					setState(7641);
					tableRefWithWildcard();
					}
					} 
				}
				setState(7646);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1014,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ParameterNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterParameterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitParameterName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitParameterName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterNameContext parameterName() throws RecognitionException {
		ParameterNameContext _localctx = new ParameterNameContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_parameterName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7647);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelIdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public LabelKeywordContext labelKeyword() {
			return getRuleContext(LabelKeywordContext.class,0);
		}
		public LabelIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLabelIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLabelIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLabelIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabelIdentifierContext labelIdentifier() throws RecognitionException {
		LabelIdentifierContext _localctx = new LabelIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_labelIdentifier);
		try {
			setState(7651);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1015,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7649);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7650);
				labelKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelRefContext extends ParserRuleContext {
		public LabelIdentifierContext labelIdentifier() {
			return getRuleContext(LabelIdentifierContext.class,0);
		}
		public LabelRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLabelRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLabelRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLabelRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabelRefContext labelRef() throws RecognitionException {
		LabelRefContext _localctx = new LabelRefContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_labelRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7653);
			labelIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleIdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public RoleKeywordContext roleKeyword() {
			return getRuleContext(RoleKeywordContext.class,0);
		}
		public RoleIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleIdentifierContext roleIdentifier() throws RecognitionException {
		RoleIdentifierContext _localctx = new RoleIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_roleIdentifier);
		try {
			setState(7657);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1016,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7655);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7656);
				roleKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleRefContext extends ParserRuleContext {
		public RoleIdentifierContext roleIdentifier() {
			return getRuleContext(RoleIdentifierContext.class,0);
		}
		public RoleRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleRefContext roleRef() throws RecognitionException {
		RoleRefContext _localctx = new RoleRefContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_roleRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7659);
			roleIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PluginRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PluginRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pluginRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPluginRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPluginRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPluginRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PluginRefContext pluginRef() throws RecognitionException {
		PluginRefContext _localctx = new PluginRefContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_pluginRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7661);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComponentRefContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public ComponentRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_componentRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterComponentRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitComponentRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitComponentRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComponentRefContext componentRef() throws RecognitionException {
		ComponentRefContext _localctx = new ComponentRefContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_componentRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7663);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ResourceGroupRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterResourceGroupRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitResourceGroupRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitResourceGroupRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceGroupRefContext resourceGroupRef() throws RecognitionException {
		ResourceGroupRefContext _localctx = new ResourceGroupRefContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_resourceGroupRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7665);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7667);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PureIdentifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER() { return getToken(MySQLParser.IDENTIFIER, 0); }
		public TerminalNode BACK_TICK_QUOTED_ID() { return getToken(MySQLParser.BACK_TICK_QUOTED_ID, 0); }
		public TerminalNode DOUBLE_QUOTED_TEXT() { return getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public PureIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pureIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPureIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPureIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPureIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PureIdentifierContext pureIdentifier() throws RecognitionException {
		PureIdentifierContext _localctx = new PureIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_pureIdentifier);
		int _la;
		try {
			setState(7672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1017,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7669);
				_la = _input.LA(1);
				if ( !(_la==IDENTIFIER || _la==BACK_TICK_QUOTED_ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7670);
				if (!(isSqlModeActive(AnsiQuotes))) throw new FailedPredicateException(this, "isSqlModeActive(AnsiQuotes)");
				setState(7671);
				match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public IdentifierKeywordContext identifierKeyword() {
			return getRuleContext(IdentifierKeywordContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_identifier);
		try {
			setState(7676);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1018,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7674);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7675);
				identifierKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierListContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentifierList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentifierList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentifierList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierListContext identifierList() throws RecognitionException {
		IdentifierListContext _localctx = new IdentifierListContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_identifierList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7678);
			identifier();
			setState(7683);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1019,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7679);
					match(COMMA_SYMBOL);
					setState(7680);
					identifier();
					}
					} 
				}
				setState(7685);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1019,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierListWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierListWithParentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentifierListWithParentheses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentifierListWithParentheses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentifierListWithParentheses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierListWithParenthesesContext identifierListWithParentheses() throws RecognitionException {
		IdentifierListWithParenthesesContext _localctx = new IdentifierListWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_identifierListWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7686);
			match(OPEN_PAR_SYMBOL);
			setState(7687);
			identifierList();
			setState(7688);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQualifiedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQualifiedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQualifiedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedIdentifierContext qualifiedIdentifier() throws RecognitionException {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_qualifiedIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7690);
			identifier();
			setState(7692);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1020,_ctx) ) {
			case 1:
				{
				setState(7691);
				dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<DotIdentifierContext> dotIdentifier() {
			return getRuleContexts(DotIdentifierContext.class);
		}
		public DotIdentifierContext dotIdentifier(int i) {
			return getRuleContext(DotIdentifierContext.class,i);
		}
		public SimpleIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleIdentifierContext simpleIdentifier() throws RecognitionException {
		SimpleIdentifierContext _localctx = new SimpleIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_simpleIdentifier);
		int _la;
		try {
			setState(7705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1023,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7694);
				identifier();
				setState(7699);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					setState(7695);
					dotIdentifier();
					setState(7697);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						setState(7696);
						dotIdentifier();
						}
					}

					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7701);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(7702);
				dotIdentifier();
				setState(7703);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DotIdentifierContext extends ParserRuleContext {
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DotIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dotIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDotIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDotIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDotIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DotIdentifierContext dotIdentifier() throws RecognitionException {
		DotIdentifierContext _localctx = new DotIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_dotIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7707);
			match(DOT_SYMBOL);
			setState(7708);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ulong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode DECIMAL_NUMBER() { return getToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public TerminalNode FLOAT_NUMBER() { return getToken(MySQLParser.FLOAT_NUMBER, 0); }
		public Ulong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ulong_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUlong_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUlong_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUlong_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ulong_numberContext ulong_number() throws RecognitionException {
		Ulong_numberContext _localctx = new Ulong_numberContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_ulong_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7710);
			_la = _input.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (HEX_NUMBER - 380)) | (1L << (DECIMAL_NUMBER - 380)) | (1L << (FLOAT_NUMBER - 380)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Real_ulong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public Real_ulong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_real_ulong_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterReal_ulong_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitReal_ulong_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitReal_ulong_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Real_ulong_numberContext real_ulong_number() throws RecognitionException {
		Real_ulong_numberContext _localctx = new Real_ulong_numberContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_real_ulong_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7712);
			_la = _input.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (HEX_NUMBER - 380)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ulonglong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode DECIMAL_NUMBER() { return getToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public TerminalNode FLOAT_NUMBER() { return getToken(MySQLParser.FLOAT_NUMBER, 0); }
		public Ulonglong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ulonglong_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUlonglong_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUlonglong_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUlonglong_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ulonglong_numberContext ulonglong_number() throws RecognitionException {
		Ulonglong_numberContext _localctx = new Ulonglong_numberContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_ulonglong_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7714);
			_la = _input.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (DECIMAL_NUMBER - 380)) | (1L << (FLOAT_NUMBER - 380)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Real_ulonglong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public Real_ulonglong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_real_ulonglong_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterReal_ulonglong_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitReal_ulonglong_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitReal_ulonglong_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Real_ulonglong_numberContext real_ulonglong_number() throws RecognitionException {
		Real_ulonglong_numberContext _localctx = new Real_ulonglong_numberContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_real_ulonglong_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7716);
			_la = _input.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public NumLiteralContext numLiteral() {
			return getRuleContext(NumLiteralContext.class,0);
		}
		public TemporalLiteralContext temporalLiteral() {
			return getRuleContext(TemporalLiteralContext.class,0);
		}
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public BoolLiteralContext boolLiteral() {
			return getRuleContext(BoolLiteralContext.class,0);
		}
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode UNDERSCORE_CHARSET() { return getToken(MySQLParser.UNDERSCORE_CHARSET, 0); }
		public TerminalNode BIN_NUMBER() { return getToken(MySQLParser.BIN_NUMBER, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_literal);
		int _la;
		try {
			setState(7732);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1026,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7718);
				textLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7719);
				numLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7720);
				temporalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7721);
				nullLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7722);
				boolLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNDERSCORE_CHARSET) {
					{
					setState(7723);
					match(UNDERSCORE_CHARSET);
					}
				}

				setState(7726);
				match(HEX_NUMBER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7727);
				if (!(serverVersion >= 50003)) throw new FailedPredicateException(this, "serverVersion >= 50003");
				setState(7729);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNDERSCORE_CHARSET) {
					{
					setState(7728);
					match(UNDERSCORE_CHARSET);
					}
				}

				setState(7731);
				match(BIN_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignedLiteralContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public TerminalNode PLUS_OPERATOR() { return getToken(MySQLParser.PLUS_OPERATOR, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public SignedLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSignedLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSignedLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSignedLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignedLiteralContext signedLiteral() throws RecognitionException {
		SignedLiteralContext _localctx = new SignedLiteralContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_signedLiteral);
		try {
			setState(7739);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1027,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7734);
				literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7735);
				match(PLUS_OPERATOR);
				setState(7736);
				ulong_number();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7737);
				match(MINUS_OPERATOR);
				setState(7738);
				ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public StringListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterStringList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitStringList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitStringList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringListContext stringList() throws RecognitionException {
		StringListContext _localctx = new StringListContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_stringList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7741);
			match(OPEN_PAR_SYMBOL);
			setState(7742);
			textString();
			setState(7747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7743);
				match(COMMA_SYMBOL);
				setState(7744);
				textString();
				}
				}
				setState(7749);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7750);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringLiteralContext extends ParserRuleContext {
		public Token value;
		public TerminalNode SINGLE_QUOTED_TEXT() { return getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public TerminalNode DOUBLE_QUOTED_TEXT() { return getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public TextStringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTextStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTextStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTextStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TextStringLiteralContext textStringLiteral() throws RecognitionException {
		TextStringLiteralContext _localctx = new TextStringLiteralContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_textStringLiteral);
		try {
			setState(7755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1029,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7752);
				((TextStringLiteralContext)_localctx).value = match(SINGLE_QUOTED_TEXT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7753);
				if (!(!isSqlModeActive(AnsiQuotes))) throw new FailedPredicateException(this, "!isSqlModeActive(AnsiQuotes)");
				setState(7754);
				((TextStringLiteralContext)_localctx).value = match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode BIN_NUMBER() { return getToken(MySQLParser.BIN_NUMBER, 0); }
		public TextStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTextString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTextString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTextString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TextStringContext textString() throws RecognitionException {
		TextStringContext _localctx = new TextStringContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_textString);
		try {
			setState(7760);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1030,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7757);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7758);
				match(HEX_NUMBER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7759);
				match(BIN_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextLiteralContext extends ParserRuleContext {
		public List<TextStringLiteralContext> textStringLiteral() {
			return getRuleContexts(TextStringLiteralContext.class);
		}
		public TextStringLiteralContext textStringLiteral(int i) {
			return getRuleContext(TextStringLiteralContext.class,i);
		}
		public TerminalNode NCHAR_TEXT() { return getToken(MySQLParser.NCHAR_TEXT, 0); }
		public TerminalNode UNDERSCORE_CHARSET() { return getToken(MySQLParser.UNDERSCORE_CHARSET, 0); }
		public TextLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTextLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTextLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTextLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TextLiteralContext textLiteral() throws RecognitionException {
		TextLiteralContext _localctx = new TextLiteralContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_textLiteral);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7767);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1032,_ctx) ) {
			case 1:
				{
				setState(7763);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1031,_ctx) ) {
				case 1:
					{
					setState(7762);
					match(UNDERSCORE_CHARSET);
					}
					break;
				}
				setState(7765);
				textStringLiteral();
				}
				break;
			case 2:
				{
				setState(7766);
				match(NCHAR_TEXT);
				}
				break;
			}
			setState(7772);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1033,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7769);
					textStringLiteral();
					}
					} 
				}
				setState(7774);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1033,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringNoLinebreakContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TextStringNoLinebreakContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringNoLinebreak; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTextStringNoLinebreak(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTextStringNoLinebreak(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTextStringNoLinebreak(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TextStringNoLinebreakContext textStringNoLinebreak() throws RecognitionException {
		TextStringNoLinebreakContext _localctx = new TextStringNoLinebreakContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_textStringNoLinebreak);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7775);
			textStringLiteral();
			setState(7776);
			if (!(!containsLinebreak(_input.getText(_localctx.start, _input.LT(-1))))) throw new FailedPredicateException(this, "!containsLinebreak($text)");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringLiteralListContext extends ParserRuleContext {
		public List<TextStringLiteralContext> textStringLiteral() {
			return getRuleContexts(TextStringLiteralContext.class);
		}
		public TextStringLiteralContext textStringLiteral(int i) {
			return getRuleContext(TextStringLiteralContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TextStringLiteralListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringLiteralList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTextStringLiteralList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTextStringLiteralList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTextStringLiteralList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TextStringLiteralListContext textStringLiteralList() throws RecognitionException {
		TextStringLiteralListContext _localctx = new TextStringLiteralListContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_textStringLiteralList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7778);
			textStringLiteral();
			setState(7783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7779);
				match(COMMA_SYMBOL);
				setState(7780);
				textStringLiteral();
				}
				}
				setState(7785);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumLiteralContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode DECIMAL_NUMBER() { return getToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public TerminalNode FLOAT_NUMBER() { return getToken(MySQLParser.FLOAT_NUMBER, 0); }
		public NumLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNumLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNumLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNumLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumLiteralContext numLiteral() throws RecognitionException {
		NumLiteralContext _localctx = new NumLiteralContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_numLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7786);
			_la = _input.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (DECIMAL_NUMBER - 380)) | (1L << (FLOAT_NUMBER - 380)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE_SYMBOL() { return getToken(MySQLParser.TRUE_SYMBOL, 0); }
		public TerminalNode FALSE_SYMBOL() { return getToken(MySQLParser.FALSE_SYMBOL, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterBoolLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitBoolLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitBoolLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoolLiteralContext boolLiteral() throws RecognitionException {
		BoolLiteralContext _localctx = new BoolLiteralContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_boolLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7788);
			_la = _input.LA(1);
			if ( !(_la==FALSE_SYMBOL || _la==TRUE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullLiteralContext extends ParserRuleContext {
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public TerminalNode NULL2_SYMBOL() { return getToken(MySQLParser.NULL2_SYMBOL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNullLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNullLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNullLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullLiteralContext nullLiteral() throws RecognitionException {
		NullLiteralContext _localctx = new NullLiteralContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_nullLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7790);
			_la = _input.LA(1);
			if ( !(_la==NULL2_SYMBOL || _la==NULL_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TemporalLiteralContext extends ParserRuleContext {
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode SINGLE_QUOTED_TEXT() { return getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TemporalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTemporalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTemporalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTemporalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TemporalLiteralContext temporalLiteral() throws RecognitionException {
		TemporalLiteralContext _localctx = new TemporalLiteralContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_temporalLiteral);
		try {
			setState(7798);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7792);
				match(DATE_SYMBOL);
				setState(7793);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIME_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7794);
				match(TIME_SYMBOL);
				setState(7795);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIMESTAMP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7796);
				match(TIMESTAMP_SYMBOL);
				setState(7797);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FloatOptionsContext extends ParserRuleContext {
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public FloatOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_floatOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFloatOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFloatOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFloatOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FloatOptionsContext floatOptions() throws RecognitionException {
		FloatOptionsContext _localctx = new FloatOptionsContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_floatOptions);
		try {
			setState(7802);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1036,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7800);
				fieldLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7801);
				precision();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrecisionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<TerminalNode> INT_NUMBER() { return getTokens(MySQLParser.INT_NUMBER); }
		public TerminalNode INT_NUMBER(int i) {
			return getToken(MySQLParser.INT_NUMBER, i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPrecision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPrecision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPrecision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecisionContext precision() throws RecognitionException {
		PrecisionContext _localctx = new PrecisionContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7804);
			match(OPEN_PAR_SYMBOL);
			setState(7805);
			match(INT_NUMBER);
			setState(7806);
			match(COMMA_SYMBOL);
			setState(7807);
			match(INT_NUMBER);
			setState(7808);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextOrIdentifierContext extends ParserRuleContext {
		public TerminalNode SINGLE_QUOTED_TEXT() { return getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TextOrIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textOrIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTextOrIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTextOrIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTextOrIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TextOrIdentifierContext textOrIdentifier() throws RecognitionException {
		TextOrIdentifierContext _localctx = new TextOrIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_textOrIdentifier);
		try {
			setState(7812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1037,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7810);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7811);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleIdentifierOrTextContext extends ParserRuleContext {
		public RoleIdentifierContext roleIdentifier() {
			return getRuleContext(RoleIdentifierContext.class,0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public RoleIdentifierOrTextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleIdentifierOrText; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleIdentifierOrText(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleIdentifierOrText(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleIdentifierOrText(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleIdentifierOrTextContext roleIdentifierOrText() throws RecognitionException {
		RoleIdentifierOrTextContext _localctx = new RoleIdentifierOrTextContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_roleIdentifierOrText);
		try {
			setState(7816);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1038,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7814);
				roleIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7815);
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SizeNumberContext extends ParserRuleContext {
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public SizeNumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sizeNumber; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSizeNumber(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSizeNumber(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSizeNumber(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SizeNumberContext sizeNumber() throws RecognitionException {
		SizeNumberContext _localctx = new SizeNumberContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_sizeNumber);
		try {
			setState(7820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1039,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7818);
				real_ulonglong_number();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7819);
				pureIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterParentheses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitParentheses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitParentheses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParenthesesContext parentheses() throws RecognitionException {
		ParenthesesContext _localctx = new ParenthesesContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_parentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7822);
			match(OPEN_PAR_SYMBOL);
			setState(7823);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EqualContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode ASSIGN_OPERATOR() { return getToken(MySQLParser.ASSIGN_OPERATOR, 0); }
		public EqualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterEqual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitEqual(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitEqual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EqualContext equal() throws RecognitionException {
		EqualContext _localctx = new EqualContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_equal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7825);
			_la = _input.LA(1);
			if ( !(_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionTypeContext extends ParserRuleContext {
		public TerminalNode PERSIST_SYMBOL() { return getToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public TerminalNode PERSIST_ONLY_SYMBOL() { return getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public OptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOptionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOptionType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOptionType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionTypeContext optionType() throws RecognitionException {
		OptionTypeContext _localctx = new OptionTypeContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_optionType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7827);
			_la = _input.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarIdentTypeContext extends ParserRuleContext {
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public VarIdentTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varIdentType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterVarIdentType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitVarIdentType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitVarIdentType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarIdentTypeContext varIdentType() throws RecognitionException {
		VarIdentTypeContext _localctx = new VarIdentTypeContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_varIdentType);
		try {
			setState(7835);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7829);
				match(GLOBAL_SYMBOL);
				setState(7830);
				match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7831);
				match(LOCAL_SYMBOL);
				setState(7832);
				match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7833);
				match(SESSION_SYMBOL);
				setState(7834);
				match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetVarIdentTypeContext extends ParserRuleContext {
		public TerminalNode PERSIST_SYMBOL() { return getToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public TerminalNode PERSIST_ONLY_SYMBOL() { return getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public SetVarIdentTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setVarIdentType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSetVarIdentType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSetVarIdentType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSetVarIdentType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetVarIdentTypeContext setVarIdentType() throws RecognitionException {
		SetVarIdentTypeContext _localctx = new SetVarIdentTypeContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_setVarIdentType);
		try {
			setState(7847);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PERSIST_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7837);
				match(PERSIST_SYMBOL);
				setState(7838);
				match(DOT_SYMBOL);
				}
				break;
			case PERSIST_ONLY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7839);
				match(PERSIST_ONLY_SYMBOL);
				setState(7840);
				match(DOT_SYMBOL);
				}
				break;
			case GLOBAL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7841);
				match(GLOBAL_SYMBOL);
				setState(7842);
				match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(7843);
				match(LOCAL_SYMBOL);
				setState(7844);
				match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(7845);
				match(SESSION_SYMBOL);
				setState(7846);
				match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordContext extends ParserRuleContext {
		public LabelKeywordContext labelKeyword() {
			return getRuleContext(LabelKeywordContext.class,0);
		}
		public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return getRuleContext(RoleOrIdentifierKeywordContext.class,0);
		}
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode RESTART_SYMBOL() { return getToken(MySQLParser.RESTART_SYMBOL, 0); }
		public IdentifierKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentifierKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentifierKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentifierKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierKeywordContext identifierKeyword() throws RecognitionException {
		IdentifierKeywordContext _localctx = new IdentifierKeywordContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_identifierKeyword);
		try {
			setState(7856);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1042,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7849);
				labelKeyword();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7850);
				roleOrIdentifierKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7851);
				match(EXECUTE_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7852);
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				setState(7853);
				match(SHUTDOWN_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7854);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(7855);
				match(RESTART_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelKeywordContext extends ParserRuleContext {
		public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return getRuleContext(RoleOrLabelKeywordContext.class,0);
		}
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode FILE_SYMBOL() { return getToken(MySQLParser.FILE_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode PROCESS_SYMBOL() { return getToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode RELOAD_SYMBOL() { return getToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MySQLParser.SUPER_SYMBOL, 0); }
		public LabelKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLabelKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLabelKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLabelKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabelKeywordContext labelKeyword() throws RecognitionException {
		LabelKeywordContext _localctx = new LabelKeywordContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_labelKeyword);
		try {
			setState(7868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1043,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7858);
				roleOrLabelKeyword();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7859);
				match(EVENT_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7860);
				match(FILE_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7861);
				match(NONE_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7862);
				match(PROCESS_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7863);
				match(PROXY_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7864);
				match(RELOAD_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7865);
				match(REPLICATION_SYMBOL);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7866);
				match(RESOURCE_SYMBOL);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7867);
				match(SUPER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOrIdentifierKeywordContext extends ParserRuleContext {
		public TerminalNode ACCOUNT_SYMBOL() { return getToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public TerminalNode ASCII_SYMBOL() { return getToken(MySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode ALWAYS_SYMBOL() { return getToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public TerminalNode BACKUP_SYMBOL() { return getToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode BYTE_SYMBOL() { return getToken(MySQLParser.BYTE_SYMBOL, 0); }
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode CLONE_SYMBOL() { return getToken(MySQLParser.CLONE_SYMBOL, 0); }
		public TerminalNode CLOSE_SYMBOL() { return getToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TerminalNode COMMIT_SYMBOL() { return getToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode DEALLOCATE_SYMBOL() { return getToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public TerminalNode FLUSH_SYMBOL() { return getToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public TerminalNode FOLLOWS_SYMBOL() { return getToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode GROUP_REPLICATION_SYMBOL() { return getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public TerminalNode HANDLER_SYMBOL() { return getToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TerminalNode HELP_SYMBOL() { return getToken(MySQLParser.HELP_SYMBOL, 0); }
		public TerminalNode HOST_SYMBOL() { return getToken(MySQLParser.HOST_SYMBOL, 0); }
		public TerminalNode INSTALL_SYMBOL() { return getToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public TerminalNode INVISIBLE_SYMBOL() { return getToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public TerminalNode OPTIONS_SYMBOL() { return getToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public TerminalNode OWNER_SYMBOL() { return getToken(MySQLParser.OWNER_SYMBOL, 0); }
		public TerminalNode PARSER_SYMBOL() { return getToken(MySQLParser.PARSER_SYMBOL, 0); }
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode PORT_SYMBOL() { return getToken(MySQLParser.PORT_SYMBOL, 0); }
		public TerminalNode PRECEDES_SYMBOL() { return getToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TerminalNode REMOVE_SYMBOL() { return getToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public TerminalNode REPAIR_SYMBOL() { return getToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public TerminalNode RESET_SYMBOL() { return getToken(MySQLParser.RESET_SYMBOL, 0); }
		public TerminalNode RESTORE_SYMBOL() { return getToken(MySQLParser.RESTORE_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode SAVEPOINT_SYMBOL() { return getToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public TerminalNode SIGNED_SYMBOL() { return getToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public TerminalNode SOCKET_SYMBOL() { return getToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode SONAME_SYMBOL() { return getToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode STOP_SYMBOL() { return getToken(MySQLParser.STOP_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TerminalNode UNICODE_SYMBOL() { return getToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public TerminalNode UNINSTALL_SYMBOL() { return getToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode VISIBLE_SYMBOL() { return getToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public TerminalNode WRAPPER_SYMBOL() { return getToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public TerminalNode XA_SYMBOL() { return getToken(MySQLParser.XA_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public RoleOrIdentifierKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrIdentifierKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleOrIdentifierKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleOrIdentifierKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleOrIdentifierKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() throws RecognitionException {
		RoleOrIdentifierKeywordContext _localctx = new RoleOrIdentifierKeywordContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_roleOrIdentifierKeyword);
		int _la;
		try {
			setState(7875);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1044,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7870);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT_SYMBOL) | (1L << ASCII_SYMBOL) | (1L << ALWAYS_SYMBOL) | (1L << BACKUP_SYMBOL) | (1L << BEGIN_SYMBOL) | (1L << BYTE_SYMBOL) | (1L << CACHE_SYMBOL) | (1L << CHARSET_SYMBOL) | (1L << CHECKSUM_SYMBOL) | (1L << CLOSE_SYMBOL) | (1L << COMMENT_SYMBOL) | (1L << COMMIT_SYMBOL) | (1L << CONTAINS_SYMBOL) | (1L << DEALLOCATE_SYMBOL) | (1L << DO_SYMBOL) | (1L << END_SYMBOL) | (1L << FLUSH_SYMBOL) | (1L << FOLLOWS_SYMBOL) | (1L << FORMAT_SYMBOL) | (1L << GROUP_REPLICATION_SYMBOL) | (1L << HANDLER_SYMBOL) | (1L << HELP_SYMBOL) | (1L << HOST_SYMBOL) | (1L << INSTALL_SYMBOL) | (1L << LANGUAGE_SYMBOL) | (1L << NO_SYMBOL) | (1L << OPEN_SYMBOL) | (1L << OPTIONS_SYMBOL) | (1L << OWNER_SYMBOL) | (1L << PARSER_SYMBOL) | (1L << PARTITION_SYMBOL) | (1L << PORT_SYMBOL) | (1L << PRECEDES_SYMBOL) | (1L << PREPARE_SYMBOL) | (1L << REMOVE_SYMBOL) | (1L << REPAIR_SYMBOL) | (1L << RESET_SYMBOL) | (1L << RESTORE_SYMBOL) | (1L << ROLLBACK_SYMBOL) | (1L << SAVEPOINT_SYMBOL) | (1L << SECURITY_SYMBOL) | (1L << SERVER_SYMBOL) | (1L << SIGNED_SYMBOL) | (1L << SLAVE_SYMBOL) | (1L << SOCKET_SYMBOL) | (1L << SONAME_SYMBOL) | (1L << START_SYMBOL) | (1L << STOP_SYMBOL) | (1L << TRUNCATE_SYMBOL) | (1L << UNICODE_SYMBOL) | (1L << UNINSTALL_SYMBOL) | (1L << UPGRADE_SYMBOL) | (1L << WRAPPER_SYMBOL) | (1L << XA_SYMBOL))) != 0) || ((((_la - 691)) & ~0x3f) == 0 && ((1L << (_la - 691)) & ((1L << (ROLE_SYMBOL - 691)) | (1L << (INVISIBLE_SYMBOL - 691)) | (1L << (VISIBLE_SYMBOL - 691)) | (1L << (CLONE_SYMBOL - 691)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7871);
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				setState(7872);
				match(SHUTDOWN_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7873);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(7874);
				match(IMPORT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOrLabelKeywordContext extends ParserRuleContext {
		public TerminalNode ACTION_SYMBOL() { return getToken(MySQLParser.ACTION_SYMBOL, 0); }
		public TerminalNode ADDDATE_SYMBOL() { return getToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public TerminalNode AFTER_SYMBOL() { return getToken(MySQLParser.AFTER_SYMBOL, 0); }
		public TerminalNode AGAINST_SYMBOL() { return getToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public TerminalNode AGGREGATE_SYMBOL() { return getToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode ANALYSE_SYMBOL() { return getToken(MySQLParser.ANALYSE_SYMBOL, 0); }
		public TerminalNode ANY_SYMBOL() { return getToken(MySQLParser.ANY_SYMBOL, 0); }
		public TerminalNode AT_SYMBOL() { return getToken(MySQLParser.AT_SYMBOL, 0); }
		public TerminalNode AUTHORS_SYMBOL() { return getToken(MySQLParser.AUTHORS_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TerminalNode AUTOEXTEND_SIZE_SYMBOL() { return getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public TerminalNode AVG_ROW_LENGTH_SYMBOL() { return getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public TerminalNode AVG_SYMBOL() { return getToken(MySQLParser.AVG_SYMBOL, 0); }
		public TerminalNode BINLOG_SYMBOL() { return getToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode BIT_SYMBOL() { return getToken(MySQLParser.BIT_SYMBOL, 0); }
		public TerminalNode BLOCK_SYMBOL() { return getToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public TerminalNode BOOL_SYMBOL() { return getToken(MySQLParser.BOOL_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode BTREE_SYMBOL() { return getToken(MySQLParser.BTREE_SYMBOL, 0); }
		public TerminalNode BUCKETS_SYMBOL() { return getToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public TerminalNode CASCADED_SYMBOL() { return getToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public TerminalNode CATALOG_NAME_SYMBOL() { return getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode CHANGED_SYMBOL() { return getToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public TerminalNode CHANNEL_SYMBOL() { return getToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public TerminalNode CIPHER_SYMBOL() { return getToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public TerminalNode CLIENT_SYMBOL() { return getToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode COALESCE_SYMBOL() { return getToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode CODE_SYMBOL() { return getToken(MySQLParser.CODE_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode COLUMN_NAME_SYMBOL() { return getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public TerminalNode COLUMN_FORMAT_SYMBOL() { return getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode COMMITTED_SYMBOL() { return getToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public TerminalNode COMPACT_SYMBOL() { return getToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode COMPONENT_SYMBOL() { return getToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public TerminalNode COMPRESSED_SYMBOL() { return getToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public TerminalNode COMPRESSION_SYMBOL() { return getToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TerminalNode CONCURRENT_SYMBOL() { return getToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode CONSISTENT_SYMBOL() { return getToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_CATALOG_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_NAME_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public TerminalNode CONTEXT_SYMBOL() { return getToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public TerminalNode CONTRIBUTORS_SYMBOL() { return getToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0); }
		public TerminalNode CPU_SYMBOL() { return getToken(MySQLParser.CPU_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode CURSOR_NAME_SYMBOL() { return getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode DEFAULT_AUTH_SYMBOL() { return getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode DELAY_KEY_WRITE_SYMBOL() { return getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public TerminalNode DES_KEY_FILE_SYMBOL() { return getToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0); }
		public TerminalNode DIAGNOSTICS_SYMBOL() { return getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode DISK_SYMBOL() { return getToken(MySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode DUMPFILE_SYMBOL() { return getToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public TerminalNode DUPLICATE_SYMBOL() { return getToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode ENDS_SYMBOL() { return getToken(MySQLParser.ENDS_SYMBOL, 0); }
		public TerminalNode ENUM_SYMBOL() { return getToken(MySQLParser.ENUM_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode ENGINES_SYMBOL() { return getToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode ERRORS_SYMBOL() { return getToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public TerminalNode ESCAPE_SYMBOL() { return getToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public TerminalNode EVENTS_SYMBOL() { return getToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public TerminalNode EVERY_SYMBOL() { return getToken(MySQLParser.EVERY_SYMBOL, 0); }
		public TerminalNode EXCLUDE_SYMBOL() { return getToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public TerminalNode EXPANSION_SYMBOL() { return getToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public TerminalNode EXPORT_SYMBOL() { return getToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode EXTENT_SIZE_SYMBOL() { return getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public TerminalNode FAULTS_SYMBOL() { return getToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public TerminalNode FAST_SYMBOL() { return getToken(MySQLParser.FAST_SYMBOL, 0); }
		public TerminalNode FOLLOWING_SYMBOL() { return getToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public TerminalNode FOUND_SYMBOL() { return getToken(MySQLParser.FOUND_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode FILE_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode FILTER_SYMBOL() { return getToken(MySQLParser.FILTER_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode GENERAL_SYMBOL() { return getToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public TerminalNode GEOMETRY_SYMBOL() { return getToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public TerminalNode GET_FORMAT_SYMBOL() { return getToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public TerminalNode GRANTS_SYMBOL() { return getToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode HISTOGRAM_SYMBOL() { return getToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public TerminalNode HISTORY_SYMBOL() { return getToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MySQLParser.HOUR_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode IGNORE_SERVER_IDS_SYMBOL() { return getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public TerminalNode INDEXES_SYMBOL() { return getToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode INNODB_SYMBOL() { return getToken(MySQLParser.INNODB_SYMBOL, 0); }
		public TerminalNode IO_SYMBOL() { return getToken(MySQLParser.IO_SYMBOL, 0); }
		public TerminalNode IPC_SYMBOL() { return getToken(MySQLParser.IPC_SYMBOL, 0); }
		public TerminalNode ISOLATION_SYMBOL() { return getToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public TerminalNode ISSUER_SYMBOL() { return getToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public TerminalNode INSERT_METHOD_SYMBOL() { return getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public TerminalNode JSON_SYMBOL() { return getToken(MySQLParser.JSON_SYMBOL, 0); }
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySQLParser.LESS_SYMBOL, 0); }
		public TerminalNode LEVEL_SYMBOL() { return getToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode LIST_SYMBOL() { return getToken(MySQLParser.LIST_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode LOCKED_SYMBOL() { return getToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public TerminalNode LOCKS_SYMBOL() { return getToken(MySQLParser.LOCKS_SYMBOL, 0); }
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public TerminalNode MASTER_HOST_SYMBOL() { return getToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public TerminalNode MASTER_PORT_SYMBOL() { return getToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_FILE_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_POS_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public TerminalNode MASTER_USER_SYMBOL() { return getToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public TerminalNode MASTER_PASSWORD_SYMBOL() { return getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public TerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public TerminalNode MASTER_SERVER_ID_SYMBOL() { return getToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0); }
		public TerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public TerminalNode MASTER_RETRY_COUNT_SYMBOL() { return getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public TerminalNode MASTER_DELAY_SYMBOL() { return getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CA_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CAPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_VERSION_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CERT_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CIPHER_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_KEY_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public TerminalNode MASTER_AUTO_POSITION_SYMBOL() { return getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_STATEMENT_TIME_SYMBOL() { return getToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
		public TerminalNode MAX_SIZE_SYMBOL() { return getToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public TerminalNode MEDIUM_SYMBOL() { return getToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode MERGE_SYMBOL() { return getToken(MySQLParser.MERGE_SYMBOL, 0); }
		public TerminalNode MESSAGE_TEXT_SYMBOL() { return getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode MIGRATE_SYMBOL() { return getToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public TerminalNode MODIFY_SYMBOL() { return getToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MySQLParser.MODE_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public TerminalNode MUTEX_SYMBOL() { return getToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public TerminalNode MYSQL_ERRNO_SYMBOL() { return getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public TerminalNode NAME_SYMBOL() { return getToken(MySQLParser.NAME_SYMBOL, 0); }
		public TerminalNode NAMES_SYMBOL() { return getToken(MySQLParser.NAMES_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public TerminalNode NCHAR_SYMBOL() { return getToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode NDBCLUSTER_SYMBOL() { return getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0); }
		public TerminalNode NESTED_SYMBOL() { return getToken(MySQLParser.NESTED_SYMBOL, 0); }
		public TerminalNode NEVER_SYMBOL() { return getToken(MySQLParser.NEVER_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MySQLParser.NEXT_SYMBOL, 0); }
		public TerminalNode NEW_SYMBOL() { return getToken(MySQLParser.NEW_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public TerminalNode NULLS_SYMBOL() { return getToken(MySQLParser.NULLS_SYMBOL, 0); }
		public TerminalNode NOWAIT_SYMBOL() { return getToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public TerminalNode NUMBER_SYMBOL() { return getToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public TerminalNode NVARCHAR_SYMBOL() { return getToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public TerminalNode OFFSET_SYMBOL() { return getToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public TerminalNode OLD_PASSWORD_SYMBOL() { return getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public TerminalNode ONE_SHOT_SYMBOL() { return getToken(MySQLParser.ONE_SHOT_SYMBOL, 0); }
		public TerminalNode ONE_SYMBOL() { return getToken(MySQLParser.ONE_SYMBOL, 0); }
		public TerminalNode OTHERS_SYMBOL() { return getToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public TerminalNode ORDINALITY_SYMBOL() { return getToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public TerminalNode PACK_KEYS_SYMBOL() { return getToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public TerminalNode PAGE_SYMBOL() { return getToken(MySQLParser.PAGE_SYMBOL, 0); }
		public TerminalNode PARTIAL_SYMBOL() { return getToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode PATH_SYMBOL() { return getToken(MySQLParser.PATH_SYMBOL, 0); }
		public TerminalNode PHASE_SYMBOL() { return getToken(MySQLParser.PHASE_SYMBOL, 0); }
		public TerminalNode PLUGIN_DIR_SYMBOL() { return getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public TerminalNode PLUGIN_SYMBOL() { return getToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public TerminalNode PLUGINS_SYMBOL() { return getToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public TerminalNode PRECEDING_SYMBOL() { return getToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode PREV_SYMBOL() { return getToken(MySQLParser.PREV_SYMBOL, 0); }
		public TerminalNode THREAD_PRIORITY_SYMBOL() { return getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode PROCESSLIST_SYMBOL() { return getToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public TerminalNode PROFILE_SYMBOL() { return getToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public TerminalNode PROFILES_SYMBOL() { return getToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode READ_ONLY_SYMBOL() { return getToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		public TerminalNode REBUILD_SYMBOL() { return getToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public TerminalNode RECOVER_SYMBOL() { return getToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public TerminalNode REDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode REDOFILE_SYMBOL() { return getToken(MySQLParser.REDOFILE_SYMBOL, 0); }
		public TerminalNode REDUNDANT_SYMBOL() { return getToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public TerminalNode RELAY_SYMBOL() { return getToken(MySQLParser.RELAY_SYMBOL, 0); }
		public TerminalNode RELAYLOG_SYMBOL() { return getToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_FILE_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_POS_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public TerminalNode RELAY_THREAD_SYMBOL() { return getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public TerminalNode REMOTE_SYMBOL() { return getToken(MySQLParser.REMOTE_SYMBOL, 0); }
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode REPEATABLE_SYMBOL() { return getToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public TerminalNode USER_RESOURCES_SYMBOL() { return getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public TerminalNode RESPECT_SYMBOL() { return getToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public TerminalNode RESUME_SYMBOL() { return getToken(MySQLParser.RESUME_SYMBOL, 0); }
		public TerminalNode RETURNED_SQLSTATE_SYMBOL() { return getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public TerminalNode RETURNS_SYMBOL() { return getToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TerminalNode REUSE_SYMBOL() { return getToken(MySQLParser.REUSE_SYMBOL, 0); }
		public TerminalNode REVERSE_SYMBOL() { return getToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ROLLUP_SYMBOL() { return getToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public TerminalNode ROTATE_SYMBOL() { return getToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public TerminalNode ROUTINE_SYMBOL() { return getToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public TerminalNode ROW_FORMAT_SYMBOL() { return getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode RTREE_SYMBOL() { return getToken(MySQLParser.RTREE_SYMBOL, 0); }
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public TerminalNode SCHEMA_NAME_SYMBOL() { return getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode SERIALIZABLE_SYMBOL() { return getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MySQLParser.SHARE_SYMBOL, 0); }
		public TerminalNode SIMPLE_SYMBOL() { return getToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public TerminalNode SKIP_SYMBOL() { return getToken(MySQLParser.SKIP_SYMBOL, 0); }
		public TerminalNode SLOW_SYMBOL() { return getToken(MySQLParser.SLOW_SYMBOL, 0); }
		public TerminalNode SNAPSHOT_SYMBOL() { return getToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public TerminalNode SOUNDS_SYMBOL() { return getToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public TerminalNode SOURCE_SYMBOL() { return getToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public TerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_BUFFER_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_NO_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_THREAD_SYMBOL() { return getToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public TerminalNode SRID_SYMBOL() { return getToken(MySQLParser.SRID_SYMBOL, 0); }
		public TerminalNode STACKED_SYMBOL() { return getToken(MySQLParser.STACKED_SYMBOL, 0); }
		public TerminalNode STARTS_SYMBOL() { return getToken(MySQLParser.STARTS_SYMBOL, 0); }
		public TerminalNode STATS_AUTO_RECALC_SYMBOL() { return getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public TerminalNode STATS_PERSISTENT_SYMBOL() { return getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public TerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode STRING_SYMBOL() { return getToken(MySQLParser.STRING_SYMBOL, 0); }
		public TerminalNode SUBCLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode SUBDATE_SYMBOL() { return getToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public TerminalNode SUBJECT_SYMBOL() { return getToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TerminalNode SUBPARTITIONS_SYMBOL() { return getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MySQLParser.SUPER_SYMBOL, 0); }
		public TerminalNode SUSPEND_SYMBOL() { return getToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public TerminalNode SWAPS_SYMBOL() { return getToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public TerminalNode SWITCHES_SYMBOL() { return getToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public TerminalNode TABLE_NAME_SYMBOL() { return getToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLE_CHECKSUM_SYMBOL() { return getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public TerminalNode TEMPTABLE_SYMBOL() { return getToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TerminalNode THAN_SYMBOL() { return getToken(MySQLParser.THAN_SYMBOL, 0); }
		public TerminalNode TIES_SYMBOL() { return getToken(MySQLParser.TIES_SYMBOL, 0); }
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TerminalNode TRIGGERS_SYMBOL() { return getToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_ADD_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_DIFF_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TYPES_SYMBOL() { return getToken(MySQLParser.TYPES_SYMBOL, 0); }
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public TerminalNode UDF_RETURNS_SYMBOL() { return getToken(MySQLParser.UDF_RETURNS_SYMBOL, 0); }
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode UNCOMMITTED_SYMBOL() { return getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public TerminalNode UNDEFINED_SYMBOL() { return getToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public TerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TerminalNode UNKNOWN_SYMBOL() { return getToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public TerminalNode UNTIL_SYMBOL() { return getToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode USE_FRM_SYMBOL() { return getToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public TerminalNode VARIABLES_SYMBOL() { return getToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public TerminalNode VCPU_SYMBOL() { return getToken(MySQLParser.VCPU_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public TerminalNode WARNINGS_SYMBOL() { return getToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public TerminalNode WAIT_SYMBOL() { return getToken(MySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode WEIGHT_STRING_SYMBOL() { return getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public TerminalNode X509_SYMBOL() { return getToken(MySQLParser.X509_SYMBOL, 0); }
		public TerminalNode XID_SYMBOL() { return getToken(MySQLParser.XID_SYMBOL, 0); }
		public TerminalNode XML_SYMBOL() { return getToken(MySQLParser.XML_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode CUBE_SYMBOL() { return getToken(MySQLParser.CUBE_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public TerminalNode ROWS_SYMBOL() { return getToken(MySQLParser.ROWS_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public TerminalNode EXCHANGE_SYMBOL() { return getToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		public TerminalNode EXPIRE_SYMBOL() { return getToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TerminalNode VALIDATION_SYMBOL() { return getToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		public TerminalNode WITHOUT_SYMBOL() { return getToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public RoleOrLabelKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrLabelKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleOrLabelKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleOrLabelKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleOrLabelKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleOrLabelKeywordContext roleOrLabelKeyword() throws RecognitionException {
		RoleOrLabelKeywordContext _localctx = new RoleOrLabelKeywordContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_roleOrLabelKeyword);
		int _la;
		try {
			setState(7884);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1045,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7877);
				_la = _input.LA(1);
				if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (ACTION_SYMBOL - 57)) | (1L << (ADDDATE_SYMBOL - 57)) | (1L << (AFTER_SYMBOL - 57)) | (1L << (AGAINST_SYMBOL - 57)) | (1L << (AGGREGATE_SYMBOL - 57)) | (1L << (ALGORITHM_SYMBOL - 57)) | (1L << (ANY_SYMBOL - 57)) | (1L << (AT_SYMBOL - 57)) | (1L << (AUTHORS_SYMBOL - 57)) | (1L << (AUTO_INCREMENT_SYMBOL - 57)) | (1L << (AUTOEXTEND_SIZE_SYMBOL - 57)) | (1L << (AVG_ROW_LENGTH_SYMBOL - 57)) | (1L << (AVG_SYMBOL - 57)) | (1L << (BINLOG_SYMBOL - 57)) | (1L << (BIT_SYMBOL - 57)) | (1L << (BLOCK_SYMBOL - 57)) | (1L << (BOOL_SYMBOL - 57)) | (1L << (BOOLEAN_SYMBOL - 57)) | (1L << (BTREE_SYMBOL - 57)) | (1L << (CASCADED_SYMBOL - 57)) | (1L << (CATALOG_NAME_SYMBOL - 57)) | (1L << (CHAIN_SYMBOL - 57)) | (1L << (CHANGED_SYMBOL - 57)) | (1L << (CHANNEL_SYMBOL - 57)) | (1L << (CIPHER_SYMBOL - 57)) | (1L << (CLIENT_SYMBOL - 57)) | (1L << (CLASS_ORIGIN_SYMBOL - 57)) | (1L << (COALESCE_SYMBOL - 57)) | (1L << (CODE_SYMBOL - 57)) | (1L << (COLLATION_SYMBOL - 57)) | (1L << (COLUMN_NAME_SYMBOL - 57)) | (1L << (COLUMN_FORMAT_SYMBOL - 57)) | (1L << (COLUMNS_SYMBOL - 57)) | (1L << (COMMITTED_SYMBOL - 57)) | (1L << (COMPACT_SYMBOL - 57)) | (1L << (COMPLETION_SYMBOL - 57)) | (1L << (COMPRESSED_SYMBOL - 57)) | (1L << (COMPRESSION_SYMBOL - 57)) | (1L << (ENCRYPTION_SYMBOL - 57)) | (1L << (CONCURRENT_SYMBOL - 57)) | (1L << (CONNECTION_SYMBOL - 57)) | (1L << (CONSISTENT_SYMBOL - 57)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 57)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 57)) | (1L << (CONSTRAINT_NAME_SYMBOL - 57)) | (1L << (CONTEXT_SYMBOL - 57)) | (1L << (CONTRIBUTORS_SYMBOL - 57)) | (1L << (CPU_SYMBOL - 57)) | (1L << (CURRENT_SYMBOL - 57)) | (1L << (CURSOR_NAME_SYMBOL - 57)) | (1L << (DATA_SYMBOL - 57)) | (1L << (DATAFILE_SYMBOL - 57)) | (1L << (DATETIME_SYMBOL - 57)) | (1L << (DATE_SYMBOL - 57)) | (1L << (DAY_SYMBOL - 57)) | (1L << (DEFAULT_AUTH_SYMBOL - 57)) | (1L << (DEFINER_SYMBOL - 57)) | (1L << (DELAY_KEY_WRITE_SYMBOL - 57)) | (1L << (DES_KEY_FILE_SYMBOL - 57)) | (1L << (DIAGNOSTICS_SYMBOL - 57)) | (1L << (DIRECTORY_SYMBOL - 57)) | (1L << (DISABLE_SYMBOL - 57)))) != 0) || ((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (DISCARD_SYMBOL - 121)) | (1L << (DISK_SYMBOL - 121)) | (1L << (DUMPFILE_SYMBOL - 121)) | (1L << (DUPLICATE_SYMBOL - 121)) | (1L << (DYNAMIC_SYMBOL - 121)) | (1L << (ENDS_SYMBOL - 121)) | (1L << (ENUM_SYMBOL - 121)) | (1L << (ENGINE_SYMBOL - 121)) | (1L << (ENGINES_SYMBOL - 121)) | (1L << (ERROR_SYMBOL - 121)) | (1L << (ERRORS_SYMBOL - 121)) | (1L << (ESCAPE_SYMBOL - 121)) | (1L << (EVENTS_SYMBOL - 121)) | (1L << (EVERY_SYMBOL - 121)) | (1L << (EXPANSION_SYMBOL - 121)) | (1L << (EXPORT_SYMBOL - 121)) | (1L << (EXTENDED_SYMBOL - 121)) | (1L << (EXTENT_SIZE_SYMBOL - 121)) | (1L << (FAULTS_SYMBOL - 121)) | (1L << (FAST_SYMBOL - 121)) | (1L << (FOUND_SYMBOL - 121)) | (1L << (ENABLE_SYMBOL - 121)) | (1L << (FULL_SYMBOL - 121)) | (1L << (FILE_BLOCK_SIZE_SYMBOL - 121)) | (1L << (FILTER_SYMBOL - 121)) | (1L << (FIRST_SYMBOL - 121)) | (1L << (FIXED_SYMBOL - 121)) | (1L << (GENERAL_SYMBOL - 121)) | (1L << (GEOMETRY_SYMBOL - 121)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 121)) | (1L << (GET_FORMAT_SYMBOL - 121)) | (1L << (GRANTS_SYMBOL - 121)) | (1L << (GLOBAL_SYMBOL - 121)) | (1L << (HASH_SYMBOL - 121)) | (1L << (HOSTS_SYMBOL - 121)) | (1L << (HOUR_SYMBOL - 121)) | (1L << (IDENTIFIED_SYMBOL - 121)) | (1L << (IGNORE_SERVER_IDS_SYMBOL - 121)) | (1L << (INVOKER_SYMBOL - 121)) | (1L << (INDEXES_SYMBOL - 121)) | (1L << (INITIAL_SIZE_SYMBOL - 121)) | (1L << (INSTANCE_SYMBOL - 121)) | (1L << (INNODB_SYMBOL - 121)) | (1L << (IO_SYMBOL - 121)) | (1L << (IPC_SYMBOL - 121)) | (1L << (ISOLATION_SYMBOL - 121)) | (1L << (ISSUER_SYMBOL - 121)) | (1L << (INSERT_METHOD_SYMBOL - 121)) | (1L << (JSON_SYMBOL - 121)) | (1L << (KEY_BLOCK_SIZE_SYMBOL - 121)) | (1L << (LAST_SYMBOL - 121)) | (1L << (LEAVES_SYMBOL - 121)) | (1L << (LESS_SYMBOL - 121)) | (1L << (LEVEL_SYMBOL - 121)) | (1L << (LINESTRING_SYMBOL - 121)) | (1L << (LIST_SYMBOL - 121)) | (1L << (LOCAL_SYMBOL - 121)) | (1L << (LOCKS_SYMBOL - 121)) | (1L << (LOGFILE_SYMBOL - 121)) | (1L << (LOGS_SYMBOL - 121)) | (1L << (MAX_ROWS_SYMBOL - 121)))) != 0) || ((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & ((1L << (MASTER_SYMBOL - 185)) | (1L << (MASTER_HEARTBEAT_PERIOD_SYMBOL - 185)) | (1L << (MASTER_HOST_SYMBOL - 185)) | (1L << (MASTER_PORT_SYMBOL - 185)) | (1L << (MASTER_LOG_FILE_SYMBOL - 185)) | (1L << (MASTER_LOG_POS_SYMBOL - 185)) | (1L << (MASTER_USER_SYMBOL - 185)) | (1L << (MASTER_PASSWORD_SYMBOL - 185)) | (1L << (MASTER_SERVER_ID_SYMBOL - 185)) | (1L << (MASTER_CONNECT_RETRY_SYMBOL - 185)) | (1L << (MASTER_RETRY_COUNT_SYMBOL - 185)) | (1L << (MASTER_DELAY_SYMBOL - 185)) | (1L << (MASTER_SSL_SYMBOL - 185)) | (1L << (MASTER_SSL_CA_SYMBOL - 185)) | (1L << (MASTER_SSL_CAPATH_SYMBOL - 185)) | (1L << (MASTER_TLS_VERSION_SYMBOL - 185)) | (1L << (MASTER_SSL_CERT_SYMBOL - 185)) | (1L << (MASTER_SSL_CIPHER_SYMBOL - 185)) | (1L << (MASTER_SSL_CRL_SYMBOL - 185)) | (1L << (MASTER_SSL_CRLPATH_SYMBOL - 185)) | (1L << (MASTER_SSL_KEY_SYMBOL - 185)) | (1L << (MASTER_AUTO_POSITION_SYMBOL - 185)) | (1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 185)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 185)) | (1L << (MAX_STATEMENT_TIME_SYMBOL - 185)) | (1L << (MAX_SIZE_SYMBOL - 185)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 185)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 185)) | (1L << (MEDIUM_SYMBOL - 185)) | (1L << (MEMORY_SYMBOL - 185)) | (1L << (MERGE_SYMBOL - 185)) | (1L << (MESSAGE_TEXT_SYMBOL - 185)) | (1L << (MICROSECOND_SYMBOL - 185)) | (1L << (MIGRATE_SYMBOL - 185)) | (1L << (MINUTE_SYMBOL - 185)) | (1L << (MIN_ROWS_SYMBOL - 185)) | (1L << (MODIFY_SYMBOL - 185)) | (1L << (MODE_SYMBOL - 185)) | (1L << (MONTH_SYMBOL - 185)) | (1L << (MULTILINESTRING_SYMBOL - 185)) | (1L << (MULTIPOINT_SYMBOL - 185)) | (1L << (MULTIPOLYGON_SYMBOL - 185)) | (1L << (MUTEX_SYMBOL - 185)) | (1L << (MYSQL_ERRNO_SYMBOL - 185)) | (1L << (NAME_SYMBOL - 185)) | (1L << (NAMES_SYMBOL - 185)) | (1L << (NATIONAL_SYMBOL - 185)) | (1L << (NCHAR_SYMBOL - 185)) | (1L << (NDBCLUSTER_SYMBOL - 185)) | (1L << (NEVER_SYMBOL - 185)) | (1L << (NEXT_SYMBOL - 185)) | (1L << (NEW_SYMBOL - 185)) | (1L << (NO_WAIT_SYMBOL - 185)) | (1L << (NODEGROUP_SYMBOL - 185)) | (1L << (NUMBER_SYMBOL - 185)) | (1L << (NVARCHAR_SYMBOL - 185)) | (1L << (OFFSET_SYMBOL - 185)) | (1L << (OLD_PASSWORD_SYMBOL - 185)) | (1L << (ONE_SHOT_SYMBOL - 185)) | (1L << (ONE_SYMBOL - 185)) | (1L << (PACK_KEYS_SYMBOL - 185)) | (1L << (PAGE_SYMBOL - 185)) | (1L << (PARTIAL_SYMBOL - 185)))) != 0) || ((((_la - 249)) & ~0x3f) == 0 && ((1L << (_la - 249)) & ((1L << (PARTITIONING_SYMBOL - 249)) | (1L << (PARTITIONS_SYMBOL - 249)) | (1L << (PASSWORD_SYMBOL - 249)) | (1L << (PHASE_SYMBOL - 249)) | (1L << (PLUGIN_DIR_SYMBOL - 249)) | (1L << (PLUGIN_SYMBOL - 249)) | (1L << (PLUGINS_SYMBOL - 249)) | (1L << (POINT_SYMBOL - 249)) | (1L << (POLYGON_SYMBOL - 249)) | (1L << (PRESERVE_SYMBOL - 249)) | (1L << (PREV_SYMBOL - 249)) | (1L << (PRIVILEGES_SYMBOL - 249)) | (1L << (PROCESSLIST_SYMBOL - 249)) | (1L << (PROFILE_SYMBOL - 249)) | (1L << (PROFILES_SYMBOL - 249)) | (1L << (QUARTER_SYMBOL - 249)) | (1L << (QUERY_SYMBOL - 249)) | (1L << (QUICK_SYMBOL - 249)) | (1L << (READ_ONLY_SYMBOL - 249)) | (1L << (REBUILD_SYMBOL - 249)) | (1L << (RECOVER_SYMBOL - 249)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 249)) | (1L << (REDOFILE_SYMBOL - 249)) | (1L << (REDUNDANT_SYMBOL - 249)) | (1L << (RELAY_SYMBOL - 249)) | (1L << (RELAYLOG_SYMBOL - 249)) | (1L << (RELAY_LOG_FILE_SYMBOL - 249)) | (1L << (RELAY_LOG_POS_SYMBOL - 249)) | (1L << (RELAY_THREAD_SYMBOL - 249)) | (1L << (REORGANIZE_SYMBOL - 249)) | (1L << (REPEATABLE_SYMBOL - 249)) | (1L << (REPLICATE_DO_DB_SYMBOL - 249)) | (1L << (REPLICATE_IGNORE_DB_SYMBOL - 249)) | (1L << (REPLICATE_DO_TABLE_SYMBOL - 249)) | (1L << (REPLICATE_IGNORE_TABLE_SYMBOL - 249)) | (1L << (REPLICATE_WILD_DO_TABLE_SYMBOL - 249)) | (1L << (REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 249)) | (1L << (REPLICATE_REWRITE_DB_SYMBOL - 249)) | (1L << (RESUME_SYMBOL - 249)) | (1L << (RETURNED_SQLSTATE_SYMBOL - 249)) | (1L << (RETURNS_SYMBOL - 249)) | (1L << (REVERSE_SYMBOL - 249)) | (1L << (ROLLUP_SYMBOL - 249)) | (1L << (ROTATE_SYMBOL - 249)) | (1L << (ROUTINE_SYMBOL - 249)) | (1L << (ROW_COUNT_SYMBOL - 249)) | (1L << (ROW_FORMAT_SYMBOL - 249)) | (1L << (RTREE_SYMBOL - 249)) | (1L << (SCHEDULE_SYMBOL - 249)) | (1L << (SCHEMA_NAME_SYMBOL - 249)) | (1L << (SECOND_SYMBOL - 249)) | (1L << (SERIAL_SYMBOL - 249)) | (1L << (SERIALIZABLE_SYMBOL - 249)) | (1L << (SESSION_SYMBOL - 249)) | (1L << (SIMPLE_SYMBOL - 249)) | (1L << (SHARE_SYMBOL - 249)) | (1L << (SLOW_SYMBOL - 249)) | (1L << (SNAPSHOT_SYMBOL - 249)))) != 0) || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (SOUNDS_SYMBOL - 313)) | (1L << (SOURCE_SYMBOL - 313)) | (1L << (SQL_AFTER_GTIDS_SYMBOL - 313)) | (1L << (SQL_AFTER_MTS_GAPS_SYMBOL - 313)) | (1L << (SQL_BEFORE_GTIDS_SYMBOL - 313)) | (1L << (SQL_CACHE_SYMBOL - 313)) | (1L << (SQL_BUFFER_RESULT_SYMBOL - 313)) | (1L << (SQL_NO_CACHE_SYMBOL - 313)) | (1L << (SQL_THREAD_SYMBOL - 313)) | (1L << (STACKED_SYMBOL - 313)) | (1L << (STARTS_SYMBOL - 313)) | (1L << (STATS_AUTO_RECALC_SYMBOL - 313)) | (1L << (STATS_PERSISTENT_SYMBOL - 313)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 313)) | (1L << (STATUS_SYMBOL - 313)) | (1L << (STORAGE_SYMBOL - 313)) | (1L << (STRING_SYMBOL - 313)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 313)) | (1L << (SUBDATE_SYMBOL - 313)) | (1L << (SUBJECT_SYMBOL - 313)) | (1L << (SUBPARTITION_SYMBOL - 313)) | (1L << (SUBPARTITIONS_SYMBOL - 313)) | (1L << (SUPER_SYMBOL - 313)) | (1L << (SUSPEND_SYMBOL - 313)) | (1L << (SWAPS_SYMBOL - 313)) | (1L << (SWITCHES_SYMBOL - 313)) | (1L << (TABLE_NAME_SYMBOL - 313)) | (1L << (TABLES_SYMBOL - 313)) | (1L << (TABLE_CHECKSUM_SYMBOL - 313)) | (1L << (TABLESPACE_SYMBOL - 313)) | (1L << (TEMPORARY_SYMBOL - 313)) | (1L << (TEMPTABLE_SYMBOL - 313)) | (1L << (TEXT_SYMBOL - 313)) | (1L << (THAN_SYMBOL - 313)) | (1L << (TRANSACTION_SYMBOL - 313)) | (1L << (TRIGGERS_SYMBOL - 313)) | (1L << (TIMESTAMP_SYMBOL - 313)) | (1L << (TIMESTAMP_ADD_SYMBOL - 313)) | (1L << (TIMESTAMP_DIFF_SYMBOL - 313)) | (1L << (TIME_SYMBOL - 313)) | (1L << (TYPES_SYMBOL - 313)) | (1L << (TYPE_SYMBOL - 313)) | (1L << (UDF_RETURNS_SYMBOL - 313)) | (1L << (UNCOMMITTED_SYMBOL - 313)) | (1L << (UNDEFINED_SYMBOL - 313)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 313)) | (1L << (UNDOFILE_SYMBOL - 313)) | (1L << (UNKNOWN_SYMBOL - 313)) | (1L << (UNTIL_SYMBOL - 313)) | (1L << (USER_RESOURCES_SYMBOL - 313)) | (1L << (USER_SYMBOL - 313)) | (1L << (USE_FRM_SYMBOL - 313)) | (1L << (VARIABLES_SYMBOL - 313)) | (1L << (VIEW_SYMBOL - 313)) | (1L << (VALUE_SYMBOL - 313)) | (1L << (WARNINGS_SYMBOL - 313)) | (1L << (WAIT_SYMBOL - 313)) | (1L << (WEEK_SYMBOL - 313)) | (1L << (WORK_SYMBOL - 313)) | (1L << (WEIGHT_STRING_SYMBOL - 313)) | (1L << (X509_SYMBOL - 313)) | (1L << (XID_SYMBOL - 313)) | (1L << (XML_SYMBOL - 313)))) != 0) || _la==YEAR_SYMBOL || _la==ANALYSE_SYMBOL || ((((_la - 696)) & ~0x3f) == 0 && ((1L << (_la - 696)) & ((1L << (COMPONENT_SYMBOL - 696)) | (1L << (SKIP_SYMBOL - 696)) | (1L << (LOCKED_SYMBOL - 696)) | (1L << (NOWAIT_SYMBOL - 696)) | (1L << (HISTOGRAM_SYMBOL - 696)) | (1L << (BUCKETS_SYMBOL - 696)) | (1L << (REMOTE_SYMBOL - 696)) | (1L << (EXCLUDE_SYMBOL - 696)) | (1L << (FOLLOWING_SYMBOL - 696)) | (1L << (NULLS_SYMBOL - 696)) | (1L << (OTHERS_SYMBOL - 696)) | (1L << (PRECEDING_SYMBOL - 696)) | (1L << (RESPECT_SYMBOL - 696)) | (1L << (TIES_SYMBOL - 696)) | (1L << (UNBOUNDED_SYMBOL - 696)) | (1L << (NESTED_SYMBOL - 696)) | (1L << (ORDINALITY_SYMBOL - 696)) | (1L << (PATH_SYMBOL - 696)) | (1L << (HISTORY_SYMBOL - 696)) | (1L << (REUSE_SYMBOL - 696)) | (1L << (SRID_SYMBOL - 696)) | (1L << (THREAD_PRIORITY_SYMBOL - 696)) | (1L << (VCPU_SYMBOL - 696)) | (1L << (MASTER_PUBLIC_KEY_PATH_SYMBOL - 696)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7878);
				if (!(serverVersion < 50709)) throw new FailedPredicateException(this, "serverVersion < 50709");
				setState(7879);
				match(SHUTDOWN_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7880);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(7881);
				_la = _input.LA(1);
				if ( !(_la==CUBE_SYMBOL || _la==IMPORT_SYMBOL || ((((_la - 298)) & ~0x3f) == 0 && ((1L << (_la - 298)) & ((1L << (ROWS_SYMBOL - 298)) | (1L << (ROW_SYMBOL - 298)) | (1L << (FUNCTION_SYMBOL - 298)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7882);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(7883);
				_la = _input.LA(1);
				if ( !(_la==SUPER_SYMBOL || _la==EXCHANGE_SYMBOL || _la==EXPIRE_SYMBOL || _la==ONLY_SYMBOL || _la==VALIDATION_SYMBOL || _la==WITHOUT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleKeywordContext extends ParserRuleContext {
		public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return getRuleContext(RoleOrLabelKeywordContext.class,0);
		}
		public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return getRuleContext(RoleOrIdentifierKeywordContext.class,0);
		}
		public RoleKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleKeywordContext roleKeyword() throws RecognitionException {
		RoleKeywordContext _localctx = new RoleKeywordContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_roleKeyword);
		try {
			setState(7888);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1046,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7886);
				roleOrLabelKeyword();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7887);
				roleOrIdentifierKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1:
			return simpleStatement_sempred((SimpleStatementContext)_localctx, predIndex);
		case 2:
			return alterStatement_sempred((AlterStatementContext)_localctx, predIndex);
		case 3:
			return alterDatabase_sempred((AlterDatabaseContext)_localctx, predIndex);
		case 9:
			return alterTable_sempred((AlterTableContext)_localctx, predIndex);
		case 13:
			return standaloneAlterCommands_sempred((StandaloneAlterCommandsContext)_localctx, predIndex);
		case 14:
			return alterPartition_sempred((AlterPartitionContext)_localctx, predIndex);
		case 16:
			return alterCommandsModifier_sempred((AlterCommandsModifierContext)_localctx, predIndex);
		case 17:
			return alterListItem_sempred((AlterListItemContext)_localctx, predIndex);
		case 23:
			return indexLockAndAlgorithm_sempred((IndexLockAndAlgorithmContext)_localctx, predIndex);
		case 24:
			return withValidation_sempred((WithValidationContext)_localctx, predIndex);
		case 25:
			return removePartitioning_sempred((RemovePartitioningContext)_localctx, predIndex);
		case 28:
			return alterTablespace_sempred((AlterTablespaceContext)_localctx, predIndex);
		case 35:
			return createStatement_sempred((CreateStatementContext)_localctx, predIndex);
		case 62:
			return tablespaceOption_sempred((TablespaceOptionContext)_localctx, predIndex);
		case 68:
			return triggerFollowsPrecedesClause_sempred((TriggerFollowsPrecedesClauseContext)_localctx, predIndex);
		case 73:
			return dropStatement_sempred((DropStatementContext)_localctx, predIndex);
		case 93:
			return deleteStatement_sempred((DeleteStatementContext)_localctx, predIndex);
		case 94:
			return partitionDelete_sempred((PartitionDeleteContext)_localctx, predIndex);
		case 96:
			return doStatement_sempred((DoStatementContext)_localctx, predIndex);
		case 109:
			return dataOrXml_sempred((DataOrXmlContext)_localctx, predIndex);
		case 110:
			return xmlRowsIdentifiedBy_sempred((XmlRowsIdentifiedByContext)_localctx, predIndex);
		case 117:
			return queryExpression_sempred((QueryExpressionContext)_localctx, predIndex);
		case 118:
			return queryExpressionBody_sempred((QueryExpressionBodyContext)_localctx, predIndex);
		case 120:
			return querySpecification_sempred((QuerySpecificationContext)_localctx, predIndex);
		case 144:
			return olapOption_sempred((OlapOptionContext)_localctx, predIndex);
		case 149:
			return selectOption_sempred((SelectOptionContext)_localctx, predIndex);
		case 150:
			return lockingClause_sempred((LockingClauseContext)_localctx, predIndex);
		case 151:
			return lockStrengh_sempred((LockStrenghContext)_localctx, predIndex);
		case 162:
			return tableFactor_sempred((TableFactorContext)_localctx, predIndex);
		case 165:
			return derivedTable_sempred((DerivedTableContext)_localctx, predIndex);
		case 184:
			return updateStatement_sempred((UpdateStatementContext)_localctx, predIndex);
		case 188:
			return transactionCharacteristic_sempred((TransactionCharacteristicContext)_localctx, predIndex);
		case 189:
			return setTransactionCharacteristic_sempred((SetTransactionCharacteristicContext)_localctx, predIndex);
		case 192:
			return lockStatement_sempred((LockStatementContext)_localctx, predIndex);
		case 196:
			return xaConvert_sempred((XaConvertContext)_localctx, predIndex);
		case 198:
			return replicationStatement_sempred((ReplicationStatementContext)_localctx, predIndex);
		case 199:
			return resetOption_sempred((ResetOptionContext)_localctx, predIndex);
		case 200:
			return masterResetOptions_sempred((MasterResetOptionsContext)_localctx, predIndex);
		case 207:
			return changeReplication_sempred((ChangeReplicationContext)_localctx, predIndex);
		case 215:
			return slaveUntilOptions_sempred((SlaveUntilOptionsContext)_localctx, predIndex);
		case 216:
			return slaveConnectionOptions_sempred((SlaveConnectionOptionsContext)_localctx, predIndex);
		case 224:
			return accountManagementStatement_sempred((AccountManagementStatementContext)_localctx, predIndex);
		case 225:
			return alterUser_sempred((AlterUserContext)_localctx, predIndex);
		case 226:
			return alterUserTail_sempred((AlterUserTailContext)_localctx, predIndex);
		case 227:
			return createUser_sempred((CreateUserContext)_localctx, predIndex);
		case 228:
			return createUserTail_sempred((CreateUserTailContext)_localctx, predIndex);
		case 229:
			return defaultRoleClause_sempred((DefaultRoleClauseContext)_localctx, predIndex);
		case 233:
			return dropUser_sempred((DropUserContext)_localctx, predIndex);
		case 234:
			return grant_sempred((GrantContext)_localctx, predIndex);
		case 235:
			return grantTargetList_sempred((GrantTargetListContext)_localctx, predIndex);
		case 236:
			return grantOptions_sempred((GrantOptionsContext)_localctx, predIndex);
		case 237:
			return versionedRequireClause_sempred((VersionedRequireClauseContext)_localctx, predIndex);
		case 239:
			return revoke_sempred((RevokeContext)_localctx, predIndex);
		case 240:
			return onTypeTo_sempred((OnTypeToContext)_localctx, predIndex);
		case 242:
			return setPassword_sempred((SetPasswordContext)_localctx, predIndex);
		case 244:
			return roleOrPrivilege_sempred((RoleOrPrivilegeContext)_localctx, predIndex);
		case 252:
			return tableAdministrationStatement_sempred((TableAdministrationStatementContext)_localctx, predIndex);
		case 258:
			return optionValueNoOptionType_sempred((OptionValueNoOptionTypeContext)_localctx, predIndex);
		case 261:
			return setExprOrDefault_sempred((SetExprOrDefaultContext)_localctx, predIndex);
		case 264:
			return showStatement_sempred((ShowStatementContext)_localctx, predIndex);
		case 265:
			return showCommandType_sempred((ShowCommandTypeContext)_localctx, predIndex);
		case 266:
			return nonBlocking_sempred((NonBlockingContext)_localctx, predIndex);
		case 270:
			return otherAdministrativeStatement_sempred((OtherAdministrativeStatementContext)_localctx, predIndex);
		case 278:
			return flushOption_sempred((FlushOptionContext)_localctx, predIndex);
		case 281:
			return flushTablesOptions_sempred((FlushTablesOptionsContext)_localctx, predIndex);
		case 285:
			return adminPartition_sempred((AdminPartitionContext)_localctx, predIndex);
		case 296:
			return utilityStatement_sempred((UtilityStatementContext)_localctx, predIndex);
		case 298:
			return explainCommand_sempred((ExplainCommandContext)_localctx, predIndex);
		case 299:
			return explainableStatement_sempred((ExplainableStatementContext)_localctx, predIndex);
		case 303:
			return expr_sempred((ExprContext)_localctx, predIndex);
		case 304:
			return boolPri_sempred((BoolPriContext)_localctx, predIndex);
		case 308:
			return bitExpr_sempred((BitExprContext)_localctx, predIndex);
		case 309:
			return simpleExpr_sempred((SimpleExprContext)_localctx, predIndex);
		case 310:
			return jsonOperator_sempred((JsonOperatorContext)_localctx, predIndex);
		case 311:
			return sumExpr_sempred((SumExprContext)_localctx, predIndex);
		case 322:
			return runtimeFunctionCall_sempred((RuntimeFunctionCallContext)_localctx, predIndex);
		case 323:
			return geometryFunction_sempred((GeometryFunctionContext)_localctx, predIndex);
		case 325:
			return fractionalPrecision_sempred((FractionalPrecisionContext)_localctx, predIndex);
		case 341:
			return castType_sempred((CastTypeContext)_localctx, predIndex);
		case 351:
			return channel_sempred((ChannelContext)_localctx, predIndex);
		case 380:
			return getDiagnostics_sempred((GetDiagnosticsContext)_localctx, predIndex);
		case 392:
			return columnDefinition_sempred((ColumnDefinitionContext)_localctx, predIndex);
		case 396:
			return fieldDefinition_sempred((FieldDefinitionContext)_localctx, predIndex);
		case 397:
			return columnAttribute_sempred((ColumnAttributeContext)_localctx, predIndex);
		case 405:
			return commonIndexOption_sempred((CommonIndexOptionContext)_localctx, predIndex);
		case 411:
			return dataType_sempred((DataTypeContext)_localctx, predIndex);
		case 418:
			return ascii_sempred((AsciiContext)_localctx, predIndex);
		case 419:
			return unicode_sempred((UnicodeContext)_localctx, predIndex);
		case 421:
			return typeDatetimePrecision_sempred((TypeDatetimePrecisionContext)_localctx, predIndex);
		case 422:
			return charsetName_sempred((CharsetNameContext)_localctx, predIndex);
		case 423:
			return collationName_sempred((CollationNameContext)_localctx, predIndex);
		case 426:
			return createTableOption_sempred((CreateTableOptionContext)_localctx, predIndex);
		case 430:
			return partitionClause_sempred((PartitionClauseContext)_localctx, predIndex);
		case 431:
			return partitionTypeDef_sempred((PartitionTypeDefContext)_localctx, predIndex);
		case 433:
			return partitionKeyAlgorithm_sempred((PartitionKeyAlgorithmContext)_localctx, predIndex);
		case 458:
			return createOrAlterUser_sempred((CreateOrAlterUserContext)_localctx, predIndex);
		case 462:
			return onlineOption_sempred((OnlineOptionContext)_localctx, predIndex);
		case 464:
			return usePartition_sempred((UsePartitionContext)_localctx, predIndex);
		case 508:
			return pureIdentifier_sempred((PureIdentifierContext)_localctx, predIndex);
		case 513:
			return simpleIdentifier_sempred((SimpleIdentifierContext)_localctx, predIndex);
		case 519:
			return literal_sempred((LiteralContext)_localctx, predIndex);
		case 522:
			return textStringLiteral_sempred((TextStringLiteralContext)_localctx, predIndex);
		case 525:
			return textStringNoLinebreak_sempred((TextStringNoLinebreakContext)_localctx, predIndex);
		case 541:
			return identifierKeyword_sempred((IdentifierKeywordContext)_localctx, predIndex);
		case 543:
			return roleOrIdentifierKeyword_sempred((RoleOrIdentifierKeywordContext)_localctx, predIndex);
		case 544:
			return roleOrLabelKeyword_sempred((RoleOrLabelKeywordContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean simpleStatement_sempred(SimpleStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return serverVersion >= 80000;
		case 1:
			return serverVersion >= 80000;
		case 2:
			return serverVersion >= 80000;
		case 3:
			return serverVersion >= 50604;
		case 4:
			return serverVersion >= 50500;
		case 5:
			return serverVersion >= 50500;
		}
		return true;
	}
	private boolean alterStatement_sempred(AlterStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return serverVersion >= 50100;
		case 7:
			return serverVersion >= 50713;
		}
		return true;
	}
	private boolean alterDatabase_sempred(AlterDatabaseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean alterTable_sempred(AlterTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return serverVersion < 50700;
		}
		return true;
	}
	private boolean standaloneAlterCommands_sempred(StandaloneAlterCommandsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return serverVersion >= 50100;
		}
		return true;
	}
	private boolean alterPartition_sempred(AlterPartitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return serverVersion >= 50500;
		case 12:
			return serverVersion >= 50704;
		case 13:
			return serverVersion >= 50704;
		}
		return true;
	}
	private boolean alterCommandsModifier_sempred(AlterCommandsModifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14:
			return serverVersion >= 50600;
		case 15:
			return serverVersion >= 50600;
		}
		return true;
	}
	private boolean alterListItem_sempred(AlterListItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16:
			return serverVersion >= 50700;
		case 17:
			return serverVersion < 50700;
		case 18:
			return serverVersion >= 80000;
		case 19:
			return serverVersion >= 50700;
		case 20:
			return serverVersion >= 50708 && serverVersion < 80000;
		}
		return true;
	}
	private boolean indexLockAndAlgorithm_sempred(IndexLockAndAlgorithmContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return serverVersion >= 50600;
		}
		return true;
	}
	private boolean withValidation_sempred(WithValidationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean removePartitioning_sempred(RemovePartitioningContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23:
			return serverVersion >= 50100;
		}
		return true;
	}
	private boolean alterTablespace_sempred(AlterTablespaceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean createStatement_sempred(CreateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25:
			return serverVersion >= 50100;
		case 26:
			return serverVersion >= 80000;
		case 27:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean tablespaceOption_sempred(TablespaceOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28:
			return serverVersion >= 50707;
		}
		return true;
	}
	private boolean triggerFollowsPrecedesClause_sempred(TriggerFollowsPrecedesClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29:
			return serverVersion >= 50700;
		}
		return true;
	}
	private boolean dropStatement_sempred(DropStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30:
			return serverVersion >= 50100;
		case 31:
			return serverVersion >= 80000;
		case 32:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean deleteStatement_sempred(DeleteStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean partitionDelete_sempred(PartitionDeleteContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34:
			return serverVersion >= 50602;
		}
		return true;
	}
	private boolean doStatement_sempred(DoStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35:
			return serverVersion < 50709;
		case 36:
			return serverVersion >= 50709;
		}
		return true;
	}
	private boolean dataOrXml_sempred(DataOrXmlContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37:
			return serverVersion >= 50500;
		}
		return true;
	}
	private boolean xmlRowsIdentifiedBy_sempred(XmlRowsIdentifiedByContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38:
			return serverVersion >= 50500;
		}
		return true;
	}
	private boolean queryExpression_sempred(QueryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39:
			return serverVersion >= 80000;
		case 40:
			return serverVersion < 80000;
		case 41:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean queryExpressionBody_sempred(QueryExpressionBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean querySpecification_sempred(QuerySpecificationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean olapOption_sempred(OlapOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean selectOption_sempred(SelectOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45:
			return serverVersion < 80000;
		case 46:
			return serverVersion >= 50704 && serverVersion < 50708;
		}
		return true;
	}
	private boolean lockingClause_sempred(LockingClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47:
			return serverVersion >= 80000;
		case 48:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean lockStrengh_sempred(LockStrenghContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean tableFactor_sempred(TableFactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean derivedTable_sempred(DerivedTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean updateStatement_sempred(UpdateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean transactionCharacteristic_sempred(TransactionCharacteristicContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53:
			return serverVersion >= 50605;
		}
		return true;
	}
	private boolean setTransactionCharacteristic_sempred(SetTransactionCharacteristicContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54:
			return serverVersion >= 50605;
		}
		return true;
	}
	private boolean lockStatement_sempred(LockStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55:
			return serverVersion >= 80000;
		case 56:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean xaConvert_sempred(XaConvertContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57:
			return serverVersion >= 50704;
		}
		return true;
	}
	private boolean replicationStatement_sempred(ReplicationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58:
			return serverVersion > 80000;
		case 59:
			return serverVersion >= 50700;
		case 60:
			return serverVersion < 50500;
		case 61:
			return serverVersion > 50706;
		}
		return true;
	}
	private boolean resetOption_sempred(ResetOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean masterResetOptions_sempred(MasterResetOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean changeReplication_sempred(ChangeReplicationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean slaveUntilOptions_sempred(SlaveUntilOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65:
			return serverVersion >= 50606;
		case 66:
			return serverVersion >= 50606;
		}
		return true;
	}
	private boolean slaveConnectionOptions_sempred(SlaveConnectionOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67:
			return serverVersion >= 50604;
		}
		return true;
	}
	private boolean accountManagementStatement_sempred(AccountManagementStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68:
			return serverVersion >= 50606;
		case 69:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean alterUser_sempred(AlterUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean alterUserTail_sempred(AlterUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71:
			return serverVersion >= 50706;
		case 72:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean createUser_sempred(CreateUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 73:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean createUserTail_sempred(CreateUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean defaultRoleClause_sempred(DefaultRoleClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean dropUser_sempred(DropUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 76:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean grant_sempred(GrantContext _localctx, int predIndex) {
		switch (predIndex) {
		case 77:
			return serverVersion >= 80000;
		case 78:
			return serverVersion >= 50500;
		}
		return true;
	}
	private boolean grantTargetList_sempred(GrantTargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79:
			return serverVersion < 80011;
		case 80:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean grantOptions_sempred(GrantOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81:
			return serverVersion < 80011;
		case 82:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean versionedRequireClause_sempred(VersionedRequireClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 83:
			return serverVersion < 80011;
		}
		return true;
	}
	private boolean revoke_sempred(RevokeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 84:
			return serverVersion >= 80000;
		case 85:
			return serverVersion >= 80000;
		case 86:
			return serverVersion >= 50500;
		}
		return true;
	}
	private boolean onTypeTo_sempred(OnTypeToContext _localctx, int predIndex) {
		switch (predIndex) {
		case 87:
			return serverVersion < 80000;
		case 88:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean setPassword_sempred(SetPasswordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 89:
			return serverVersion < 50706;
		}
		return true;
	}
	private boolean roleOrPrivilege_sempred(RoleOrPrivilegeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 90:
			return serverVersion > 80000;
		case 91:
			return serverVersion > 80000;
		}
		return true;
	}
	private boolean tableAdministrationStatement_sempred(TableAdministrationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 92:
			return serverVersion >= 80000;
		case 93:
			return serverVersion < 50500;
		case 94:
			return serverVersion < 50500;
		}
		return true;
	}
	private boolean optionValueNoOptionType_sempred(OptionValueNoOptionTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 95:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean setExprOrDefault_sempred(SetExprOrDefaultContext _localctx, int predIndex) {
		switch (predIndex) {
		case 96:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean showStatement_sempred(ShowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 97:
			return serverVersion < 50700;
		case 98:
			return (serverVersion >= 50105) && (serverVersion < 50500);
		case 99:
			return serverVersion >= 50500;
		case 100:
			return serverVersion >= 80000;
		case 101:
			return serverVersion < 50700;
		case 102:
			return serverVersion >= 50500;
		case 103:
			return serverVersion >= 50704;
		case 104:
			return serverVersion < 50500;
		}
		return true;
	}
	private boolean showCommandType_sempred(ShowCommandTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 105:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean nonBlocking_sempred(NonBlockingContext _localctx, int predIndex) {
		switch (predIndex) {
		case 106:
			return serverVersion >= 50700 && serverVersion < 50706;
		}
		return true;
	}
	private boolean otherAdministrativeStatement_sempred(OtherAdministrativeStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 107:
			return serverVersion >= 50709;
		}
		return true;
	}
	private boolean flushOption_sempred(FlushOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 108:
			return serverVersion < 80000;
		case 109:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean flushTablesOptions_sempred(FlushTablesOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 110:
			return serverVersion >= 50606;
		}
		return true;
	}
	private boolean adminPartition_sempred(AdminPartitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 111:
			return serverVersion >= 50500;
		}
		return true;
	}
	private boolean utilityStatement_sempred(UtilityStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 112:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean explainCommand_sempred(ExplainCommandContext _localctx, int predIndex) {
		switch (predIndex) {
		case 113:
			return serverVersion < 80000;
		case 114:
			return serverVersion >= 50105 && serverVersion < 80000;
		case 115:
			return serverVersion >= 50605;
		}
		return true;
	}
	private boolean explainableStatement_sempred(ExplainableStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 116:
			return serverVersion >= 50603;
		case 117:
			return serverVersion >= 50700;
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 118:
			return precpred(_ctx, 3);
		case 119:
			return precpred(_ctx, 2);
		case 120:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean boolPri_sempred(BoolPriContext _localctx, int predIndex) {
		switch (predIndex) {
		case 121:
			return precpred(_ctx, 3);
		case 122:
			return precpred(_ctx, 2);
		case 123:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean bitExpr_sempred(BitExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 124:
			return precpred(_ctx, 7);
		case 125:
			return precpred(_ctx, 6);
		case 126:
			return precpred(_ctx, 5);
		case 127:
			return precpred(_ctx, 3);
		case 128:
			return precpred(_ctx, 2);
		case 129:
			return precpred(_ctx, 1);
		case 130:
			return precpred(_ctx, 4);
		}
		return true;
	}
	private boolean simpleExpr_sempred(SimpleExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 131:
			return serverVersion >= 80000;
		case 132:
			return serverVersion >= 80000;
		case 133:
			return precpred(_ctx, 15);
		case 134:
			return precpred(_ctx, 21);
		}
		return true;
	}
	private boolean jsonOperator_sempred(JsonOperatorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 135:
			return serverVersion >= 50708;
		case 136:
			return serverVersion >= 50713;
		}
		return true;
	}
	private boolean sumExpr_sempred(SumExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 137:
			return serverVersion >= 80000;
		case 138:
			return serverVersion >= 80000;
		case 139:
			return serverVersion >= 80000;
		case 140:
			return serverVersion >= 80000;
		case 141:
			return serverVersion >= 80000;
		case 142:
			return serverVersion >= 80000;
		case 143:
			return serverVersion >= 80000;
		case 144:
			return serverVersion >= 80000;
		case 145:
			return serverVersion >= 80000;
		case 146:
			return serverVersion >= 80000;
		case 147:
			return serverVersion >= 80000;
		case 148:
			return serverVersion >= 80000;
		case 149:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean runtimeFunctionCall_sempred(RuntimeFunctionCallContext _localctx, int predIndex) {
		switch (predIndex) {
		case 150:
			return serverVersion < 50607;
		case 151:
			return serverVersion < 80011;
		case 152:
			return serverVersion >= 50600;
		case 153:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean geometryFunction_sempred(GeometryFunctionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 154:
			return serverVersion < 50706;
		}
		return true;
	}
	private boolean fractionalPrecision_sempred(FractionalPrecisionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 155:
			return serverVersion >= 50604;
		}
		return true;
	}
	private boolean castType_sempred(CastTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 156:
			return serverVersion >= 50708;
		}
		return true;
	}
	private boolean channel_sempred(ChannelContext _localctx, int predIndex) {
		switch (predIndex) {
		case 157:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean getDiagnostics_sempred(GetDiagnosticsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 158:
			return serverVersion >= 50700;
		}
		return true;
	}
	private boolean columnDefinition_sempred(ColumnDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 159:
			return serverVersion >= 80000;
		case 160:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean fieldDefinition_sempred(FieldDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 161:
			return serverVersion >= 50707;
		case 162:
			return serverVersion < 80000;
		case 163:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean columnAttribute_sempred(ColumnAttributeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 164:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean commonIndexOption_sempred(CommonIndexOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 165:
			return serverVersion >= 50600;
		case 166:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean dataType_sempred(DataTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 167:
			return serverVersion >= 50708;
		}
		return true;
	}
	private boolean ascii_sempred(AsciiContext _localctx, int predIndex) {
		switch (predIndex) {
		case 168:
			return serverVersion >= 50500;
		}
		return true;
	}
	private boolean unicode_sempred(UnicodeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 169:
			return serverVersion >= 50500;
		}
		return true;
	}
	private boolean typeDatetimePrecision_sempred(TypeDatetimePrecisionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 170:
			return serverVersion >= 50600;
		}
		return true;
	}
	private boolean charsetName_sempred(CharsetNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 171:
			return serverVersion < 80011;
		}
		return true;
	}
	private boolean collationName_sempred(CollationNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 172:
			return serverVersion < 80011;
		}
		return true;
	}
	private boolean createTableOption_sempred(CreateTableOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 173:
			return serverVersion < 50500;
		case 174:
			return serverVersion >= 50708;
		case 175:
			return serverVersion >= 50711;
		case 176:
			return serverVersion >= 50600;
		case 177:
			return serverVersion >= 50707;
		}
		return true;
	}
	private boolean partitionClause_sempred(PartitionClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 178:
			return serverVersion >= 50100;
		}
		return true;
	}
	private boolean partitionTypeDef_sempred(PartitionTypeDefContext _localctx, int predIndex) {
		switch (predIndex) {
		case 179:
			return serverVersion >= 50500;
		}
		return true;
	}
	private boolean partitionKeyAlgorithm_sempred(PartitionKeyAlgorithmContext _localctx, int predIndex) {
		switch (predIndex) {
		case 180:
			return serverVersion >= 50700;
		}
		return true;
	}
	private boolean createOrAlterUser_sempred(CreateOrAlterUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 181:
			return serverVersion < 80011;
		case 182:
			return serverVersion >= 50600;
		case 183:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean onlineOption_sempred(OnlineOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 184:
			return serverVersion < 50600;
		}
		return true;
	}
	private boolean usePartition_sempred(UsePartitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 185:
			return serverVersion >= 50602;
		}
		return true;
	}
	private boolean pureIdentifier_sempred(PureIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 186:
			return isSqlModeActive(AnsiQuotes);
		}
		return true;
	}
	private boolean simpleIdentifier_sempred(SimpleIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 187:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean literal_sempred(LiteralContext _localctx, int predIndex) {
		switch (predIndex) {
		case 188:
			return serverVersion >= 50003;
		}
		return true;
	}
	private boolean textStringLiteral_sempred(TextStringLiteralContext _localctx, int predIndex) {
		switch (predIndex) {
		case 189:
			return !isSqlModeActive(AnsiQuotes);
		}
		return true;
	}
	private boolean textStringNoLinebreak_sempred(TextStringNoLinebreakContext _localctx, int predIndex) {
		switch (predIndex) {
		case 190:
			return !containsLinebreak(_input.getText(_localctx.start, _input.LT(-1)));
		}
		return true;
	}
	private boolean identifierKeyword_sempred(IdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 191:
			return serverVersion >= 50709;
		case 192:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean roleOrIdentifierKeyword_sempred(RoleOrIdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 193:
			return serverVersion >= 50709;
		case 194:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean roleOrLabelKeyword_sempred(RoleOrLabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 195:
			return serverVersion < 50709;
		case 196:
			return serverVersion < 80000;
		case 197:
			return serverVersion >= 80000;
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u02ff\u1ed5\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\3\2\3\2\3\2\5\2\u044a\n\2\3\2\3\2\5\2\u044e\n\2\3\2\5\2\u0451"+
		"\n\2\5\2\u0453\n\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\5\3\u0479\n\3\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u0481"+
		"\n\4\3\4\3\4\3\4\5\4\u0486\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\5\4\u0495\n\4\3\5\3\5\3\5\6\5\u049a\n\5\r\5\16\5\u049b\3"+
		"\5\3\5\3\5\3\5\3\5\5\5\u04a3\n\5\3\6\5\6\u04a6\n\6\3\6\3\6\3\6\3\6\3\6"+
		"\5\6\u04ad\n\6\3\6\3\6\3\6\5\6\u04b2\n\6\3\6\5\6\u04b5\n\6\3\6\3\6\3\6"+
		"\5\6\u04ba\n\6\3\6\3\6\3\6\3\6\5\6\u04c0\n\6\5\6\u04c2\n\6\3\6\3\6\5\6"+
		"\u04c6\n\6\3\6\3\6\5\6\u04ca\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u04d3"+
		"\n\7\3\b\3\b\5\b\u04d7\n\b\3\b\7\b\u04da\n\b\f\b\16\b\u04dd\13\b\3\t\3"+
		"\t\5\t\u04e1\n\t\3\t\3\t\5\t\u04e5\n\t\3\t\3\t\5\t\u04e9\n\t\3\t\3\t\5"+
		"\t\u04ed\n\t\3\n\3\n\3\n\3\n\3\13\5\13\u04f4\n\13\3\13\3\13\5\13\u04f8"+
		"\n\13\3\13\3\13\3\13\5\13\u04fd\n\13\3\f\3\f\3\f\5\f\u0502\n\f\3\f\3\f"+
		"\3\f\3\f\3\f\5\f\u0509\n\f\3\f\5\f\u050c\n\f\3\r\3\r\3\r\3\r\5\r\u0512"+
		"\n\r\3\r\5\r\u0515\n\r\3\16\3\16\3\16\7\16\u051a\n\16\f\16\16\16\u051d"+
		"\13\16\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0525\n\17\3\20\3\20\3\20\5"+
		"\20\u052a\n\20\3\20\3\20\3\20\5\20\u052f\n\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\5\20\u0537\n\20\3\20\3\20\3\20\3\20\5\20\u053d\n\20\3\20\3\20\5"+
		"\20\u0541\n\20\3\20\3\20\3\20\5\20\u0546\n\20\3\20\3\20\3\20\3\20\3\20"+
		"\7\20\u054d\n\20\f\20\16\20\u0550\13\20\3\20\3\20\3\20\5\20\u0555\n\20"+
		"\3\20\3\20\7\20\u0559\n\20\f\20\16\20\u055c\13\20\3\20\3\20\3\20\5\20"+
		"\u0561\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u056c\n"+
		"\20\3\20\3\20\3\20\3\20\5\20\u0572\n\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\5\20\u057b\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\5\20\u0589\n\20\3\21\3\21\5\21\u058d\n\21\3\21\3\21\3\21\3"+
		"\21\5\21\u0593\n\21\7\21\u0595\n\21\f\21\16\21\u0598\13\21\3\22\3\22\3"+
		"\22\3\22\3\22\5\22\u059f\n\22\3\23\3\23\5\23\u05a3\n\23\3\23\3\23\3\23"+
		"\5\23\u05a8\n\23\3\23\5\23\u05ab\n\23\3\23\3\23\3\23\3\23\5\23\u05b1\n"+
		"\23\3\23\3\23\3\23\3\23\5\23\u05b7\n\23\3\23\3\23\3\23\3\23\5\23\u05bd"+
		"\n\23\3\23\3\23\5\23\u05c1\n\23\3\23\3\23\3\23\5\23\u05c6\n\23\3\23\3"+
		"\23\5\23\u05ca\n\23\3\23\3\23\5\23\u05ce\n\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\5\23\u05d6\n\23\5\23\u05d8\n\23\3\23\3\23\3\23\3\23\3\23\5\23\u05df"+
		"\n\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u05e7\n\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\5\23\u05ef\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23"+
		"\u05f9\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\5\23\u0609\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0612"+
		"\n\23\3\24\3\24\3\24\5\24\u0617\n\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26"+
		"\3\26\7\26\u0621\n\26\f\26\16\26\u0624\13\26\3\27\3\27\5\27\u0628\n\27"+
		"\3\27\3\27\5\27\u062c\n\27\3\30\3\30\5\30\u0630\n\30\3\30\3\30\5\30\u0634"+
		"\n\30\3\31\3\31\3\31\5\31\u0639\n\31\3\31\3\31\5\31\u063d\n\31\5\31\u063f"+
		"\n\31\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\34\3\34\5\34\u064b\n\34"+
		"\3\35\3\35\3\35\5\35\u0650\n\35\3\35\3\35\3\35\3\35\5\35\u0656\n\35\3"+
		"\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u065f\n\36\3\36\7\36\u0662\n\36"+
		"\f\36\16\36\u0665\13\36\5\36\u0667\n\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\5\36\u0670\n\36\3\36\7\36\u0673\n\36\f\36\16\36\u0676\13\36\5\36"+
		"\u0678\n\36\3\36\3\36\3\36\5\36\u067d\n\36\3\36\3\36\3\36\5\36\u0682\n"+
		"\36\3\37\3\37\5\37\u0686\n\37\3\37\3\37\3\37\5\37\u068b\n\37\3\37\3\37"+
		"\3\37\5\37\u0690\n\37\3\37\3\37\5\37\u0694\n\37\3\37\3\37\5\37\u0698\n"+
		"\37\3\37\3\37\5\37\u069c\n\37\3 \3 \5 \u06a0\n \3 \3 \3 \5 \u06a5\n \3"+
		" \3 \3 \5 \u06aa\n \3 \5 \u06ad\n \3!\5!\u06b0\n!\3!\5!\u06b3\n!\3!\5"+
		"!\u06b6\n!\3!\3!\3!\3!\3\"\5\"\u06bd\n\"\3\"\3\"\3\"\3#\3#\5#\u06c4\n"+
		"#\3$\3$\5$\u06c8\n$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3"+
		"%\3%\3%\3%\5%\u06de\n%\3&\3&\3&\5&\u06e3\n&\3&\3&\7&\u06e7\n&\f&\16&\u06ea"+
		"\13&\3\'\3\'\5\'\u06ee\n\'\3(\3(\5(\u06f2\n(\3(\3(\5(\u06f6\n(\3(\3(\3"+
		"(\3(\3(\5(\u06fd\n(\3(\5(\u0700\n(\3(\5(\u0703\n(\3(\5(\u0706\n(\3(\3"+
		"(\3(\3(\3(\3(\3(\5(\u070f\n(\3)\3)\3)\7)\u0714\n)\f)\16)\u0717\13)\3*"+
		"\3*\5*\u071b\n*\3+\5+\u071e\n+\3+\5+\u0721\n+\3+\3+\3,\3,\5,\u0727\n,"+
		"\3-\3-\5-\u072b\n-\3.\3.\3.\5.\u0730\n.\3.\5.\u0733\n.\3.\3.\3/\3/\3/"+
		"\3/\3/\3/\3/\7/\u073e\n/\f/\16/\u0741\13/\5/\u0743\n/\3/\3/\7/\u0747\n"+
		"/\f/\16/\u074a\13/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\7\60\u0755"+
		"\n\60\f\60\16\60\u0758\13\60\5\60\u075a\n\60\3\60\3\60\3\60\3\60\7\60"+
		"\u0760\n\60\f\60\16\60\u0763\13\60\3\60\3\60\3\61\3\61\5\61\u0769\n\61"+
		"\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\62\3\62\5\62\u0774\n\62\3\62\5\62"+
		"\u0777\n\62\3\63\6\63\u077a\n\63\r\63\16\63\u077b\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64"+
		"\u078f\n\64\3\65\3\65\5\65\u0793\n\65\3\65\5\65\u0796\n\65\3\65\3\65\5"+
		"\65\u079a\n\65\3\65\3\65\7\65\u079e\n\65\f\65\16\65\u07a1\13\65\3\65\3"+
		"\65\3\65\3\65\3\65\7\65\u07a8\n\65\f\65\16\65\u07ab\13\65\3\65\3\65\3"+
		"\65\3\65\3\65\7\65\u07b2\n\65\f\65\16\65\u07b5\13\65\5\65\u07b7\n\65\3"+
		"\65\5\65\u07ba\n\65\3\66\3\66\3\66\5\66\u07bf\n\66\3\66\3\66\3\66\3\66"+
		"\5\66\u07c5\n\66\3\67\3\67\3\67\3\67\38\38\38\38\38\38\38\38\58\u07d3"+
		"\n8\39\39\59\u07d7\n9\39\79\u07da\n9\f9\169\u07dd\139\3:\3:\5:\u07e1\n"+
		":\3:\3:\3:\5:\u07e6\n:\3:\3:\3:\5:\u07eb\n:\3:\3:\5:\u07ef\n:\3:\3:\5"+
		":\u07f3\n:\3:\3:\3:\3:\5:\u07f9\n:\3:\5:\u07fc\n:\3;\3;\3;\3;\3;\3;\3"+
		";\3;\3;\3<\3<\3<\3<\3<\7<\u080c\n<\f<\16<\u080f\13<\3<\3<\3=\3=\3=\3="+
		"\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u0821\n=\3>\3>\3>\3>\3>\3>\3>\3>\3>"+
		"\3>\5>\u082d\n>\3>\5>\u0830\n>\3?\3?\5?\u0834\n?\3?\7?\u0837\n?\f?\16"+
		"?\u083a\13?\3@\3@\5@\u083e\n@\3@\3@\3@\5@\u0843\n@\3@\3@\3@\5@\u0848\n"+
		"@\3@\3@\3@\5@\u084d\n@\3@\3@\3@\5@\u0852\n@\3@\3@\5@\u0856\n@\3@\3@\5"+
		"@\u085a\n@\3@\3@\3@\3@\5@\u0860\n@\3@\3@\3@\3@\5@\u0866\n@\3@\5@\u0869"+
		"\n@\3A\3A\5A\u086d\nA\3A\5A\u0870\nA\3A\5A\u0873\nA\3A\3A\3A\3A\3B\3B"+
		"\3B\5B\u087c\nB\3B\5B\u087f\nB\3C\3C\3C\3C\3D\3D\3D\3D\3E\3E\3E\3E\3E"+
		"\3E\3E\3E\3E\3E\3E\5E\u0894\nE\3E\3E\3F\3F\3F\3F\3G\3G\3G\5G\u089f\nG"+
		"\3G\3G\3G\3G\3G\3G\3G\5G\u08a8\nG\3G\5G\u08ab\nG\3G\3G\3G\3G\5G\u08b1"+
		"\nG\5G\u08b3\nG\3G\3G\5G\u08b7\nG\3G\3G\3G\3H\3H\3H\5H\u08bf\nH\3H\3H"+
		"\3I\3I\3I\3I\3I\3I\3I\3I\7I\u08cb\nI\fI\16I\u08ce\13I\3I\3I\3I\3I\3I\5"+
		"I\u08d5\nI\3I\3I\7I\u08d9\nI\fI\16I\u08dc\13I\5I\u08de\nI\3J\3J\3J\3J"+
		"\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u08ef\nJ\3K\3K\3K\3K\3K\3K\3K\3K"+
		"\3K\3K\3K\3K\3K\3K\3K\3K\5K\u0901\nK\3L\3L\3L\5L\u0906\nL\3L\3L\3M\3M"+
		"\3M\5M\u090d\nM\3M\3M\3N\3N\3N\5N\u0914\nN\3N\3N\3O\3O\3O\5O\u091b\nO"+
		"\3O\3O\3P\3P\5P\u0921\nP\3P\3P\3P\3P\3P\5P\u0928\nP\3Q\3Q\3Q\3Q\3Q\3Q"+
		"\5Q\u0930\nQ\3Q\7Q\u0933\nQ\fQ\16Q\u0936\13Q\5Q\u0938\nQ\3R\3R\5R\u093c"+
		"\nR\3R\3R\5R\u0940\nR\3R\5R\u0943\nR\3S\3S\3S\5S\u0948\nS\3S\3S\3T\3T"+
		"\5T\u094e\nT\3T\3T\5T\u0952\nT\3T\3T\5T\u0956\nT\3U\3U\3U\3U\3U\5U\u095d"+
		"\nU\3U\7U\u0960\nU\fU\16U\u0963\13U\5U\u0965\nU\3V\3V\3V\5V\u096a\nV\3"+
		"V\3V\3W\3W\3W\5W\u0971\nW\3W\3W\5W\u0975\nW\3X\3X\3X\5X\u097a\nX\3X\3"+
		"X\3Y\3Y\3Y\3Y\3Y\5Y\u0983\nY\3Y\3Y\3Z\3Z\3Z\3Z\3Z\7Z\u098c\nZ\fZ\16Z\u098f"+
		"\13Z\3[\3[\3[\3[\3\\\3\\\5\\\u0997\n\\\3\\\3\\\3]\3]\3]\3]\3]\3^\3^\3"+
		"^\3^\5^\u09a4\n^\3^\5^\u09a7\n^\3_\3_\5_\u09ab\n_\3_\3_\7_\u09af\n_\f"+
		"_\16_\u09b2\13_\3_\3_\3_\3_\3_\5_\u09b9\n_\3_\3_\5_\u09bd\n_\3_\5_\u09c0"+
		"\n_\3_\5_\u09c3\n_\3_\5_\u09c6\n_\5_\u09c8\n_\3_\3_\3_\3_\5_\u09ce\n_"+
		"\5_\u09d0\n_\3`\3`\3`\3`\3`\3`\3a\3a\3b\3b\3b\3b\3b\5b\u09df\nb\3c\3c"+
		"\3c\3c\5c\u09e5\nc\3c\3c\3c\3c\3c\5c\u09ec\nc\3c\5c\u09ef\nc\5c\u09f1"+
		"\nc\5c\u09f3\nc\3d\3d\3d\3d\3d\3d\3d\3d\5d\u09fd\nd\5d\u09ff\nd\3e\3e"+
		"\5e\u0a03\ne\3e\5e\u0a06\ne\3e\5e\u0a09\ne\3e\3e\5e\u0a0d\ne\3e\3e\3e"+
		"\3e\5e\u0a13\ne\3e\5e\u0a16\ne\3f\3f\3g\3g\5g\u0a1c\ng\3g\5g\u0a1f\ng"+
		"\3g\3g\3h\3h\3h\7h\u0a26\nh\fh\16h\u0a29\13h\3i\3i\3i\3j\3j\3j\5j\u0a31"+
		"\nj\3j\3j\5j\u0a35\nj\3k\3k\5k\u0a39\nk\3k\3k\3k\3k\5k\u0a3f\nk\3k\7k"+
		"\u0a42\nk\fk\16k\u0a45\13k\3l\3l\5l\u0a49\nl\3l\3l\3l\5l\u0a4e\nl\7l\u0a50"+
		"\nl\fl\16l\u0a53\13l\3m\3m\3m\3m\3m\3m\3n\3n\3n\5n\u0a5e\nn\3n\5n\u0a61"+
		"\nn\3n\3n\3n\5n\u0a66\nn\3n\3n\3n\3n\5n\u0a6c\nn\3n\5n\u0a6f\nn\3n\5n"+
		"\u0a72\nn\3n\5n\u0a75\nn\3n\5n\u0a78\nn\3n\3n\3o\3o\3o\5o\u0a7f\no\3p"+
		"\3p\3p\3p\3p\3p\3q\3q\3q\5q\u0a8a\nq\3q\5q\u0a8d\nq\3q\3q\5q\u0a91\nq"+
		"\3r\3r\5r\u0a95\nr\3r\3r\3s\3s\5s\u0a9b\ns\3s\3s\3s\5s\u0aa0\ns\7s\u0aa2"+
		"\ns\fs\16s\u0aa5\13s\3t\3t\5t\u0aa9\nt\3t\5t\u0aac\nt\3t\3t\5t\u0ab0\n"+
		"t\3t\3t\3t\3t\5t\u0ab6\nt\3u\3u\3u\5u\u0abb\nu\3v\3v\3v\3v\3v\3v\3v\5"+
		"v\u0ac4\nv\3w\3w\5w\u0ac8\nw\3w\3w\5w\u0acc\nw\3w\5w\u0acf\nw\3w\3w\3"+
		"w\5w\u0ad4\nw\3w\5w\u0ad7\nw\5w\u0ad9\nw\3w\3w\5w\u0add\nw\3w\5w\u0ae0"+
		"\nw\3w\3w\3w\3w\5w\u0ae6\nw\5w\u0ae8\nw\3x\3x\3x\3x\3x\5x\u0aef\nx\3x"+
		"\3x\5x\u0af3\nx\5x\u0af5\nx\3x\3x\3x\5x\u0afa\nx\3x\3x\5x\u0afe\nx\7x"+
		"\u0b00\nx\fx\16x\u0b03\13x\3y\3y\3y\5y\u0b08\ny\3y\3y\3z\3z\7z\u0b0e\n"+
		"z\fz\16z\u0b11\13z\3z\3z\5z\u0b15\nz\3z\5z\u0b18\nz\3z\5z\u0b1b\nz\3z"+
		"\5z\u0b1e\nz\3z\5z\u0b21\nz\3z\3z\5z\u0b25\nz\3{\3{\3|\3|\3}\3}\3}\3~"+
		"\3~\3~\3\177\3\177\3\177\5\177\u0b34\n\177\3\u0080\3\u0080\5\u0080\u0b38"+
		"\n\u0080\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0b3e\n\u0081\3\u0081"+
		"\5\u0081\u0b41\n\u0081\3\u0081\5\u0081\u0b44\n\u0081\3\u0081\3\u0081\3"+
		"\u0081\3\u0081\5\u0081\u0b4a\n\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0b4f"+
		"\n\u0081\7\u0081\u0b51\n\u0081\f\u0081\16\u0081\u0b54\13\u0081\5\u0081"+
		"\u0b56\n\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082"+
		"\u0b5e\n\u0082\5\u0082\u0b60\n\u0082\3\u0082\3\u0082\3\u0083\3\u0083\3"+
		"\u0083\3\u0084\3\u0084\3\u0084\3\u0084\7\u0084\u0b6b\n\u0084\f\u0084\16"+
		"\u0084\u0b6e\13\u0084\3\u0085\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086"+
		"\3\u0086\3\u0086\3\u0087\5\u0087\u0b79\n\u0087\3\u0087\3\u0087\5\u0087"+
		"\u0b7d\n\u0087\3\u0087\5\u0087\u0b80\n\u0087\3\u0087\5\u0087\u0b83\n\u0087"+
		"\3\u0088\3\u0088\3\u0088\5\u0088\u0b88\n\u0088\3\u0089\3\u0089\3\u008a"+
		"\3\u008a\5\u008a\u0b8e\n\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\5\u008b\u0b9e\n\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\5\u008d\u0bb2\n\u008d\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0bbb\n\u008e\3\u008f\3\u008f"+
		"\5\u008f\u0bbf\n\u008f\3\u008f\3\u008f\3\u008f\7\u008f\u0bc4\n\u008f\f"+
		"\u008f\16\u008f\u0bc7\13\u008f\3\u0090\3\u0090\5\u0090\u0bcb\n\u0090\3"+
		"\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0bd4\n"+
		"\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u0bdb\n\u0092\3"+
		"\u0093\3\u0093\3\u0093\3\u0093\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095"+
		"\5\u0095\u0be6\n\u0095\3\u0096\3\u0096\3\u0096\7\u0096\u0beb\n\u0096\f"+
		"\u0096\16\u0096\u0bee\13\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\5\u0097\u0bf8\n\u0097\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\5\u0098\u0bff\n\u0098\3\u0098\3\u0098\5\u0098\u0c03\n"+
		"\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0c09\n\u0098\3\u0099\3"+
		"\u0099\3\u0099\5\u0099\u0c0e\n\u0099\3\u009a\3\u009a\3\u009a\5\u009a\u0c13"+
		"\n\u009a\3\u009b\3\u009b\5\u009b\u0c17\n\u009b\3\u009b\3\u009b\7\u009b"+
		"\u0c1b\n\u009b\f\u009b\16\u009b\u0c1e\13\u009b\3\u009c\3\u009c\3\u009c"+
		"\5\u009c\u0c23\n\u009c\5\u009c\u0c25\n\u009c\3\u009d\5\u009d\u0c28\n\u009d"+
		"\3\u009d\3\u009d\5\u009d\u0c2c\n\u009d\3\u009e\3\u009e\3\u009e\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0c37\n\u009f\3\u009f"+
		"\7\u009f\u0c3a\n\u009f\f\u009f\16\u009f\u0c3d\13\u009f\3\u00a0\3\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0c45\n\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0c4d\n\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\5\u00a0\u0c52\n\u00a0\3\u00a1\3\u00a1\5\u00a1\u0c56\n\u00a1\3"+
		"\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0c5c\n\u00a1\3\u00a1\5\u00a1\u0c5f"+
		"\n\u00a1\3\u00a2\5\u00a2\u0c62\n\u00a2\3\u00a2\3\u00a2\5\u00a2\u0c66\n"+
		"\u00a2\3\u00a3\3\u00a3\5\u00a3\u0c6a\n\u00a3\3\u00a3\3\u00a3\3\u00a4\3"+
		"\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0c75\n\u00a4\3"+
		"\u00a5\3\u00a5\5\u00a5\u0c79\n\u00a5\3\u00a5\5\u00a5\u0c7c\n\u00a5\3\u00a5"+
		"\5\u00a5\u0c7f\n\u00a5\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0c84\n\u00a6\3"+
		"\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0c8c\n\u00a7\3"+
		"\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0c93\n\u00a8\3\u00a8\3"+
		"\u00a8\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0c9a\n\u00a9\3\u00a9\3\u00a9\3"+
		"\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\7\u00ab\u0cac\n\u00ab\f\u00ab"+
		"\16\u00ab\u0caf\13\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0cba\n\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\5\u00ac\u0cbf\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac"+
		"\u0cc6\n\u00ac\3\u00ad\3\u00ad\5\u00ad\u0cca\n\u00ad\3\u00ad\3\u00ad\5"+
		"\u00ad\u0cce\n\u00ad\5\u00ad\u0cd0\n\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0"+
		"\u0cde\n\u00b0\3\u00b1\3\u00b1\3\u00b2\5\u00b2\u0ce3\n\u00b2\3\u00b2\3"+
		"\u00b2\3\u00b3\3\u00b3\3\u00b3\7\u00b3\u0cea\n\u00b3\f\u00b3\16\u00b3"+
		"\u0ced\13\u00b3\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0cf2\n\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0cfb\n\u00b4"+
		"\3\u00b4\3\u00b4\5\u00b4\u0cff\n\u00b4\3\u00b4\3\u00b4\5\u00b4\u0d03\n"+
		"\u00b4\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\5\u00b7\u0d0f\n\u00b7\3\u00b8\3\u00b8\3\u00b8\7\u00b8"+
		"\u0d14\n\u00b8\f\u00b8\16\u00b8\u0d17\13\u00b8\3\u00b9\3\u00b9\5\u00b9"+
		"\u0d1b\n\u00b9\3\u00ba\3\u00ba\5\u00ba\u0d1f\n\u00ba\3\u00ba\3\u00ba\5"+
		"\u00ba\u0d23\n\u00ba\3\u00ba\5\u00ba\u0d26\n\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\5\u00ba\u0d2c\n\u00ba\3\u00ba\5\u00ba\u0d2f\n\u00ba\3\u00ba\5"+
		"\u00ba\u0d32\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0d38\n\u00bb"+
		"\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u0d3d\n\u00bc\f\u00bc\16\u00bc\u0d40"+
		"\13\u00bc\3\u00bc\3\u00bc\5\u00bc\u0d44\n\u00bc\3\u00bc\3\u00bc\5\u00bc"+
		"\u0d48\n\u00bc\3\u00bc\5\u00bc\u0d4b\n\u00bc\3\u00bc\5\u00bc\u0d4e\n\u00bc"+
		"\3\u00bc\5\u00bc\u0d51\n\u00bc\5\u00bc\u0d53\n\u00bc\3\u00bd\3\u00bd\5"+
		"\u00bd\u0d57\n\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5"+
		"\u00be\u0d5f\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5"+
		"\u00bf\u0d67\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0d6e"+
		"\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u0d74\n\u00c1\3\u00c1"+
		"\3\u00c1\5\u00c1\u0d78\n\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u0d7d\n"+
		"\u00c1\3\u00c1\5\u00c1\u0d80\n\u00c1\3\u00c1\5\u00c1\u0d83\n\u00c1\3\u00c1"+
		"\5\u00c1\u0d86\n\u00c1\5\u00c1\u0d88\n\u00c1\3\u00c1\3\u00c1\3\u00c1\5"+
		"\u00c1\u0d8d\n\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\7\u00c2\u0d94"+
		"\n\u00c2\f\u00c2\16\u00c2\u0d97\13\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u0da3\n\u00c2"+
		"\5\u00c2\u0da5\n\u00c2\3\u00c3\3\u00c3\5\u00c3\u0da9\n\u00c3\3\u00c3\3"+
		"\u00c3\3\u00c4\3\u00c4\5\u00c4\u0daf\n\u00c4\3\u00c4\5\u00c4\u0db2\n\u00c4"+
		"\3\u00c4\5\u00c4\u0db5\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5"+
		"\u0dbb\n\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u0dc2\n"+
		"\u00c5\5\u00c5\u0dc4\n\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3"+
		"\u00c5\5\u00c5\u0dcc\n\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u0dd2"+
		"\n\u00c5\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0dd7\n\u00c6\3\u00c6\5\u00c6"+
		"\u0dda\n\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0de1\n"+
		"\u00c7\5\u00c7\u0de3\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c8\5\u00c8\u0dec\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3"+
		"\u00c8\7\u00c8\u0df3\n\u00c8\f\u00c8\16\u00c8\u0df6\13\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u0dfe\n\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u0e07\n\u00c8\3"+
		"\u00c9\3\u00c9\5\u00c9\u0e0b\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3"+
		"\u00c9\5\u00c9\u0e12\n\u00c9\3\u00c9\5\u00c9\u0e15\n\u00c9\5\u00c9\u0e17"+
		"\n\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\5\u00cb\u0e21\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\5\u00cc\u0e2b\n\u00cc\3\u00cd\3\u00cd\3\u00cd\7\u00cd"+
		"\u0e30\n\u00cd\f\u00cd\16\u00cd\u0e33\13\u00cd\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0e7b\n\u00ce\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\5\u00cf\u0e89\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\7\u00d0"+
		"\u0e8f\n\u00d0\f\u00d0\16\u00d0\u0e92\13\u00d0\5\u00d0\u0e94\n\u00d0\3"+
		"\u00d0\3\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\7\u00d1"+
		"\u0e9e\n\u00d1\f\u00d1\16\u00d1\u0ea1\13\u00d1\3\u00d1\3\u00d1\5\u00d1"+
		"\u0ea5\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u0eab\n\u00d2\3"+
		"\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u0eb2\n\u00d2\3\u00d2\3"+
		"\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u0eb9\n\u00d2\3\u00d2\3\u00d2\3"+
		"\u00d2\3\u00d2\3\u00d2\5\u00d2\u0ec0\n\u00d2\3\u00d2\3\u00d2\3\u00d2\3"+
		"\u00d2\3\u00d2\5\u00d2\u0ec7\n\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3"+
		"\u00d2\5\u00d2\u0ece\n\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5"+
		"\u00d2\u0ed5\n\u00d2\3\u00d2\5\u00d2\u0ed8\n\u00d2\3\u00d3\3\u00d3\3\u00d3"+
		"\7\u00d3\u0edd\n\u00d3\f\u00d3\16\u00d3\u0ee0\13\u00d3\3\u00d4\3\u00d4"+
		"\3\u00d4\7\u00d4\u0ee5\n\u00d4\f\u00d4\16\u00d4\u0ee8\13\u00d4\3\u00d5"+
		"\3\u00d5\3\u00d5\7\u00d5\u0eed\n\u00d5\f\u00d5\16\u00d5\u0ef0\13\u00d5"+
		"\3\u00d6\3\u00d6\3\u00d7\3\u00d7\3\u00d7\7\u00d7\u0ef7\n\u00d7\f\u00d7"+
		"\16\u00d7\u0efa\13\u00d7\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u0eff\n\u00d8"+
		"\3\u00d8\3\u00d8\5\u00d8\u0f03\n\u00d8\3\u00d8\3\u00d8\5\u00d8\u0f07\n"+
		"\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u0f0c\n\u00d8\3\u00d8\5\u00d8\u0f0f"+
		"\n\u00d8\5\u00d8\u0f11\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\5\u00d9\u0f1a\n\u00d9\3\u00d9\3\u00d9\7\u00d9\u0f1e\n"+
		"\u00d9\f\u00d9\16\u00d9\u0f21\13\u00d9\3\u00da\3\u00da\3\u00da\3\u00da"+
		"\5\u00da\u0f27\n\u00da\3\u00da\3\u00da\3\u00da\5\u00da\u0f2c\n\u00da\3"+
		"\u00da\3\u00da\3\u00da\5\u00da\u0f31\n\u00da\3\u00da\3\u00da\3\u00da\5"+
		"\u00da\u0f36\n\u00da\3\u00da\5\u00da\u0f39\n\u00da\3\u00db\3\u00db\3\u00db"+
		"\7\u00db\u0f3e\n\u00db\f\u00db\16\u00db\u0f41\13\u00db\3\u00dc\3\u00dc"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de"+
		"\u0f4d\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u0f53\n\u00de\3"+
		"\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u0f59\n\u00df\3\u00e0\3\u00e0\3"+
		"\u00e0\7\u00e0\u0f5e\n\u00e0\f\u00e0\16\u00e0\u0f61\13\u00e0\3\u00e1\3"+
		"\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u0f68\n\u00e1\3\u00e1\3\u00e1\3"+
		"\u00e1\3\u00e1\5\u00e1\u0f6e\n\u00e1\5\u00e1\u0f70\n\u00e1\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2"+
		"\u0f7c\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u0f82\n\u00e3\3"+
		"\u00e3\3\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\5\u00e4\u0f97\n\u00e4\5\u00e4\u0f99\n\u00e4\3\u00e5\3\u00e5\3"+
		"\u00e5\3\u00e5\3\u00e5\5\u00e5\u0fa0\n\u00e5\3\u00e5\3\u00e5\3\u00e5\3"+
		"\u00e5\3\u00e6\3\u00e6\5\u00e6\u0fa8\n\u00e6\3\u00e6\5\u00e6\u0fab\n\u00e6"+
		"\3\u00e6\5\u00e6\u0fae\n\u00e6\3\u00e6\5\u00e6\u0fb1\n\u00e6\3\u00e7\3"+
		"\u00e7\3\u00e7\3\u00e7\5\u00e7\u0fb7\n\u00e7\3\u00e7\5\u00e7\u0fba\n\u00e7"+
		"\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u0fbf\n\u00e8\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\6\u00e9\u0fca\n\u00e9"+
		"\r\u00e9\16\u00e9\u0fcb\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u0fd7\n\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\5\u00ea\u0fdd\n\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\5\u00ea\u0fe6\n\u00ea\5\u00ea\u0fe8\n\u00ea\3\u00eb\3"+
		"\u00eb\3\u00eb\3\u00eb\5\u00eb\u0fee\n\u00eb\3\u00eb\3\u00eb\3\u00ec\3"+
		"\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u0ffa\n"+
		"\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u0fff\n\u00ec\5\u00ec\u1001\n\u00ec"+
		"\3\u00ec\3\u00ec\5\u00ec\u1005\n\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\5\u00ec\u100b\n\u00ec\3\u00ec\5\u00ec\u100e\n\u00ec\3\u00ec\3\u00ec\3"+
		"\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u1019\n"+
		"\u00ec\5\u00ec\u101b\n\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u1021"+
		"\n\u00ed\3\u00ee\3\u00ee\3\u00ee\6\u00ee\u1026\n\u00ee\r\u00ee\16\u00ee"+
		"\u1027\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u102e\n\u00ee\3\u00ef\3"+
		"\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\7\u00f0\u103d\n\u00f0\f\u00f0\16\u00f0\u1040"+
		"\13\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u104f\n\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\5\u00f1\u1054\n\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\5\u00f1\u105c\n\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u1065\n\u00f1\3\u00f2\3\u00f2\3\u00f2"+
		"\5\u00f2\u106a\n\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u1070\n"+
		"\u00f2\3\u00f2\5\u00f2\u1073\n\u00f2\5\u00f2\u1075\n\u00f2\3\u00f3\3\u00f3"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u107d\n\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\5\u00f4\u108c\n\u00f4\3\u00f5\3\u00f5\3\u00f5\7\u00f5"+
		"\u1091\n\u00f5\f\u00f5\16\u00f5\u1094\13\u00f5\3\u00f6\3\u00f6\3\u00f6"+
		"\5\u00f6\u1099\n\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u109f\n"+
		"\u00f6\5\u00f6\u10a1\n\u00f6\3\u00f6\3\u00f6\5\u00f6\u10a5\n\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6"+
		"\u10b0\n\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\5\u00f6\u10ba\n\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u10bf\n"+
		"\u00f6\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u10c4\n\u00f7\3\u00f7\3\u00f7\3"+
		"\u00f7\5\u00f7\u10c9\n\u00f7\3\u00f7\5\u00f7\u10cc\n\u00f7\3\u00f8\3\u00f8"+
		"\5\u00f8\u10d0\n\u00f8\3\u00f8\7\u00f8\u10d3\n\u00f8\f\u00f8\16\u00f8"+
		"\u10d6\13\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9"+
		"\u10de\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u10ea\n\u00fa\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\5\u00fb\u10f8\n\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\5\u00fb\u1101\n\u00fb\5\u00fb\u1103\n\u00fb\3\u00fc\3\u00fc\3"+
		"\u00fc\7\u00fc\u1108\n\u00fc\f\u00fc\16\u00fc\u110b\13\u00fc\3\u00fd\3"+
		"\u00fd\3\u00fd\5\u00fd\u1110\n\u00fd\3\u00fe\3\u00fe\5\u00fe\u1114\n\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\7\u00fe\u111c\n\u00fe"+
		"\f\u00fe\16\u00fe\u111f\13\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe"+
		"\u1125\n\u00fe\3\u00fe\3\u00fe\5\u00fe\u1129\n\u00fe\3\u00fe\3\u00fe\3"+
		"\u00fe\3\u00fe\5\u00fe\u112f\n\u00fe\3\u00fe\3\u00fe\5\u00fe\u1133\n\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\7\u00fe\u1138\n\u00fe\f\u00fe\16\u00fe\u113b"+
		"\13\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u114b\n\u00fe"+
		"\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u1154"+
		"\n\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u115a\n\u00ff\3\u0100"+
		"\3\u0100\3\u0100\5\u0100\u115f\n\u0100\3\u0101\3\u0101\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\7\u0102\u1174\n\u0102"+
		"\f\u0102\16\u0102\u1177\13\u0102\5\u0102\u1179\n\u0102\3\u0103\3\u0103"+
		"\5\u0103\u117d\n\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u1182\n\u0103\3"+
		"\u0103\3\u0103\3\u0103\5\u0103\u1187\n\u0103\3\u0103\3\u0103\3\u0103\3"+
		"\u0103\5\u0103\u118d\n\u0103\5\u0103\u118f\n\u0103\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104"+
		"\u11a5\n\u0104\3\u0104\3\u0104\5\u0104\u11a9\n\u0104\5\u0104\u11ab\n\u0104"+
		"\3\u0105\3\u0105\5\u0105\u11af\n\u0105\3\u0105\3\u0105\3\u0106\3\u0106"+
		"\3\u0106\3\u0106\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u11bb\n\u0107"+
		"\3\u0108\3\u0108\3\u0108\7\u0108\u11c0\n\u0108\f\u0108\16\u0108\u11c3"+
		"\13\u0108\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u11cb"+
		"\n\u0109\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u11d2\n\u010a"+
		"\3\u010a\5\u010a\u11d5\n\u010a\3\u010a\3\u010a\5\u010a\u11d9\n\u010a\3"+
		"\u010a\5\u010a\u11dc\n\u010a\3\u010a\5\u010a\u11df\n\u010a\3\u010a\3\u010a"+
		"\5\u010a\u11e3\n\u010a\3\u010a\5\u010a\u11e6\n\u010a\3\u010a\3\u010a\5"+
		"\u010a\u11ea\n\u010a\3\u010a\5\u010a\u11ed\n\u010a\3\u010a\3\u010a\3\u010a"+
		"\5\u010a\u11f2\n\u010a\3\u010a\5\u010a\u11f5\n\u010a\3\u010a\3\u010a\3"+
		"\u010a\5\u010a\u11fa\n\u010a\3\u010a\5\u010a\u11fd\n\u010a\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u1206\n\u010a\3\u010a"+
		"\3\u010a\5\u010a\u120a\n\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a"+
		"\u1210\n\u010a\3\u010a\5\u010a\u1213\n\u010a\3\u010a\3\u010a\3\u010a\3"+
		"\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u121c\n\u010a\5\u010a\u121e\n\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u1224\n\u010a\3\u010a\3\u010a"+
		"\5\u010a\u1228\n\u010a\3\u010a\5\u010a\u122b\n\u010a\3\u010a\5\u010a\u122e"+
		"\n\u010a\3\u010a\3\u010a\5\u010a\u1232\n\u010a\3\u010a\3\u010a\3\u010a"+
		"\3\u010a\5\u010a\u1238\n\u010a\3\u010a\5\u010a\u123b\n\u010a\3\u010a\5"+
		"\u010a\u123e\n\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3"+
		"\u010a\3\u010a\5\u010a\u1248\n\u010a\3\u010a\3\u010a\5\u010a\u124c\n\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\7\u010a\u1253\n\u010a\f\u010a"+
		"\16\u010a\u1256\13\u010a\5\u010a\u1258\n\u010a\3\u010a\3\u010a\3\u010a"+
		"\5\u010a\u125d\n\u010a\3\u010a\5\u010a\u1260\n\u010a\3\u010a\5\u010a\u1263"+
		"\n\u010a\3\u010a\3\u010a\5\u010a\u1267\n\u010a\3\u010a\5\u010a\u126a\n"+
		"\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u126f\n\u010a\3\u010a\3\u010a\5"+
		"\u010a\u1273\n\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5"+
		"\u010a\u127b\n\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3"+
		"\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u1289\n\u010a\3"+
		"\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u129b"+
		"\n\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u12a0\n\u010a\3\u010a\3\u010a"+
		"\3\u010a\5\u010a\u12a5\n\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u12b0\n\u010a\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\5\u010b\u12b6\n\u010b\5\u010b\u12b8\n\u010b\3\u010c\3"+
		"\u010c\5\u010c\u12bc\n\u010c\3\u010c\5\u010c\u12bf\n\u010c\3\u010d\3\u010d"+
		"\3\u010e\3\u010e\3\u010e\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\5\u010f\u12cd\n\u010f\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\3\u0110\3\u0110\3\u0110\5\u0110\u12d7\n\u0110\3\u0110\3\u0110\5\u0110"+
		"\u12db\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110\7\u0110\u12e1\n\u0110\f"+
		"\u0110\16\u0110\u12e4\13\u0110\5\u0110\u12e6\n\u0110\3\u0110\3\u0110\5"+
		"\u0110\u12ea\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3"+
		"\u0110\3\u0110\5\u0110\u12f4\n\u0110\3\u0111\3\u0111\5\u0111\u12f8\n\u0111"+
		"\3\u0112\3\u0112\3\u0112\7\u0112\u12fd\n\u0112\f\u0112\16\u0112\u1300"+
		"\13\u0112\3\u0113\3\u0113\5\u0113\u1304\n\u0113\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\5\u0114\u130c\n\u0114\3\u0115\3\u0115\3\u0115"+
		"\5\u0115\u1311\n\u0115\3\u0115\3\u0115\3\u0116\3\u0116\5\u0116\u1317\n"+
		"\u0116\3\u0117\3\u0117\3\u0117\7\u0117\u131c\n\u0117\f\u0117\16\u0117"+
		"\u131f\13\u0117\3\u0118\3\u0118\5\u0118\u1323\n\u0118\3\u0118\3\u0118"+
		"\3\u0118\3\u0118\5\u0118\u1329\n\u0118\3\u0118\3\u0118\3\u0118\3\u0118"+
		"\3\u0118\5\u0118\u1330\n\u0118\3\u0119\3\u0119\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\5\u011a\u133a\n\u011a\5\u011a\u133c\n\u011a\3"+
		"\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u1344\n\u011b\3"+
		"\u011c\3\u011c\3\u011c\5\u011c\u1349\n\u011c\3\u011c\3\u011c\5\u011c\u134d"+
		"\n\u011c\3\u011c\5\u011c\u1350\n\u011c\3\u011d\3\u011d\3\u011d\7\u011d"+
		"\u1355\n\u011d\f\u011d\16\u011d\u1358\13\u011d\3\u011e\3\u011e\5\u011e"+
		"\u135c\n\u011e\3\u011e\3\u011e\5\u011e\u1360\n\u011e\3\u011f\3\u011f\3"+
		"\u011f\3\u011f\3\u011f\3\u011f\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120"+
		"\u136c\n\u0120\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\5\u0121"+
		"\u1374\n\u0121\3\u0121\3\u0121\5\u0121\u1378\n\u0121\3\u0121\5\u0121\u137b"+
		"\n\u0121\3\u0121\5\u0121\u137e\n\u0121\3\u0122\3\u0122\5\u0122\u1382\n"+
		"\u0122\3\u0122\3\u0122\5\u0122\u1386\n\u0122\3\u0122\7\u0122\u1389\n\u0122"+
		"\f\u0122\16\u0122\u138c\13\u0122\3\u0123\3\u0123\3\u0123\5\u0123\u1391"+
		"\n\u0123\3\u0124\3\u0124\5\u0124\u1395\n\u0124\3\u0124\3\u0124\3\u0125"+
		"\3\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u13a0\n\u0126"+
		"\3\u0126\5\u0126\u13a3\n\u0126\3\u0126\5\u0126\u13a6\n\u0126\3\u0126\5"+
		"\u0126\u13a9\n\u0126\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\5"+
		"\u0127\u13b1\n\u0127\3\u0128\3\u0128\5\u0128\u13b5\n\u0128\3\u0128\7\u0128"+
		"\u13b8\n\u0128\f\u0128\16\u0128\u13bb\13\u0128\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u0129\5\u0129\u13c2\n\u0129\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\5\u012a\u13ca\n\u012a\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\5\u012b\u13d0\n\u012b\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\5\u012c\u13db\n\u012c\3\u012c\3\u012c\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u13e5\n\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\5\u012d\u13eb\n\u012d\3\u012e\3\u012e\3\u012e"+
		"\3\u012f\3\u012f\3\u012f\3\u0130\3\u0130\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\5\u0131\u13f9\n\u0131\3\u0131\5\u0131\u13fc\n\u0131\3\u0131\3\u0131\5"+
		"\u0131\u1400\n\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3"+
		"\u0131\3\u0131\3\u0131\7\u0131\u140b\n\u0131\f\u0131\16\u0131\u140e\13"+
		"\u0131\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u1416\n"+
		"\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\3\u0132\3\u0132\7\u0132\u1424\n\u0132\f\u0132\16\u0132"+
		"\u1427\13\u0132\3\u0133\3\u0133\3\u0134\3\u0134\5\u0134\u142d\n\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1433\n\u0134\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u143b\n\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1446"+
		"\n\u0135\3\u0135\3\u0135\5\u0135\u144a\n\u0135\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\7\u0136\u1467\n\u0136"+
		"\f\u0136\16\u0136\u146a\13\u0136\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137"+
		"\u1470\n\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137"+
		"\u1481\n\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137\u1488\n"+
		"\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137"+
		"\u14a3\n\u0137\3\u0137\3\u0137\3\u0137\6\u0137\u14a8\n\u0137\r\u0137\16"+
		"\u0137\u14a9\3\u0137\5\u0137\u14ad\n\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\5\u0137\u14cf\n\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\7\u0137\u14d7\n\u0137\f\u0137\16\u0137\u14da\13\u0137\3\u0138"+
		"\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\5\u0138\u14e2\n\u0138\3\u0139"+
		"\3\u0139\3\u0139\5\u0139\u14e7\n\u0139\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\5\u0139\u14ed\n\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\5\u0139\u14f5\n\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139"+
		"\u14fc\n\u0139\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1502\n\u0139\3"+
		"\u0139\3\u0139\3\u0139\5\u0139\u1507\n\u0139\3\u0139\3\u0139\3\u0139\3"+
		"\u0139\5\u0139\u150d\n\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1512\n\u0139"+
		"\3\u0139\3\u0139\3\u0139\5\u0139\u1517\n\u0139\3\u0139\3\u0139\3\u0139"+
		"\3\u0139\5\u0139\u151d\n\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1522\n"+
		"\u0139\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1528\n\u0139\3\u0139\3"+
		"\u0139\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1530\n\u0139\3\u0139\3"+
		"\u0139\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1538\n\u0139\3\u0139\3"+
		"\u0139\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1540\n\u0139\3\u0139\3"+
		"\u0139\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1548\n\u0139\3\u0139\3"+
		"\u0139\3\u0139\5\u0139\u154d\n\u0139\3\u0139\3\u0139\3\u0139\3\u0139\5"+
		"\u0139\u1553\n\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1558\n\u0139\3\u0139"+
		"\3\u0139\5\u0139\u155c\n\u0139\3\u0139\3\u0139\5\u0139\u1560\n\u0139\3"+
		"\u0139\3\u0139\3\u0139\5\u0139\u1565\n\u0139\5\u0139\u1567\n\u0139\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b"+
		"\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b"+
		"\5\u013b\u157c\n\u013b\3\u013b\3\u013b\5\u013b\u1580\n\u013b\3\u013b\3"+
		"\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b\u1589\n\u013b\3"+
		"\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b"+
		"\3\u013b\5\u013b\u1595\n\u013b\3\u013b\5\u013b\u1598\n\u013b\3\u013b\3"+
		"\u013b\5\u013b\u159c\n\u013b\3\u013c\3\u013c\3\u013c\5\u013c\u15a1\n\u013c"+
		"\3\u013d\3\u013d\3\u013d\5\u013d\u15a6\n\u013d\3\u013d\3\u013d\5\u013d"+
		"\u15aa\n\u013d\3\u013e\3\u013e\3\u013e\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\5\u013f\u15b4\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\5\u013f\u15bd\n\u013f\5\u013f\u15bf\n\u013f\3\u0140\5"+
		"\u0140\u15c2\n\u0140\3\u0140\3\u0140\3\u0141\3\u0141\3\u0141\3\u0141\3"+
		"\u0141\5\u0141\u15cb\n\u0141\3\u0142\3\u0142\3\u0142\7\u0142\u15d0\n\u0142"+
		"\f\u0142\16\u0142\u15d3\13\u0142\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\5\u0143\u15dc\n\u0143\3\u0143\3\u0143\3\u0143\5\u0143"+
		"\u15e1\n\u0143\5\u0143\u15e3\n\u0143\3\u0144\3\u0144\3\u0144\3\u0144\3"+
		"\u0144\5\u0144\u15ea\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u15f0"+
		"\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\6\u0144\u1611\n\u0144\r\u0144"+
		"\16\u0144\u1612\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u163e"+
		"\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u1658"+
		"\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u165e\n\u0144\3\u0144"+
		"\3\u0144\5\u0144\u1662\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\5\u0144\u167d\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u1689\n\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\5\u0144\u1696\n\u0144\3\u0144\3\u0144\5\u0144\u169a\n"+
		"\u0144\3\u0144\3\u0144\5\u0144\u169e\n\u0144\3\u0144\3\u0144\3\u0144\3"+
		"\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u16c3\n\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\5\u0144\u1707\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u1712\n\u0144\3\u0144"+
		"\3\u0144\5\u0144\u1716\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u1722\n\u0144\3\u0144"+
		"\3\u0144\3\u0144\5\u0144\u1727\n\u0144\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u1734"+
		"\n\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\5\u0145\u1748\n\u0145\3\u0146\3\u0146\5\u0146\u174c\n\u0146\3"+
		"\u0146\3\u0146\3\u0147\3\u0147\3\u0147\3\u0148\3\u0148\3\u0148\3\u0148"+
		"\3\u0148\3\u0148\3\u0148\3\u0148\7\u0148\u175b\n\u0148\f\u0148\16\u0148"+
		"\u175e\13\u0148\5\u0148\u1760\n\u0148\3\u0149\3\u0149\3\u0149\5\u0149"+
		"\u1765\n\u0149\3\u0149\5\u0149\u1768\n\u0149\3\u014a\3\u014a\3\u014b\3"+
		"\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u1771\n\u014b\3\u014b\3\u014b\5"+
		"\u014b\u1775\n\u014b\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u177b\n\u014b"+
		"\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u1781\n\u014b\3\u014b\3\u014b"+
		"\5\u014b\u1785\n\u014b\3\u014b\3\u014b\3\u014c\3\u014c\3\u014c\3\u014c"+
		"\3\u014c\3\u014c\3\u014c\5\u014c\u1790\n\u014c\3\u014c\3\u014c\3\u014c"+
		"\3\u014c\5\u014c\u1796\n\u014c\5\u014c\u1798\n\u014c\3\u014c\3\u014c\3"+
		"\u014d\3\u014d\3\u014d\5\u014d\u179f\n\u014d\3\u014d\3\u014d\3\u014d\3"+
		"\u014d\3\u014d\5\u014d\u17a6\n\u014d\3\u014d\3\u014d\5\u014d\u17aa\n\u014d"+
		"\3\u014e\3\u014e\3\u014e\7\u014e\u17af\n\u014e\f\u014e\16\u014e\u17b2"+
		"\13\u014e\3\u014f\3\u014f\5\u014f\u17b6\n\u014f\3\u0150\3\u0150\3\u0150"+
		"\5\u0150\u17bb\n\u0150\3\u0150\5\u0150\u17be\n\u0150\3\u0151\3\u0151\3"+
		"\u0151\5\u0151\u17c3\n\u0151\3\u0152\3\u0152\5\u0152\u17c7\n\u0152\3\u0152"+
		"\3\u0152\5\u0152\u17cb\n\u0152\3\u0153\3\u0153\5\u0153\u17cf\n\u0153\3"+
		"\u0153\3\u0153\5\u0153\u17d3\n\u0153\3\u0154\3\u0154\3\u0154\3\u0155\3"+
		"\u0155\3\u0155\3\u0156\3\u0156\3\u0156\3\u0157\3\u0157\5\u0157\u17e0\n"+
		"\u0157\3\u0157\3\u0157\5\u0157\u17e4\n\u0157\3\u0157\5\u0157\u17e7\n\u0157"+
		"\3\u0157\3\u0157\5\u0157\u17eb\n\u0157\3\u0157\3\u0157\5\u0157\u17ef\n"+
		"\u0157\3\u0157\3\u0157\5\u0157\u17f3\n\u0157\3\u0157\3\u0157\3\u0157\5"+
		"\u0157\u17f8\n\u0157\3\u0157\3\u0157\5\u0157\u17fc\n\u0157\3\u0157\3\u0157"+
		"\5\u0157\u1800\n\u0157\3\u0157\3\u0157\5\u0157\u1804\n\u0157\3\u0158\3"+
		"\u0158\3\u0158\7\u0158\u1809\n\u0158\f\u0158\16\u0158\u180c\13\u0158\3"+
		"\u0159\3\u0159\3\u0159\5\u0159\u1811\n\u0159\3\u015a\3\u015a\3\u015b\3"+
		"\u015b\3\u015c\3\u015c\5\u015c\u1819\n\u015c\3\u015d\3\u015d\3\u015e\3"+
		"\u015e\3\u015e\3\u015e\3\u015f\3\u015f\3\u015f\7\u015f\u1824\n\u015f\f"+
		"\u015f\16\u015f\u1827\13\u015f\3\u0160\3\u0160\5\u0160\u182b\n\u0160\3"+
		"\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\5\u0162\u183f\n\u0162\3\u0163\3\u0163\3\u0163\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165"+
		"\u184f\n\u0165\3\u0166\3\u0166\3\u0166\3\u0167\3\u0167\3\u0167\6\u0167"+
		"\u1857\n\u0167\r\u0167\16\u0167\u1858\3\u0168\3\u0168\5\u0168\u185d\n"+
		"\u0168\3\u0168\3\u0168\3\u0168\6\u0168\u1862\n\u0168\r\u0168\16\u0168"+
		"\u1863\3\u0168\5\u0168\u1867\n\u0168\3\u0168\3\u0168\3\u0168\3\u0169\3"+
		"\u0169\3\u0169\3\u016a\3\u016a\3\u016a\5\u016a\u1872\n\u016a\3\u016b\3"+
		"\u016b\3\u016c\3\u016c\3\u016c\3\u016d\3\u016d\5\u016d\u187b\n\u016d\3"+
		"\u016d\5\u016d\u187e\n\u016d\3\u016d\3\u016d\3\u016e\3\u016e\3\u016e\5"+
		"\u016e\u1885\n\u016e\3\u016f\3\u016f\3\u016f\5\u016f\u188a\n\u016f\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171"+
		"\3\u0171\3\u0171\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172"+
		"\3\u0173\3\u0173\3\u0173\6\u0173\u18a2\n\u0173\r\u0173\16\u0173\u18a3"+
		"\3\u0174\3\u0174\3\u0174\3\u0174\5\u0174\u18aa\n\u0174\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\5\u0175\u18b1\n\u0175\3\u0175\3\u0175\5\u0175"+
		"\u18b5\n\u0175\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0177"+
		"\3\u0177\5\u0177\u18bf\n\u0177\3\u0178\3\u0178\5\u0178\u18c3\n\u0178\3"+
		"\u0178\3\u0178\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\7\u0179\u18ce\n\u0179\f\u0179\16\u0179\u18d1\13\u0179\3\u0179\3\u0179"+
		"\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u18dc"+
		"\n\u017a\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017c\3\u017c"+
		"\3\u017c\3\u017d\3\u017d\3\u017d\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e"+
		"\u18ee\n\u017e\3\u017e\3\u017e\3\u017e\3\u017e\7\u017e\u18f4\n\u017e\f"+
		"\u017e\16\u017e\u18f7\13\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\7\u017e\u18fe\n\u017e\f\u017e\16\u017e\u1901\13\u017e\5\u017e\u1903\n"+
		"\u017e\3\u017f\3\u017f\3\u017f\5\u017f\u1908\n\u017f\3\u0180\3\u0180\5"+
		"\u0180\u190c\n\u0180\3\u0180\3\u0180\3\u0180\3\u0181\3\u0181\5\u0181\u1913"+
		"\n\u0181\3\u0181\3\u0181\3\u0181\5\u0181\u1918\n\u0181\3\u0182\3\u0182"+
		"\3\u0183\3\u0183\3\u0183\5\u0183\u191f\n\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\7\u0183\u1925\n\u0183\f\u0183\16\u0183\u1928\13\u0183\5\u0183"+
		"\u192a\n\u0183\3\u0184\3\u0184\3\u0184\5\u0184\u192f\n\u0184\3\u0184\5"+
		"\u0184\u1932\n\u0184\3\u0184\3\u0184\3\u0184\3\u0184\7\u0184\u1938\n\u0184"+
		"\f\u0184\16\u0184\u193b\13\u0184\5\u0184\u193d\n\u0184\3\u0185\3\u0185"+
		"\3\u0185\3\u0185\3\u0186\3\u0186\3\u0186\3\u0187\3\u0187\3\u0187\3\u0188"+
		"\3\u0188\3\u0188\3\u0188\3\u0188\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189"+
		"\3\u0189\3\u0189\5\u0189\u1955\n\u0189\3\u0189\3\u0189\5\u0189\u1959\n"+
		"\u0189\5\u0189\u195b\n\u0189\3\u018a\3\u018a\3\u018a\3\u018a\5\u018a\u1961"+
		"\n\u018a\3\u018a\3\u018a\5\u018a\u1965\n\u018a\3\u018b\3\u018b\5\u018b"+
		"\u1969\n\u018b\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c\3\u018d\3\u018d"+
		"\5\u018d\u1972\n\u018d\3\u018d\3\u018d\7\u018d\u1976\n\u018d\f\u018d\16"+
		"\u018d\u1979\13\u018d\3\u018d\3\u018d\5\u018d\u197d\n\u018d\3\u018d\5"+
		"\u018d\u1980\n\u018d\3\u018d\3\u018d\7\u018d\u1984\n\u018d\f\u018d\16"+
		"\u018d\u1987\13\u018d\3\u018d\3\u018d\5\u018d\u198b\n\u018d\3\u018d\5"+
		"\u018d\u198e\n\u018d\3\u018d\3\u018d\7\u018d\u1992\n\u018d\f\u018d\16"+
		"\u018d\u1995\13\u018d\3\u018d\3\u018d\5\u018d\u1999\n\u018d\5\u018d\u199b"+
		"\n\u018d\3\u018d\3\u018d\3\u018d\5\u018d\u19a0\n\u018d\3\u018d\3\u018d"+
		"\7\u018d\u19a4\n\u018d\f\u018d\16\u018d\u19a7\13\u018d\3\u018d\3\u018d"+
		"\5\u018d\u19ab\n\u018d\3\u018d\5\u018d\u19ae\n\u018d\3\u018d\3\u018d\7"+
		"\u018d\u19b2\n\u018d\f\u018d\16\u018d\u19b5\13\u018d\3\u018d\3\u018d\3"+
		"\u018d\5\u018d\u19ba\n\u018d\3\u018d\3\u018d\3\u018d\3\u018d\5\u018d\u19c0"+
		"\n\u018d\5\u018d\u19c2\n\u018d\3\u018e\3\u018e\7\u018e\u19c6\n\u018e\f"+
		"\u018e\16\u018e\u19c9\13\u018e\3\u018e\3\u018e\3\u018e\5\u018e\u19ce\n"+
		"\u018e\3\u018e\3\u018e\5\u018e\u19d2\n\u018e\3\u018e\3\u018e\3\u018e\3"+
		"\u018e\3\u018e\5\u018e\u19d9\n\u018e\3\u018e\3\u018e\7\u018e\u19dd\n\u018e"+
		"\f\u018e\16\u018e\u19e0\13\u018e\3\u018e\3\u018e\7\u018e\u19e4\n\u018e"+
		"\f\u018e\16\u018e\u19e7\13\u018e\5\u018e\u19e9\n\u018e\5\u018e\u19eb\n"+
		"\u018e\3\u018f\5\u018f\u19ee\n\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3"+
		"\u018f\5\u018f\u19f5\n\u018f\5\u018f\u19f7\n\u018f\3\u018f\3\u018f\3\u018f"+
		"\3\u018f\5\u018f\u19fd\n\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f"+
		"\3\u018f\5\u018f\u1a05\n\u018f\3\u018f\5\u018f\u1a08\n\u018f\3\u018f\3"+
		"\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f"+
		"\3\u018f\3\u018f\5\u018f\u1a16\n\u018f\3\u0190\3\u0190\5\u0190\u1a1a\n"+
		"\u0190\3\u0190\3\u0190\3\u0190\5\u0190\u1a1f\n\u0190\3\u0190\3\u0190\5"+
		"\u0190\u1a23\n\u0190\3\u0190\5\u0190\u1a26\n\u0190\3\u0191\3\u0191\3\u0191"+
		"\5\u0191\u1a2b\n\u0191\3\u0191\3\u0191\5\u0191\u1a2f\n\u0191\3\u0191\3"+
		"\u0191\3\u0191\3\u0191\3\u0191\3\u0191\5\u0191\u1a37\n\u0191\3\u0191\3"+
		"\u0191\3\u0191\3\u0191\3\u0191\3\u0191\5\u0191\u1a3f\n\u0191\5\u0191\u1a41"+
		"\n\u0191\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u1a48\n\u0192"+
		"\3\u0193\3\u0193\3\u0193\3\u0193\7\u0193\u1a4e\n\u0193\f\u0193\16\u0193"+
		"\u1a51\13\u0193\3\u0193\3\u0193\3\u0194\3\u0194\5\u0194\u1a57\n\u0194"+
		"\3\u0194\5\u0194\u1a5a\n\u0194\3\u0195\3\u0195\3\u0196\3\u0196\5\u0196"+
		"\u1a60\n\u0196\3\u0197\3\u0197\5\u0197\u1a64\n\u0197\3\u0197\3\u0197\3"+
		"\u0197\3\u0197\3\u0197\3\u0197\5\u0197\u1a6c\n\u0197\3\u0198\3\u0198\3"+
		"\u0199\3\u0199\3\u0199\3\u019a\3\u019a\3\u019a\3\u019a\5\u019a\u1a77\n"+
		"\u019a\3\u019b\3\u019b\3\u019c\3\u019c\3\u019c\3\u019d\3\u019d\5\u019d"+
		"\u1a80\n\u019d\3\u019d\5\u019d\u1a83\n\u019d\3\u019d\3\u019d\3\u019d\5"+
		"\u019d\u1a88\n\u019d\5\u019d\u1a8a\n\u019d\3\u019d\5\u019d\u1a8d\n\u019d"+
		"\3\u019d\5\u019d\u1a90\n\u019d\3\u019d\3\u019d\5\u019d\u1a94\n\u019d\3"+
		"\u019d\5\u019d\u1a97\n\u019d\3\u019d\3\u019d\5\u019d\u1a9b\n\u019d\3\u019d"+
		"\3\u019d\3\u019d\5\u019d\u1aa0\n\u019d\3\u019d\5\u019d\u1aa3\n\u019d\3"+
		"\u019d\3\u019d\5\u019d\u1aa7\n\u019d\3\u019d\5\u019d\u1aaa\n\u019d\3\u019d"+
		"\3\u019d\5\u019d\u1aae\n\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u1ab3\n"+
		"\u019d\3\u019d\3\u019d\5\u019d\u1ab7\n\u019d\3\u019d\3\u019d\3\u019d\3"+
		"\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u1ac3\n"+
		"\u019d\3\u019d\3\u019d\5\u019d\u1ac7\n\u019d\3\u019d\3\u019d\3\u019d\3"+
		"\u019d\5\u019d\u1acd\n\u019d\3\u019d\5\u019d\u1ad0\n\u019d\3\u019d\3\u019d"+
		"\3\u019d\5\u019d\u1ad5\n\u019d\3\u019d\3\u019d\5\u019d\u1ad9\n\u019d\3"+
		"\u019d\3\u019d\5\u019d\u1add\n\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u1ae2"+
		"\n\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d"+
		"\u1aeb\n\u019d\3\u019d\5\u019d\u1aee\n\u019d\3\u019d\3\u019d\5\u019d\u1af2"+
		"\n\u019d\3\u019d\3\u019d\5\u019d\u1af6\n\u019d\3\u019d\5\u019d\u1af9\n"+
		"\u019d\3\u019d\3\u019d\5\u019d\u1afd\n\u019d\3\u019d\3\u019d\5\u019d\u1b01"+
		"\n\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u1b06\n\u019d\3\u019d\3\u019d"+
		"\3\u019d\5\u019d\u1b0b\n\u019d\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d"+
		"\u1b11\n\u019d\3\u019e\3\u019e\3\u019e\5\u019e\u1b16\n\u019e\3\u019f\3"+
		"\u019f\3\u019f\5\u019f\u1b1b\n\u019f\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3"+
		"\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\5\u01a0\u1b27\n\u01a0\3"+
		"\u01a1\3\u01a1\3\u01a1\5\u01a1\u1b2c\n\u01a1\3\u01a1\3\u01a1\3\u01a2\6"+
		"\u01a2\u1b31\n\u01a2\r\u01a2\16\u01a2\u1b32\3\u01a3\3\u01a3\3\u01a3\3"+
		"\u01a3\3\u01a3\3\u01a3\5\u01a3\u1b3b\n\u01a3\3\u01a3\3\u01a3\3\u01a3\3"+
		"\u01a3\5\u01a3\u1b41\n\u01a3\5\u01a3\u1b43\n\u01a3\3\u01a4\3\u01a4\5\u01a4"+
		"\u1b47\n\u01a4\3\u01a4\3\u01a4\3\u01a4\5\u01a4\u1b4c\n\u01a4\3\u01a5\3"+
		"\u01a5\5\u01a5\u1b50\n\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u1b55\n\u01a5"+
		"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7"+
		"\3\u01a8\3\u01a8\3\u01a8\3\u01a8\5\u01a8\u1b64\n\u01a8\3\u01a9\3\u01a9"+
		"\3\u01a9\5\u01a9\u1b69\n\u01a9\3\u01aa\3\u01aa\5\u01aa\u1b6d\n\u01aa\3"+
		"\u01aa\7\u01aa\u1b70\n\u01aa\f\u01aa\16\u01aa\u1b73\13\u01aa\3\u01ab\6"+
		"\u01ab\u1b76\n\u01ab\r\u01ab\16\u01ab\u1b77\3\u01ac\3\u01ac\5\u01ac\u1b7c"+
		"\n\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1b82\n\u01ac\3\u01ac"+
		"\3\u01ac\3\u01ac\5\u01ac\u1b87\n\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac"+
		"\u1b8c\n\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1b91\n\u01ac\3\u01ac\3"+
		"\u01ac\3\u01ac\5\u01ac\u1b96\n\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1b9b"+
		"\n\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1ba1\n\u01ac\3\u01ac"+
		"\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1ba7\n\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\5\u01ac\u1bac\n\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1bb1\n\u01ac\3"+
		"\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1bb7\n\u01ac\3\u01ac\3\u01ac\3"+
		"\u01ac\5\u01ac\u1bbc\n\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1bc1\n\u01ac"+
		"\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1bc6\n\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\5\u01ac\u1bcb\n\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\3\u01ac\3\u01ac\5\u01ac\u1bd5\n\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\5\u01ac\u1bdb\n\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1be1\n"+
		"\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1be7\n\u01ac\3\u01ac\5"+
		"\u01ac\u1bea\n\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1bf1"+
		"\n\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1bf6\n\u01ac\3\u01ac\5\u01ac"+
		"\u1bf9\n\u01ac\3\u01ad\3\u01ad\5\u01ad\u1bfd\n\u01ad\3\u01ae\5\u01ae\u1c00"+
		"\n\u01ae\3\u01ae\3\u01ae\5\u01ae\u1c04\n\u01ae\3\u01ae\3\u01ae\3\u01af"+
		"\5\u01af\u1c09\n\u01af\3\u01af\3\u01af\5\u01af\u1c0d\n\u01af\3\u01af\3"+
		"\u01af\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\5\u01b0\u1c17\n"+
		"\u01b0\3\u01b0\5\u01b0\u1c1a\n\u01b0\3\u01b0\5\u01b0\u1c1d\n\u01b0\3\u01b1"+
		"\5\u01b1\u1c20\n\u01b1\3\u01b1\3\u01b1\5\u01b1\u1c24\n\u01b1\3\u01b1\3"+
		"\u01b1\5\u01b1\u1c28\n\u01b1\3\u01b1\3\u01b1\5\u01b1\u1c2c\n\u01b1\3\u01b1"+
		"\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1"+
		"\3\u01b1\3\u01b1\3\u01b1\3\u01b1\5\u01b1\u1c3c\n\u01b1\3\u01b1\5\u01b1"+
		"\u1c3f\n\u01b1\5\u01b1\u1c41\n\u01b1\3\u01b2\3\u01b2\3\u01b2\5\u01b2\u1c46"+
		"\n\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\5\u01b2"+
		"\u1c4f\n\u01b2\3\u01b2\5\u01b2\u1c52\n\u01b2\3\u01b2\3\u01b2\5\u01b2\u1c56"+
		"\n\u01b2\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b4\3\u01b4\3\u01b4"+
		"\3\u01b4\7\u01b4\u1c61\n\u01b4\f\u01b4\16\u01b4\u1c64\13\u01b4\3\u01b4"+
		"\3\u01b4\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5"+
		"\u1c6f\n\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1c74\n\u01b5\3\u01b5\7"+
		"\u01b5\u1c77\n\u01b5\f\u01b5\16\u01b5\u1c7a\13\u01b5\3\u01b5\3\u01b5\3"+
		"\u01b5\3\u01b5\7\u01b5\u1c80\n\u01b5\f\u01b5\16\u01b5\u1c83\13\u01b5\3"+
		"\u01b5\3\u01b5\5\u01b5\u1c87\n\u01b5\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3"+
		"\u01b6\7\u01b6\u1c8e\n\u01b6\f\u01b6\16\u01b6\u1c91\13\u01b6\3\u01b6\3"+
		"\u01b6\5\u01b6\u1c95\n\u01b6\3\u01b7\3\u01b7\5\u01b7\u1c99\n\u01b7\3\u01b7"+
		"\3\u01b7\5\u01b7\u1c9d\n\u01b7\3\u01b7\3\u01b7\5\u01b7\u1ca1\n\u01b7\3"+
		"\u01b7\3\u01b7\3\u01b7\5\u01b7\u1ca6\n\u01b7\3\u01b7\3\u01b7\3\u01b7\5"+
		"\u01b7\u1cab\n\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\5\u01b7\u1cb1\n\u01b7"+
		"\3\u01b7\3\u01b7\3\u01b7\5\u01b7\u1cb6\n\u01b7\3\u01b7\5\u01b7\u1cb9\n"+
		"\u01b7\3\u01b8\3\u01b8\3\u01b8\7\u01b8\u1cbe\n\u01b8\f\u01b8\16\u01b8"+
		"\u1cc1\13\u01b8\3\u01b9\3\u01b9\3\u01b9\3\u01b9\7\u01b9\u1cc7\n\u01b9"+
		"\f\u01b9\16\u01b9\u1cca\13\u01b9\3\u01b9\3\u01b9\3\u01ba\3\u01ba\5\u01ba"+
		"\u1cd0\n\u01ba\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bc\3\u01bc\3\u01bc"+
		"\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01be\5\u01be\u1cde\n\u01be\3\u01be"+
		"\3\u01be\3\u01bf\3\u01bf\3\u01bf\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1ce8"+
		"\n\u01c0\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c2\3\u01c2"+
		"\3\u01c2\7\u01c2\u1cf3\n\u01c2\f\u01c2\16\u01c2\u1cf6\13\u01c2\3\u01c3"+
		"\3\u01c3\3\u01c3\7\u01c3\u1cfb\n\u01c3\f\u01c3\16\u01c3\u1cfe\13\u01c3"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1d04\n\u01c4\3\u01c5\3\u01c5"+
		"\3\u01c5\3\u01c6\3\u01c6\6\u01c6\u1d0b\n\u01c6\r\u01c6\16\u01c6\u1d0c"+
		"\3\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7\u1d13\n\u01c7\3\u01c7\3\u01c7"+
		"\3\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7\u1d1b\n\u01c7\3\u01c8\3\u01c8"+
		"\6\u01c8\u1d1f\n\u01c8\r\u01c8\16\u01c8\u1d20\3\u01c9\3\u01c9\3\u01c9"+
		"\3\u01c9\3\u01ca\3\u01ca\3\u01ca\7\u01ca\u1d2a\n\u01ca\f\u01ca\16\u01ca"+
		"\u1d2d\13\u01ca\3\u01cb\3\u01cb\3\u01cb\7\u01cb\u1d32\n\u01cb\f\u01cb"+
		"\16\u01cb\u1d35\13\u01cb\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc"+
		"\u1d3c\n\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc"+
		"\5\u01cc\u1d45\n\u01cc\3\u01cc\5\u01cc\u1d48\n\u01cc\5\u01cc\u1d4a\n\u01cc"+
		"\5\u01cc\u1d4c\n\u01cc\3\u01cd\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1d52\n"+
		"\u01cd\3\u01cd\3\u01cd\5\u01cd\u1d56\n\u01cd\5\u01cd\u1d58\n\u01cd\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01cf\3\u01cf\5\u01cf\u1d5f\n\u01cf\3\u01d0\3\u01d0"+
		"\3\u01d0\3\u01d1\3\u01d1\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d3\3\u01d3"+
		"\3\u01d3\5\u01d3\u1d6d\n\u01d3\5\u01d3\u1d6f\n\u01d3\3\u01d4\3\u01d4\3"+
		"\u01d5\3\u01d5\3\u01d5\3\u01d5\7\u01d5\u1d77\n\u01d5\f\u01d5\16\u01d5"+
		"\u1d7a\13\u01d5\3\u01d5\3\u01d5\3\u01d6\3\u01d6\3\u01d7\3\u01d7\5\u01d7"+
		"\u1d82\n\u01d7\3\u01d8\3\u01d8\3\u01d9\3\u01d9\3\u01da\3\u01da\3\u01da"+
		"\3\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u1d8f\n\u01da\3\u01db\3\u01db"+
		"\3\u01dc\3\u01dc\3\u01dd\3\u01dd\3\u01de\3\u01de\3\u01df\3\u01df\3\u01e0"+
		"\3\u01e0\3\u01e1\3\u01e1\3\u01e2\3\u01e2\3\u01e3\3\u01e3\5\u01e3\u1da3"+
		"\n\u01e3\3\u01e4\3\u01e4\5\u01e4\u1da7\n\u01e4\3\u01e5\3\u01e5\3\u01e6"+
		"\3\u01e6\3\u01e7\3\u01e7\3\u01e8\3\u01e8\3\u01e9\3\u01e9\3\u01ea\3\u01ea"+
		"\3\u01eb\3\u01eb\3\u01ec\3\u01ec\3\u01ed\3\u01ed\3\u01ee\3\u01ee\3\u01ef"+
		"\3\u01ef\5\u01ef\u1dbf\n\u01ef\3\u01f0\3\u01f0\3\u01f0\3\u01f1\3\u01f1"+
		"\3\u01f1\3\u01f1\3\u01f1\3\u01f1\5\u01f1\u1dca\n\u01f1\5\u01f1\u1dcc\n"+
		"\u01f1\3\u01f2\3\u01f2\5\u01f2\u1dd0\n\u01f2\3\u01f3\3\u01f3\3\u01f3\7"+
		"\u01f3\u1dd5\n\u01f3\f\u01f3\16\u01f3\u1dd8\13\u01f3\3\u01f4\3\u01f4\3"+
		"\u01f4\7\u01f4\u1ddd\n\u01f4\f\u01f4\16\u01f4\u1de0\13\u01f4\3\u01f5\3"+
		"\u01f5\3\u01f6\3\u01f6\5\u01f6\u1de6\n\u01f6\3\u01f7\3\u01f7\3\u01f8\3"+
		"\u01f8\5\u01f8\u1dec\n\u01f8\3\u01f9\3\u01f9\3\u01fa\3\u01fa\3\u01fb\3"+
		"\u01fb\3\u01fc\3\u01fc\3\u01fd\3\u01fd\3\u01fe\3\u01fe\3\u01fe\5\u01fe"+
		"\u1dfb\n\u01fe\3\u01ff\3\u01ff\5\u01ff\u1dff\n\u01ff\3\u0200\3\u0200\3"+
		"\u0200\7\u0200\u1e04\n\u0200\f\u0200\16\u0200\u1e07\13\u0200\3\u0201\3"+
		"\u0201\3\u0201\3\u0201\3\u0202\3\u0202\5\u0202\u1e0f\n\u0202\3\u0203\3"+
		"\u0203\3\u0203\5\u0203\u1e14\n\u0203\5\u0203\u1e16\n\u0203\3\u0203\3\u0203"+
		"\3\u0203\3\u0203\5\u0203\u1e1c\n\u0203\3\u0204\3\u0204\3\u0204\3\u0205"+
		"\3\u0205\3\u0206\3\u0206\3\u0207\3\u0207\3\u0208\3\u0208\3\u0209\3\u0209"+
		"\3\u0209\3\u0209\3\u0209\3\u0209\5\u0209\u1e2f\n\u0209\3\u0209\3\u0209"+
		"\3\u0209\5\u0209\u1e34\n\u0209\3\u0209\5\u0209\u1e37\n\u0209\3\u020a\3"+
		"\u020a\3\u020a\3\u020a\3\u020a\5\u020a\u1e3e\n\u020a\3\u020b\3\u020b\3"+
		"\u020b\3\u020b\7\u020b\u1e44\n\u020b\f\u020b\16\u020b\u1e47\13\u020b\3"+
		"\u020b\3\u020b\3\u020c\3\u020c\3\u020c\5\u020c\u1e4e\n\u020c\3\u020d\3"+
		"\u020d\3\u020d\5\u020d\u1e53\n\u020d\3\u020e\5\u020e\u1e56\n\u020e\3\u020e"+
		"\3\u020e\5\u020e\u1e5a\n\u020e\3\u020e\7\u020e\u1e5d\n\u020e\f\u020e\16"+
		"\u020e\u1e60\13\u020e\3\u020f\3\u020f\3\u020f\3\u0210\3\u0210\3\u0210"+
		"\7\u0210\u1e68\n\u0210\f\u0210\16\u0210\u1e6b\13\u0210\3\u0211\3\u0211"+
		"\3\u0212\3\u0212\3\u0213\3\u0213\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214"+
		"\3\u0214\5\u0214\u1e79\n\u0214\3\u0215\3\u0215\5\u0215\u1e7d\n\u0215\3"+
		"\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0217\3\u0217\5\u0217"+
		"\u1e87\n\u0217\3\u0218\3\u0218\5\u0218\u1e8b\n\u0218\3\u0219\3\u0219\5"+
		"\u0219\u1e8f\n\u0219\3\u021a\3\u021a\3\u021a\3\u021b\3\u021b\3\u021c\3"+
		"\u021c\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\5\u021d\u1e9e\n"+
		"\u021d\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\5\u021e\u1eaa\n\u021e\3\u021f\3\u021f\3\u021f\3\u021f"+
		"\3\u021f\3\u021f\3\u021f\5\u021f\u1eb3\n\u021f\3\u0220\3\u0220\3\u0220"+
		"\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\5\u0220\u1ebf"+
		"\n\u0220\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\5\u0221\u1ec6\n\u0221"+
		"\3\u0222\3\u0222\3\u0222\3\u0222\3\u0222\3\u0222\3\u0222\5\u0222\u1ecf"+
		"\n\u0222\3\u0223\3\u0223\5\u0223\u1ed3\n\u0223\3\u0223\2\7\u00ee\u0260"+
		"\u0262\u026a\u026c\u0224\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&("+
		"*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084"+
		"\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c"+
		"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4"+
		"\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc"+
		"\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4"+
		"\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc"+
		"\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114"+
		"\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c"+
		"\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144"+
		"\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c"+
		"\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174"+
		"\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c"+
		"\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4"+
		"\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc"+
		"\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4"+
		"\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec"+
		"\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204"+
		"\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c"+
		"\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234"+
		"\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c"+
		"\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264"+
		"\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c"+
		"\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294"+
		"\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac"+
		"\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4"+
		"\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc"+
		"\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4"+
		"\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c"+
		"\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324"+
		"\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c"+
		"\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354"+
		"\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c"+
		"\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384"+
		"\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c"+
		"\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4"+
		"\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc"+
		"\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4"+
		"\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc"+
		"\u03fe\u0400\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410\u0412\u0414"+
		"\u0416\u0418\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a\u042c"+
		"\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c\u043e\u0440\u0442\u0444"+
		"\2\u008c\4\2\u00ef\u00ef\u0174\u0174\4\2\u01b1\u01b1\u028f\u028f\4\2\u01c0"+
		"\u01c0\u0263\u0263\4\2\u02ac\u02ac\u02af\u02af\4\2\u01ac\u01ac\u01e9\u01e9"+
		"\4\2\u010f\u010f\u0259\u0259\4\2OO\u00b6\u00b6\4\2\u020a\u020a\u0260\u0260"+
		"\6\2\u014b\u014b\u01de\u01de\u0213\u0213\u025a\u025a\4\2uu\u00a3\u00a3"+
		"\4\2\u0113\u0113\u016a\u016a\4\2\u0112\u0112\u0169\u0169\5\2\u00d9\u00d9"+
		"\u015a\u015a\u0168\u0168\4\2==\u01b4\u01b4\5\2\u01e2\u01e2\u0210\u0210"+
		"\u0299\u0299\4\2\25\25$$\4\2\u0156\u0156\u0289\u0289\5\2\u010e\u010e\u020a"+
		"\u020a\u022c\u022c\4\2\u0096\u0096\u00ed\u00ed\6\2\u0096\u0096\u00b0\u00b0"+
		"\u00ed\u00ed\u0105\u0105\4\2\u0181\u0181\u0184\u0187\5\2\u01e1\u01e1\u0205"+
		"\u0205\u022c\u022c\4\2\u0172\u0172\u02a1\u02a1\4\2cc\u022c\u022c\4\2\u012c"+
		"\u012c\u0223\u0223\4\2\u01e1\u01e1\u022c\u022c\b\2\u0141\u0141\u01ad\u01ad"+
		"\u01e6\u01e6\u0205\u0205\u0277\u0279\u0282\u0282\4\2\u00f4\u00f4\u0198"+
		"\u0198\4\2\u017e\u0180\u01a6\u01a6\5\2\u012c\u012c\u0256\u0256\u02cd\u02cd"+
		"\4\2\u01b2\u01b2\u01e3\u01e3\4\2\u021f\u021f\u0266\u0266\4\2\u01ce\u01ce"+
		"\u020d\u020d\4\2\u01ad\u01ad\u01e6\u01e6\4\2\u0181\u0181\u01b1\u01b1\4"+
		"\2\u01f9\u01f9\u020a\u020a\4\2\u020b\u020b\u021b\u021b\4\2\u0247\u0247"+
		"\u02b0\u02b0\4\2]]\u0167\u0167\4\2\7\7\62\62\4\2\u0125\u0125\u0219\u0219"+
		"\4\2\u00bb\u00bb\u01b7\u01b7\4\2\u013d\u013d\u013f\u013f\4\2\u0119\u0119"+
		"\u0143\u0143\3\2\62\63\4\2\20\20\u01e9\u01e9\5\2\u00f1\u00f1\u0178\u0178"+
		"\u027b\u027b\4\2\u0226\u0226\u0297\u0297\4\2\u00ec\u00ec\u01e0\u01e0\5"+
		"\2\u0166\u0166\u0254\u0254\u0289\u0289\6\2\u0210\u0210\u025b\u025b\u0268"+
		"\u0268\u0299\u0299\17\2\23\23::\u0087\u0087\u0093\u0093\u0107\u0107\u010b"+
		"\u010b\u011a\u011a\u0151\u0151\u01e2\u01e2\u01e9\u01e9\u020b\u020b\u0291"+
		"\u0291\u029a\u029a\6\2\u012b\u012b\u0158\u0158\u016e\u016e\u0171\u0171"+
		"\4\2//UU\4\2\u01cd\u01cd\u01e9\u01e9\4\2\u00f1\u00f1\u01e0\u01e0\4\2\u008c"+
		"\u008c\u010e\u010e\7\2RR\u008c\u008c\u008f\u008f\u00d7\u00d7\u010e\u010e"+
		"\5\2\u008c\u008c\u010e\u010e\u016f\u016f\6\2\u01ad\u01ad\u01b7\u01b7\u01e0"+
		"\u01e0\u0245\u0245\4\2\u012f\u012f\u02e8\u02e8\5\2\u00b9\u00b9\u00e5\u00e5"+
		"\u0149\u0149\4\2\u01fd\u01fd\u0214\u0214\4\2II\u0116\u0116\5\2\u00a5\u00a5"+
		"\u020b\u020b\u021a\u021a\4\2\u0085\u0085\u0173\u0173\4\2\u0149\u0149\u0170"+
		"\u0170\b\2kk\u00aa\u00aa\u00d8\u00d8\u013c\u013c\u0153\u0153\u01ad\u01ad"+
		"\4\2dd\u010d\u010d\7\2ww\u009f\u009f\u0106\u0106\u0149\u0149\u016d\u016d"+
		"\7\2\u0082\u0082\u0084\u0084\u0098\u0098\u0139\u0139\u01b7\u01b7\4\2\u016e"+
		"\u016e\u02e8\u02e8\4\2zz\u0091\u0091\3\2\u01e3\u01e4\5\2\u016b\u016b\u01f6"+
		"\u01f6\u0293\u0293\4\2\u0192\u0192\u01b0\u01b0\4\2\u0195\u0195\u024d\u024d"+
		"\4\2BB\u01ad\u01ad\4\2\u0181\u0181\u0183\u0188\5\2\u018b\u018d\u01e7\u01e7"+
		"\u023a\u023a\3\2\u0189\u018a\3\2\u0190\u0191\4\2\u0189\u018a\u018f\u018f"+
		"\3\2\u01b9\u01bb\6\2\u02c8\u02c9\u02d6\u02d6\u02d8\u02d8\u02da\u02da\4"+
		"\2\u02ce\u02ce\u02d0\u02d0\4\2\u00b0\u00b0\u02cb\u02cb\4\2\u0096\u0096"+
		"\u00b0\u00b0\4\2\u020a\u020a\u02d9\u02d9\4\2<<\u014d\u014d\3\2\u01d7\u01d8"+
		"\3\2\u0160\u0161\5\2qr\u015f\u015f\u0162\u0162\4\2\u017c\u017c\u023f\u023f"+
		"\4\2\u017c\u017c\u018e\u018e\7\2\u01d9\u01dc\u0206\u0208\u0236\u0237\u0267"+
		"\u0267\u02b2\u02b2\f\2ss\u00a0\u00a0\u00db\u00db\u00dd\u00dd\u00e1\u00e1"+
		"\u010c\u010c\u0133\u0133\u0175\u0175\u017b\u017b\u01fc\u01fc\5\2\u01ca"+
		"\u01ca\u01f3\u01f3\u0294\u0294\4\2\u00f2\u00f2\u012d\u012d\f\2PPVVZZf"+
		"hnn\u00da\u00da\u00e6\u00e6\u0132\u0132\u014c\u014c\u0155\u0155\4\2\u0281"+
		"\u0281\u02a8\u02a8\5\2\177\177\u0097\u0097\u01e0\u01e0\5\2||\u00d8\u00d8"+
		"\u01e0\u01e0\5\2\u0092\u0092\u00fa\u00fa\u0137\u0137\5\2NN\u009e\u009e"+
		"\u0130\u0130\3\2\u02b7\u02b8\4\2\u0164\u0164\u029c\u029c\7\2\u01b6\u01b6"+
		"\u0213\u0213\u0233\u0233\u0271\u0271\u028d\u028d\6\2\u0097\u0097\u01de"+
		"\u01de\u01f8\u01f8\u0243\u0243\3\2LM\4\2\u0227\u0227\u0232\u0232\6\2\u0099"+
		"\u009a\u00b4\u00b4\u00e2\u00e4\u0102\u0103\5\2..\u0298\u0298\u02b3\u02b3"+
		"\3\2\u0146\u0148\4\2\13\13\u0157\u0157\b\2^^``\177\177\u0097\u0097\u0114"+
		"\u0114\u01e0\u01e0\5\2\35\35\u0096\u0096\u00b0\u00b0\4\2||\u00d8\u00d8"+
		"\4\2\u00b5\u00b5\u0256\u0256\4\2\u00ba\u00ba\u00de\u00de\4\2oo\u020b\u020b"+
		"\5\2\u020e\u020e\u0214\u0214\u0250\u0250\4\2\u027c\u027c\u028a\u028a\4"+
		"\2\u0244\u0244\u0246\u0246\4\2\u00b6\u00b6\u0241\u0241\4\2\u02f4\u02f4"+
		"\u02f6\u02f6\5\2\u017e\u0180\u01a7\u01a7\u01a9\u01aa\4\2\u017e\u0180\u01a7"+
		"\u01a7\4\2\u017e\u0180\u01a9\u01aa\3\2\u017e\u0180\4\2\u01f6\u01f6\u0293"+
		"\u0293\4\2\u01a5\u01a5\u0242\u0242\3\2\u0181\u0182\7\2\u009d\u009d\u00b6"+
		"\u00b6\u0136\u0136\u02b4\u02b4\u02c3\u02c3\7\2\3\22\249\u02b5\u02b5\u02b7"+
		"\u02b8\u02c7\u02c7\34\2;@Bkm\u0086\u0088\u0092\u0094\u00a3\u00a5\u00f0"+
		"\u00f2\u0106\u0108\u010a\u010c\u0119\u011b\u011c\u011e\u012b\u012d\u012e"+
		"\u0130\u0165\u0167\u017b\u01af\u01af\u02ba\u02ba\u02bf\u02c1\u02c4\u02c6"+
		"\u02ca\u02ca\u02cc\u02cc\u02d3\u02d4\u02d7\u02d7\u02d9\u02d9\u02db\u02dc"+
		"\u02e0\u02e6\u02e9\u02ea\7\2ll\u00a4\u00a4\u012c\u012c\u012f\u012f\u0166"+
		"\u0166\b\2\u0151\u0151\u01f1\u01f1\u01f4\u01f4\u0247\u0247\u02a0\u02a0"+
		"\u02af\u02af\2\u22f8\2\u0452\3\2\2\2\4\u0478\3\2\2\2\6\u047a\3\2\2\2\b"+
		"\u0496\3\2\2\2\n\u04a5\3\2\2\2\f\u04cb\3\2\2\2\16\u04d4\3\2\2\2\20\u04ec"+
		"\3\2\2\2\22\u04ee\3\2\2\2\24\u04f3\3\2\2\2\26\u050b\3\2\2\2\30\u0514\3"+
		"\2\2\2\32\u0516\3\2\2\2\34\u0524\3\2\2\2\36\u0588\3\2\2\2 \u058c\3\2\2"+
		"\2\"\u059e\3\2\2\2$\u0611\3\2\2\2&\u0616\3\2\2\2(\u0618\3\2\2\2*\u061a"+
		"\3\2\2\2,\u0625\3\2\2\2.\u062d\3\2\2\2\60\u0635\3\2\2\2\62\u0640\3\2\2"+
		"\2\64\u0644\3\2\2\2\66\u064a\3\2\2\28\u064c\3\2\2\2:\u0657\3\2\2\2<\u069b"+
		"\3\2\2\2>\u06ac\3\2\2\2@\u06af\3\2\2\2B\u06bc\3\2\2\2D\u06c1\3\2\2\2F"+
		"\u06c5\3\2\2\2H\u06dd\3\2\2\2J\u06df\3\2\2\2L\u06ed\3\2\2\2N\u06ef\3\2"+
		"\2\2P\u0710\3\2\2\2R\u071a\3\2\2\2T\u071d\3\2\2\2V\u0726\3\2\2\2X\u0728"+
		"\3\2\2\2Z\u072f\3\2\2\2\\\u0736\3\2\2\2^\u074d\3\2\2\2`\u0766\3\2\2\2"+
		"b\u0776\3\2\2\2d\u0779\3\2\2\2f\u078e\3\2\2\2h\u0790\3\2\2\2j\u07c4\3"+
		"\2\2\2l\u07c6\3\2\2\2n\u07ca\3\2\2\2p\u07d4\3\2\2\2r\u07fb\3\2\2\2t\u07fd"+
		"\3\2\2\2v\u0806\3\2\2\2x\u0820\3\2\2\2z\u0822\3\2\2\2|\u0831\3\2\2\2~"+
		"\u0868\3\2\2\2\u0080\u086a\3\2\2\2\u0082\u087e\3\2\2\2\u0084\u0880\3\2"+
		"\2\2\u0086\u0884\3\2\2\2\u0088\u0888\3\2\2\2\u008a\u0897\3\2\2\2\u008c"+
		"\u089b\3\2\2\2\u008e\u08bb\3\2\2\2\u0090\u08dd\3\2\2\2\u0092\u08ee\3\2"+
		"\2\2\u0094\u0900\3\2\2\2\u0096\u0902\3\2\2\2\u0098\u0909\3\2\2\2\u009a"+
		"\u0910\3\2\2\2\u009c\u0917\3\2\2\2\u009e\u091e\3\2\2\2\u00a0\u0929\3\2"+
		"\2\2\u00a2\u0942\3\2\2\2\u00a4\u0944\3\2\2\2\u00a6\u094b\3\2\2\2\u00a8"+
		"\u0957\3\2\2\2\u00aa\u0966\3\2\2\2\u00ac\u096d\3\2\2\2\u00ae\u0976\3\2"+
		"\2\2\u00b0\u097d\3\2\2\2\u00b2\u0986\3\2\2\2\u00b4\u0990\3\2\2\2\u00b6"+
		"\u0994\3\2\2\2\u00b8\u099a\3\2\2\2\u00ba\u099f\3\2\2\2\u00bc\u09aa\3\2"+
		"\2\2\u00be\u09d1\3\2\2\2\u00c0\u09d7\3\2\2\2\u00c2\u09d9\3\2\2\2\u00c4"+
		"\u09e0\3\2\2\2\u00c6\u09fe\3\2\2\2\u00c8\u0a00\3\2\2\2\u00ca\u0a17\3\2"+
		"\2\2\u00cc\u0a1e\3\2\2\2\u00ce\u0a22\3\2\2\2\u00d0\u0a2a\3\2\2\2\u00d2"+
		"\u0a34\3\2\2\2\u00d4\u0a36\3\2\2\2\u00d6\u0a48\3\2\2\2\u00d8\u0a54\3\2"+
		"\2\2\u00da\u0a5a\3\2\2\2\u00dc\u0a7e\3\2\2\2\u00de\u0a80\3\2\2\2\u00e0"+
		"\u0a89\3\2\2\2\u00e2\u0a92\3\2\2\2\u00e4\u0a9a\3\2\2\2\u00e6\u0aa6\3\2"+
		"\2\2\u00e8\u0aba\3\2\2\2\u00ea\u0ac3\3\2\2\2\u00ec\u0ae7\3\2\2\2\u00ee"+
		"\u0af4\3\2\2\2\u00f0\u0b04\3\2\2\2\u00f2\u0b0b\3\2\2\2\u00f4\u0b26\3\2"+
		"\2\2\u00f6\u0b28\3\2\2\2\u00f8\u0b2a\3\2\2\2\u00fa\u0b2d\3\2\2\2\u00fc"+
		"\u0b30\3\2\2\2\u00fe\u0b37\3\2\2\2\u0100\u0b39\3\2\2\2\u0102\u0b57\3\2"+
		"\2\2\u0104\u0b63\3\2\2\2\u0106\u0b66\3\2\2\2\u0108\u0b6f\3\2\2\2\u010a"+
		"\u0b73\3\2\2\2\u010c\u0b78\3\2\2\2\u010e\u0b84\3\2\2\2\u0110\u0b89\3\2"+
		"\2\2\u0112\u0b8d\3\2\2\2\u0114\u0b9d\3\2\2\2\u0116\u0b9f\3\2\2\2\u0118"+
		"\u0bb1\3\2\2\2\u011a\u0bb3\3\2\2\2\u011c\u0bbc\3\2\2\2\u011e\u0bc8\3\2"+
		"\2\2\u0120\u0bcf\3\2\2\2\u0122\u0bda\3\2\2\2\u0124\u0bdc\3\2\2\2\u0126"+
		"\u0be0\3\2\2\2\u0128\u0be2\3\2\2\2\u012a\u0be7\3\2\2\2\u012c\u0bf7\3\2"+
		"\2\2\u012e\u0c08\3\2\2\2\u0130\u0c0d\3\2\2\2\u0132\u0c12\3\2\2\2\u0134"+
		"\u0c16\3\2\2\2\u0136\u0c24\3\2\2\2\u0138\u0c27\3\2\2\2\u013a\u0c2d\3\2"+
		"\2\2\u013c\u0c36\3\2\2\2\u013e\u0c51\3\2\2\2\u0140\u0c5e\3\2\2\2\u0142"+
		"\u0c65\3\2\2\2\u0144\u0c67\3\2\2\2\u0146\u0c74\3\2\2\2\u0148\u0c76\3\2"+
		"\2\2\u014a\u0c80\3\2\2\2\u014c\u0c87\3\2\2\2\u014e\u0c8d\3\2\2\2\u0150"+
		"\u0c96\3\2\2\2\u0152\u0c9d\3\2\2\2\u0154\u0ca6\3\2\2\2\u0156\u0cc5\3\2"+
		"\2\2\u0158\u0ccf\3\2\2\2\u015a\u0cd1\3\2\2\2\u015c\u0cd5\3\2\2\2\u015e"+
		"\u0cdd\3\2\2\2\u0160\u0cdf\3\2\2\2\u0162\u0ce2\3\2\2\2\u0164\u0ce6\3\2"+
		"\2\2\u0166\u0d02\3\2\2\2\u0168\u0d04\3\2\2\2\u016a\u0d06\3\2\2\2\u016c"+
		"\u0d08\3\2\2\2\u016e\u0d10\3\2\2\2\u0170\u0d1a\3\2\2\2\u0172\u0d1e\3\2"+
		"\2\2\u0174\u0d37\3\2\2\2\u0176\u0d52\3\2\2\2\u0178\u0d54\3\2\2\2\u017a"+
		"\u0d5e\3\2\2\2\u017c\u0d66\3\2\2\2\u017e\u0d6d\3\2\2\2\u0180\u0d8c\3\2"+
		"\2\2\u0182\u0da4\3\2\2\2\u0184\u0da6\3\2\2\2\u0186\u0db4\3\2\2\2\u0188"+
		"\u0db6\3\2\2\2\u018a\u0dd9\3\2\2\2\u018c\u0ddb\3\2\2\2\u018e\u0e06\3\2"+
		"\2\2\u0190\u0e16\3\2\2\2\u0192\u0e18\3\2\2\2\u0194\u0e1c\3\2\2\2\u0196"+
		"\u0e25\3\2\2\2\u0198\u0e2c\3\2\2\2\u019a\u0e7a\3\2\2\2\u019c\u0e88\3\2"+
		"\2\2\u019e\u0e8a\3\2\2\2\u01a0\u0e97\3\2\2\2\u01a2\u0ed7\3\2\2\2\u01a4"+
		"\u0ed9\3\2\2\2\u01a6\u0ee1\3\2\2\2\u01a8\u0ee9\3\2\2\2\u01aa\u0ef1\3\2"+
		"\2\2\u01ac\u0ef3\3\2\2\2\u01ae\u0f10\3\2\2\2\u01b0\u0f19\3\2\2\2\u01b2"+
		"\u0f38\3\2\2\2\u01b4\u0f3a\3\2\2\2\u01b6\u0f42\3\2\2\2\u01b8\u0f44\3\2"+
		"\2\2\u01ba\u0f52\3\2\2\2\u01bc\u0f54\3\2\2\2\u01be\u0f5a\3\2\2\2\u01c0"+
		"\u0f62\3\2\2\2\u01c2\u0f7b\3\2\2\2\u01c4\u0f7d\3\2\2\2\u01c6\u0f98\3\2"+
		"\2\2\u01c8\u0f9a\3\2\2\2\u01ca\u0fb0\3\2\2\2\u01cc\u0fb9\3\2\2\2\u01ce"+
		"\u0fbb\3\2\2\2\u01d0\u0fc0\3\2\2\2\u01d2\u0fe7\3\2\2\2\u01d4\u0fe9\3\2"+
		"\2\2\u01d6\u0ff1\3\2\2\2\u01d8\u1020\3\2\2\2\u01da\u102d\3\2\2\2\u01dc"+
		"\u102f\3\2\2\2\u01de\u1032\3\2\2\2\u01e0\u1041\3\2\2\2\u01e2\u1074\3\2"+
		"\2\2\u01e4\u1076\3\2\2\2\u01e6\u1078\3\2\2\2\u01e8\u108d\3\2\2\2\u01ea"+
		"\u10be\3\2\2\2\u01ec\u10cb\3\2\2\2\u01ee\u10cd\3\2\2\2\u01f0\u10dd\3\2"+
		"\2\2\u01f2\u10e9\3\2\2\2\u01f4\u1102\3\2\2\2\u01f6\u1104\3\2\2\2\u01f8"+
		"\u110c\3\2\2\2\u01fa\u114a\3\2\2\2\u01fc\u1159\3\2\2\2\u01fe\u115e\3\2"+
		"\2\2\u0200\u1160\3\2\2\2\u0202\u1178\3\2\2\2\u0204\u117a\3\2\2\2\u0206"+
		"\u11aa\3\2\2\2\u0208\u11ac\3\2\2\2\u020a\u11b2\3\2\2\2\u020c\u11ba\3\2"+
		"\2\2\u020e\u11bc\3\2\2\2\u0210\u11ca\3\2\2\2\u0212\u11cc\3\2\2\2\u0214"+
		"\u12b7\3\2\2\2\u0216\u12be\3\2\2\2\u0218\u12c0\3\2\2\2\u021a\u12c2\3\2"+
		"\2\2\u021c\u12cc\3\2\2\2\u021e\u12f3\3\2\2\2\u0220\u12f7\3\2\2\2\u0222"+
		"\u12f9\3\2\2\2\u0224\u1301\3\2\2\2\u0226\u1305\3\2\2\2\u0228\u130d\3\2"+
		"\2\2\u022a\u1316\3\2\2\2\u022c\u1318\3\2\2\2\u022e\u132f\3\2\2\2\u0230"+
		"\u1331\3\2\2\2\u0232\u1333\3\2\2\2\u0234\u1343\3\2\2\2\u0236\u134f\3\2"+
		"\2\2\u0238\u1351\3\2\2\2\u023a\u1359\3\2\2\2\u023c\u1361\3\2\2\2\u023e"+
		"\u136b\3\2\2\2\u0240\u136d\3\2\2\2\u0242\u137f\3\2\2\2\u0244\u138d\3\2"+
		"\2\2\u0246\u1392\3\2\2\2\u0248\u1398\3\2\2\2\u024a\u139a\3\2\2\2\u024c"+
		"\u13aa\3\2\2\2\u024e\u13b2\3\2\2\2\u0250\u13bc\3\2\2\2\u0252\u13c9\3\2"+
		"\2\2\u0254\u13cb\3\2\2\2\u0256\u13d1\3\2\2\2\u0258\u13ea\3\2\2\2\u025a"+
		"\u13ec\3\2\2\2\u025c\u13ef\3\2\2\2\u025e\u13f2\3\2\2\2\u0260\u13ff\3\2"+
		"\2\2\u0262\u140f\3\2\2\2\u0264\u1428\3\2\2\2\u0266\u142a\3\2\2\2\u0268"+
		"\u1449\3\2\2\2\u026a\u144b\3\2\2\2\u026c\u14ce\3\2\2\2\u026e\u14e1\3\2"+
		"\2\2\u0270\u1566\3\2\2\2\u0272\u1568\3\2\2\2\u0274\u159b\3\2\2\2\u0276"+
		"\u159d\3\2\2\2\u0278\u15a2\3\2\2\2\u027a\u15ab\3\2\2\2\u027c\u15be\3\2"+
		"\2\2\u027e\u15c1\3\2\2\2\u0280\u15ca\3\2\2\2\u0282\u15cc\3\2\2\2\u0284"+
		"\u15e2\3\2\2\2\u0286\u1726\3\2\2\2\u0288\u1747\3\2\2\2\u028a\u1749\3\2"+
		"\2\2\u028c\u174f\3\2\2\2\u028e\u1752\3\2\2\2\u0290\u1761\3\2\2\2\u0292"+
		"\u1769\3\2\2\2\u0294\u176b\3\2\2\2\u0296\u1788\3\2\2\2\u0298\u17a9\3\2"+
		"\2\2\u029a\u17ab\3\2\2\2\u029c\u17b3\3\2\2\2\u029e\u17bd\3\2\2\2\u02a0"+
		"\u17c2\3\2\2\2\u02a2\u17c4\3\2\2\2\u02a4\u17d2\3\2\2\2\u02a6\u17d4\3\2"+
		"\2\2\u02a8\u17d7\3\2\2\2\u02aa\u17da\3\2\2\2\u02ac\u1803\3\2\2\2\u02ae"+
		"\u1805\3\2\2\2\u02b0\u1810\3\2\2\2\u02b2\u1812\3\2\2\2\u02b4\u1814\3\2"+
		"\2\2\u02b6\u1818\3\2\2\2\u02b8\u181a\3\2\2\2\u02ba\u181c\3\2\2\2\u02bc"+
		"\u1820\3\2\2\2\u02be\u1828\3\2\2\2\u02c0\u182c\3\2\2\2\u02c2\u183e\3\2"+
		"\2\2\u02c4\u1840\3\2\2\2\u02c6\u1843\3\2\2\2\u02c8\u1848\3\2\2\2\u02ca"+
		"\u1850\3\2\2\2\u02cc\u1856\3\2\2\2\u02ce\u185a\3\2\2\2\u02d0\u186b\3\2"+
		"\2\2\u02d2\u186e\3\2\2\2\u02d4\u1873\3\2\2\2\u02d6\u1875\3\2\2\2\u02d8"+
		"\u1878\3\2\2\2\u02da\u1881\3\2\2\2\u02dc\u1889\3\2\2\2\u02de\u188b\3\2"+
		"\2\2\u02e0\u1890\3\2\2\2\u02e2\u1897\3\2\2\2\u02e4\u18a1\3\2\2\2\u02e6"+
		"\u18a9\3\2\2\2\u02e8\u18ab\3\2\2\2\u02ea\u18b6\3\2\2\2\u02ec\u18be\3\2"+
		"\2\2\u02ee\u18c0\3\2\2\2\u02f0\u18c6\3\2\2\2\u02f2\u18db\3\2\2\2\u02f4"+
		"\u18dd\3\2\2\2\u02f6\u18e3\3\2\2\2\u02f8\u18e6\3\2\2\2\u02fa\u18e9\3\2"+
		"\2\2\u02fc\u1907\3\2\2\2\u02fe\u190b\3\2\2\2\u0300\u1912\3\2\2\2\u0302"+
		"\u1919\3\2\2\2\u0304\u191b\3\2\2\2\u0306\u192b\3\2\2\2\u0308\u193e\3\2"+
		"\2\2\u030a\u1942\3\2\2\2\u030c\u1945\3\2\2\2\u030e\u1948\3\2\2\2\u0310"+
		"\u195a\3\2\2\2\u0312\u1960\3\2\2\2\u0314\u1968\3\2\2\2\u0316\u196a\3\2"+
		"\2\2\u0318\u19c1\3\2\2\2\u031a\u19c3\3\2\2\2\u031c\u1a15\3\2\2\2\u031e"+
		"\u1a25\3\2\2\2\u0320\u1a27\3\2\2\2\u0322\u1a47\3\2\2\2\u0324\u1a49\3\2"+
		"\2\2\u0326\u1a54\3\2\2\2\u0328\u1a5b\3\2\2\2\u032a\u1a5f\3\2\2\2\u032c"+
		"\u1a6b\3\2\2\2\u032e\u1a6d\3\2\2\2\u0330\u1a6f\3\2\2\2\u0332\u1a76\3\2"+
		"\2\2\u0334\u1a78\3\2\2\2\u0336\u1a7a\3\2\2\2\u0338\u1b10\3\2\2\2\u033a"+
		"\u1b15\3\2\2\2\u033c\u1b1a\3\2\2\2\u033e\u1b26\3\2\2\2\u0340\u1b28\3\2"+
		"\2\2\u0342\u1b30\3\2\2\2\u0344\u1b42\3\2\2\2\u0346\u1b4b\3\2\2\2\u0348"+
		"\u1b54\3\2\2\2\u034a\u1b56\3\2\2\2\u034c\u1b5a\3\2\2\2\u034e\u1b63\3\2"+
		"\2\2\u0350\u1b68\3\2\2\2\u0352\u1b6a\3\2\2\2\u0354\u1b75\3\2\2\2\u0356"+
		"\u1bf8\3\2\2\2\u0358\u1bfc\3\2\2\2\u035a\u1bff\3\2\2\2\u035c\u1c08\3\2"+
		"\2\2\u035e\u1c10\3\2\2\2\u0360\u1c40\3\2\2\2\u0362\u1c42\3\2\2\2\u0364"+
		"\u1c57\3\2\2\2\u0366\u1c5c\3\2\2\2\u0368\u1c67\3\2\2\2\u036a\u1c94\3\2"+
		"\2\2\u036c\u1cb8\3\2\2\2\u036e\u1cba\3\2\2\2\u0370\u1cc2\3\2\2\2\u0372"+
		"\u1ccf\3\2\2\2\u0374\u1cd1\3\2\2\2\u0376\u1cd5\3\2\2\2\u0378\u1cd8\3\2"+
		"\2\2\u037a\u1cdd\3\2\2\2\u037c\u1ce1\3\2\2\2\u037e\u1ce4\3\2\2\2\u0380"+
		"\u1ce9\3\2\2\2\u0382\u1cef\3\2\2\2\u0384\u1cf7\3\2\2\2\u0386\u1cff\3\2"+
		"\2\2\u0388\u1d05\3\2\2\2\u038a\u1d08\3\2\2\2\u038c\u1d1a\3\2\2\2\u038e"+
		"\u1d1c\3\2\2\2\u0390\u1d22\3\2\2\2\u0392\u1d26\3\2\2\2\u0394\u1d2e\3\2"+
		"\2\2\u0396\u1d36\3\2\2\2\u0398\u1d57\3\2\2\2\u039a\u1d59\3\2\2\2\u039c"+
		"\u1d5e\3\2\2\2\u039e\u1d60\3\2\2\2\u03a0\u1d63\3\2\2\2\u03a2\u1d65\3\2"+
		"\2\2\u03a4\u1d6e\3\2\2\2\u03a6\u1d70\3\2\2\2\u03a8\u1d72\3\2\2\2\u03aa"+
		"\u1d7d\3\2\2\2\u03ac\u1d81\3\2\2\2\u03ae\u1d83\3\2\2\2\u03b0\u1d85\3\2"+
		"\2\2\u03b2\u1d87\3\2\2\2\u03b4\u1d90\3\2\2\2\u03b6\u1d92\3\2\2\2\u03b8"+
		"\u1d94\3\2\2\2\u03ba\u1d96\3\2\2\2\u03bc\u1d98\3\2\2\2\u03be\u1d9a\3\2"+
		"\2\2\u03c0\u1d9c\3\2\2\2\u03c2\u1d9e\3\2\2\2\u03c4\u1da2\3\2\2\2\u03c6"+
		"\u1da6\3\2\2\2\u03c8\u1da8\3\2\2\2\u03ca\u1daa\3\2\2\2\u03cc\u1dac\3\2"+
		"\2\2\u03ce\u1dae\3\2\2\2\u03d0\u1db0\3\2\2\2\u03d2\u1db2\3\2\2\2\u03d4"+
		"\u1db4\3\2\2\2\u03d6\u1db6\3\2\2\2\u03d8\u1db8\3\2\2\2\u03da\u1dba\3\2"+
		"\2\2\u03dc\u1dbe\3\2\2\2\u03de\u1dc0\3\2\2\2\u03e0\u1dc3\3\2\2\2\u03e2"+
		"\u1dcf\3\2\2\2\u03e4\u1dd1\3\2\2\2\u03e6\u1dd9\3\2\2\2\u03e8\u1de1\3\2"+
		"\2\2\u03ea\u1de5\3\2\2\2\u03ec\u1de7\3\2\2\2\u03ee\u1deb\3\2\2\2\u03f0"+
		"\u1ded\3\2\2\2\u03f2\u1def\3\2\2\2\u03f4\u1df1\3\2\2\2\u03f6\u1df3\3\2"+
		"\2\2\u03f8\u1df5\3\2\2\2\u03fa\u1dfa\3\2\2\2\u03fc\u1dfe\3\2\2\2\u03fe"+
		"\u1e00\3\2\2\2\u0400\u1e08\3\2\2\2\u0402\u1e0c\3\2\2\2\u0404\u1e1b\3\2"+
		"\2\2\u0406\u1e1d\3\2\2\2\u0408\u1e20\3\2\2\2\u040a\u1e22\3\2\2\2\u040c"+
		"\u1e24\3\2\2\2\u040e\u1e26\3\2\2\2\u0410\u1e36\3\2\2\2\u0412\u1e3d\3\2"+
		"\2\2\u0414\u1e3f\3\2\2\2\u0416\u1e4d\3\2\2\2\u0418\u1e52\3\2\2\2\u041a"+
		"\u1e59\3\2\2\2\u041c\u1e61\3\2\2\2\u041e\u1e64\3\2\2\2\u0420\u1e6c\3\2"+
		"\2\2\u0422\u1e6e\3\2\2\2\u0424\u1e70\3\2\2\2\u0426\u1e78\3\2\2\2\u0428"+
		"\u1e7c\3\2\2\2\u042a\u1e7e\3\2\2\2\u042c\u1e86\3\2\2\2\u042e\u1e8a\3\2"+
		"\2\2\u0430\u1e8e\3\2\2\2\u0432\u1e90\3\2\2\2\u0434\u1e93\3\2\2\2\u0436"+
		"\u1e95\3\2\2\2\u0438\u1e9d\3\2\2\2\u043a\u1ea9\3\2\2\2\u043c\u1eb2\3\2"+
		"\2\2\u043e\u1ebe\3\2\2\2\u0440\u1ec5\3\2\2\2\u0442\u1ece";
	private static final String _serializedATNSegment1 =
		"\3\2\2\2\u0444\u1ed2\3\2\2\2\u0446\u0453\7\2\2\3\u0447\u044a\5\4\3\2\u0448"+
		"\u044a\5\u0178\u00bd\2\u0449\u0447\3\2\2\2\u0449\u0448\3\2\2\2\u044a\u0450"+
		"\3\2\2\2\u044b\u044d\7\u0199\2\2\u044c\u044e\7\2\2\3\u044d\u044c\3\2\2"+
		"\2\u044d\u044e\3\2\2\2\u044e\u0451\3\2\2\2\u044f\u0451\7\2\2\3\u0450\u044b"+
		"\3\2\2\2\u0450\u044f\3\2\2\2\u0451\u0453\3\2\2\2\u0452\u0446\3\2\2\2\u0452"+
		"\u0449\3\2\2\2\u0453\3\3\2\2\2\u0454\u0479\5\6\4\2\u0455\u0479\5H%\2\u0456"+
		"\u0479\5\u0094K\2\u0457\u0479\5\u00b2Z\2\u0458\u0479\5\u00b6\\\2\u0459"+
		"\u045a\6\3\2\2\u045a\u0479\5\u00b8]\2\u045b\u0479\5\u00ba^\2\u045c\u0479"+
		"\5\u00bc_\2\u045d\u0479\5\u00c2b\2\u045e\u0479\5\u00c4c\2\u045f\u0479"+
		"\5\u00c8e\2\u0460\u0479\5\u00dan\2\u0461\u0479\5\u00e6t\2\u0462\u0479"+
		"\5\u00e8u\2\u0463\u0479\5\u0172\u00ba\2\u0464\u0479\5\u0174\u00bb\2\u0465"+
		"\u0479\5\u018e\u00c8\2\u0466\u0479\5\u01ba\u00de\2\u0467\u0468\6\3\3\2"+
		"\u0468\u0479\5\u01c0\u00e1\2\u0469\u0479\5\u01c2\u00e2\2\u046a\u0479\5"+
		"\u01fa\u00fe\2\u046b\u0479\5\u0202\u0102\2\u046c\u0479\5\u0204\u0103\2"+
		"\u046d\u0479\5\u0212\u010a\2\u046e\u046f\6\3\4\2\u046f\u0479\5\u023e\u0120"+
		"\2\u0470\u0479\5\u021e\u0110\2\u0471\u0479\5\u0252\u012a\2\u0472\u0473"+
		"\6\3\5\2\u0473\u0479\5\u02fa\u017e\2\u0474\u0475\6\3\6\2\u0475\u0479\5"+
		"\u0304\u0183\2\u0476\u0477\6\3\7\2\u0477\u0479\5\u0306\u0184\2\u0478\u0454"+
		"\3\2\2\2\u0478\u0455\3\2\2\2\u0478\u0456\3\2\2\2\u0478\u0457\3\2\2\2\u0478"+
		"\u0458\3\2\2\2\u0478\u0459\3\2\2\2\u0478\u045b\3\2\2\2\u0478\u045c\3\2"+
		"\2\2\u0478\u045d\3\2\2\2\u0478\u045e\3\2\2\2\u0478\u045f\3\2\2\2\u0478"+
		"\u0460\3\2\2\2\u0478\u0461\3\2\2\2\u0478\u0462\3\2\2\2\u0478\u0463\3\2"+
		"\2\2\u0478\u0464\3\2\2\2\u0478\u0465\3\2\2\2\u0478\u0466\3\2\2\2\u0478"+
		"\u0467\3\2\2\2\u0478\u0469\3\2\2\2\u0478\u046a\3\2\2\2\u0478\u046b\3\2"+
		"\2\2\u0478\u046c\3\2\2\2\u0478\u046d\3\2\2\2\u0478\u046e\3\2\2\2\u0478"+
		"\u0470\3\2\2\2\u0478\u0471\3\2\2\2\u0478\u0472\3\2\2\2\u0478\u0474\3\2"+
		"\2\2\u0478\u0476\3\2\2\2\u0479\5\3\2\2\2\u047a\u0494\7\u01ae\2\2\u047b"+
		"\u0495\5\24\13\2\u047c\u0495\5\b\5\2\u047d\u047e\7\u0254\2\2\u047e\u0480"+
		"\5\u03ba\u01de\2\u047f\u0481\5d\63\2\u0480\u047f\3\2\2\2\u0480\u0481\3"+
		"\2\2\2\u0481\u0495\3\2\2\2\u0482\u0483\7\u0166\2\2\u0483\u0485\5\u03be"+
		"\u01e0\2\u0484\u0486\5d\63\2\u0485\u0484\3\2\2\2\u0485\u0486\3\2\2\2\u0486"+
		"\u0495\3\2\2\2\u0487\u0495\5@!\2\u0488\u0489\6\4\b\2\u0489\u0495\5\n\6"+
		"\2\u048a\u0495\5:\36\2\u048b\u0495\5\f\7\2\u048c\u0495\5\22\n\2\u048d"+
		"\u048e\6\4\t\2\u048e\u048f\7\u00a7\2\2\u048f\u0490\7\u012a\2\2\u0490\u0491"+
		"\5\u042c\u0217\2\u0491\u0492\7\u00bb\2\2\u0492\u0493\7\u021b\2\2\u0493"+
		"\u0495\3\2\2\2\u0494\u047b\3\2\2\2\u0494\u047c\3\2\2\2\u0494\u047d\3\2"+
		"\2\2\u0494\u0482\3\2\2\2\u0494\u0487\3\2\2\2\u0494\u0488\3\2\2\2\u0494"+
		"\u048a\3\2\2\2\u0494\u048b\3\2\2\2\u0494\u048c\3\2\2\2\u0494\u048d\3\2"+
		"\2\2\u0495\7\3\2\2\2\u0496\u0497\7\u01d5\2\2\u0497\u04a2\5\u03b6\u01dc"+
		"\2\u0498\u049a\5L\'\2\u0499\u0498\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u0499"+
		"\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u04a3\3\2\2\2\u049d\u049e\6\5\n\2\u049e"+
		"\u049f\7\67\2\2\u049f\u04a0\7o\2\2\u04a0\u04a1\7y\2\2\u04a1\u04a3\7\u00e7"+
		"\2\2\u04a2\u0499\3\2\2\2\u04a2\u049d\3\2\2\2\u04a3\t\3\2\2\2\u04a4\u04a6"+
		"\5\u0374\u01bb\2\u04a5\u04a4\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u04a7\3"+
		"\2\2\2\u04a7\u04a8\7\u0087\2\2\u04a8\u04ac\5\u03d2\u01ea\2\u04a9\u04aa"+
		"\7\u0245\2\2\u04aa\u04ab\7\u0131\2\2\u04ab\u04ad\5\u0310\u0189\2\u04ac"+
		"\u04a9\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad\u04b4\3\2\2\2\u04ae\u04af\7\u0245"+
		"\2\2\u04af\u04b1\7_\2\2\u04b0\u04b2\7\u023f\2\2\u04b1\u04b0\3\2\2\2\u04b1"+
		"\u04b2\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u04b5\7\u0104\2\2\u04b4\u04ae"+
		"\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5\u04b9\3\2\2\2\u04b6\u04b7\7\u025e\2"+
		"\2\u04b7\u04b8\7\u028f\2\2\u04b8\u04ba\5\u03fc\u01ff\2\u04b9\u04b6\3\2"+
		"\2\2\u04b9\u04ba\3\2\2\2\u04ba\u04c1\3\2\2\2\u04bb\u04c2\7\u0091\2\2\u04bc"+
		"\u04bf\7z\2\2\u04bd\u04be\7\u0245\2\2\u04be\u04c0\7/\2\2\u04bf\u04bd\3"+
		"\2\2\2\u04bf\u04c0\3\2\2\2\u04c0\u04c2\3\2\2\2\u04c1\u04bb\3\2\2\2\u04c1"+
		"\u04bc\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c5\3\2\2\2\u04c3\u04c4\7\r"+
		"\2\2\u04c4\u04c6\5\u041a\u020e\2\u04c5\u04c3\3\2\2\2\u04c5\u04c6\3\2\2"+
		"\2\u04c6\u04c9\3\2\2\2\u04c7\u04c8\7\21\2\2\u04c8\u04ca\5\u02c2\u0162"+
		"\2\u04c9\u04c7\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\13\3\2\2\2\u04cb\u04cc"+
		"\7\u00b8\2\2\u04cc\u04cd\7\u0202\2\2\u04cd\u04ce\5\u03ce\u01e8\2\u04ce"+
		"\u04cf\7\u01ac\2\2\u04cf\u04d0\7\u016a\2\2\u04d0\u04d2\5\u041a\u020e\2"+
		"\u04d1\u04d3\5\16\b\2\u04d2\u04d1\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\r"+
		"\3\2\2\2\u04d4\u04db\5\20\t\2\u04d5\u04d7\7\u0198\2\2\u04d6\u04d5\3\2"+
		"\2\2\u04d6\u04d7\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8\u04da\5\20\t\2\u04d9"+
		"\u04d6\3\2\2\2\u04da\u04dd\3\2\2\2\u04db\u04d9\3\2\2\2\u04db\u04dc\3\2"+
		"\2\2\u04dc\17\3\2\2\2\u04dd\u04db\3\2\2\2\u04de\u04e0\7\u00a6\2\2\u04df"+
		"\u04e1\7\u0181\2\2\u04e0\u04df\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e2"+
		"\3\2\2\2\u04e2\u04ed\5\u0430\u0219\2\u04e3\u04e5\7\u014a\2\2\u04e4\u04e3"+
		"\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6\u04e8\7\u0082\2"+
		"\2\u04e7\u04e9\7\u0181\2\2\u04e8\u04e7\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9"+
		"\u04ea\3\2\2\2\u04ea\u04ed\5\u03da\u01ee\2\u04eb\u04ed\t\2\2\2\u04ec\u04de"+
		"\3\2\2\2\u04ec\u04e4\3\2\2\2\u04ec\u04eb\3\2\2\2\u04ed\21\3\2\2\2\u04ee"+
		"\u04ef\7-\2\2\u04ef\u04f0\5\u03d8\u01ed\2\u04f0\u04f1\5v<\2\u04f1\23\3"+
		"\2\2\2\u04f2\u04f4\5\u039e\u01d0\2\u04f3\u04f2\3\2\2\2\u04f3\u04f4\3\2"+
		"\2\2\u04f4\u04f7\3\2\2\2\u04f5\u04f6\6\13\13\2\u04f6\u04f8\7\u020a\2\2"+
		"\u04f7\u04f5\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9\u04fa"+
		"\7\u0289\2\2\u04fa\u04fc\5\u03e2\u01f2\2\u04fb\u04fd\5\26\f\2\u04fc\u04fb"+
		"\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\25\3\2\2\2\u04fe\u0501\5\30\r\2\u04ff"+
		"\u0502\5\u035e\u01b0\2\u0500\u0502\5\64\33\2\u0501\u04ff\3\2\2\2\u0501"+
		"\u0500\3\2\2\2\u0501\u0502\3\2\2\2\u0502\u050c\3\2\2\2\u0503\u050c\5\u035e"+
		"\u01b0\2\u0504\u050c\5\64\33\2\u0505\u0506\5\32\16\2\u0506\u0507\7\u0198"+
		"\2\2\u0507\u0509\3\2\2\2\u0508\u0505\3\2\2\2\u0508\u0509\3\2\2\2\u0509"+
		"\u050a\3\2\2\2\u050a\u050c\5\34\17\2\u050b\u04fe\3\2\2\2\u050b\u0503\3"+
		"\2\2\2\u050b\u0504\3\2\2\2\u050b\u0508\3\2\2\2\u050c\27\3\2\2\2\u050d"+
		"\u0515\5\32\16\2\u050e\u050f\5\32\16\2\u050f\u0510\7\u0198\2\2\u0510\u0512"+
		"\3\2\2\2\u0511\u050e\3\2\2\2\u0511\u0512\3\2\2\2\u0512\u0513\3\2\2\2\u0513"+
		"\u0515\5 \21\2\u0514\u050d\3\2\2\2\u0514\u0511\3\2\2\2\u0515\31\3\2\2"+
		"\2\u0516\u051b\5\"\22\2\u0517\u0518\7\u0198\2\2\u0518\u051a\5\"\22\2\u0519"+
		"\u0517\3\2\2\2\u051a\u051d\3\2\2\2\u051b\u0519\3\2\2\2\u051b\u051c\3\2"+
		"\2\2\u051c\33\3\2\2\2\u051d\u051b\3\2\2\2\u051e\u051f\7{\2\2\u051f\u0525"+
		"\7\u0158\2\2\u0520\u0521\7\u00a4\2\2\u0521\u0525\7\u0158\2\2\u0522\u0523"+
		"\6\17\f\2\u0523\u0525\5\36\20\2\u0524\u051e\3\2\2\2\u0524\u0520\3\2\2"+
		"\2\u0524\u0522\3\2\2\2\u0525\35\3\2\2\2\u0526\u0527\7\u01ac\2\2\u0527"+
		"\u0529\7\"\2\2\u0528\u052a\5\u03a0\u01d1\2\u0529\u0528\3\2\2\2\u0529\u052a"+
		"\3\2\2\2\u052a\u052e\3\2\2\2\u052b\u052f\5\u0366\u01b4\2\u052c\u052d\7"+
		"\u00fc\2\2\u052d\u052f\5\u040a\u0206\2\u052e\u052b\3\2\2\2\u052e\u052c"+
		"\3\2\2\2\u052f\u0589\3\2\2\2\u0530\u0531\7\u01e9\2\2\u0531\u0532\7\"\2"+
		"\2\u0532\u0589\5\u03fe\u0200\2\u0533\u0534\7\u0110\2\2\u0534\u0536\7\""+
		"\2\2\u0535\u0537\5\u03a0\u01d1\2\u0536\u0535\3\2\2\2\u0536\u0537\3\2\2"+
		"\2\u0537\u0538\3\2\2\2\u0538\u0589\5\66\34\2\u0539\u053a\7\u0248\2\2\u053a"+
		"\u053c\7\"\2\2\u053b\u053d\5\u03a0\u01d1\2\u053c\u053b\3\2\2\2\u053c\u053d"+
		"\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u0540\5\66\34\2\u053f\u0541\5\u03a0"+
		"\u01d1\2\u0540\u053f\3\2\2\2\u0540\u0541\3\2\2\2\u0541\u0589\3\2\2\2\u0542"+
		"\u0543\7A\2\2\u0543\u0545\7\"\2\2\u0544\u0546\5\u03a0\u01d1\2\u0545\u0544"+
		"\3\2\2\2\u0545\u0546\3\2\2\2\u0546\u0547\3\2\2\2\u0547\u0589\5\66\34\2"+
		"\u0548\u0549\7\u01c5\2\2\u0549\u054a\7\"\2\2\u054a\u054e\5\66\34\2\u054b"+
		"\u054d\5\u01fe\u0100\2\u054c\u054b\3\2\2\2\u054d\u0550\3\2\2\2\u054e\u054c"+
		"\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0589\3\2\2\2\u0550\u054e\3\2\2\2\u0551"+
		"\u0552\7\'\2\2\u0552\u0554\7\"\2\2\u0553\u0555\5\u03a0\u01d1\2\u0554\u0553"+
		"\3\2\2\2\u0554\u0555\3\2\2\2\u0555\u0556\3\2\2\2\u0556\u055a\5\66\34\2"+
		"\u0557\u0559\5\u0200\u0101\2\u0558\u0557\3\2\2\2\u0559\u055c\3\2\2\2\u055a"+
		"\u0558\3\2\2\2\u055a\u055b\3\2\2\2\u055b\u0589\3\2\2\2\u055c\u055a\3\2"+
		"\2\2\u055d\u055e\7W\2\2\u055e\u0560\7\"\2\2\u055f\u0561\5\u03a0\u01d1"+
		"\2\u0560\u055f\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0562\3\2\2\2\u0562\u0589"+
		"\5\u040a\u0206\2\u0563\u0564\6\20\r\2\u0564\u0565\7\64\2\2\u0565\u0566"+
		"\7\"\2\2\u0566\u0589\5\66\34\2\u0567\u0589\58\35\2\u0568\u0569\7\u011b"+
		"\2\2\u0569\u056b\7\"\2\2\u056a\u056c\5\u03a0\u01d1\2\u056b\u056a\3\2\2"+
		"\2\u056b\u056c\3\2\2\2\u056c\u0571\3\2\2\2\u056d\u056e\5\u03fe\u0200\2"+
		"\u056e\u056f\7\u0212\2\2\u056f\u0570\5\u0366\u01b4\2\u0570\u0572\3\2\2"+
		"\2\u0571\u056d\3\2\2\2\u0571\u0572\3\2\2\2\u0572\u0589\3\2\2\2\u0573\u0574"+
		"\7\u01f1\2\2\u0574\u0575\7\"\2\2\u0575\u0576\5\u03fc\u01ff\2\u0576\u0577"+
		"\7\u02ac\2\2\u0577\u0578\7\u0289\2\2\u0578\u057a\5\u03e2\u01f2\2\u0579"+
		"\u057b\5\62\32\2\u057a\u0579\3\2\2\2\u057a\u057b\3\2\2\2\u057b\u0589\3"+
		"\2\2\2\u057c\u057d\6\20\16\2\u057d\u057e\7{\2\2\u057e\u057f\7\"\2\2\u057f"+
		"\u0580\5\66\34\2\u0580\u0581\7\u0158\2\2\u0581\u0589\3\2\2\2\u0582\u0583"+
		"\6\20\17\2\u0583\u0584\7\u00a4\2\2\u0584\u0585\7\"\2\2\u0585\u0586\5\66"+
		"\34\2\u0586\u0587\7\u0158\2\2\u0587\u0589\3\2\2\2\u0588\u0526\3\2\2\2"+
		"\u0588\u0530\3\2\2\2\u0588\u0533\3\2\2\2\u0588\u0539\3\2\2\2\u0588\u0542"+
		"\3\2\2\2\u0588\u0548\3\2\2\2\u0588\u0551\3\2\2\2\u0588\u055d\3\2\2\2\u0588"+
		"\u0563\3\2\2\2\u0588\u0567\3\2\2\2\u0588\u0568\3\2\2\2\u0588\u0573\3\2"+
		"\2\2\u0588\u057c\3\2\2\2\u0588\u0582\3\2\2\2\u0589\37\3\2\2\2\u058a\u058d"+
		"\5$\23\2\u058b\u058d\5\u0354\u01ab\2\u058c\u058a\3\2\2\2\u058c\u058b\3"+
		"\2\2\2\u058d\u0596\3\2\2\2\u058e\u0592\7\u0198\2\2\u058f\u0593\5$\23\2"+
		"\u0590\u0593\5\"\22\2\u0591\u0593\5\u0354\u01ab\2\u0592\u058f\3\2\2\2"+
		"\u0592\u0590\3\2\2\2\u0592\u0591\3\2\2\2\u0593\u0595\3\2\2\2\u0594\u058e"+
		"\3\2\2\2\u0595\u0598\3\2\2\2\u0596\u0594\3\2\2\2\u0596\u0597\3\2\2\2\u0597"+
		"!\3\2\2\2\u0598\u0596\3\2\2\2\u0599\u059a\6\22\20\2\u059a\u059f\5,\27"+
		"\2\u059b\u059c\6\22\21\2\u059c\u059f\5.\30\2\u059d\u059f\5\62\32\2\u059e"+
		"\u0599\3\2\2\2\u059e\u059b\3\2\2\2\u059e\u059d\3\2\2\2\u059f#\3\2\2\2"+
		"\u05a0\u05a2\7\u01ac\2\2\u05a1\u05a3\7\u01c7\2\2\u05a2\u05a1\3\2\2\2\u05a2"+
		"\u05a3\3\2\2\2\u05a3\u05b0\3\2\2\2\u05a4\u05a5\5\u03fc\u01ff\2\u05a5\u05a7"+
		"\5\u031a\u018e\2\u05a6\u05a8\5\u0314\u018b\2\u05a7\u05a6\3\2\2\2\u05a7"+
		"\u05a8\3\2\2\2\u05a8\u05aa\3\2\2\2\u05a9\u05ab\5&\24\2\u05aa\u05a9\3\2"+
		"\2\2\u05aa\u05ab\3\2\2\2\u05ab\u05b1\3\2\2\2\u05ac\u05ad\7\u019b\2\2\u05ad"+
		"\u05ae\5P)\2\u05ae\u05af\7\u019c\2\2\u05af\u05b1\3\2\2\2\u05b0\u05a4\3"+
		"\2\2\2\u05b0\u05ac\3\2\2\2\u05b1\u0612\3\2\2\2\u05b2\u05b3\7\u01ac\2\2"+
		"\u05b3\u0612\5\u0318\u018d\2\u05b4\u05b6\7\u01c3\2\2\u05b5\u05b7\7\u01c7"+
		"\2\2\u05b6\u05b5\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8"+
		"\u05b9\5\u03a6\u01d4\2\u05b9\u05ba\5\u03fc\u01ff\2\u05ba\u05bc\5\u031a"+
		"\u018e\2\u05bb\u05bd\5&\24\2\u05bc\u05bb\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd"+
		"\u0612\3\2\2\2\u05be\u05c0\7\u00df\2\2\u05bf\u05c1\7\u01c7\2\2\u05c0\u05bf"+
		"\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u05c3\5\u03a6\u01d4"+
		"\2\u05c3\u05c5\5\u031a\u018e\2\u05c4\u05c6\5&\24\2\u05c5\u05c4\3\2\2\2"+
		"\u05c5\u05c6\3\2\2\2\u05c6\u0612\3\2\2\2\u05c7\u05de\7\u01e9\2\2\u05c8"+
		"\u05ca\7\u01c7\2\2\u05c9\u05c8\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca\u05cb"+
		"\3\2\2\2\u05cb\u05cd\5\u03a6\u01d4\2\u05cc\u05ce\5(\25\2\u05cd\u05cc\3"+
		"\2\2\2\u05cd\u05ce\3\2\2\2\u05ce\u05df\3\2\2\2\u05cf\u05d0\7\u01fa\2\2"+
		"\u05d0\u05d7\7\u021b\2\2\u05d1\u05d2\6\23\22\2\u05d2\u05d8\5\u03a6\u01d4"+
		"\2\u05d3\u05d5\6\23\23\2\u05d4\u05d6\5\u03a6\u01d4\2\u05d5\u05d4\3\2\2"+
		"\2\u05d5\u05d6\3\2\2\2\u05d6\u05d8\3\2\2\2\u05d7\u05d1\3\2\2\2\u05d7\u05d3"+
		"\3\2\2\2\u05d8\u05df\3\2\2\2\u05d9\u05da\7\u0253\2\2\u05da\u05df\7\u021b"+
		"\2\2\u05db\u05dc\5\u016a\u00b6\2\u05dc\u05dd\5\u03b0\u01d9\2\u05dd\u05df"+
		"\3\2\2\2\u05de\u05c9\3\2\2\2\u05de\u05cf\3\2\2\2\u05de\u05d9\3\2\2\2\u05de"+
		"\u05db\3\2\2\2\u05df\u0612\3\2\2\2\u05e0\u05e1\7z\2\2\u05e1\u0612\7\u021a"+
		"\2\2\u05e2\u05e3\7\u0091\2\2\u05e3\u0612\7\u021a\2\2\u05e4\u05e6\7\u01ae"+
		"\2\2\u05e5\u05e7\7\u01c7\2\2\u05e6\u05e5\3\2\2\2\u05e6\u05e7\3\2\2\2\u05e7"+
		"\u05e8\3\2\2\2\u05e8\u05ee\5\u03a6\u01d4\2\u05e9\u05ea\7\u026d\2\2\u05ea"+
		"\u05eb\7\u01e0\2\2\u05eb\u05ef\5\u0412\u020a\2\u05ec\u05ed\7\u01e9\2\2"+
		"\u05ed\u05ef\7\u01e0\2\2\u05ee\u05e9\3\2\2\2\u05ee\u05ec\3\2\2\2\u05ef"+
		"\u0612\3\2\2\2\u05f0\u05f1\6\23\24\2\u05f1\u05f2\7\u01ae\2\2\u05f2\u05f3"+
		"\7\u020b\2\2\u05f3\u05f4\5\u03b0\u01d9\2\u05f4\u05f5\5\u032e\u0198\2\u05f5"+
		"\u0612\3\2\2\2\u05f6\u05f8\7\u025e\2\2\u05f7\u05f9\t\3\2\2\u05f8\u05f7"+
		"\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u0612\5\u03dc\u01ef"+
		"\2\u05fb\u05fc\6\23\25\2\u05fc\u05fd\7\u025e\2\2\u05fd\u05fe\5\u016a\u00b6"+
		"\2\u05fe\u05ff\5\u03b0\u01d9\2\u05ff\u0600\7\u028f\2\2\u0600\u0601\5\u03ae"+
		"\u01d8\2\u0601\u0612\3\2\2\2\u0602\u0603\7\u01cb\2\2\u0603\u0604\7\u028f"+
		"\2\2\u0604\u0605\5\u02b0\u0159\2\u0605\u0608\5\u034e\u01a8\2\u0606\u0607"+
		"\7\u01c6\2\2\u0607\u0609\5\u0350\u01a9\2\u0608\u0606\3\2\2\2\u0608\u0609"+
		"\3\2\2\2\u0609\u0612\3\2\2\2\u060a\u0612\7\u01f9\2\2\u060b\u060c\7\u024c"+
		"\2\2\u060c\u060d\7\u01be\2\2\u060d\u0612\5*\26\2\u060e\u060f\6\23\26\2"+
		"\u060f\u0610\7\67\2\2\u0610\u0612\7\u00fb\2\2\u0611\u05a0\3\2\2\2\u0611"+
		"\u05b2\3\2\2\2\u0611\u05b4\3\2\2\2\u0611\u05be\3\2\2\2\u0611\u05c7\3\2"+
		"\2\2\u0611\u05e0\3\2\2\2\u0611\u05e2\3\2\2\2\u0611\u05e4\3\2\2\2\u0611"+
		"\u05f0\3\2\2\2\u0611\u05f6\3\2\2\2\u0611\u05fb\3\2\2\2\u0611\u0602\3\2"+
		"\2\2\u0611\u060a\3\2\2\2\u0611\u060b\3\2\2\2\u0611\u060e\3\2\2\2\u0612"+
		"%\3\2\2\2\u0613\u0614\7=\2\2\u0614\u0617\5\u03fc\u01ff\2\u0615\u0617\7"+
		"\u0096\2\2\u0616\u0613\3\2\2\2\u0616\u0615\3\2\2\2\u0617\'\3\2\2\2\u0618"+
		"\u0619\t\4\2\2\u0619)\3\2\2\2\u061a\u061b\5\u03fc\u01ff\2\u061b\u0622"+
		"\5\u0126\u0094\2\u061c\u061d\7\u0198\2\2\u061d\u061e\5\u03fc\u01ff\2\u061e"+
		"\u061f\5\u0126\u0094\2\u061f\u0621\3\2\2\2\u0620\u061c\3\2\2\2\u0621\u0624"+
		"\3\2\2\2\u0622\u0620\3\2\2\2\u0622\u0623\3\2\2\2\u0623+\3\2\2\2\u0624"+
		"\u0622\3\2\2\2\u0625\u0627\7@\2\2\u0626\u0628\7\u0181\2\2\u0627\u0626"+
		"\3\2\2\2\u0627\u0628\3\2\2\2\u0628\u062b\3\2\2\2\u0629\u062c\7\u01e0\2"+
		"\2\u062a\u062c\5\u03fc\u01ff\2\u062b\u0629\3\2\2\2\u062b\u062a\3\2\2\2"+
		"\u062c-\3\2\2\2\u062d\u062f\7\u0226\2\2\u062e\u0630\7\u0181\2\2\u062f"+
		"\u062e\3\2\2\2\u062f\u0630\3\2\2\2\u0630\u0633\3\2\2\2\u0631\u0634\7\u01e0"+
		"\2\2\u0632\u0634\5\u03fc\u01ff\2\u0633\u0631\3\2\2\2\u0633\u0632\3\2\2"+
		"\2\u0634/\3\2\2\2\u0635\u063e\6\31\27\2\u0636\u0638\5,\27\2\u0637\u0639"+
		"\5.\30\2\u0638\u0637\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u063f\3\2\2\2\u063a"+
		"\u063c\5.\30\2\u063b\u063d\5,\27\2\u063c\u063b\3\2\2\2\u063c\u063d\3\2"+
		"\2\2\u063d\u063f\3\2\2\2\u063e\u0636\3\2\2\2\u063e\u063a\3\2\2\2\u063f"+
		"\61\3\2\2\2\u0640\u0641\6\32\30\2\u0641\u0642\t\5\2\2\u0642\u0643\7\u02a0"+
		"\2\2\u0643\63\3\2\2\2\u0644\u0645\6\33\31\2\u0645\u0646\7&\2\2\u0646\u0647"+
		"\7\u00fb\2\2\u0647\65\3\2\2\2\u0648\u064b\7\u01ad\2\2\u0649\u064b\5\u03fe"+
		"\u0200\2\u064a\u0648\3\2\2\2\u064a\u0649\3\2\2\2\u064b\67\3\2\2\2\u064c"+
		"\u064d\7\u011b\2\2\u064d\u064f\7\"\2\2\u064e\u0650\5\u03a0\u01d1\2\u064f"+
		"\u064e\3\2\2\2\u064f\u0650\3\2\2\2\u0650\u0655\3\2\2\2\u0651\u0652\5\u03fe"+
		"\u0200\2\u0652\u0653\7\u0212\2\2\u0653\u0654\5\u0366\u01b4\2\u0654\u0656"+
		"\3\2\2\2\u0655\u0651\3\2\2\2\u0655\u0656\3\2\2\2\u06569\3\2\2\2\u0657"+
		"\u0658\7\u0158\2\2\u0658\u0681\5\u03ca\u01e6\2\u0659\u065a\t\6\2\2\u065a"+
		"\u065b\7p\2\2\u065b\u0666\5\u041a\u020e\2\u065c\u0663\5<\37\2\u065d\u065f"+
		"\7\u0198\2\2\u065e\u065d\3\2\2\2\u065e\u065f\3\2\2\2\u065f\u0660\3\2\2"+
		"\2\u0660\u0662\5<\37\2\u0661\u065e\3\2\2\2\u0662\u0665\3\2\2\2\u0663\u0661"+
		"\3\2\2\2\u0663\u0664\3\2\2\2\u0664\u0667\3\2\2\2\u0665\u0663\3\2\2\2\u0666"+
		"\u065c\3\2\2\2\u0666\u0667\3\2\2\2\u0667\u0682\3\2\2\2\u0668\u067c\6\36"+
		"\32\2\u0669\u067d\3\2\2\2\u066a\u066b\7\u01c3\2\2\u066b\u066c\7p\2\2\u066c"+
		"\u0677\5\u041a\u020e\2\u066d\u0674\5> \2\u066e\u0670\7\u0198\2\2\u066f"+
		"\u066e\3\2\2\2\u066f\u0670\3\2\2\2\u0670\u0671\3\2\2\2\u0671\u0673\5>"+
		" \2\u0672\u066f\3\2\2\2\u0673\u0676\3\2\2\2\u0674\u0672\3\2\2\2\u0674"+
		"\u0675\3\2\2\2\u0675\u0678\3\2\2\2\u0676\u0674\3\2\2\2\u0677\u066d\3\2"+
		"\2\2\u0677\u0678\3\2\2\2\u0678\u067d\3\2\2\2\u0679\u067d\t\7\2\2\u067a"+
		"\u067b\7\u023f\2\2\u067b\u067d\7\u01ab\2\2\u067c\u0669\3\2\2\2\u067c\u066a"+
		"\3\2\2\2\u067c\u0679\3\2\2\2\u067c\u067a\3\2\2\2\u067d\u0682\3\2\2\2\u067e"+
		"\u067f\7\u025e\2\2\u067f\u0680\7\u028f\2\2\u0680\u0682\5\u03fc\u01ff\2"+
		"\u0681\u0659\3\2\2\2\u0681\u0668\3\2\2\2\u0681\u067e\3\2\2\2\u0682;\3"+
		"\2\2\2\u0683\u0685\7\u00a6\2\2\u0684\u0686\7\u0181\2\2\u0685\u0684\3\2"+
		"\2\2\u0685\u0686\3\2\2\2\u0686\u0687\3\2\2\2\u0687\u069c\5\u0430\u0219"+
		"\2\u0688\u068a\7F\2\2\u0689\u068b\7\u0181\2\2\u068a\u0689\3\2\2\2\u068a"+
		"\u068b\3\2\2\2\u068b\u068c\3\2\2\2\u068c\u069c\5\u0430\u0219\2\u068d\u068f"+
		"\7\u00d4\2\2\u068e\u0690\7\u0181\2\2\u068f\u068e\3\2\2\2\u068f\u0690\3"+
		"\2\2\2\u0690\u0691\3\2\2\2\u0691\u069c\5\u0430\u0219\2\u0692\u0694\7\u014a"+
		"\2\2\u0693\u0692\3\2\2\2\u0693\u0694\3\2\2\2\u0694\u0695\3\2\2\2\u0695"+
		"\u0697\7\u0082\2\2\u0696\u0698\7\u0181\2\2\u0697\u0696\3\2\2\2\u0697\u0698"+
		"\3\2\2\2\u0698\u0699\3\2\2\2\u0699\u069c\5\u03da\u01ee\2\u069a\u069c\t"+
		"\2\2\2\u069b\u0683\3\2\2\2\u069b\u0688\3\2\2\2\u069b\u068d\3\2\2\2\u069b"+
		"\u0693\3\2\2\2\u069b\u069a\3\2\2\2\u069c=\3\2\2\2\u069d\u069f\7\u00a6"+
		"\2\2\u069e\u06a0\7\u0181\2\2\u069f\u069e\3\2\2\2\u069f\u06a0\3\2\2\2\u06a0"+
		"\u06a1\3\2\2\2\u06a1\u06ad\5\u0430\u0219\2\u06a2\u06a4\7F\2\2\u06a3\u06a5"+
		"\7\u0181\2\2\u06a4\u06a3\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u06a6\3\2\2"+
		"\2\u06a6\u06ad\5\u0430\u0219\2\u06a7\u06a9\7\u00d4\2\2\u06a8\u06aa\7\u0181"+
		"\2\2\u06a9\u06a8\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06ab\3\2\2\2\u06ab"+
		"\u06ad\5\u0430\u0219\2\u06ac\u069d\3\2\2\2\u06ac\u06a2\3\2\2\2\u06ac\u06a7"+
		"\3\2\2\2\u06ad?\3\2\2\2\u06ae\u06b0\5\u0084C\2\u06af\u06ae\3\2\2\2\u06af"+
		"\u06b0\3\2\2\2\u06b0\u06b2\3\2\2\2\u06b1\u06b3\5\u0374\u01bb\2\u06b2\u06b1"+
		"\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b3\u06b5\3\2\2\2\u06b4\u06b6\5\u0086D"+
		"\2\u06b5\u06b4\3\2\2\2\u06b5\u06b6\3\2\2\2\u06b6\u06b7\3\2\2\2\u06b7\u06b8"+
		"\7\u0171\2\2\u06b8\u06b9\5\u03c6\u01e4\2\u06b9\u06ba\5B\"\2\u06baA\3\2"+
		"\2\2\u06bb\u06bd\5\u03a8\u01d5\2\u06bc\u06bb\3\2\2\2\u06bc\u06bd\3\2\2"+
		"\2\u06bd\u06be\3\2\2\2\u06be\u06bf\7\u01b1\2\2\u06bf\u06c0\5D#\2\u06c0"+
		"C\3\2\2\2\u06c1\u06c3\5V,\2\u06c2\u06c4\5F$\2\u06c3\u06c2\3\2\2\2\u06c3"+
		"\u06c4\3\2\2\2\u06c4E\3\2\2\2\u06c5\u06c7\7\u02ac\2\2\u06c6\u06c8\t\b"+
		"\2\2\u06c7\u06c6\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8\u06c9\3\2\2\2\u06c9"+
		"\u06ca\7\u01c5\2\2\u06ca\u06cb\7\u024a\2\2\u06cbG\3\2\2\2\u06cc\u06de"+
		"\5J&\2\u06cd\u06de\5N(\2\u06ce\u06de\5^\60\2\u06cf\u06de\5\\/\2\u06d0"+
		"\u06de\5`\61\2\u06d1\u06de\5n8\2\u06d2\u06de\5\u0080A\2\u06d3\u06de\5"+
		"\u0088E\2\u06d4\u06de\5h\65\2\u06d5\u06de\5t;\2\u06d6\u06de\5z>\2\u06d7"+
		"\u06d8\6%\33\2\u06d8\u06de\5\u008cG\2\u06d9\u06da\6%\34\2\u06da\u06de"+
		"\5\u008eH\2\u06db\u06dc\6%\35\2\u06dc\u06de\5\u0090I\2\u06dd\u06cc\3\2"+
		"\2\2\u06dd\u06cd\3\2\2\2\u06dd\u06ce\3\2\2\2\u06dd\u06cf\3\2\2\2\u06dd"+
		"\u06d0\3\2\2\2\u06dd\u06d1\3\2\2\2\u06dd\u06d2\3\2\2\2\u06dd\u06d3\3\2"+
		"\2\2\u06dd\u06d4\3\2\2\2\u06dd\u06d5\3\2\2\2\u06dd\u06d6\3\2\2\2\u06dd"+
		"\u06d7\3\2\2\2\u06dd\u06d9\3\2\2\2\u06dd\u06db\3\2\2\2\u06deI\3\2\2\2"+
		"\u06df\u06e0\7\u01cd\2\2\u06e0\u06e2\7\u01d5\2\2\u06e1\u06e3\5\u0378\u01bd"+
		"\2\u06e2\u06e1\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4\u06e8"+
		"\5\u03b4\u01db\2\u06e5\u06e7\5L\'\2\u06e6\u06e5\3\2\2\2\u06e7\u06ea\3"+
		"\2\2\2\u06e8\u06e6\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9K\3\2\2\2\u06ea\u06e8"+
		"\3\2\2\2\u06eb\u06ee\5\u035c\u01af\2\u06ec\u06ee\5\u035a\u01ae\2\u06ed"+
		"\u06eb\3\2\2\2\u06ed\u06ec\3\2\2\2\u06eeM\3\2\2\2\u06ef\u06f1\7\u01cd"+
		"\2\2\u06f0\u06f2\7\u0159\2\2\u06f1\u06f0\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2"+
		"\u06f3\3\2\2\2\u06f3\u06f5\7\u0289\2\2\u06f4\u06f6\5\u0378\u01bd\2\u06f5"+
		"\u06f4\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6\u06f7\3\2\2\2\u06f7\u070e\5\u03dc"+
		"\u01ef\2\u06f8\u06f9\7\u019b\2\2\u06f9\u06fa\5P)\2\u06fa\u06fb\7\u019c"+
		"\2\2\u06fb\u06fd\3\2\2\2\u06fc\u06f8\3\2\2\2\u06fc\u06fd\3\2\2\2\u06fd"+
		"\u06ff\3\2\2\2\u06fe\u0700\5\u0352\u01aa\2\u06ff\u06fe\3\2\2\2\u06ff\u0700"+
		"\3\2\2\2\u0700\u0702\3\2\2\2\u0701\u0703\5\u035e\u01b0\2\u0702\u0701\3"+
		"\2\2\2\u0702\u0703\3\2\2\2\u0703\u0705\3\2\2\2\u0704\u0706\5T+\2\u0705"+
		"\u0704\3\2\2\2\u0705\u0706\3\2\2\2\u0706\u070f\3\2\2\2\u0707\u0708\7\u0220"+
		"\2\2\u0708\u070f\5\u03e2\u01f2\2\u0709\u070a\7\u019b\2\2\u070a\u070b\7"+
		"\u0220\2\2\u070b\u070c\5\u03e2\u01f2\2\u070c\u070d\7\u019c\2\2\u070d\u070f"+
		"\3\2\2\2\u070e\u06fc\3\2\2\2\u070e\u0707\3\2\2\2\u070e\u0709\3\2\2\2\u070f"+
		"O\3\2\2\2\u0710\u0715\5R*\2\u0711\u0712\7\u0198\2\2\u0712\u0714\5R*\2"+
		"\u0713\u0711\3\2\2\2\u0714\u0717\3\2\2\2\u0715\u0713\3\2\2\2\u0715\u0716"+
		"\3\2\2\2\u0716Q\3\2\2\2\u0717\u0715\3\2\2\2\u0718\u071b\5\u0312\u018a"+
		"\2\u0719\u071b\5\u0318\u018d\2\u071a\u0718\3\2\2\2\u071a\u0719\3\2\2\2"+
		"\u071bS\3\2\2\2\u071c\u071e\t\t\2\2\u071d\u071c\3\2\2\2\u071d\u071e\3"+
		"\2\2\2\u071e\u0720\3\2\2\2\u071f\u0721\7\u01b1\2\2\u0720\u071f\3\2\2\2"+
		"\u0720\u0721\3\2\2\2\u0721\u0722\3\2\2\2\u0722\u0723\5V,\2\u0723U\3\2"+
		"\2\2\u0724\u0727\5\u00ecw\2\u0725\u0727\5\u00f0y\2\u0726\u0724\3\2\2\2"+
		"\u0726\u0725\3\2\2\2\u0727W\3\2\2\2\u0728\u072a\7\u01cd\2\2\u0729\u072b"+
		"\5\u0374\u01bb\2\u072a\u0729\3\2\2\2\u072a\u072b\3\2\2\2\u072bY\3\2\2"+
		"\2\u072c\u0730\5\\/\2\u072d\u0730\5^\60\2\u072e\u0730\5`\61\2\u072f\u072c"+
		"\3\2\2\2\u072f\u072d\3\2\2\2\u072f\u072e\3\2\2\2\u0730\u0732\3\2\2\2\u0731"+
		"\u0733\7\u0199\2\2\u0732\u0731\3\2\2\2\u0732\u0733\3\2\2\2\u0733\u0734"+
		"\3\2\2\2\u0734\u0735\7\2\2\3\u0735[\3\2\2\2\u0736\u0737\5X-\2\u0737\u0738"+
		"\7\u0254\2\2\u0738\u0739\5\u03b8\u01dd\2\u0739\u0742\7\u019b\2\2\u073a"+
		"\u073f\5\u037a\u01be\2\u073b\u073c\7\u0198\2\2\u073c\u073e\5\u037a\u01be"+
		"\2\u073d\u073b\3\2\2\2\u073e\u0741\3\2\2\2\u073f\u073d\3\2\2\2\u073f\u0740"+
		"\3\2\2\2\u0740\u0743\3\2\2\2\u0741\u073f\3\2\2\2\u0742\u073a\3\2\2\2\u0742"+
		"\u0743\3\2\2\2\u0743\u0744\3\2\2\2\u0744\u0748\7\u019c\2\2\u0745\u0747"+
		"\5b\62\2\u0746\u0745\3\2\2\2\u0747\u074a\3\2\2\2\u0748\u0746\3\2\2\2\u0748"+
		"\u0749\3\2\2\2\u0749\u074b\3\2\2\2\u074a\u0748\3\2\2\2\u074b\u074c\5\u02c2"+
		"\u0162\2\u074c]\3\2\2\2\u074d\u074e\5X-\2\u074e\u074f\7\u0166\2\2\u074f"+
		"\u0750\5\u03bc\u01df\2\u0750\u0759\7\u019b\2\2\u0751\u0756\5\u037c\u01bf"+
		"\2\u0752\u0753\7\u0198\2\2\u0753\u0755\5\u037c\u01bf\2\u0754\u0752\3\2"+
		"\2\2\u0755\u0758\3\2\2\2\u0756\u0754\3\2\2\2\u0756\u0757\3\2\2\2\u0757"+
		"\u075a\3\2\2\2\u0758\u0756\3\2\2\2\u0759\u0751\3\2\2\2\u0759\u075a\3\2"+
		"\2\2\u075a\u075b\3\2\2\2\u075b\u075c\7\u019c\2\2\u075c\u075d\7\u0127\2"+
		"\2\u075d\u0761\5\u037e\u01c0\2\u075e\u0760\5b\62\2\u075f\u075e\3\2\2\2"+
		"\u0760\u0763\3\2\2\2\u0761\u075f\3\2\2\2\u0761\u0762\3\2\2\2\u0762\u0764"+
		"\3\2\2\2\u0763\u0761\3\2\2\2\u0764\u0765\5\u02c2\u0162\2\u0765_\3\2\2"+
		"\2\u0766\u0768\7\u01cd\2\2\u0767\u0769\7?\2\2\u0768\u0767\3\2\2\2\u0768"+
		"\u0769\3\2\2\2\u0769\u076a\3\2\2\2\u076a\u076b\7\u0166\2\2\u076b\u076c"+
		"\5\u03d4\u01eb\2\u076c\u076d\7\u0127\2\2\u076d\u076e\t\n\2\2\u076e\u076f"+
		"\7\61\2\2\u076f\u0770\5\u041a\u020e\2\u0770a\3\2\2\2\u0771\u0777\5f\64"+
		"\2\u0772\u0774\7\u023f\2\2\u0773\u0772\3\2\2\2\u0773\u0774\3\2\2\2\u0774"+
		"\u0775\3\2\2\2\u0775\u0777\7\u01e5\2\2\u0776\u0771\3\2\2\2\u0776\u0773"+
		"\3\2\2\2\u0777c\3\2\2\2\u0778\u077a\5b\62\2\u0779\u0778\3\2\2\2\u077a"+
		"\u077b\3\2\2\2\u077b\u0779\3\2\2\2\u077b\u077c\3\2\2\2\u077ce\3\2\2\2"+
		"\u077d\u077e\7\r\2\2\u077e\u078f\5\u041a\u020e\2\u077f\u0780\7\34\2\2"+
		"\u0780\u078f\7\u027a\2\2\u0781\u0782\7\35\2\2\u0782\u078f\7\u027a\2\2"+
		"\u0783\u0784\7\17\2\2\u0784\u078f\7\u027a\2\2\u0785\u0786\7\u0257\2\2"+
		"\u0786\u0787\7\u027a\2\2\u0787\u078f\7o\2\2\u0788\u0789\7\u0239\2\2\u0789"+
		"\u078a\7\u027a\2\2\u078a\u078f\7o\2\2\u078b\u078c\7\u027a\2\2\u078c\u078d"+
		"\7,\2\2\u078d\u078f\t\13\2\2\u078e\u077d\3\2\2\2\u078e\u077f\3\2\2\2\u078e"+
		"\u0781\3\2\2\2\u078e\u0783\3\2\2\2\u078e\u0785\3\2\2\2\u078e\u0788\3\2"+
		"\2\2\u078e\u078b\3\2\2\2\u078fg\3\2\2\2\u0790\u0792\7\u01cd\2\2\u0791"+
		"\u0793\5\u039e\u01d0\2\u0792\u0791\3\2\2\2\u0792\u0793\3\2\2\2\u0793\u07b6"+
		"\3\2\2\2\u0794\u0796\7\u0296\2\2\u0795\u0794\3\2\2\2\u0795\u0796\3\2\2"+
		"\2\u0796\u0797\3\2\2\2\u0797\u0799\7\u020b\2\2\u0798\u079a\5j\66\2\u0799"+
		"\u0798\3\2\2\2\u0799\u079a\3\2\2\2\u079a\u079b\3\2\2\2\u079b\u079f\5l"+
		"\67\2\u079c\u079e\5\u032a\u0196\2\u079d\u079c\3\2\2\2\u079e\u07a1\3\2"+
		"\2\2\u079f\u079d\3\2\2\2\u079f\u07a0\3\2\2\2\u07a0\u07b7\3\2\2\2\u07a1"+
		"\u079f\3\2\2\2\u07a2\u07a3\7\u01fe\2\2\u07a3\u07a4\7\u020b\2\2\u07a4\u07a5"+
		"\5\u03ae\u01d8\2\u07a5\u07a9\5l\67\2\u07a6\u07a8\5\u0332\u019a\2\u07a7"+
		"\u07a6\3\2\2\2\u07a8\u07ab\3\2\2\2\u07a9\u07a7\3\2\2\2\u07a9\u07aa\3\2"+
		"\2\2\u07aa\u07b7\3\2\2\2\u07ab\u07a9\3\2\2\2\u07ac\u07ad\7\u0272\2\2\u07ad"+
		"\u07ae\7\u020b\2\2\u07ae\u07af\5\u03ae\u01d8\2\u07af\u07b3\5l\67\2\u07b0"+
		"\u07b2\5\u0334\u019b\2\u07b1\u07b0\3\2\2\2\u07b2\u07b5\3\2\2\2\u07b3\u07b1"+
		"\3\2\2\2\u07b3\u07b4\3\2\2\2\u07b4\u07b7\3\2\2\2\u07b5\u07b3\3\2\2\2\u07b6"+
		"\u0795\3\2\2\2\u07b6\u07a2\3\2\2\2\u07b6\u07ac\3\2\2\2\u07b7\u07b9\3\2"+
		"\2\2\u07b8\u07ba\5\60\31\2\u07b9\u07b8\3\2\2\2\u07b9\u07ba\3\2\2\2\u07ba"+
		"i\3\2\2\2\u07bb\u07be\5\u03ae\u01d8\2\u07bc\u07bd\7\u029c\2\2\u07bd\u07bf"+
		"\5\u0328\u0195\2\u07be\u07bc\3\2\2\2\u07be\u07bf\3\2\2\2\u07bf\u07c5\3"+
		"\2\2\2\u07c0\u07c1\5\u03ae\u01d8\2\u07c1\u07c2\7\u0164\2\2\u07c2\u07c3"+
		"\5\u0328\u0195\2\u07c3\u07c5\3\2\2\2\u07c4\u07bb\3\2\2\2\u07c4\u07c0\3"+
		"\2\2\2\u07c5k\3\2\2\2\u07c6\u07c7\7\u0245\2\2\u07c7\u07c8\5\u03e2\u01f2"+
		"\2\u07c8\u07c9\5\u0324\u0193\2\u07c9m\3\2\2\2\u07ca\u07cb\7\u01cd\2\2"+
		"\u07cb\u07cc\7\u00b8\2\2\u07cc\u07cd\7\u0202\2\2\u07cd\u07ce\5\u03cc\u01e7"+
		"\2\u07ce\u07cf\7\u01ac\2\2\u07cf\u07d0\t\f\2\2\u07d0\u07d2\5\u041a\u020e"+
		"\2\u07d1\u07d3\5p9\2\u07d2\u07d1\3\2\2\2\u07d2\u07d3\3\2\2\2\u07d3o\3"+
		"\2\2\2\u07d4\u07db\5r:\2\u07d5\u07d7\7\u0198\2\2\u07d6\u07d5\3\2\2\2\u07d6"+
		"\u07d7\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8\u07da\5r:\2\u07d9\u07d6\3\2\2"+
		"\2\u07da\u07dd\3\2\2\2\u07db\u07d9\3\2\2\2\u07db\u07dc\3\2\2\2\u07dcq"+
		"\3\2\2\2\u07dd\u07db\3\2\2\2\u07de\u07e0\7\u00a6\2\2\u07df\u07e1\7\u0181"+
		"\2\2\u07e0\u07df\3\2\2\2\u07e0\u07e1\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2"+
		"\u07fc\5\u0430\u0219\2\u07e3\u07e5\t\r\2\2\u07e4\u07e6\7\u0181\2\2\u07e5"+
		"\u07e4\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u07e7\3\2\2\2\u07e7\u07fc\5\u0430"+
		"\u0219\2\u07e8\u07ea\7\u00f0\2\2\u07e9\u07eb\7\u0181\2\2\u07ea\u07e9\3"+
		"\2\2\2\u07ea\u07eb\3\2\2\2\u07eb\u07ec\3\2\2\2\u07ec\u07fc\5\u040a\u0206"+
		"\2\u07ed\u07ef\7\u014a\2\2\u07ee\u07ed\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef"+
		"\u07f0\3\2\2\2\u07f0\u07f2\7\u0082\2\2\u07f1\u07f3\7\u0181\2\2\u07f2\u07f1"+
		"\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07fc\5\u03da\u01ee"+
		"\2\u07f5\u07fc\t\2\2\2\u07f6\u07f8\7\r\2\2\u07f7\u07f9\7\u0181\2\2\u07f8"+
		"\u07f7\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u07fc\5\u041a"+
		"\u020e\2\u07fb\u07de\3\2\2\2\u07fb\u07e3\3\2\2\2\u07fb\u07e8\3\2\2\2\u07fb"+
		"\u07ee\3\2\2\2\u07fb\u07f5\3\2\2\2\u07fb\u07f6\3\2\2\2\u07fcs\3\2\2\2"+
		"\u07fd\u07fe\7\u01cd\2\2\u07fe\u07ff\7-\2\2\u07ff\u0800\5\u03d6\u01ec"+
		"\2\u0800\u0801\7\u01fa\2\2\u0801\u0802\7o\2\2\u0802\u0803\78\2\2\u0803"+
		"\u0804\5\u042c\u0217\2\u0804\u0805\5v<\2\u0805u\3\2\2\2\u0806\u0807\7"+
		"\37\2\2\u0807\u0808\7\u019b\2\2\u0808\u080d\5x=\2\u0809\u080a\7\u0198"+
		"\2\2\u080a\u080c\5x=\2\u080b\u0809\3\2\2\2\u080c\u080f\3\2\2\2\u080d\u080b"+
		"\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u0810\3\2\2\2\u080f\u080d\3\2\2\2\u0810"+
		"\u0811\7\u019c\2\2\u0811w\3\2\2\2\u0812\u0813\7\32\2\2\u0813\u0821\5\u041a"+
		"\u020e\2\u0814\u0815\7\u01d5\2\2\u0815\u0821\5\u041a\u020e\2\u0816\u0817"+
		"\7\u016e\2\2\u0817\u0821\5\u041a\u020e\2\u0818\u0819\7\u00fd\2\2\u0819"+
		"\u0821\5\u041a\u020e\2\u081a\u081b\7\60\2\2\u081b\u0821\5\u041a\u020e"+
		"\2\u081c\u081d\7 \2\2\u081d\u0821\5\u041a\u020e\2\u081e\u081f\7#\2\2\u081f"+
		"\u0821\5\u0408\u0205\2\u0820\u0812\3\2\2\2\u0820\u0814\3\2\2\2\u0820\u0816"+
		"\3\2\2\2\u0820\u0818\3\2\2\2\u0820\u081a\3\2\2\2\u0820\u081c\3\2\2\2\u0820"+
		"\u081e\3\2\2\2\u0821y\3\2\2\2\u0822\u0823\7\u01cd\2\2\u0823\u0824\7\u0158"+
		"\2\2\u0824\u0825\5\u03c8\u01e5\2\u0825\u0826\7\u01ac\2\2\u0826\u0827\7"+
		"p\2\2\u0827\u082c\5\u041a\u020e\2\u0828\u0829\7\u029b\2\2\u0829\u082a"+
		"\7\u00b8\2\2\u082a\u082b\7\u0202\2\2\u082b\u082d\5\u03ce\u01e8\2\u082c"+
		"\u0828\3\2\2\2\u082c\u082d\3\2\2\2\u082d\u082f\3\2\2\2\u082e\u0830\5|"+
		"?\2\u082f\u082e\3\2\2\2\u082f\u0830\3\2\2\2\u0830{\3\2\2\2\u0831\u0838"+
		"\5~@\2\u0832\u0834\7\u0198\2\2\u0833\u0832\3\2\2\2\u0833\u0834\3\2\2\2"+
		"\u0834\u0835\3\2\2\2\u0835\u0837\5~@\2\u0836\u0833\3\2\2\2\u0837\u083a"+
		"\3\2\2\2\u0838\u0836\3\2\2\2\u0838\u0839\3\2\2\2\u0839}\3\2\2\2\u083a"+
		"\u0838\3\2\2\2\u083b\u083d\7\u00a6\2\2\u083c\u083e\7\u0181\2\2\u083d\u083c"+
		"\3\2\2\2\u083d\u083e\3\2\2\2\u083e\u083f\3\2\2\2\u083f\u0869\5\u0430\u0219"+
		"\2\u0840\u0842\7F\2\2\u0841\u0843\7\u0181\2\2\u0842\u0841\3\2\2\2\u0842"+
		"\u0843\3\2\2\2\u0843\u0844\3\2\2\2\u0844\u0869\5\u0430\u0219\2\u0845\u0847"+
		"\7\u00d4\2\2\u0846\u0848\7\u0181\2\2\u0847\u0846\3\2\2\2\u0847\u0848\3"+
		"\2\2\2\u0848\u0849\3\2\2\2\u0849\u0869\5\u0430\u0219\2\u084a\u084c\7\u008d"+
		"\2\2\u084b\u084d\7\u0181\2\2\u084c\u084b\3\2\2\2\u084c\u084d\3\2\2\2\u084d"+
		"\u084e\3\2\2\2\u084e\u0869\5\u0430\u0219\2\u084f\u0851\7\u00f0\2\2\u0850"+
		"\u0852\7\u0181\2\2\u0851\u0850\3\2\2\2\u0851\u0852\3\2\2\2\u0852\u0853"+
		"\3\2\2\2\u0853\u0869\5\u040a\u0206\2\u0854\u0856\7\u014a\2\2\u0855\u0854"+
		"\3\2\2\2\u0855\u0856\3\2\2\2\u0856\u0857\3\2\2\2\u0857\u0859\7\u0082\2"+
		"\2\u0858\u085a\7\u0181\2\2\u0859\u0858\3\2\2\2\u0859\u085a\3\2\2\2\u085a"+
		"\u085b\3\2\2\2\u085b\u0869\5\u03da\u01ee\2\u085c\u0869\t\2\2\2\u085d\u085f"+
		"\7\r\2\2\u085e\u0860\7\u0181\2\2\u085f\u085e\3\2\2\2\u085f\u0860\3\2\2"+
		"\2\u0860\u0861\3\2\2\2\u0861\u0869\5\u041a\u020e\2\u0862\u0863\6@\36\2"+
		"\u0863\u0865\7\u0094\2\2\u0864\u0866\7\u0181\2\2\u0865\u0864\3\2\2\2\u0865"+
		"\u0866\3\2\2\2\u0866\u0867\3\2\2\2\u0867\u0869\5\u0430\u0219\2\u0868\u083b"+
		"\3\2\2\2\u0868\u0840\3\2\2\2\u0868\u0845\3\2\2\2\u0868\u084a\3\2\2\2\u0868"+
		"\u084f\3\2\2\2\u0868\u0855\3\2\2\2\u0868\u085c\3\2\2\2\u0868\u085d\3\2"+
		"\2\2\u0868\u0862\3\2\2\2\u0869\177\3\2\2\2\u086a\u086c\7\u01cd\2\2\u086b"+
		"\u086d\5\u0082B\2\u086c\u086b\3\2\2\2\u086c\u086d\3\2\2\2\u086d\u086f"+
		"\3\2\2\2\u086e\u0870\5\u0374\u01bb\2\u086f\u086e\3\2\2\2\u086f\u0870\3"+
		"\2\2\2\u0870\u0872\3\2\2\2\u0871\u0873\5\u0086D\2\u0872\u0871\3\2\2\2"+
		"\u0872\u0873\3\2\2\2\u0873\u0874\3\2\2\2\u0874\u0875\7\u0171\2\2\u0875"+
		"\u0876\5\u03c4\u01e3\2\u0876\u0877\5B\"\2\u0877\u0081\3\2\2\2\u0878\u0879"+
		"\7\u024d\2\2\u0879\u087b\7\u0260\2\2\u087a\u087c\5\u0084C\2\u087b\u087a"+
		"\3\2\2\2\u087b\u087c\3\2\2\2\u087c\u087f\3\2\2\2\u087d\u087f\5\u0084C"+
		"\2\u087e\u0878\3\2\2\2\u087e\u087d\3\2\2\2\u087f\u0083\3\2\2\2\u0880\u0881"+
		"\7@\2\2\u0881\u0882\7\u0181\2\2\u0882\u0883\t\16\2\2\u0883\u0085\3\2\2"+
		"\2\u0884\u0885\7\u027a\2\2\u0885\u0886\7,\2\2\u0886\u0887\t\13\2\2\u0887"+
		"\u0087\3\2\2\2\u0888\u0889\5X-\2\u0889\u088a\7\u0291\2\2\u088a\u088b\5"+
		"\u03c0\u01e1\2\u088b\u088c\t\17\2\2\u088c\u088d\t\20\2\2\u088d\u088e\7"+
		"\u0245\2\2\u088e\u088f\5\u03e2\u01f2\2\u088f\u0890\7\u01fb\2\2\u0890\u0891"+
		"\7\u01eb\2\2\u0891\u0893\7\u012f\2\2\u0892\u0894\5\u008aF\2\u0893\u0892"+
		"\3\2\2\2\u0893\u0894\3\2\2\2\u0894\u0895\3\2\2\2\u0895\u0896\5\u02c2\u0162"+
		"\2\u0896\u0089\3\2\2\2\u0897\u0898\6F\37\2\u0898\u0899\t\21\2\2\u0899"+
		"\u089a\5\u042c\u0217\2\u089a\u008b\3\2\2\2\u089b\u089c\5X-\2\u089c\u089e"+
		"\7\u0087\2\2\u089d\u089f\5\u0378\u01bd\2\u089e\u089d\3\2\2\2\u089e\u089f"+
		"\3\2\2\2\u089f\u08a0\3\2\2\2\u08a0\u08a1\5\u03d0\u01e9\2\u08a1\u08a2\7"+
		"\u0245\2\2\u08a2\u08a3\7\u0131\2\2\u08a3\u08aa\5\u0310\u0189\2\u08a4\u08a5"+
		"\7\u0245\2\2\u08a5\u08a7\7_\2\2\u08a6\u08a8\7\u023f\2\2\u08a7\u08a6\3"+
		"\2\2\2\u08a7\u08a8\3\2\2\2\u08a8\u08a9\3\2\2\2\u08a9\u08ab\7\u0104\2\2"+
		"\u08aa\u08a4\3\2\2\2\u08aa\u08ab\3\2\2\2\u08ab\u08b2\3\2\2\2\u08ac\u08b3"+
		"\7\u0091\2\2\u08ad\u08b0\7z\2\2\u08ae\u08af\7\u0245\2\2\u08af\u08b1\7"+
		"/\2\2\u08b0\u08ae\3\2\2\2\u08b0\u08b1\3\2\2\2\u08b1\u08b3\3\2\2\2\u08b2"+
		"\u08ac\3\2\2\2\u08b2\u08ad\3\2\2\2\u08b2\u08b3\3\2\2\2\u08b3\u08b6\3\2"+
		"\2\2\u08b4\u08b5\7\r\2\2\u08b5\u08b7\5\u041a\u020e\2\u08b6\u08b4\3\2\2"+
		"\2\u08b6\u08b7\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u08b9\7\21\2\2\u08b9"+
		"\u08ba\5\u02c2\u0162\2\u08ba\u008d\3\2\2\2\u08bb\u08bc\7\u01cd\2\2\u08bc"+
		"\u08be\7\u02b5\2\2\u08bd\u08bf\5\u0378\u01bd\2\u08be\u08bd\3\2\2\2\u08be"+
		"\u08bf\3\2\2\2\u08bf\u08c0\3\2\2\2\u08c0\u08c1\5\u01f6\u00fc\2\u08c1\u008f"+
		"\3\2\2\2\u08c2\u08c3\7\u01cd\2\2\u08c3\u08c4\7\u024d\2\2\u08c4\u08c5\7"+
		"\u0260\2\2\u08c5\u08c6\7\u0272\2\2\u08c6\u08c7\7\u02f0\2\2\u08c7\u08c8"+
		"\7\u02e8\2\2\u08c8\u08cc\5\u040e\u0208\2\u08c9\u08cb\5\u0092J\2\u08ca"+
		"\u08c9\3\2\2\2\u08cb\u08ce\3\2\2\2\u08cc\u08ca\3\2\2\2\u08cc\u08cd\3\2"+
		"\2\2\u08cd\u08de\3\2\2\2\u08ce\u08cc\3\2\2\2\u08cf\u08d0\7\u01cd\2\2\u08d0"+
		"\u08d1\7\u0272\2\2\u08d1\u08d2\7\u02f0\2\2\u08d2\u08d4\7\u02e8\2\2\u08d3"+
		"\u08d5\5\u0378\u01bd\2\u08d4\u08d3\3\2\2\2\u08d4\u08d5\3\2\2\2\u08d5\u08d6"+
		"\3\2\2\2\u08d6\u08da\5\u040e\u0208\2\u08d7\u08d9\5\u0092J\2\u08d8\u08d7"+
		"\3\2\2\2\u08d9\u08dc\3\2\2\2\u08da\u08d8\3\2\2\2\u08da\u08db\3\2\2\2\u08db"+
		"\u08de\3\2\2\2\u08dc\u08da\3\2\2\2\u08dd\u08c2\3\2\2\2\u08dd\u08cf\3\2"+
		"\2\2\u08de\u0091\3\2\2\2\u08df\u08e0\7\u00e7\2\2\u08e0\u08e1\7\u015b\2"+
		"\2\u08e1\u08ef\5\u041c\u020f\2\u08e2\u08e3\7\u02ed\2\2\u08e3\u08e4\7\u015b"+
		"\2\2\u08e4\u08ef\5\u041c\u020f\2\u08e5\u08e6\7\u02ef\2\2\u08e6\u08e7\5"+
		"\u041c\u020f\2\u08e7\u08e8\7\u00a1\2\2\u08e8\u08e9\7\u01be\2\2\u08e9\u08ea"+
		"\5\u040e\u0208\2\u08ea\u08ef\3\2\2\2\u08eb\u08ec\7\u02ee\2\2\u08ec\u08ed"+
		"\7\u015b\2\2\u08ed\u08ef\5\u041c\u020f\2\u08ee\u08df\3\2\2\2\u08ee\u08e2"+
		"\3\2\2\2\u08ee\u08e5\3\2\2\2\u08ee\u08eb\3\2\2\2\u08ef\u0093\3\2\2\2\u08f0"+
		"\u0901\5\u0096L\2\u08f1\u08f2\6K \2\u08f2\u0901\5\u0098M\2\u08f3\u0901"+
		"\5\u009aN\2\u08f4\u0901\5\u009cO\2\u08f5\u0901\5\u009eP\2\u08f6\u0901"+
		"\5\u00a0Q\2\u08f7\u0901\5\u00a4S\2\u08f8\u0901\5\u00a6T\2\u08f9\u0901"+
		"\5\u00a8U\2\u08fa\u0901\5\u00aaV\2\u08fb\u0901\5\u00acW\2\u08fc\u08fd"+
		"\6K!\2\u08fd\u0901\5\u00aeX\2\u08fe\u08ff\6K\"\2\u08ff\u0901\5\u00b0Y"+
		"\2\u0900\u08f0\3\2\2\2\u0900\u08f1\3\2\2\2\u0900\u08f3\3\2\2\2\u0900\u08f4"+
		"\3\2\2\2\u0900\u08f5\3\2\2\2\u0900\u08f6\3\2\2\2\u0900\u08f7\3\2\2\2\u0900"+
		"\u08f8\3\2\2\2\u0900\u08f9\3\2\2\2\u0900\u08fa\3\2\2\2\u0900\u08fb\3\2"+
		"\2\2\u0900\u08fc\3\2\2\2\u0900\u08fe\3\2\2\2\u0901\u0095\3\2\2\2\u0902"+
		"\u0903\7\u01e9\2\2\u0903\u0905\7\u01d5\2\2\u0904\u0906\5\u0376\u01bc\2"+
		"\u0905\u0904\3\2\2\2\u0905\u0906\3\2\2\2\u0906\u0907\3\2\2\2\u0907\u0908"+
		"\5\u03b6\u01dc\2\u0908\u0097\3\2\2\2\u0909\u090a\7\u01e9\2\2\u090a\u090c"+
		"\7\u0087\2\2\u090b\u090d\5\u0376\u01bc\2\u090c\u090b\3\2\2\2\u090c\u090d"+
		"\3\2\2\2\u090d\u090e\3\2\2\2\u090e\u090f\5\u03d2\u01ea\2\u090f\u0099\3"+
		"\2\2\2\u0910\u0911\7\u01e9\2\2\u0911\u0913\7\u0166\2\2\u0912\u0914\5\u0376"+
		"\u01bc\2\u0913\u0912\3\2\2\2\u0913\u0914\3\2\2\2\u0914\u0915\3\2\2\2\u0915"+
		"\u0916\5\u03be\u01e0\2\u0916\u009b\3\2\2\2\u0917\u0918\7\u01e9\2\2\u0918"+
		"\u091a\7\u0254\2\2\u0919\u091b\5\u0376\u01bc\2\u091a\u0919\3\2\2\2\u091a"+
		"\u091b\3\2\2\2\u091b\u091c\3\2\2\2\u091c\u091d\5\u03ba\u01de\2\u091d\u009d"+
		"\3\2\2\2\u091e\u0920\7\u01e9\2\2\u091f\u0921\5\u039e\u01d0\2\u0920\u091f"+
		"\3\2\2\2\u0920\u0921\3\2\2\2\u0921\u0922\3\2\2\2\u0922\u0923\7\u020b\2"+
		"\2\u0923\u0924\5\u03b0\u01d9\2\u0924\u0925\7\u0245\2\2\u0925\u0927\5\u03e2"+
		"\u01f2\2\u0926\u0928\5\60\31\2\u0927\u0926\3\2\2\2\u0927\u0928\3\2\2\2"+
		"\u0928\u009f\3\2\2\2\u0929\u092a\7\u01e9\2\2\u092a\u092b\7\u00b8\2\2\u092b"+
		"\u092c\7\u0202\2\2\u092c\u0937\5\u03ce\u01e8\2\u092d\u0934\5\u00a2R\2"+
		"\u092e\u0930\7\u0198\2\2\u092f\u092e\3\2\2\2\u092f\u0930\3\2\2\2\u0930"+
		"\u0931\3\2\2\2\u0931\u0933\5\u00a2R\2\u0932\u092f\3\2\2\2\u0933\u0936"+
		"\3\2\2\2\u0934\u0932\3\2\2\2\u0934\u0935\3\2\2\2\u0935\u0938\3\2\2\2\u0936"+
		"\u0934\3\2\2\2\u0937\u092d\3\2\2\2\u0937\u0938\3\2\2\2\u0938\u00a1\3\2"+
		"\2\2\u0939\u0943\t\2\2\2\u093a\u093c\7\u014a\2\2\u093b\u093a\3\2\2\2\u093b"+
		"\u093c\3\2\2\2\u093c\u093d\3\2\2\2\u093d\u093f\7\u0082\2\2\u093e\u0940"+
		"\7\u0181\2\2\u093f\u093e\3\2\2\2\u093f\u0940\3\2\2\2\u0940\u0941\3\2\2"+
		"\2\u0941\u0943\5\u03da\u01ee\2\u0942\u0939\3\2\2\2\u0942\u093b\3\2\2\2"+
		"\u0943\u00a3\3\2\2\2\u0944\u0945\7\u01e9\2\2\u0945\u0947\7-\2\2\u0946"+
		"\u0948\5\u0376\u01bc\2\u0947\u0946\3\2\2\2\u0947\u0948\3\2\2\2\u0948\u0949"+
		"\3\2\2\2\u0949\u094a\5\u03d8\u01ed\2\u094a\u00a5\3\2\2\2\u094b\u094d\7"+
		"\u01e9\2\2\u094c\u094e\7\u0159\2\2\u094d\u094c\3\2\2\2\u094d\u094e\3\2"+
		"\2\2\u094e\u094f\3\2\2\2\u094f\u0951\t\22\2\2\u0950\u0952\5\u0376\u01bc"+
		"\2\u0951\u0950\3\2\2\2\u0951\u0952\3\2\2\2\u0952\u0953\3\2\2\2\u0953\u0955"+
		"\5\u03e4\u01f3\2\u0954\u0956\t\4\2\2\u0955\u0954\3\2\2\2\u0955\u0956\3"+
		"\2\2\2\u0956\u00a7\3\2\2\2\u0957\u0958\7\u01e9\2\2\u0958\u0959\7\u0158"+
		"\2\2\u0959\u0964\5\u03ca\u01e6\2\u095a\u0961\5\u00a2R\2\u095b\u095d\7"+
		"\u0198\2\2\u095c\u095b\3\2\2\2\u095c\u095d\3\2\2\2\u095d\u095e\3\2\2\2"+
		"\u095e\u0960\5\u00a2R\2\u095f\u095c\3\2\2\2\u0960\u0963\3\2\2\2\u0961"+
		"\u095f\3\2\2\2\u0961\u0962\3\2\2\2\u0962\u0965\3\2\2\2\u0963\u0961\3\2"+
		"\2\2\u0964\u095a\3\2\2\2\u0964\u0965\3\2\2\2\u0965\u00a9\3\2\2\2\u0966"+
		"\u0967\7\u01e9\2\2\u0967\u0969\7\u0291\2\2\u0968\u096a\5\u0376\u01bc\2"+
		"\u0969\u0968\3\2\2\2\u0969\u096a\3\2\2\2\u096a\u096b\3\2\2\2\u096b\u096c"+
		"\5\u03c2\u01e2\2\u096c\u00ab\3\2\2\2\u096d\u096e\7\u01e9\2\2\u096e\u0970"+
		"\7\u0171\2\2\u096f\u0971\5\u0376\u01bc\2\u0970\u096f\3\2\2\2\u0970\u0971"+
		"\3\2\2\2\u0971\u0972\3\2\2\2\u0972\u0974\5\u0382\u01c2\2\u0973\u0975\t"+
		"\4\2\2\u0974\u0973\3\2\2\2\u0974\u0975\3\2\2\2\u0975\u00ad\3\2\2\2\u0976"+
		"\u0977\7\u01e9\2\2\u0977\u0979\7\u02b5\2\2\u0978\u097a\5\u0376\u01bc\2"+
		"\u0979\u0978\3\2\2\2\u0979\u097a\3\2\2\2\u097a\u097b\3\2\2\2\u097b\u097c"+
		"\5\u01f6\u00fc\2\u097c\u00af\3\2\2\2\u097d\u097e\7\u01e9\2\2\u097e\u097f"+
		"\7\u0272\2\2\u097f\u0980\7\u02f0\2\2\u0980\u0982\7\u02e8\2\2\u0981\u0983"+
		"\5\u0376\u01bc\2\u0982\u0981\3\2\2\2\u0982\u0983\3\2\2\2\u0983\u0984\3"+
		"\2\2\2\u0984\u0985\5\u040e\u0208\2\u0985\u00b1\3\2\2\2\u0986\u0987\7\u025e"+
		"\2\2\u0987\u0988\t\22\2\2\u0988\u098d\5\u00b4[\2\u0989\u098a\7\u0198\2"+
		"\2\u098a\u098c\5\u00b4[\2\u098b\u0989\3\2\2\2\u098c\u098f\3\2\2\2\u098d"+
		"\u098b\3\2\2\2\u098d\u098e\3\2\2\2\u098e\u00b3\3\2\2\2\u098f\u098d\3\2"+
		"\2\2\u0990\u0991\5\u03e2\u01f2\2\u0991\u0992\7\u028f\2\2\u0992\u0993\5"+
		"\u03dc\u01ef\2\u0993\u00b5\3\2\2\2\u0994\u0996\7\64\2\2\u0995\u0997\7"+
		"\u0289\2\2\u0996\u0995\3\2\2\2\u0996\u0997\3\2\2\2\u0997\u0998\3\2\2\2"+
		"\u0998\u0999\5\u03e2\u01f2\2\u0999\u00b7\3\2\2\2\u099a\u099b\7\u00a4\2"+
		"\2\u099b\u099c\7\u0289\2\2\u099c\u099d\7\u01fd\2\2\u099d\u099e\5\u041e"+
		"\u0210\2\u099e\u00b9\3\2\2\2\u099f\u09a0\7\u01bf\2\2\u09a0\u09a6\5\u03ba"+
		"\u01de\2\u09a1\u09a3\7\u019b\2\2\u09a2\u09a4\5\u02ae\u0158\2\u09a3\u09a2"+
		"\3\2\2\2\u09a3\u09a4\3\2\2\2\u09a4\u09a5\3\2\2\2\u09a5\u09a7\7\u019c\2"+
		"\2\u09a6\u09a1\3\2\2\2\u09a6\u09a7\3\2\2\2\u09a7\u00bb\3\2\2\2\u09a8\u09a9"+
		"\6_#\2\u09a9\u09ab\5\u011c\u008f\2\u09aa\u09a8\3\2\2\2\u09aa\u09ab\3\2"+
		"\2\2\u09ab\u09ac\3\2\2\2\u09ac\u09b0\7\u01e2\2\2\u09ad\u09af\5\u00c0a"+
		"\2\u09ae\u09ad\3\2\2\2\u09af\u09b2\3\2\2\2\u09b0\u09ae\3\2\2\2\u09b0\u09b1"+
		"\3\2\2\2\u09b1\u09cf\3\2\2\2\u09b2\u09b0\3\2\2\2\u09b3\u09c7\7\u01fd\2"+
		"\2\u09b4\u09b5\5\u03e6\u01f4\2\u09b5\u09b6\7\u029c\2\2\u09b6\u09b8\5\u012a"+
		"\u0096\2\u09b7\u09b9\5\u013a\u009e\2\u09b8\u09b7\3\2\2\2\u09b8\u09b9\3"+
		"\2\2\2\u09b9\u09c8\3\2\2\2\u09ba\u09bc\5\u03e2\u01f2\2\u09bb\u09bd\5\u00be"+
		"`\2\u09bc\u09bb\3\2\2\2\u09bc\u09bd\3\2\2\2\u09bd\u09bf\3\2\2\2\u09be"+
		"\u09c0\5\u013a\u009e\2\u09bf\u09be\3\2\2\2\u09bf\u09c0\3\2\2\2\u09c0\u09c2"+
		"\3\2\2\2\u09c1\u09c3\5\u0124\u0093\2\u09c2\u09c1\3\2\2\2\u09c2\u09c3\3"+
		"\2\2\2\u09c3\u09c5\3\2\2\2\u09c4\u09c6\5\u00fa~\2\u09c5\u09c4\3\2\2\2"+
		"\u09c5\u09c6\3\2\2\2\u09c6\u09c8\3\2\2\2\u09c7\u09b4\3\2\2\2\u09c7\u09ba"+
		"\3\2\2\2\u09c8\u09d0\3\2\2\2\u09c9\u09ca\5\u03e6\u01f4\2\u09ca\u09cb\7"+
		"\u01fd\2\2\u09cb\u09cd\5\u012a\u0096\2\u09cc\u09ce\5\u013a\u009e\2\u09cd"+
		"\u09cc\3\2\2\2\u09cd\u09ce\3\2\2\2\u09ce\u09d0\3\2\2\2\u09cf\u09b3\3\2"+
		"\2\2\u09cf\u09c9\3\2\2\2\u09d0\u00bd\3\2\2\2\u09d1\u09d2\6`$\2\u09d2\u09d3"+
		"\7\"\2\2\u09d3\u09d4\7\u019b\2\2\u09d4\u09d5\5\u03fe\u0200\2\u09d5\u09d6"+
		"\7\u019c\2\2\u09d6\u00bf\3\2\2\2\u09d7\u09d8\t\23\2\2\u09d8\u00c1\3\2"+
		"\2\2\u09d9\u09de\7\21\2\2\u09da\u09db\6b%\2\u09db\u09df\5\u02ae\u0158"+
		"\2\u09dc\u09dd\6b&\2\u09dd\u09df\5\u0134\u009b\2\u09de\u09da\3\2\2\2\u09de"+
		"\u09dc\3\2\2\2\u09df\u00c3\3\2\2\2\u09e0\u09f2\7\30\2\2\u09e1\u09e2\5"+
		"\u03e2\u01f2\2\u09e2\u09e4\7\36\2\2\u09e3\u09e5\5\u0162\u00b2\2\u09e4"+
		"\u09e3\3\2\2\2\u09e4\u09e5\3\2\2\2\u09e5\u09f3\3\2\2\2\u09e6\u09f0\5\u03fc"+
		"\u01ff\2\u09e7\u09f1\7\f\2\2\u09e8\u09e9\7\u0258\2\2\u09e9\u09eb\5\u00c6"+
		"d\2\u09ea\u09ec\5\u013a\u009e\2\u09eb\u09ea\3\2\2\2\u09eb\u09ec\3\2\2"+
		"\2\u09ec\u09ee\3\2\2\2\u09ed\u09ef\5\u00f8}\2\u09ee\u09ed\3\2\2\2\u09ee"+
		"\u09ef\3\2\2\2\u09ef\u09f1\3\2\2\2\u09f0\u09e7\3\2\2\2\u09f0\u09e8\3\2"+
		"\2\2\u09f1\u09f3\3\2\2\2\u09f2\u09e1\3\2\2\2\u09f2\u09e6\3\2\2\2\u09f3"+
		"\u00c5\3\2\2\2\u09f4\u09ff\t\24\2\2\u09f5\u09fc\5\u03fc\u01ff\2\u09f6"+
		"\u09fd\t\25\2\2\u09f7\u09f8\t\26\2\2\u09f8\u09f9\7\u019b\2\2\u09f9\u09fa"+
		"\5\u00d6l\2\u09fa\u09fb\7\u019c\2\2\u09fb\u09fd\3\2\2\2\u09fc\u09f6\3"+
		"\2\2\2\u09fc\u09f7\3\2\2\2\u09fd\u09ff\3\2\2\2\u09fe\u09f4\3\2\2\2\u09fe"+
		"\u09f5\3\2\2\2\u09ff\u00c7\3\2\2\2\u0a00\u0a02\7\u0210\2\2\u0a01\u0a03"+
		"\5\u00caf\2\u0a02\u0a01\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03\u0a05\3\2\2"+
		"\2\u0a04\u0a06\7\u020a\2\2\u0a05\u0a04\3\2\2\2\u0a05\u0a06\3\2\2\2\u0a06"+
		"\u0a08\3\2\2\2\u0a07\u0a09\7\u0212\2\2\u0a08\u0a07\3\2\2\2\u0a08\u0a09"+
		"\3\2\2\2\u0a09\u0a0a\3\2\2\2\u0a0a\u0a0c\5\u03e2\u01f2\2\u0a0b\u0a0d\5"+
		"\u03a2\u01d2\2\u0a0c\u0a0b\3\2\2\2\u0a0c\u0a0d\3\2\2\2\u0a0d\u0a12\3\2"+
		"\2\2\u0a0e\u0a13\5\u00ccg\2\u0a0f\u0a10\7\u026d\2\2\u0a10\u0a13\5\u0384"+
		"\u01c3\2\u0a11\u0a13\5\u00d2j\2\u0a12\u0a0e\3\2\2\2\u0a12\u0a0f\3\2\2"+
		"\2\u0a12\u0a11\3\2\2\2\u0a13\u0a15\3\2\2\2\u0a14\u0a16\5\u00d8m\2\u0a15"+
		"\u0a14\3\2\2\2\u0a15\u0a16\3\2\2\2\u0a16\u00c9\3\2\2\2\u0a17\u0a18\t\27"+
		"\2\2\u0a18\u00cb\3\2\2\2\u0a19\u0a1b\7\u019b\2\2\u0a1a\u0a1c\5\u00ceh"+
		"\2\u0a1b\u0a1a\3\2\2\2\u0a1b\u0a1c\3\2\2\2\u0a1c\u0a1d\3\2\2\2\u0a1d\u0a1f"+
		"\7\u019c\2\2\u0a1e\u0a19\3\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f\u0a20\3\2\2"+
		"\2\u0a20\u0a21\5\u00d0i\2\u0a21\u00cd\3\2\2\2\u0a22\u0a27\5\u03ac\u01d7"+
		"\2\u0a23\u0a24\7\u0198\2\2\u0a24\u0a26\5\u03ac\u01d7\2\u0a25\u0a23\3\2"+
		"\2\2\u0a26\u0a29\3\2\2\2\u0a27\u0a25\3\2\2\2\u0a27\u0a28\3\2\2\2\u0a28"+
		"\u00cf\3\2\2\2\u0a29\u0a27\3\2\2\2\u0a2a\u0a2b\t\30\2\2\u0a2b\u0a2c\5"+
		"\u00d4k\2\u0a2c\u00d1\3\2\2\2\u0a2d\u0a35\5V,\2\u0a2e\u0a30\7\u019b\2"+
		"\2\u0a2f\u0a31\5\u00ceh\2\u0a30\u0a2f\3\2\2\2\u0a30\u0a31\3\2\2\2\u0a31"+
		"\u0a32\3\2\2\2\u0a32\u0a33\7\u019c\2\2\u0a33\u0a35\5V,\2\u0a34\u0a2d\3"+
		"\2\2\2\u0a34\u0a2e\3\2\2\2\u0a35\u00d3\3\2\2\2\u0a36\u0a38\7\u019b\2\2"+
		"\u0a37\u0a39\5\u00d6l\2\u0a38\u0a37\3\2\2\2\u0a38\u0a39\3\2\2\2\u0a39"+
		"\u0a3a\3\2\2\2\u0a3a\u0a43\7\u019c\2\2\u0a3b\u0a3c\7\u0198\2\2\u0a3c\u0a3e"+
		"\7\u019b\2\2\u0a3d\u0a3f\5\u00d6l\2\u0a3e\u0a3d\3\2\2\2\u0a3e\u0a3f\3"+
		"\2\2\2\u0a3f\u0a40\3\2\2\2\u0a40\u0a42\7\u019c\2\2\u0a41\u0a3b\3\2\2\2"+
		"\u0a42\u0a45\3\2\2\2\u0a43\u0a41\3\2\2\2\u0a43\u0a44\3\2\2\2\u0a44\u00d5"+
		"\3\2\2\2\u0a45\u0a43\3\2\2\2\u0a46\u0a49\5\u0260\u0131\2\u0a47\u0a49\7"+
		"\u01e0\2\2\u0a48\u0a46\3\2\2\2\u0a48\u0a47\3\2\2\2\u0a49\u0a51\3\2\2\2"+
		"\u0a4a\u0a4d\7\u0198\2\2\u0a4b\u0a4e\5\u0260\u0131\2\u0a4c\u0a4e\7\u01e0"+
		"\2\2\u0a4d\u0a4b\3\2\2\2\u0a4d\u0a4c\3\2\2\2\u0a4e\u0a50\3\2\2\2\u0a4f"+
		"\u0a4a\3\2\2\2\u0a50\u0a53\3\2\2\2\u0a51\u0a4f\3\2\2\2\u0a51\u0a52\3\2"+
		"\2\2\u0a52\u00d7\3\2\2\2\u0a53\u0a51\3\2\2\2\u0a54\u0a55\7\u0245\2\2\u0a55"+
		"\u0a56\7~\2\2\u0a56\u0a57\7\u021b\2\2\u0a57\u0a58\7\u0299\2\2\u0a58\u0a59"+
		"\5\u0384\u01c3\2\u0a59\u00d9\3\2\2\2\u0a5a\u0a5b\7\u0224\2\2\u0a5b\u0a5d"+
		"\5\u00dco\2\u0a5c\u0a5e\t\31\2\2\u0a5d\u0a5c\3\2\2\2\u0a5d\u0a5e\3\2\2"+
		"\2\u0a5e\u0a60\3\2\2\2\u0a5f\u0a61\7\u00b6\2\2\u0a60\u0a5f\3\2\2\2\u0a60"+
		"\u0a61\3\2\2\2\u0a61\u0a62\3\2\2\2\u0a62\u0a63\7\u020c\2\2\u0a63\u0a65"+
		"\5\u041a\u020e\2\u0a64\u0a66\t\t\2\2\u0a65\u0a64\3\2\2\2\u0a65\u0a66\3"+
		"\2\2\2\u0a66\u0a67\3\2\2\2\u0a67\u0a68\7\u0212\2\2\u0a68\u0a69\7\u0289"+
		"\2\2\u0a69\u0a6b\5\u03e2\u01f2\2\u0a6a\u0a6c\5\u03a2\u01d2\2\u0a6b\u0a6a"+
		"\3\2\2\2\u0a6b\u0a6c\3\2\2\2\u0a6c\u0a6e\3\2\2\2\u0a6d\u0a6f\5\u0388\u01c5"+
		"\2\u0a6e\u0a6d\3\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f\u0a71\3\2\2\2\u0a70\u0a72"+
		"\5\u00dep\2\u0a71\u0a70\3\2\2\2\u0a71\u0a72\3\2\2\2\u0a72\u0a74\3\2\2"+
		"\2\u0a73\u0a75\5\u038a\u01c6\2\u0a74\u0a73\3\2\2\2\u0a74\u0a75\3\2\2\2"+
		"\u0a75\u0a77\3\2\2\2\u0a76\u0a78\5\u038e\u01c8\2\u0a77\u0a76\3\2\2\2\u0a77"+
		"\u0a78\3\2\2\2\u0a78\u0a79\3\2\2\2\u0a79\u0a7a\5\u00e0q\2\u0a7a\u00db"+
		"\3\2\2\2\u0a7b\u0a7f\7o\2\2\u0a7c\u0a7d\6o\'\2\u0a7d\u0a7f\7\u017a\2\2"+
		"\u0a7e\u0a7b\3\2\2\2\u0a7e\u0a7c\3\2\2\2\u0a7f\u00dd\3\2\2\2\u0a80\u0a81"+
		"\6p(\2\u0a81\u0a82\7\u012c\2\2\u0a82\u0a83\7\u00a1\2\2\u0a83\u0a84\7\u01be"+
		"\2\2\u0a84\u0a85\5\u0418\u020d\2\u0a85\u00df\3\2\2\2\u0a86\u0a87\7\u020a"+
		"\2\2\u0a87\u0a88\7\u017e\2\2\u0a88\u0a8a\t\32\2\2\u0a89\u0a86\3\2\2\2"+
		"\u0a89\u0a8a\3\2\2\2\u0a8a\u0a8c\3\2\2\2\u0a8b\u0a8d\5\u00e2r\2\u0a8c"+
		"\u0a8b\3\2\2\2\u0a8c\u0a8d\3\2\2\2\u0a8d\u0a90\3\2\2\2\u0a8e\u0a8f\7\u026d"+
		"\2\2\u0a8f\u0a91\5\u0384\u01c3\2\u0a90\u0a8e\3\2\2\2\u0a90\u0a91\3\2\2"+
		"\2\u0a91\u00e1\3\2\2\2\u0a92\u0a94\7\u019b\2\2\u0a93\u0a95\5\u00e4s\2"+
		"\u0a94\u0a93\3\2\2\2\u0a94\u0a95\3\2\2\2\u0a95\u0a96\3\2\2\2\u0a96\u0a97"+
		"\7\u019c\2\2\u0a97\u00e3\3\2\2\2\u0a98\u0a9b\5\u03aa\u01d6\2\u0a99\u0a9b"+
		"\5\u02a0\u0151\2\u0a9a\u0a98\3\2\2\2\u0a9a\u0a99\3\2\2\2\u0a9b\u0aa3\3"+
		"\2\2\2\u0a9c\u0a9f\7\u0198\2\2\u0a9d\u0aa0\5\u03aa\u01d6\2\u0a9e\u0aa0"+
		"\5\u02a0\u0151\2\u0a9f\u0a9d\3\2\2\2\u0a9f\u0a9e\3\2\2\2\u0aa0\u0aa2\3"+
		"\2\2\2\u0aa1\u0a9c\3\2\2\2\u0aa2\u0aa5\3\2\2\2\u0aa3\u0aa1\3\2\2\2\u0aa3"+
		"\u0aa4\3\2\2\2\u0aa4\u00e5\3\2\2\2\u0aa5\u0aa3\3\2\2\2\u0aa6\u0aa8\7\u0260"+
		"\2\2\u0aa7\u0aa9\t\33\2\2\u0aa8\u0aa7\3\2\2\2\u0aa8\u0aa9\3\2\2\2\u0aa9"+
		"\u0aab\3\2\2\2\u0aaa\u0aac\7\u0212\2\2\u0aab\u0aaa\3\2\2\2\u0aab\u0aac"+
		"\3\2\2\2\u0aac\u0aad\3\2\2\2\u0aad\u0aaf\5\u03e2\u01f2\2\u0aae\u0ab0\5"+
		"\u03a2\u01d2\2\u0aaf\u0aae\3\2\2\2\u0aaf\u0ab0\3\2\2\2\u0ab0\u0ab5\3\2"+
		"\2\2\u0ab1\u0ab6\5\u00ccg\2\u0ab2\u0ab3\7\u026d\2\2\u0ab3\u0ab6\5\u0384"+
		"\u01c3\2\u0ab4\u0ab6\5\u00d2j\2\u0ab5\u0ab1\3\2\2\2\u0ab5\u0ab2\3\2\2"+
		"\2\u0ab5\u0ab4\3\2\2\2\u0ab6\u00e7\3\2\2\2\u0ab7\u0abb\5\u00ecw\2\u0ab8"+
		"\u0abb\5\u00f0y\2\u0ab9\u0abb\5\u00eav\2\u0aba\u0ab7\3\2\2\2\u0aba\u0ab8"+
		"\3\2\2\2\u0aba\u0ab9\3\2\2\2\u0abb\u00e9\3\2\2\2\u0abc\u0abd\7\u019b\2"+
		"\2\u0abd\u0abe\5\u00eav\2\u0abe\u0abf\7\u019c\2\2\u0abf\u0ac4\3\2\2\2"+
		"\u0ac0\u0ac1\5\u00ecw\2\u0ac1\u0ac2\5\u0100\u0081\2\u0ac2\u0ac4\3\2\2"+
		"\2\u0ac3\u0abc\3\2\2\2\u0ac3\u0ac0\3\2\2\2\u0ac4\u00eb\3\2\2\2\u0ac5\u0ac6"+
		"\6w)\2\u0ac6\u0ac8\5\u011c\u008f\2\u0ac7\u0ac5\3\2\2\2\u0ac7\u0ac8\3\2"+
		"\2\2\u0ac8\u0ad8\3\2\2\2\u0ac9\u0acb\5\u00eex\2\u0aca\u0acc\5\u0124\u0093"+
		"\2\u0acb\u0aca\3\2\2\2\u0acb\u0acc\3\2\2\2\u0acc\u0ace\3\2\2\2\u0acd\u0acf"+
		"\5\u00f8}\2\u0ace\u0acd\3\2\2\2\u0ace\u0acf\3\2\2\2\u0acf\u0ad9\3\2\2"+
		"\2\u0ad0\u0ad6\5\u00f0y\2\u0ad1\u0ad3\5\u0124\u0093\2\u0ad2\u0ad4\5\u00f8"+
		"}\2\u0ad3\u0ad2\3\2\2\2\u0ad3\u0ad4\3\2\2\2\u0ad4\u0ad7\3\2\2\2\u0ad5"+
		"\u0ad7\5\u00f8}\2\u0ad6\u0ad1\3\2\2\2\u0ad6\u0ad5\3\2\2\2\u0ad7\u0ad9"+
		"\3\2\2\2\u0ad8\u0ac9\3\2\2\2\u0ad8\u0ad0\3\2\2\2\u0ad9\u0adc\3\2\2\2\u0ada"+
		"\u0adb\6w*\2\u0adb\u0add\5\u0102\u0082\2\u0adc\u0ada\3\2\2\2\u0adc\u0add"+
		"\3\2\2\2\u0add\u0adf\3\2\2\2\u0ade\u0ae0\5\u012e\u0098\2\u0adf\u0ade\3"+
		"\2\2\2\u0adf\u0ae0\3\2\2\2\u0ae0\u0ae8\3\2\2\2\u0ae1\u0ae2\6w+\2\u0ae2"+
		"\u0ae3\5\u011c\u008f\2\u0ae3\u0ae5\5\u00f0y\2\u0ae4\u0ae6\5\u012e\u0098"+
		"\2\u0ae5\u0ae4\3\2\2\2\u0ae5\u0ae6\3\2\2\2\u0ae6\u0ae8\3\2\2\2\u0ae7\u0ac7"+
		"\3\2\2\2\u0ae7\u0ae1\3\2\2\2\u0ae8\u00ed\3\2\2\2\u0ae9\u0aea\bx\1\2\u0aea"+
		"\u0af5\5\u00f2z\2\u0aeb\u0aec\5\u00f0y\2\u0aec\u0aee\7\u0295\2\2\u0aed"+
		"\u0aef\5\u0160\u00b1\2\u0aee\u0aed\3\2\2\2\u0aee\u0aef\3\2\2\2\u0aef\u0af2"+
		"\3\2\2\2\u0af0\u0af3\5\u00f2z\2\u0af1\u0af3\5\u00f0y\2\u0af2\u0af0\3\2"+
		"\2\2\u0af2\u0af1\3\2\2\2\u0af3\u0af5\3\2\2\2\u0af4\u0ae9\3\2\2\2\u0af4"+
		"\u0aeb\3\2\2\2\u0af5\u0b01\3\2\2\2\u0af6\u0af7\f\4\2\2\u0af7\u0af9\7\u0295"+
		"\2\2\u0af8\u0afa\5\u0160\u00b1\2\u0af9\u0af8\3\2\2\2\u0af9\u0afa\3\2\2"+
		"\2\u0afa\u0afd\3\2\2\2\u0afb\u0afe\5\u00f2z\2\u0afc\u0afe\5\u00f0y\2\u0afd"+
		"\u0afb\3\2\2\2\u0afd\u0afc\3\2\2\2\u0afe\u0b00\3\2\2\2\u0aff\u0af6\3\2"+
		"\2\2\u0b00\u0b03\3\2\2\2\u0b01\u0aff\3\2\2\2\u0b01\u0b02\3\2\2\2\u0b02"+
		"\u00ef\3\2\2\2\u0b03\u0b01\3\2\2\2\u0b04\u0b07\7\u019b\2\2\u0b05\u0b08"+
		"\5\u00f0y\2\u0b06\u0b08\5\u00ecw\2\u0b07\u0b05\3\2\2\2\u0b07\u0b06\3\2"+
		"\2\2\u0b08\u0b09\3\2\2\2\u0b09\u0b0a\7\u019c\2\2\u0b0a\u00f1\3\2\2\2\u0b0b"+
		"\u0b0f\7\u0268\2\2\u0b0c\u0b0e\5\u012c\u0097\2\u0b0d\u0b0c\3\2\2\2\u0b0e"+
		"\u0b11\3\2\2\2\u0b0f\u0b0d\3\2\2\2\u0b0f\u0b10\3\2\2\2\u0b10\u0b12\3\2"+
		"\2\2\u0b11\u0b0f\3\2\2\2\u0b12\u0b14\5\u0134\u009b\2\u0b13\u0b15\5\u0100"+
		"\u0081\2\u0b14\u0b13\3\2\2\2\u0b14\u0b15\3\2\2\2\u0b15\u0b17\3\2\2\2\u0b16"+
		"\u0b18\5\u0128\u0095\2\u0b17\u0b16\3\2\2\2\u0b17\u0b18\3\2\2\2\u0b18\u0b1a"+
		"\3\2\2\2\u0b19\u0b1b\5\u013a\u009e\2\u0b1a\u0b19\3\2\2\2\u0b1a\u0b1b\3"+
		"\2\2\2\u0b1b\u0b1d\3\2\2\2\u0b1c\u0b1e\5\u0120\u0091\2\u0b1d\u0b1c\3\2"+
		"\2\2\u0b1d\u0b1e\3\2\2\2\u0b1e\u0b20\3\2\2\2\u0b1f\u0b21\5\u0104\u0083"+
		"\2\u0b20\u0b1f\3\2\2\2\u0b20\u0b21\3\2\2\2\u0b21\u0b24\3\2\2\2\u0b22\u0b23"+
		"\6z-\2\u0b23\u0b25\5\u0106\u0084\2\u0b24\u0b22\3\2\2\2\u0b24\u0b25\3\2"+
		"\2\2\u0b25\u00f3\3\2\2\2\u0b26\u0b27\5\u00f0y\2\u0b27\u00f5\3\2\2\2\u0b28"+
		"\u0b29\t\34\2\2\u0b29\u00f7\3\2\2\2\u0b2a\u0b2b\7\u0221\2\2\u0b2b\u0b2c"+
		"\5\u00fc\177\2\u0b2c\u00f9\3\2\2\2\u0b2d\u0b2e\7\u0221\2\2\u0b2e\u0b2f"+
		"\5\u00fe\u0080\2\u0b2f\u00fb\3\2\2\2\u0b30\u0b33\5\u00fe\u0080\2\u0b31"+
		"\u0b32\t\35\2\2\u0b32\u0b34\5\u00fe\u0080\2\u0b33\u0b31\3\2\2\2\u0b33"+
		"\u0b34\3\2\2\2\u0b34\u00fd\3\2\2\2\u0b35\u0b38\5\u03fc\u01ff\2\u0b36\u0b38"+
		"\t\36\2\2\u0b37\u0b35\3\2\2\2\u0b37\u0b36\3\2\2\2\u0b38\u00ff\3\2\2\2"+
		"\u0b39\u0b55\7\u0212\2\2\u0b3a\u0b3b\7\u024f\2\2\u0b3b\u0b3d\5\u0416\u020c"+
		"\2\u0b3c\u0b3e\5\u0388\u01c5\2\u0b3d\u0b3c\3\2\2\2\u0b3d\u0b3e\3\2\2\2"+
		"\u0b3e\u0b40\3\2\2\2\u0b3f\u0b41\5\u038a\u01c6\2\u0b40\u0b3f\3\2\2\2\u0b40"+
		"\u0b41\3\2\2\2\u0b41\u0b43\3\2\2\2\u0b42\u0b44\5\u038e\u01c8\2\u0b43\u0b42"+
		"\3\2\2\2\u0b43\u0b44\3\2\2\2\u0b44\u0b56\3\2\2\2\u0b45\u0b46\7}\2\2\u0b46"+
		"\u0b56\5\u0416\u020c\2\u0b47\u0b4a\5\u042c\u0217\2\u0b48\u0b4a\5\u02a0"+
		"\u0151\2\u0b49\u0b47\3\2\2\2\u0b49\u0b48\3\2\2\2\u0b4a\u0b52\3\2\2\2\u0b4b"+
		"\u0b4e\7\u0198\2\2\u0b4c\u0b4f\5\u042c\u0217\2\u0b4d\u0b4f\5\u02a0\u0151"+
		"\2\u0b4e\u0b4c\3\2\2\2\u0b4e\u0b4d\3\2\2\2\u0b4f\u0b51\3\2\2\2\u0b50\u0b4b"+
		"\3\2\2\2\u0b51\u0b54\3\2\2\2\u0b52\u0b50\3\2\2\2\u0b52\u0b53\3\2\2\2\u0b53"+
		"\u0b56\3\2\2\2\u0b54\u0b52\3\2\2\2\u0b55\u0b3a\3\2\2\2\u0b55\u0b45\3\2"+
		"\2\2\u0b55\u0b49\3\2\2\2\u0b56\u0101\3\2\2\2\u0b57\u0b58\7\u0254\2\2\u0b58"+
		"\u0b59\7\u01af\2\2\u0b59\u0b5f\7\u019b\2\2\u0b5a\u0b5d\7\u017e\2\2\u0b5b"+
		"\u0b5c\7\u0198\2\2\u0b5c\u0b5e\7\u017e\2\2\u0b5d\u0b5b\3\2\2\2\u0b5d\u0b5e"+
		"\3\2\2\2\u0b5e\u0b60\3\2\2\2\u0b5f\u0b5a\3\2\2\2\u0b5f\u0b60\3\2\2\2\u0b60"+
		"\u0b61\3\2\2\2\u0b61\u0b62\7\u019c\2\2\u0b62\u0103\3\2\2\2\u0b63\u0b64"+
		"\7\u0204\2\2\u0b64\u0b65\5\u0260\u0131\2\u0b65\u0105\3\2\2\2\u0b66\u0b67"+
		"\7\u02dd\2\2\u0b67\u0b6c\5\u0108\u0085\2\u0b68\u0b69\7\u0198\2\2\u0b69"+
		"\u0b6b\5\u0108\u0085\2\u0b6a\u0b68\3\2\2\2\u0b6b\u0b6e\3\2\2\2\u0b6c\u0b6a"+
		"\3\2\2\2\u0b6c\u0b6d\3\2\2\2\u0b6d\u0107\3\2\2\2\u0b6e\u0b6c\3\2\2\2\u0b6f"+
		"\u0b70\5\u03f8\u01fd\2\u0b70\u0b71\7\u01b1\2\2\u0b71\u0b72\5\u010a\u0086"+
		"\2\u0b72\u0109\3\2\2\2\u0b73\u0b74\7\u019b\2\2\u0b74\u0b75\5\u010c\u0087"+
		"\2\u0b75\u0b76\7\u019c\2\2\u0b76\u010b\3\2\2\2\u0b77\u0b79\5\u03f8\u01fd"+
		"\2\u0b78\u0b77\3\2\2\2\u0b78\u0b79\3\2\2\2\u0b79\u0b7c\3\2\2\2\u0b7a\u0b7b"+
		"\7\"\2\2\u0b7b\u0b7d\5\u02bc\u015f\2\u0b7c\u0b7a\3\2\2\2\u0b7c\u0b7d\3"+
		"\2\2\2\u0b7d\u0b7f\3\2\2\2\u0b7e\u0b80\5\u0124\u0093\2\u0b7f\u0b7e\3\2"+
		"\2\2\u0b7f\u0b80\3\2\2\2\u0b80\u0b82\3\2\2\2\u0b81\u0b83\5\u010e\u0088"+
		"\2\u0b82\u0b81\3\2\2\2\u0b82\u0b83\3\2\2\2\u0b83\u010d\3\2\2\2\u0b84\u0b85"+
		"\5\u0110\u0089\2\u0b85\u0b87\5\u0112\u008a\2\u0b86\u0b88\5\u011a\u008e"+
		"\2\u0b87\u0b86\3\2\2\2\u0b87\u0b88\3\2\2\2\u0b88\u010f\3\2\2\2\u0b89\u0b8a"+
		"\t\37\2\2\u0b8a\u0111\3\2\2\2\u0b8b\u0b8e\5\u0114\u008b\2\u0b8c\u0b8e"+
		"\5\u0116\u008c\2\u0b8d\u0b8b\3\2\2\2\u0b8d\u0b8c\3\2\2\2\u0b8e\u0113\3"+
		"\2\2\2\u0b8f\u0b90\7\u02dc\2\2\u0b90\u0b9e\7\u02d7\2\2\u0b91\u0b92\5\u040c"+
		"\u0207\2\u0b92\u0b93\7\u02d7\2\2\u0b93\u0b9e\3\2\2\2\u0b94\u0b95\7\u01a6"+
		"\2\2\u0b95\u0b9e\7\u02d7\2\2\u0b96\u0b97\7\u0211\2\2\u0b97\u0b98\5\u0260"+
		"\u0131\2\u0b98\u0b99\5\u02b6\u015c\2\u0b99\u0b9a\7\u02d7\2\2\u0b9a\u0b9e"+
		"\3\2\2\2\u0b9b\u0b9c\7m\2\2\u0b9c\u0b9e\7\u012f\2\2\u0b9d\u0b8f\3\2\2"+
		"\2\u0b9d\u0b91\3\2\2\2\u0b9d\u0b94\3\2\2\2\u0b9d\u0b96\3\2\2\2\u0b9d\u0b9b"+
		"\3\2\2\2\u0b9e\u0115\3\2\2\2\u0b9f\u0ba0\7\u01b5\2\2\u0ba0\u0ba1\5\u0118"+
		"\u008d\2\u0ba1\u0ba2\7\u01b0\2\2\u0ba2\u0ba3\5\u0118\u008d\2\u0ba3\u0117"+
		"\3\2\2\2\u0ba4\u0bb2\5\u0114\u008b\2\u0ba5\u0ba6\7\u02dc\2\2\u0ba6\u0bb2"+
		"\7\u02cc\2\2\u0ba7\u0ba8\5\u040c\u0207\2\u0ba8\u0ba9\7\u02cc\2\2\u0ba9"+
		"\u0bb2\3\2\2\2\u0baa\u0bab\7\u01a6\2\2\u0bab\u0bb2\7\u02cc\2\2\u0bac\u0bad"+
		"\7\u0211\2\2\u0bad\u0bae\5\u0260\u0131\2\u0bae\u0baf\5\u02b6\u015c\2\u0baf"+
		"\u0bb0\7\u02cc\2\2\u0bb0\u0bb2\3\2\2\2\u0bb1\u0ba4\3\2\2\2\u0bb1\u0ba5"+
		"\3\2\2\2\u0bb1\u0ba7\3\2\2\2\u0bb1\u0baa\3\2\2\2\u0bb1\u0bac\3\2\2\2\u0bb2"+
		"\u0119\3\2\2\2\u0bb3\u0bba\7\u02ca\2\2\u0bb4\u0bb5\7m\2\2\u0bb5\u0bbb"+
		"\7\u012f\2\2\u0bb6\u0bbb\7\u0202\2\2\u0bb7\u0bbb\7\u02db\2\2\u0bb8\u0bb9"+
		"\7\35\2\2\u0bb9\u0bbb\7\u02d4\2\2\u0bba\u0bb4\3\2\2\2\u0bba\u0bb6\3\2"+
		"\2\2\u0bba\u0bb7\3\2\2\2\u0bba\u0bb8\3\2\2\2\u0bbb\u011b\3\2\2\2\u0bbc"+
		"\u0bbe\7\u02ac\2\2\u0bbd\u0bbf\7\u02bb\2\2\u0bbe\u0bbd\3\2\2\2\u0bbe\u0bbf"+
		"\3\2\2\2\u0bbf\u0bc0\3\2\2\2\u0bc0\u0bc5\5\u011e\u0090\2\u0bc1\u0bc2\7"+
		"\u0198\2\2\u0bc2\u0bc4\5\u011e\u0090\2\u0bc3\u0bc1\3\2\2\2\u0bc4\u0bc7"+
		"\3\2\2\2\u0bc5\u0bc3\3\2\2\2\u0bc5\u0bc6\3\2\2\2\u0bc6\u011d\3\2\2\2\u0bc7"+
		"\u0bc5\3\2\2\2\u0bc8\u0bca\5\u03fc\u01ff\2\u0bc9\u0bcb\5\u03a8\u01d5\2"+
		"\u0bca\u0bc9\3\2\2\2\u0bca\u0bcb\3\2\2\2\u0bcb\u0bcc\3\2\2\2\u0bcc\u0bcd"+
		"\7\u01b1\2\2\u0bcd\u0bce\5\u00f4{\2\u0bce\u011f\3\2\2\2\u0bcf\u0bd0\7"+
		"\u0202\2\2\u0bd0\u0bd1\7\u01be\2\2\u0bd1\u0bd3\5\u02bc\u015f\2\u0bd2\u0bd4"+
		"\5\u0122\u0092\2\u0bd3\u0bd2\3\2\2\2\u0bd3\u0bd4\3\2\2\2\u0bd4\u0121\3"+
		"\2\2\2\u0bd5\u0bd6\7\u02ac\2\2\u0bd6\u0bdb\7\u0129\2\2\u0bd7\u0bd8\6\u0092"+
		".\2\u0bd8\u0bd9\7\u02ac\2\2\u0bd9\u0bdb\7l\2\2\u0bda\u0bd5\3\2\2\2\u0bda"+
		"\u0bd7\3\2\2\2\u0bdb\u0123\3\2\2\2\u0bdc\u0bdd\7\u024c\2\2\u0bdd\u0bde"+
		"\7\u01be\2\2\u0bde\u0bdf\5\u02bc\u015f\2\u0bdf\u0125\3\2\2\2\u0be0\u0be1"+
		"\t \2\2\u0be1\u0127\3\2\2\2\u0be2\u0be5\7\u01fd\2\2\u0be3\u0be6\7\u01ea"+
		"\2\2\u0be4\u0be6\5\u012a\u0096\2\u0be5\u0be3\3\2\2\2\u0be5\u0be4\3\2\2"+
		"\2\u0be6\u0129\3\2\2\2\u0be7\u0bec\5\u013c\u009f\2\u0be8\u0be9\7\u0198"+
		"\2\2\u0be9\u0beb\5\u013c\u009f\2\u0bea\u0be8\3\2\2\2\u0beb\u0bee\3\2\2"+
		"\2\u0bec\u0bea\3\2\2\2\u0bec\u0bed\3\2\2\2\u0bed\u012b\3\2\2\2\u0bee\u0bec"+
		"\3\2\2\2\u0bef\u0bf8\5\u00f6|\2\u0bf0\u0bf8\7\u0142\2\2\u0bf1\u0bf2\6"+
		"\u0097/\2\u0bf2\u0bf8\7\u0140\2\2\u0bf3\u0bf4\6\u0097\60\2\u0bf4\u0bf5"+
		"\7\u00d3\2\2\u0bf5\u0bf6\7\u0181\2\2\u0bf6\u0bf8\5\u040a\u0206\2\u0bf7"+
		"\u0bef\3\2\2\2\u0bf7\u0bf0\3\2\2\2\u0bf7\u0bf1\3\2\2\2\u0bf7\u0bf3\3\2"+
		"\2\2\u0bf8\u012d\3\2\2\2\u0bf9\u0bfa\7\u01fb\2\2\u0bfa\u0bfe\5\u0130\u0099"+
		"\2\u0bfb\u0bfc\6\u0098\61\2\u0bfc\u0bfd\7\u02be\2\2\u0bfd\u0bff\5\u03e6"+
		"\u01f4\2\u0bfe\u0bfb\3\2\2\2\u0bfe\u0bff\3\2\2\2\u0bff\u0c02\3\2\2\2\u0c00"+
		"\u0c01\6\u0098\62\2\u0c01\u0c03\5\u0132\u009a\2\u0c02\u0c00\3\2\2\2\u0c02"+
		"\u0c03\3\2\2\2\u0c03\u0c09\3\2\2\2\u0c04\u0c05\7\u0226\2\2\u0c05\u0c06"+
		"\7\u0214\2\2\u0c06\u0c07\7\u0138\2\2\u0c07\u0c09\7\u00e0\2\2\u0c08\u0bf9"+
		"\3\2\2\2\u0c08\u0c04\3\2\2\2\u0c09\u012f\3\2\2\2\u0c0a\u0c0e\7\u0299\2"+
		"\2\u0c0b\u0c0c\6\u0099\63\2\u0c0c\u0c0e\7\u0138\2\2\u0c0d\u0c0a\3\2\2"+
		"\2\u0c0d\u0c0b\3\2\2\2\u0c0e\u0131\3\2\2\2\u0c0f\u0c10\7\u02bf\2\2\u0c10"+
		"\u0c13\7\u02c0\2\2\u0c11\u0c13\7\u02c1\2\2\u0c12\u0c0f\3\2\2\2\u0c12\u0c11"+
		"\3\2\2\2\u0c13\u0133\3\2\2\2\u0c14\u0c17\5\u0136\u009c\2\u0c15\u0c17\7"+
		"\u018b\2\2\u0c16\u0c14\3\2\2\2\u0c16\u0c15\3\2\2\2\u0c17\u0c1c\3\2\2\2"+
		"\u0c18\u0c19\7\u0198\2\2\u0c19\u0c1b\5\u0136\u009c\2\u0c1a\u0c18\3\2\2"+
		"\2\u0c1b\u0c1e\3\2\2\2\u0c1c\u0c1a\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0135"+
		"\3\2\2\2\u0c1e\u0c1c\3\2\2\2\u0c1f\u0c25\5\u03b2\u01da\2\u0c20\u0c22\5"+
		"\u0260\u0131\2\u0c21\u0c23\5\u0138\u009d\2\u0c22\u0c21\3\2\2\2\u0c22\u0c23"+
		"\3\2\2\2\u0c23\u0c25\3\2\2\2\u0c24\u0c1f\3\2\2\2\u0c24\u0c20\3\2\2\2\u0c25"+
		"\u0137\3\2\2\2\u0c26\u0c28\7\u01b1\2\2\u0c27\u0c26\3\2\2\2\u0c27\u0c28"+
		"\3\2\2\2\u0c28\u0c2b\3\2\2\2\u0c29\u0c2c\5\u03fc\u01ff\2\u0c2a\u0c2c\5"+
		"\u0416\u020c\2\u0c2b\u0c29\3\2\2\2\u0c2b\u0c2a\3\2\2\2\u0c2c\u0139\3\2"+
		"\2\2\u0c2d\u0c2e\7\u02aa\2\2\u0c2e\u0c2f\5\u0260\u0131\2\u0c2f\u013b\3"+
		"\2\2\2\u0c30\u0c37\5\u0146\u00a4\2\u0c31\u0c32\7\u019d\2\2\u0c32\u0c33"+
		"\5\u03fc\u01ff\2\u0c33\u0c34\5\u013c\u009f\2\u0c34\u0c35\7\u019e\2\2\u0c35"+
		"\u0c37\3\2\2\2\u0c36\u0c30\3\2\2\2\u0c36\u0c31\3\2\2\2\u0c37\u0c3b\3\2"+
		"\2\2\u0c38\u0c3a\5\u013e\u00a0\2\u0c39\u0c38\3\2\2\2\u0c3a\u0c3d\3\2\2"+
		"\2\u0c3b\u0c39\3\2\2\2\u0c3b\u0c3c\3\2\2\2\u0c3c\u013d\3\2\2\2\u0c3d\u0c3b"+
		"\3\2\2\2\u0c3e\u0c3f\5\u0142\u00a2\2\u0c3f\u0c44\5\u013c\u009f\2\u0c40"+
		"\u0c41\7\u0245\2\2\u0c41\u0c45\5\u0260\u0131\2\u0c42\u0c43\7\u029c\2\2"+
		"\u0c43\u0c45\5\u0400\u0201\2\u0c44\u0c40\3\2\2\2\u0c44\u0c42\3\2\2\2\u0c44"+
		"\u0c45\3\2\2\2\u0c45\u0c52\3\2\2\2\u0c46\u0c47\5\u0144\u00a3\2\u0c47\u0c4c"+
		"\5\u013c\u009f\2\u0c48\u0c49\7\u0245\2\2\u0c49\u0c4d\5\u0260\u0131\2\u0c4a"+
		"\u0c4b\7\u029c\2\2\u0c4b\u0c4d\5\u0400\u0201\2\u0c4c\u0c48\3\2\2\2\u0c4c"+
		"\u0c4a\3\2\2\2\u0c4d\u0c52\3\2\2\2\u0c4e\u0c4f\5\u0140\u00a1\2\u0c4f\u0c50"+
		"\5\u0146\u00a4\2\u0c50\u0c52\3\2\2\2\u0c51\u0c3e\3\2\2\2\u0c51\u0c46\3"+
		"\2\2\2\u0c51\u0c4e\3\2\2\2\u0c52\u013f\3\2\2\2\u0c53\u0c55\7\u023b\2\2"+
		"\u0c54\u0c56\7\u020d\2\2\u0c55\u0c54\3\2\2\2\u0c55\u0c56\3\2\2\2\u0c56"+
		"\u0c57\3\2\2\2\u0c57\u0c5f\7\u0219\2\2\u0c58\u0c59\7\u023b\2\2\u0c59\u0c5b"+
		"\t!\2\2\u0c5a\u0c5c\7\u024e\2\2\u0c5b\u0c5a\3\2\2\2\u0c5b\u0c5c\3\2\2"+
		"\2\u0c5c\u0c5d\3\2\2\2\u0c5d\u0c5f\7\u0219\2\2\u0c5e\u0c53\3\2\2\2\u0c5e"+
		"\u0c58\3\2\2\2\u0c5f\u0141\3\2\2\2\u0c60\u0c62\t\"\2\2\u0c61\u0c60\3\2"+
		"\2\2\u0c61\u0c62\3\2\2\2\u0c62\u0c63\3\2\2\2\u0c63\u0c66\7\u0219\2\2\u0c64"+
		"\u0c66\7\u0282\2\2\u0c65\u0c61\3\2\2\2\u0c65\u0c64\3\2\2\2\u0c66\u0143"+
		"\3\2\2\2\u0c67\u0c69\t!\2\2\u0c68\u0c6a\7\u024e\2\2\u0c69\u0c68\3\2\2"+
		"\2\u0c69\u0c6a\3\2\2\2\u0c6a\u0c6b\3\2\2\2\u0c6b\u0c6c\7\u0219\2\2\u0c6c"+
		"\u0145\3\2\2\2\u0c6d\u0c75\5\u0148\u00a5\2\u0c6e\u0c75\5\u014a\u00a6\2"+
		"\u0c6f\u0c75\5\u014c\u00a7\2\u0c70\u0c75\5\u014e\u00a8\2\u0c71\u0c75\5"+
		"\u0150\u00a9\2\u0c72\u0c73\6\u00a4\64\2\u0c73\u0c75\5\u0152\u00aa\2\u0c74"+
		"\u0c6d\3\2\2\2\u0c74\u0c6e\3\2\2\2\u0c74\u0c6f\3\2\2\2\u0c74\u0c70\3\2"+
		"\2\2\u0c74\u0c71\3\2\2\2\u0c74\u0c72\3\2\2\2\u0c75\u0147\3\2\2\2\u0c76"+
		"\u0c78\5\u03e2\u01f2\2\u0c77\u0c79\5\u03a2\u01d2\2\u0c78\u0c77\3\2\2\2"+
		"\u0c78\u0c79\3\2\2\2\u0c79\u0c7b\3\2\2\2\u0c7a\u0c7c\5\u0162\u00b2\2\u0c7b"+
		"\u0c7a\3\2\2\2\u0c7b\u0c7c\3\2\2\2\u0c7c\u0c7e\3\2\2\2\u0c7d\u0c7f\5\u0164"+
		"\u00b3\2\u0c7e\u0c7d\3\2\2\2\u0c7e\u0c7f\3\2\2\2\u0c7f\u0149\3\2\2\2\u0c80"+
		"\u0c83\7\u019b\2\2\u0c81\u0c84\5\u0148\u00a5\2\u0c82\u0c84\5\u014a\u00a6"+
		"\2\u0c83\u0c81\3\2\2\2\u0c83\u0c82\3\2\2\2\u0c84\u0c85\3\2\2\2\u0c85\u0c86"+
		"\7\u019c\2\2\u0c86\u014b\3\2\2\2\u0c87\u0c88\5\u00f4{\2\u0c88\u0c8b\5"+
		"\u0162\u00b2\2\u0c89\u0c8a\6\u00a7\65\2\u0c8a\u0c8c\5\u03a8\u01d5\2\u0c8b"+
		"\u0c89\3\2\2\2\u0c8b\u0c8c\3\2\2\2\u0c8c\u014d\3\2\2\2\u0c8d\u0c92\7\u019b"+
		"\2\2\u0c8e\u0c8f\5\u0320\u0191\2\u0c8f\u0c90\5\u013e\u00a0\2\u0c90\u0c93"+
		"\3\2\2\2\u0c91\u0c93\5\u014e\u00a8\2\u0c92\u0c8e\3\2\2\2\u0c92\u0c91\3"+
		"\2\2\2\u0c93\u0c94\3\2\2\2\u0c94\u0c95\7\u019c\2\2\u0c95\u014f\3\2\2\2"+
		"\u0c96\u0c99\7\u019b\2\2\u0c97\u0c9a\5\u012a\u0096\2\u0c98\u0c9a\5\u0150"+
		"\u00a9\2\u0c99\u0c97\3\2\2\2\u0c99\u0c98\3\2\2\2\u0c9a\u0c9b\3\2\2\2\u0c9b"+
		"\u0c9c\7\u019c\2\2\u0c9c\u0151\3\2\2\2\u0c9d\u0c9e\7\u02df\2\2\u0c9e\u0c9f"+
		"\7\u019b\2\2\u0c9f\u0ca0\5\u0260\u0131\2\u0ca0\u0ca1\7\u0198\2\2\u0ca1"+
		"\u0ca2\5\u0416\u020c\2\u0ca2\u0ca3\5\u0154\u00ab\2\u0ca3\u0ca4\7\u019c"+
		"\2\2\u0ca4\u0ca5\5\u0162\u00b2\2\u0ca5\u0153\3\2\2\2\u0ca6\u0ca7\7\\\2"+
		"\2\u0ca7\u0ca8\7\u019b\2\2\u0ca8\u0cad\5\u0156\u00ac\2\u0ca9\u0caa\7\u0198"+
		"\2\2\u0caa\u0cac\5\u0156\u00ac\2\u0cab\u0ca9\3\2\2\2\u0cac\u0caf\3\2\2"+
		"\2\u0cad\u0cab\3\2\2\2\u0cad\u0cae\3\2\2\2\u0cae\u0cb0\3\2\2\2\u0caf\u0cad"+
		"\3\2\2\2\u0cb0\u0cb1\7\u019c\2\2\u0cb1\u0155\3\2\2\2\u0cb2\u0cb3\5\u03fc"+
		"\u01ff\2\u0cb3\u0cb4\7\u01fb\2\2\u0cb4\u0cb5\7\u02e1\2\2\u0cb5\u0cc6\3"+
		"\2\2\2\u0cb6\u0cb7\5\u03fc\u01ff\2\u0cb7\u0cb9\5\u0338\u019d\2\u0cb8\u0cba"+
		"\7\u01f2\2\2\u0cb9\u0cb8\3\2\2\2\u0cb9\u0cba\3\2\2\2\u0cba\u0cbb\3\2\2"+
		"\2\u0cbb\u0cbc\7\u02e2\2\2\u0cbc\u0cbe\5\u0416\u020c\2\u0cbd\u0cbf\5\u0158"+
		"\u00ad\2\u0cbe\u0cbd\3\2\2\2\u0cbe\u0cbf\3\2\2\2\u0cbf\u0cc6\3\2\2\2\u0cc0"+
		"\u0cc1\7\u02e0\2\2\u0cc1\u0cc2\7\u02e2\2\2\u0cc2\u0cc3\5\u0416\u020c\2"+
		"\u0cc3\u0cc4\5\u0154\u00ab\2\u0cc4\u0cc6\3\2\2\2\u0cc5\u0cb2\3\2\2\2\u0cc5"+
		"\u0cb6\3\2\2\2\u0cc5\u0cc0\3\2\2\2\u0cc6\u0157\3\2\2\2\u0cc7\u0cc9\5\u015a"+
		"\u00ae\2\u0cc8\u0cca\5\u015c\u00af\2\u0cc9\u0cc8\3\2\2\2\u0cc9\u0cca\3"+
		"\2\2\2\u0cca\u0cd0\3\2\2\2\u0ccb\u0ccd\5\u015c\u00af\2\u0ccc\u0cce\5\u015a"+
		"\u00ae\2\u0ccd\u0ccc\3\2\2\2\u0ccd\u0cce\3\2\2\2\u0cce\u0cd0\3\2\2\2\u0ccf"+
		"\u0cc7\3\2\2\2\u0ccf\u0ccb\3\2\2\2\u0cd0\u0159\3\2\2\2\u0cd1\u0cd2\5\u015e"+
		"\u00b0\2\u0cd2\u0cd3\7\u0245\2\2\u0cd3\u0cd4\7\u02de\2\2\u0cd4\u015b\3"+
		"\2\2\2\u0cd5\u0cd6\5\u015e\u00b0\2\u0cd6\u0cd7\7\u0245\2\2\u0cd7\u0cd8"+
		"\7\u0084\2\2\u0cd8\u015d\3\2\2\2\u0cd9\u0cde\7\u0084\2\2\u0cda\u0cde\7"+
		"\u0242\2\2\u0cdb\u0cdc\7\u01e0\2\2\u0cdc\u0cde\5\u0416\u020c\2\u0cdd\u0cd9"+
		"\3\2\2\2\u0cdd\u0cda\3\2\2\2\u0cdd\u0cdb\3\2\2\2\u0cde\u015f\3\2\2\2\u0cdf"+
		"\u0ce0\t#\2\2\u0ce0\u0161\3\2\2\2\u0ce1\u0ce3\t$\2\2\u0ce2\u0ce1\3\2\2"+
		"\2\u0ce2\u0ce3\3\2\2\2\u0ce3\u0ce4\3\2\2\2\u0ce4\u0ce5\5\u03fc\u01ff\2"+
		"\u0ce5\u0163\3\2\2\2\u0ce6\u0ceb\5\u0166\u00b4\2\u0ce7\u0ce8\7\u0198\2"+
		"\2\u0ce8\u0cea\5\u0166\u00b4\2\u0ce9\u0ce7\3\2\2\2\u0cea\u0ced\3\2\2\2"+
		"\u0ceb\u0ce9\3\2\2\2\u0ceb\u0cec\3\2\2\2\u0cec\u0165\3\2\2\2\u0ced\u0ceb"+
		"\3\2\2\2\u0cee\u0cef\5\u0168\u00b5\2\u0cef\u0cf1\5\u016a\u00b6\2\u0cf0"+
		"\u0cf2\5\u016c\u00b7\2\u0cf1\u0cf0\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0cf3"+
		"\3\2\2\2\u0cf3\u0cf4\7\u019b\2\2\u0cf4\u0cf5\5\u016e\u00b8\2\u0cf5\u0cf6"+
		"\7\u019c\2\2\u0cf6\u0d03\3\2\2\2\u0cf7\u0cf8\7\u029b\2\2\u0cf8\u0cfa\5"+
		"\u016a\u00b6\2\u0cf9\u0cfb\5\u016c\u00b7\2\u0cfa\u0cf9\3\2\2\2\u0cfa\u0cfb"+
		"\3\2\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0cfe\7\u019b\2\2\u0cfd\u0cff\5\u016e"+
		"\u00b8\2\u0cfe\u0cfd\3\2\2\2\u0cfe\u0cff\3\2\2\2\u0cff\u0d00\3\2\2\2\u0d00"+
		"\u0d01\7\u019c\2\2\u0d01\u0d03\3\2\2\2\u0d02\u0cee\3\2\2\2\u0d02\u0cf7"+
		"\3\2\2\2\u0d03\u0167\3\2\2\2\u0d04\u0d05\t%\2\2\u0d05\u0169\3\2\2\2\u0d06"+
		"\u0d07\t&\2\2\u0d07\u016b\3\2\2\2\u0d08\u0d0e\7\u01fb\2\2\u0d09\u0d0f"+
		"\7\u0219\2\2\u0d0a\u0d0b\7\u024c\2\2\u0d0b\u0d0f\7\u01be\2\2\u0d0c\u0d0d"+
		"\7\u0202\2\2\u0d0d\u0d0f\7\u01be\2\2\u0d0e\u0d09\3\2\2\2\u0d0e\u0d0a\3"+
		"\2\2\2\u0d0e\u0d0c\3\2\2\2\u0d0f\u016d\3\2\2\2\u0d10\u0d15\5\u0170\u00b9"+
		"\2\u0d11\u0d12\7\u0198\2\2\u0d12\u0d14\5\u0170\u00b9\2\u0d13\u0d11\3\2"+
		"\2\2\u0d14\u0d17\3\2\2\2\u0d15\u0d13\3\2\2\2\u0d15\u0d16\3\2\2\2\u0d16"+
		"\u016f\3\2\2\2\u0d17\u0d15\3\2\2\2\u0d18\u0d1b\5\u03fc\u01ff\2\u0d19\u0d1b"+
		"\7\u0253\2\2\u0d1a\u0d18\3\2\2\2\u0d1a\u0d19\3\2\2\2\u0d1b\u0171\3\2\2"+
		"\2\u0d1c\u0d1d\6\u00ba\66\2\u0d1d\u0d1f\5\u011c\u008f\2\u0d1e\u0d1c\3"+
		"\2\2\2\u0d1e\u0d1f\3\2\2\2\u0d1f\u0d20\3\2\2\2\u0d20\u0d22\7\u0299\2\2"+
		"\u0d21\u0d23\7\u022c\2\2\u0d22\u0d21\3\2\2\2\u0d22\u0d23\3\2\2\2\u0d23"+
		"\u0d25\3\2\2\2\u0d24\u0d26\7\u020a\2\2\u0d25\u0d24\3\2\2\2\u0d25\u0d26"+
		"\3\2\2\2\u0d26\u0d27\3\2\2\2\u0d27\u0d28\5\u012a\u0096\2\u0d28\u0d29\7"+
		"\u026d\2\2\u0d29\u0d2b\5\u0384\u01c3\2\u0d2a\u0d2c\5\u013a\u009e\2\u0d2b"+
		"\u0d2a\3\2\2\2\u0d2b\u0d2c\3\2\2\2\u0d2c\u0d2e\3\2\2\2\u0d2d\u0d2f\5\u0124"+
		"\u0093\2\u0d2e\u0d2d\3\2\2\2\u0d2e\u0d2f\3\2\2\2\u0d2f\u0d31\3\2\2\2\u0d30"+
		"\u0d32\5\u00fa~\2\u0d31\u0d30\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32\u0173"+
		"\3\2\2\2\u0d33\u0d38\5\u0176\u00bc\2\u0d34\u0d38\5\u0180\u00c1\2\u0d35"+
		"\u0d38\5\u0182\u00c2\2\u0d36\u0d38\5\u0188\u00c5\2\u0d37\u0d33\3\2\2\2"+
		"\u0d37\u0d34\3\2\2\2\u0d37\u0d35\3\2\2\2\u0d37\u0d36\3\2\2\2\u0d38\u0175"+
		"\3\2\2\2\u0d39\u0d3a\7\62\2\2\u0d3a\u0d3e\7\u015d\2\2\u0d3b\u0d3d\5\u017a"+
		"\u00be\2\u0d3c\u0d3b\3\2\2\2\u0d3d\u0d40\3\2\2\2\u0d3e\u0d3c\3\2\2\2\u0d3e"+
		"\u0d3f\3\2\2\2\u0d3f\u0d53\3\2\2\2\u0d40\u0d3e\3\2\2\2\u0d41\u0d43\7\16"+
		"\2\2\u0d42\u0d44\7\u0176\2\2\u0d43\u0d42\3\2\2\2\u0d43\u0d44\3\2\2\2\u0d44"+
		"\u0d4a\3\2\2\2\u0d45\u0d47\7\u01b0\2\2\u0d46\u0d48\7\35\2\2\u0d47\u0d46"+
		"\3\2\2\2\u0d47\u0d48\3\2\2\2\u0d48\u0d49\3\2\2\2\u0d49\u0d4b\7Q\2\2\u0d4a"+
		"\u0d45\3\2\2\2\u0d4a\u0d4b\3\2\2\2\u0d4b\u0d50\3\2\2\2\u0d4c\u0d4e\7\35"+
		"\2\2\u0d4d\u0d4c\3\2\2\2\u0d4d\u0d4e\3\2\2\2\u0d4e\u0d4f\3\2\2\2\u0d4f"+
		"\u0d51\7\u025d\2\2\u0d50\u0d4d\3\2\2\2\u0d50\u0d51\3\2\2\2\u0d51\u0d53"+
		"\3\2\2\2\u0d52\u0d39\3\2\2\2\u0d52\u0d41\3\2\2\2\u0d53\u0177\3\2\2\2\u0d54"+
		"\u0d56\7\7\2\2\u0d55\u0d57\7\u0176\2\2\u0d56\u0d55\3\2\2\2\u0d56\u0d57"+
		"\3\2\2\2\u0d57\u0179\3\2\2\2\u0d58\u0d59\7\u02ac\2\2\u0d59\u0d5a\7e\2"+
		"\2\u0d5a\u0d5f\7\u013a\2\2\u0d5b\u0d5c\6\u00be\67\2\u0d5c\u0d5d\7\u0258"+
		"\2\2\u0d5d\u0d5f\t\'\2\2\u0d5e\u0d58\3\2\2\2\u0d5e\u0d5b\3\2\2\2\u0d5f"+
		"\u017b\3\2\2\2\u0d60\u0d61\7\u00ab\2\2\u0d61\u0d62\7\u00b3\2\2\u0d62\u0d67"+
		"\5\u017e\u00c0\2\u0d63\u0d64\6\u00bf8\2\u0d64\u0d65\7\u0258\2\2\u0d65"+
		"\u0d67\t\'\2\2\u0d66\u0d60\3\2\2\2\u0d66\u0d63\3\2\2\2\u0d67\u017d\3\2"+
		"\2\2\u0d68\u0d69\7\u011c\2\2\u0d69\u0d6e\7\u0258\2\2\u0d6a\u0d6b\7\u0258"+
		"\2\2\u0d6b\u0d6e\t(\2\2\u0d6c\u0d6e\7\u0135\2\2\u0d6d\u0d68\3\2\2\2\u0d6d"+
		"\u0d6a\3\2\2\2\u0d6d\u0d6c\3\2\2\2\u0d6e\u017f\3\2\2\2\u0d6f\u0d70\7+"+
		"\2\2\u0d70\u0d8d\5\u03fc\u01ff\2\u0d71\u0d73\7*\2\2\u0d72\u0d74\7\u0176"+
		"\2\2\u0d73\u0d72\3\2\2\2\u0d73\u0d74\3\2\2\2\u0d74\u0d87\3\2\2\2\u0d75"+
		"\u0d77\7\u028f\2\2\u0d76\u0d78\7+\2\2\u0d77\u0d76\3\2\2\2\u0d77\u0d78"+
		"\3\2\2\2\u0d78\u0d79\3\2\2\2\u0d79\u0d88\5\u03fc\u01ff\2\u0d7a\u0d7c\7"+
		"\u01b0\2\2\u0d7b\u0d7d\7\35\2\2\u0d7c\u0d7b\3\2\2\2\u0d7c\u0d7d\3\2\2"+
		"\2\u0d7d\u0d7e\3\2\2\2\u0d7e\u0d80\7Q\2\2\u0d7f\u0d7a\3\2\2\2\u0d7f\u0d80"+
		"\3\2\2\2\u0d80\u0d85\3\2\2\2\u0d81\u0d83\7\35\2\2\u0d82\u0d81\3\2\2\2"+
		"\u0d82\u0d83\3\2\2\2\u0d83\u0d84\3\2\2\2\u0d84\u0d86\7\u025d\2\2\u0d85"+
		"\u0d82\3\2\2\2\u0d85\u0d86\3\2\2\2\u0d86\u0d88\3\2\2\2\u0d87\u0d75\3\2"+
		"\2\2\u0d87\u0d7f\3\2\2\2\u0d88\u0d8d\3\2\2\2\u0d89\u0d8a\7\u025d\2\2\u0d8a"+
		"\u0d8b\7+\2\2\u0d8b\u0d8d\5\u03fc\u01ff\2\u0d8c\u0d6f\3\2\2\2\u0d8c\u0d71"+
		"\3\2\2\2\u0d8c\u0d89\3\2\2\2\u0d8d\u0181\3\2\2\2\u0d8e\u0d8f\7\u0226\2"+
		"\2\u0d8f\u0d90\t\22\2\2\u0d90\u0d95\5\u0184\u00c3\2\u0d91\u0d92\7\u0198"+
		"\2\2\u0d92\u0d94\5\u0184\u00c3\2\u0d93\u0d91\3\2\2\2\u0d94\u0d97\3\2\2"+
		"\2\u0d95\u0d93\3\2\2\2\u0d95\u0d96\3\2\2\2\u0d96\u0da5\3\2\2\2\u0d97\u0d95"+
		"\3\2\2\2\u0d98\u0d99\6\u00c29\2\u0d99\u0d9a\7\u0226\2\2\u0d9a\u0d9b\7"+
		"\u00a7\2\2\u0d9b\u0d9c\7\u01fb\2\2\u0d9c\u0da5\7\6\2\2\u0d9d\u0da2\7\u0297"+
		"\2\2\u0d9e\u0da3\7\u0156\2\2\u0d9f\u0da3\7\u0289\2\2\u0da0\u0da1\6\u00c2"+
		":\2\u0da1\u0da3\7\u00a7\2\2\u0da2\u0d9e\3\2\2\2\u0da2\u0d9f\3\2\2\2\u0da2"+
		"\u0da0\3\2\2\2\u0da3\u0da5\3\2\2\2\u0da4\u0d8e\3\2\2\2\u0da4\u0d98\3\2"+
		"\2\2\u0da4\u0d9d\3\2\2\2\u0da5\u0183\3\2\2\2\u0da6\u0da8\5\u03e2\u01f2"+
		"\2\u0da7\u0da9\5\u0162\u00b2\2\u0da8\u0da7\3\2\2\2\u0da8\u0da9\3\2\2\2"+
		"\u0da9\u0daa\3\2\2\2\u0daa\u0dab\5\u0186\u00c4\2\u0dab\u0185\3\2\2\2\u0dac"+
		"\u0dae\7\u0258\2\2\u0dad\u0daf\7\u00b6\2\2\u0dae\u0dad\3\2\2\2\u0dae\u0daf"+
		"\3\2\2\2\u0daf\u0db5\3\2\2\2\u0db0\u0db2\7\u022c\2\2\u0db1\u0db0\3\2\2"+
		"\2\u0db1\u0db2\3\2\2\2\u0db2\u0db3\3\2\2\2\u0db3\u0db5\7\u02b0\2\2\u0db4"+
		"\u0dac\3\2\2\2\u0db4\u0db1\3\2\2\2\u0db5\u0187\3\2\2\2\u0db6\u0dd1\79"+
		"\2\2\u0db7\u0db8\t)\2\2\u0db8\u0dba\5\u018c\u00c7\2\u0db9\u0dbb\t*\2\2"+
		"\u0dba\u0db9\3\2\2\2\u0dba\u0dbb\3\2\2\2\u0dbb\u0dd2\3\2\2\2\u0dbc\u0dbd"+
		"\7\22\2\2\u0dbd\u0dc3\5\u018c\u00c7\2\u0dbe\u0dc1\7\u0152\2\2\u0dbf\u0dc0"+
		"\7\u01fb\2\2\u0dc0\u0dc2\7\u00dc\2\2\u0dc1\u0dbf\3\2\2\2\u0dc1\u0dc2\3"+
		"\2\2\2\u0dc2\u0dc4\3\2\2\2\u0dc3\u0dbe\3\2\2\2\u0dc3\u0dc4\3\2\2\2\u0dc4"+
		"\u0dd2\3\2\2\2\u0dc5\u0dc6\7%\2\2\u0dc6\u0dd2\5\u018c\u00c7\2\u0dc7\u0dc8"+
		"\7\16\2\2\u0dc8\u0dcb\5\u018c\u00c7\2\u0dc9\u0dca\7\u00f7\2\2\u0dca\u0dcc"+
		"\7\u00fe\2\2\u0dcb\u0dc9\3\2\2\2\u0dcb\u0dcc\3\2\2\2\u0dcc\u0dd2\3\2\2"+
		"\2\u0dcd\u0dce\7*\2\2\u0dce\u0dd2\5\u018c\u00c7\2\u0dcf\u0dd0\7\u0111"+
		"\2\2\u0dd0\u0dd2\5\u018a\u00c6\2\u0dd1\u0db7\3\2\2\2\u0dd1\u0dbc\3\2\2"+
		"\2\u0dd1\u0dc5\3\2\2\2\u0dd1\u0dc7\3\2\2\2\u0dd1\u0dcd\3\2\2\2\u0dd1\u0dcf"+
		"\3\2\2\2\u0dd2\u0189\3\2\2\2\u0dd3\u0dd6\6\u00c6;\2\u0dd4\u0dd5\7\u01cb"+
		"\2\2\u0dd5\u0dd7\7\u0179\2\2\u0dd6\u0dd4\3\2\2\2\u0dd6\u0dd7\3\2\2\2\u0dd7"+
		"\u0dda\3\2\2\2\u0dd8\u0dda\3\2\2\2\u0dd9\u0dd3\3\2\2\2\u0dd9\u0dd8\3\2"+
		"\2\2\u0dda\u018b\3\2\2\2\u0ddb\u0de2\5\u0418\u020d\2\u0ddc\u0ddd\7\u0198"+
		"\2\2\u0ddd\u0de0\5\u0418\u020d\2\u0dde\u0ddf\7\u0198\2\2\u0ddf\u0de1\5"+
		"\u0408\u0205\2\u0de0\u0dde\3\2\2\2\u0de0\u0de1\3\2\2\2\u0de1\u0de3\3\2"+
		"\2\2\u0de2\u0ddc\3\2\2\2\u0de2\u0de3\3\2\2\2\u0de3\u018d\3\2\2\2\u0de4"+
		"\u0de5\7\u0255\2\2\u0de5\u0de6\t+\2\2\u0de6\u0deb\7\u00b9\2\2\u0de7\u0de8"+
		"\7\u028f\2\2\u0de8\u0dec\5\u041a\u020e\2\u0de9\u0dea\7\u01b4\2\2\u0dea"+
		"\u0dec\5\u0260\u0131\2\u0deb\u0de7\3\2\2\2\u0deb\u0de9\3\2\2\2\u0dec\u0e07"+
		"\3\2\2\2\u0ded\u0e07\5\u0196\u00cc\2\u0dee\u0def\7(\2\2\u0def\u0df4\5"+
		"\u0190\u00c9\2\u0df0\u0df1\7\u0198\2\2\u0df1\u0df3\5\u0190\u00c9\2\u0df2"+
		"\u0df0\3\2\2\2\u0df3\u0df6\3\2\2\2\u0df4\u0df2\3\2\2\2\u0df4\u0df5\3\2"+
		"\2\2\u0df5\u0e07\3\2\2\2\u0df6\u0df4\3\2\2\2\u0df7\u0df8\6\u00c8<\2\u0df8"+
		"\u0df9\7(\2\2\u0df9\u0dfd\7\u02b4\2\2\u0dfa\u0dfb\5\u0376\u01bc\2\u0dfb"+
		"\u0dfc\5\u03fc\u01ff\2\u0dfc\u0dfe\3\2\2\2\u0dfd\u0dfa\3\2\2\2\u0dfd\u0dfe"+
		"\3\2\2\2\u0dfe\u0e07\3\2\2\2\u0dff\u0e07\5\u01ae\u00d8\2\u0e00\u0e01\6"+
		"\u00c8=\2\u0e01\u0e07\5\u01a0\u00d1\2\u0e02\u0e03\6\u00c8>\2\u0e03\u0e07"+
		"\5\u0194\u00cb\2\u0e04\u0e05\6\u00c8?\2\u0e05\u0e07\5\u01b8\u00dd\2\u0e06"+
		"\u0de4\3\2\2\2\u0e06\u0ded\3\2\2\2\u0e06\u0dee\3\2\2\2\u0e06\u0df7\3\2"+
		"\2\2\u0e06\u0dff\3\2\2\2\u0e06\u0e00\3\2\2\2\u0e06\u0e02\3\2\2\2\u0e06"+
		"\u0e04\3\2\2\2\u0e07\u018f\3\2\2\2\u0e08\u0e0a\7\u00bb\2\2\u0e09\u0e0b"+
		"\5\u0192\u00ca\2\u0e0a\u0e09\3\2\2\2\u0e0a\u0e0b\3\2\2\2\u0e0b\u0e17\3"+
		"\2\2\2\u0e0c\u0e0d\6\u00c9@\2\u0e0d\u0e0e\7\u010d\2\2\u0e0e\u0e17\7\t"+
		"\2\2\u0e0f\u0e11\7/\2\2\u0e10\u0e12\7\u01ad\2\2\u0e11\u0e10\3\2\2\2\u0e11"+
		"\u0e12\3\2\2\2\u0e12\u0e14\3\2\2\2\u0e13\u0e15\5\u02c0\u0161\2\u0e14\u0e13"+
		"\3\2\2\2\u0e14\u0e15\3\2\2\2\u0e15\u0e17\3\2\2\2\u0e16\u0e08\3\2\2\2\u0e16"+
		"\u0e0c\3\2\2\2\u0e16\u0e0f\3\2\2\2\u0e17\u0191\3\2\2\2\u0e18\u0e19\6\u00ca"+
		"A\2\u0e19\u0e1a\7\u028f\2\2\u0e1a\u0e1b\5\u040a\u0206\2\u0e1b\u0193\3"+
		"\2\2\2\u0e1c\u0e20\7\u0224\2\2\u0e1d\u0e21\7o\2\2\u0e1e\u0e1f\7\u0289"+
		"\2\2\u0e1f\u0e21\5\u03e2\u01f2\2\u0e20\u0e1d\3\2\2\2\u0e20\u0e1e\3\2\2"+
		"\2\u0e21\u0e22\3\2\2\2\u0e22\u0e23\7\u01fd\2\2\u0e23\u0e24\7\u00bb\2\2"+
		"\u0e24\u0195\3\2\2\2\u0e25\u0e26\7\u01c3\2\2\u0e26\u0e27\7\u00bb\2\2\u0e27"+
		"\u0e28\7\u028f\2\2\u0e28\u0e2a\5\u0198\u00cd\2\u0e29\u0e2b\5\u02c0\u0161"+
		"\2\u0e2a\u0e29\3\2\2\2\u0e2a\u0e2b\3\2\2\2\u0e2b\u0197\3\2\2\2\u0e2c\u0e31"+
		"\5\u019a\u00ce\2\u0e2d\u0e2e\7\u0198\2\2\u0e2e\u0e30\5\u019a\u00ce\2\u0e2f"+
		"\u0e2d\3\2\2\2\u0e30\u0e33\3\2\2\2\u0e31\u0e2f\3\2\2\2\u0e31\u0e32\3\2"+
		"\2\2\u0e32\u0199\3\2\2\2\u0e33\u0e31\3\2\2\2\u0e34\u0e35\7\u00bd\2\2\u0e35"+
		"\u0e36\7\u0181\2\2\u0e36\u0e7b\5\u041c\u020f\2\u0e37\u0e38\7\u022d\2\2"+
		"\u0e38\u0e39\7\u0181\2\2\u0e39\u0e7b\5\u041c\u020f\2\u0e3a\u0e3b\7\u00c1"+
		"\2\2\u0e3b\u0e3c\7\u0181\2\2\u0e3c\u0e7b\5\u041c\u020f\2\u0e3d\u0e3e\7"+
		"\u00c2\2\2\u0e3e\u0e3f\7\u0181\2\2\u0e3f\u0e7b\5\u041c\u020f\2\u0e40\u0e41"+
		"\7\u00be\2\2\u0e41\u0e42\7\u0181\2\2\u0e42\u0e7b\5\u0408\u0205\2\u0e43"+
		"\u0e44\7\u00c4\2\2\u0e44\u0e45\7\u0181\2\2\u0e45\u0e7b\5\u0408\u0205\2"+
		"\u0e46\u0e47\7\u00c5\2\2\u0e47\u0e48\7\u0181\2\2\u0e48\u0e7b\5\u0408\u0205"+
		"\2\u0e49\u0e4a\7\u00c6\2\2\u0e4a\u0e4b\7\u0181\2\2\u0e4b\u0e7b\5\u0408"+
		"\u0205\2\u0e4c\u0e4d\7\u00c7\2\2\u0e4d\u0e4e\7\u0181\2\2\u0e4e\u0e7b\5"+
		"\u0408\u0205\2\u0e4f\u0e50\7\u00c8\2\2\u0e50\u0e51\7\u0181\2\2\u0e51\u0e7b"+
		"\5\u041c\u020f\2\u0e52\u0e53\7\u00ca\2\2\u0e53\u0e54\7\u0181\2\2\u0e54"+
		"\u0e7b\5\u041c\u020f\2\u0e55\u0e56\7\u00c9\2\2\u0e56\u0e57\7\u0181\2\2"+
		"\u0e57\u0e7b\5\u041c\u020f\2\u0e58\u0e59\7\u00cb\2\2\u0e59\u0e5a\7\u0181"+
		"\2\2\u0e5a\u0e7b\5\u041c\u020f\2\u0e5b\u0e5c\7\u00cc\2\2\u0e5c\u0e5d\7"+
		"\u0181\2\2\u0e5d\u0e7b\5\u041c\u020f\2\u0e5e\u0e5f\7\u00cf\2\2\u0e5f\u0e60"+
		"\7\u0181\2\2\u0e60\u0e7b\5\u041c\u020f\2\u0e61\u0e62\7\u022e\2\2\u0e62"+
		"\u0e63\7\u0181\2\2\u0e63\u0e7b\5\u0408\u0205\2\u0e64\u0e65\7\u00cd\2\2"+
		"\u0e65\u0e66\7\u0181\2\2\u0e66\u0e7b\5\u041a\u020e\2\u0e67\u0e68\7\u00ce"+
		"\2\2\u0e68\u0e69\7\u0181\2\2\u0e69\u0e7b\5\u041c\u020f\2\u0e6a\u0e6b\7"+
		"\u02ea\2\2\u0e6b\u0e6c\7\u0181\2\2\u0e6c\u0e7b\5\u041c\u020f\2\u0e6d\u0e6e"+
		"\7\u02eb\2\2\u0e6e\u0e6f\7\u0181\2\2\u0e6f\u0e7b\5\u0408\u0205\2\u0e70"+
		"\u0e71\7\u00bc\2\2\u0e71\u0e72\7\u0181\2\2\u0e72\u0e7b\5\u0408\u0205\2"+
		"\u0e73\u0e74\7\u00a2\2\2\u0e74\u0e75\7\u0181\2\2\u0e75\u0e7b\5\u019e\u00d0"+
		"\2\u0e76\u0e77\7\u00d0\2\2\u0e77\u0e78\7\u0181\2\2\u0e78\u0e7b\5\u0408"+
		"\u0205\2\u0e79\u0e7b\5\u019c\u00cf\2\u0e7a\u0e34\3\2\2\2\u0e7a\u0e37\3"+
		"\2\2\2\u0e7a\u0e3a\3\2\2\2\u0e7a\u0e3d\3\2\2\2\u0e7a\u0e40\3\2\2\2\u0e7a"+
		"\u0e43\3\2\2\2\u0e7a\u0e46\3\2\2\2\u0e7a\u0e49\3\2\2\2\u0e7a\u0e4c\3\2"+
		"\2\2\u0e7a\u0e4f\3\2\2\2\u0e7a\u0e52\3\2\2\2\u0e7a\u0e55\3\2\2\2\u0e7a"+
		"\u0e58\3\2\2\2\u0e7a\u0e5b\3\2\2\2\u0e7a\u0e5e\3\2\2\2\u0e7a\u0e61\3\2"+
		"\2\2\u0e7a\u0e64\3\2\2\2\u0e7a\u0e67\3\2\2\2\u0e7a\u0e6a\3\2\2\2\u0e7a"+
		"\u0e6d\3\2\2\2\u0e7a\u0e70\3\2\2\2\u0e7a\u0e73\3\2\2\2\u0e7a\u0e76\3\2"+
		"\2\2\u0e7a\u0e79\3\2\2\2\u0e7b\u019b\3\2\2\2\u0e7c\u0e7d\7\u00bf\2\2\u0e7d"+
		"\u0e7e\7\u0181\2\2\u0e7e\u0e89\5\u041c\u020f\2\u0e7f\u0e80\7\u00c0\2\2"+
		"\u0e80\u0e81\7\u0181\2\2\u0e81\u0e89\5\u040c\u0207\2\u0e82\u0e83\7\u0117"+
		"\2\2\u0e83\u0e84\7\u0181\2\2\u0e84\u0e89\5\u041c\u020f\2\u0e85\u0e86\7"+
		"\u0118\2\2\u0e86\u0e87\7\u0181\2\2\u0e87\u0e89\5\u0408\u0205\2\u0e88\u0e7c"+
		"\3\2\2\2\u0e88\u0e7f\3\2\2\2\u0e88\u0e82\3\2\2\2\u0e88\u0e85\3\2\2\2\u0e89"+
		"\u019d\3\2\2\2\u0e8a\u0e93\7\u019b\2\2\u0e8b\u0e90\5\u0408\u0205\2\u0e8c"+
		"\u0e8d\7\u0198\2\2\u0e8d\u0e8f\5\u0408\u0205\2\u0e8e\u0e8c\3\2\2\2\u0e8f"+
		"\u0e92\3\2\2\2\u0e90\u0e8e\3\2\2\2\u0e90\u0e91\3\2\2\2\u0e91\u0e94\3\2"+
		"\2\2\u0e92\u0e90\3\2\2\2\u0e93\u0e8b\3\2\2\2\u0e93\u0e94\3\2\2\2\u0e94"+
		"\u0e95\3\2\2\2\u0e95\u0e96\7\u019c\2\2\u0e96\u019f\3\2\2\2\u0e97\u0e98"+
		"\7\u01c3\2\2\u0e98\u0e99\7\u011d\2\2\u0e99\u0e9a\7\u0095\2\2\u0e9a\u0e9f"+
		"\5\u01a2\u00d2\2\u0e9b\u0e9c\7\u0198\2\2\u0e9c\u0e9e\5\u01a2\u00d2\2\u0e9d"+
		"\u0e9b\3\2\2\2\u0e9e\u0ea1\3\2\2\2\u0e9f\u0e9d\3\2\2\2\u0e9f\u0ea0\3\2"+
		"\2\2\u0ea0\u0ea4\3\2\2\2\u0ea1\u0e9f\3\2\2\2\u0ea2\u0ea3\6\u00d1B\2\u0ea3"+
		"\u0ea5\5\u02c0\u0161\2\u0ea4\u0ea2\3\2\2\2\u0ea4\u0ea5\3\2\2\2\u0ea5\u01a1"+
		"\3\2\2\2\u0ea6\u0ea7\7\u011e\2\2\u0ea7\u0ea8\7\u0181\2\2\u0ea8\u0eaa\7"+
		"\u019b\2\2\u0ea9\u0eab\5\u01a4\u00d3\2\u0eaa\u0ea9\3\2\2\2\u0eaa\u0eab"+
		"\3\2\2\2\u0eab\u0eac\3\2\2\2\u0eac\u0ed8\7\u019c\2\2\u0ead\u0eae\7\u011f"+
		"\2\2\u0eae\u0eaf\7\u0181\2\2\u0eaf\u0eb1\7\u019b\2\2\u0eb0\u0eb2\5\u01a4"+
		"\u00d3\2\u0eb1\u0eb0\3\2\2\2\u0eb1\u0eb2\3\2\2\2\u0eb2\u0eb3\3\2\2\2\u0eb3"+
		"\u0ed8\7\u019c\2\2\u0eb4\u0eb5\7\u0120\2\2\u0eb5\u0eb6\7\u0181\2\2\u0eb6"+
		"\u0eb8\7\u019b\2\2\u0eb7\u0eb9\5\u01a6\u00d4\2\u0eb8\u0eb7\3\2\2\2\u0eb8"+
		"\u0eb9\3\2\2\2\u0eb9\u0eba\3\2\2\2\u0eba\u0ed8\7\u019c\2\2\u0ebb\u0ebc"+
		"\7\u0121\2\2\u0ebc\u0ebd\7\u0181\2\2\u0ebd\u0ebf\7\u019b\2\2\u0ebe\u0ec0"+
		"\5\u01a6\u00d4\2\u0ebf\u0ebe\3\2\2\2\u0ebf\u0ec0\3\2\2\2\u0ec0\u0ec1\3"+
		"\2\2\2\u0ec1\u0ed8\7\u019c\2\2\u0ec2\u0ec3\7\u0122\2\2\u0ec3\u0ec4\7\u0181"+
		"\2\2\u0ec4\u0ec6\7\u019b\2\2\u0ec5\u0ec7\5\u01a8\u00d5\2\u0ec6\u0ec5\3"+
		"\2\2\2\u0ec6\u0ec7\3\2\2\2\u0ec7\u0ec8\3\2\2\2\u0ec8\u0ed8\7\u019c\2\2"+
		"\u0ec9\u0eca\7\u0123\2\2\u0eca\u0ecb\7\u0181\2\2\u0ecb\u0ecd\7\u019b\2"+
		"\2\u0ecc\u0ece\5\u01a8\u00d5\2\u0ecd\u0ecc\3\2\2\2\u0ecd\u0ece\3\2\2\2"+
		"\u0ece\u0ecf\3\2\2\2\u0ecf\u0ed8\7\u019c\2\2\u0ed0\u0ed1\7\u0124\2\2\u0ed1"+
		"\u0ed2\7\u0181\2\2\u0ed2\u0ed4\7\u019b\2\2\u0ed3\u0ed5\5\u01ac\u00d7\2"+
		"\u0ed4\u0ed3\3\2\2\2\u0ed4\u0ed5\3\2\2\2\u0ed5\u0ed6\3\2\2\2\u0ed6\u0ed8"+
		"\7\u019c\2\2\u0ed7\u0ea6\3\2\2\2\u0ed7\u0ead\3\2\2\2\u0ed7\u0eb4\3\2\2"+
		"\2\u0ed7\u0ebb\3\2\2\2\u0ed7\u0ec2\3\2\2\2\u0ed7\u0ec9\3\2\2\2\u0ed7\u0ed0"+
		"\3\2\2\2\u0ed8\u01a3\3\2\2\2\u0ed9\u0ede\5\u03b6\u01dc\2\u0eda\u0edb\7"+
		"\u0198\2\2\u0edb\u0edd\5\u03b6\u01dc\2\u0edc\u0eda\3\2\2\2\u0edd\u0ee0"+
		"\3\2\2\2\u0ede\u0edc\3\2\2\2\u0ede\u0edf\3\2\2\2\u0edf\u01a5\3\2\2\2\u0ee0"+
		"\u0ede\3\2\2\2\u0ee1\u0ee6\5\u03de\u01f0\2\u0ee2\u0ee3\7\u0198\2\2\u0ee3"+
		"\u0ee5\5\u03de\u01f0\2\u0ee4\u0ee2\3\2\2\2\u0ee5\u0ee8\3\2\2\2\u0ee6\u0ee4"+
		"\3\2\2\2\u0ee6\u0ee7\3\2\2\2\u0ee7\u01a7\3\2\2\2\u0ee8\u0ee6\3\2\2\2\u0ee9"+
		"\u0eee\5\u01aa\u00d6\2\u0eea\u0eeb\7\u0198\2\2\u0eeb\u0eed\5\u01aa\u00d6"+
		"\2\u0eec\u0eea\3\2\2\2\u0eed\u0ef0\3\2\2\2\u0eee\u0eec\3\2\2\2\u0eee\u0eef"+
		"\3\2\2\2\u0eef\u01a9\3\2\2\2\u0ef0\u0eee\3\2\2\2\u0ef1\u0ef2\5\u041c\u020f"+
		"\2\u0ef2\u01ab\3\2\2\2\u0ef3\u0ef8\5\u0380\u01c1\2\u0ef4\u0ef5\7\u0198"+
		"\2\2\u0ef5\u0ef7\5\u0380\u01c1\2\u0ef6\u0ef4\3\2\2\2\u0ef7\u0efa\3\2\2"+
		"\2\u0ef8\u0ef6\3\2\2\2\u0ef8\u0ef9\3\2\2\2\u0ef9\u01ad\3\2\2\2\u0efa\u0ef8"+
		"\3\2\2\2\u0efb\u0efc\7\62\2\2\u0efc\u0efe\7/\2\2\u0efd\u0eff\5\u01b4\u00db"+
		"\2\u0efe\u0efd\3\2\2\2\u0efe\u0eff\3\2\2\2\u0eff\u0f02\3\2\2\2\u0f00\u0f01"+
		"\7\u016c\2\2\u0f01\u0f03\5\u01b0\u00d9\2\u0f02\u0f00\3\2\2\2\u0f02\u0f03"+
		"\3\2\2\2\u0f03\u0f04\3\2\2\2\u0f04\u0f06\5\u01b2\u00da\2\u0f05\u0f07\5"+
		"\u02c0\u0161\2\u0f06\u0f05\3\2\2\2\u0f06\u0f07\3\2\2\2\u0f07\u0f11\3\2"+
		"\2\2\u0f08\u0f09\7\63\2\2\u0f09\u0f0b\7/\2\2\u0f0a\u0f0c\5\u01b4\u00db"+
		"\2\u0f0b\u0f0a\3\2\2\2\u0f0b\u0f0c\3\2\2\2\u0f0c\u0f0e\3\2\2\2\u0f0d\u0f0f"+
		"\5\u02c0\u0161\2\u0f0e\u0f0d\3\2\2\2\u0f0e\u0f0f\3\2\2\2\u0f0f\u0f11\3"+
		"\2\2\2\u0f10\u0efb\3\2\2\2\u0f10\u0f08\3\2\2\2\u0f11\u01af\3\2\2\2\u0f12"+
		"\u0f1a\5\u019c\u00cf\2\u0f13\u0f14\6\u00d9C\2\u0f14\u0f15\t,\2\2\u0f15"+
		"\u0f16\7\u0181\2\2\u0f16\u0f1a\5\u0418\u020d\2\u0f17\u0f18\6\u00d9D\2"+
		"\u0f18\u0f1a\7\u013e\2\2\u0f19\u0f12\3\2\2\2\u0f19\u0f13\3\2\2\2\u0f19"+
		"\u0f17\3\2\2\2\u0f1a\u0f1f\3\2\2\2\u0f1b\u0f1c\7\u0198\2\2\u0f1c\u0f1e"+
		"\5\u019c\u00cf\2\u0f1d\u0f1b\3\2\2\2\u0f1e\u0f21\3\2\2\2\u0f1f\u0f1d\3"+
		"\2\2\2\u0f1f\u0f20\3\2\2\2\u0f20\u01b1\3\2\2\2\u0f21\u0f1f\3\2\2\2\u0f22"+
		"\u0f26\6\u00daE\2\u0f23\u0f24\7\u016e\2\2\u0f24\u0f25\7\u0181\2\2\u0f25"+
		"\u0f27\5\u0418\u020d\2\u0f26\u0f23\3\2\2\2\u0f26\u0f27\3\2\2\2\u0f27\u0f2b"+
		"\3\2\2\2\u0f28\u0f29\7\u00fd\2\2\u0f29\u0f2a\7\u0181\2\2\u0f2a\u0f2c\5"+
		"\u0418\u020d\2\u0f2b\u0f28\3\2\2\2\u0f2b\u0f2c\3\2\2\2\u0f2c\u0f30\3\2"+
		"\2\2\u0f2d\u0f2e\7t\2\2\u0f2e\u0f2f\7\u0181\2\2\u0f2f\u0f31\5\u0418\u020d"+
		"\2\u0f30\u0f2d\3\2\2\2\u0f30\u0f31\3\2\2\2\u0f31\u0f35\3\2\2\2\u0f32\u0f33"+
		"\7\u00ff\2\2\u0f33\u0f34\7\u0181\2\2\u0f34\u0f36\5\u0418\u020d\2\u0f35"+
		"\u0f32\3\2\2\2\u0f35\u0f36\3\2\2\2\u0f36\u0f39\3\2\2\2\u0f37\u0f39\3\2"+
		"\2\2\u0f38\u0f22\3\2\2\2\u0f38\u0f37\3\2\2\2\u0f39\u01b3\3\2\2\2\u0f3a"+
		"\u0f3f\5\u01b6\u00dc\2\u0f3b\u0f3c\7\u0198\2\2\u0f3c\u0f3e\5\u01b6\u00dc"+
		"\2\u0f3d\u0f3b\3\2\2\2\u0f3e\u0f41\3\2\2\2\u0f3f\u0f3d\3\2\2\2\u0f3f\u0f40"+
		"\3\2\2\2\u0f40\u01b5\3\2\2\2\u0f41\u0f3f\3\2\2\2\u0f42\u0f43\t-\2\2\u0f43"+
		"\u01b7\3\2\2\2\u0f44\u0f45\t.\2\2\u0f45\u0f46\7\27\2\2\u0f46\u01b9\3\2"+
		"\2\2\u0f47\u0f48\7%\2\2\u0f48\u0f49\5\u03fc\u01ff\2\u0f49\u0f4c\7\u01fd"+
		"\2\2\u0f4a\u0f4d\5\u041a\u020e\2\u0f4b\u0f4d\5\u02a0\u0151\2\u0f4c\u0f4a"+
		"\3\2\2\2\u0f4c\u0f4b\3\2\2\2\u0f4d\u0f53\3\2\2\2\u0f4e\u0f53\5\u01bc\u00df"+
		"\2\u0f4f\u0f50\t/\2\2\u0f50\u0f51\7%\2\2\u0f51\u0f53\5\u03fc\u01ff\2\u0f52"+
		"\u0f47\3\2\2\2\u0f52\u0f4e\3\2\2\2\u0f52\u0f4f\3\2\2\2\u0f53\u01bb\3\2"+
		"\2\2\u0f54\u0f55\7\23\2\2\u0f55\u0f58\5\u03fc\u01ff\2\u0f56\u0f57\7\u029c"+
		"\2\2\u0f57\u0f59\5\u01be\u00e0\2\u0f58\u0f56\3\2\2\2\u0f58\u0f59\3\2\2"+
		"\2\u0f59\u01bd\3\2\2\2\u0f5a\u0f5f\5\u02a0\u0151\2\u0f5b\u0f5c\7\u0198"+
		"\2\2\u0f5c\u0f5e\5\u02a0\u0151\2\u0f5d\u0f5b\3\2\2\2\u0f5e\u0f61\3\2\2"+
		"\2\u0f5f\u0f5d\3\2\2\2\u0f5f\u0f60\3\2\2\2\u0f60\u01bf\3\2\2\2\u0f61\u0f5f"+
		"\3\2\2\2\u0f62\u0f6f\7\u02c7\2\2\u0f63\u0f64\7\u00b6\2\2\u0f64\u0f65\7"+
		"o\2\2\u0f65\u0f67\7y\2\2\u0f66\u0f68\5\u0434\u021b\2\u0f67\u0f66\3\2\2"+
		"\2\u0f67\u0f68\3\2\2\2\u0f68\u0f69\3\2\2\2\u0f69\u0f70\5\u0416\u020c\2"+
		"\u0f6a\u0f6d\7\u02c6\2\2\u0f6b\u0f6c\7\u01fb\2\2\u0f6c\u0f6e\7\u011d\2"+
		"\2\u0f6d\u0f6b\3\2\2\2\u0f6d\u0f6e\3\2\2\2\u0f6e\u0f70\3\2\2\2\u0f6f\u0f63"+
		"\3\2\2\2\u0f6f\u0f6a\3\2\2\2\u0f70\u01c1\3\2\2\2\u0f71\u0f72\6\u00e2F"+
		"\2\u0f72\u0f7c\5\u01c4\u00e3\2\u0f73\u0f7c\5\u01c8\u00e5\2\u0f74\u0f7c"+
		"\5\u01d4\u00eb\2\u0f75\u0f7c\5\u01d6\u00ec\2\u0f76\u0f7c\5\u01de\u00f0"+
		"\2\u0f77\u0f7c\5\u01e0\u00f1\2\u0f78\u0f7c\5\u01e6\u00f4\2\u0f79\u0f7a"+
		"\6\u00e2G\2\u0f7a\u0f7c\5\u01f4\u00fb\2\u0f7b\u0f71\3\2\2\2\u0f7b\u0f73"+
		"\3\2\2\2\u0f7b\u0f74\3\2\2\2\u0f7b\u0f75\3\2\2\2\u0f7b\u0f76\3\2\2\2\u0f7b"+
		"\u0f77\3\2\2\2\u0f7b\u0f78\3\2\2\2\u0f7b\u0f79\3\2\2\2\u0f7c\u01c3\3\2"+
		"\2\2\u0f7d\u0f7e\7\u01ae\2\2\u0f7e\u0f81\7\u016e\2\2\u0f7f\u0f80\6\u00e3"+
		"H\2\u0f80\u0f82\5\u0376\u01bc\2\u0f81\u0f7f\3\2\2\2\u0f81\u0f82\3\2\2"+
		"\2\u0f82\u0f83\3\2\2\2\u0f83\u0f84\5\u01c6\u00e4\2\u0f84\u01c5\3\2\2\2"+
		"\u0f85\u0f86\5\u0394\u01cb\2\u0f86\u0f87\5\u01ca\u00e6\2\u0f87\u0f99\3"+
		"\2\2\2\u0f88\u0f89\6\u00e4I\2\u0f89\u0f8a\7\u016e\2\2\u0f8a\u0f8b\5\u0432"+
		"\u021a\2\u0f8b\u0f8c\7\u00a1\2\2\u0f8c\u0f8d\7\u01be\2\2\u0f8d\u0f8e\5"+
		"\u0418\u020d\2\u0f8e\u0f99\3\2\2\2\u0f8f\u0f90\6\u00e4J\2\u0f90\u0f91"+
		"\5\u0398\u01cd\2\u0f91\u0f92\7\u01e0\2\2\u0f92\u0f96\7\u02b5\2\2\u0f93"+
		"\u0f97\7\u01ad\2\2\u0f94\u0f97\7\u00f1\2\2\u0f95\u0f97\5\u01f6\u00fc\2"+
		"\u0f96\u0f93\3\2\2\2\u0f96\u0f94\3\2\2\2\u0f96\u0f95\3\2\2\2\u0f97\u0f99"+
		"\3\2\2\2\u0f98\u0f85\3\2\2\2\u0f98\u0f88\3\2\2\2\u0f98\u0f8f\3\2\2\2\u0f99"+
		"\u01c7\3\2\2\2\u0f9a\u0f9b\7\u01cd\2\2\u0f9b\u0f9f\7\u016e\2\2\u0f9c\u0f9d"+
		"\6\u00e5K\2\u0f9d\u0fa0\5\u0378\u01bd\2\u0f9e\u0fa0\3\2\2\2\u0f9f\u0f9c"+
		"\3\2\2\2\u0f9f\u0f9e\3\2\2\2\u0fa0\u0fa1\3\2\2\2\u0fa1\u0fa2\5\u0394\u01cb"+
		"\2\u0fa2\u0fa3\5\u01cc\u00e7\2\u0fa3\u0fa4\5\u01ca\u00e6\2\u0fa4\u01c9"+
		"\3\2\2\2\u0fa5\u0fa7\6\u00e6L\2\u0fa6\u0fa8\5\u01ce\u00e8\2\u0fa7\u0fa6"+
		"\3\2\2\2\u0fa7\u0fa8\3\2\2\2\u0fa8\u0faa\3\2\2\2\u0fa9\u0fab\5\u01d0\u00e9"+
		"\2\u0faa\u0fa9\3\2\2\2\u0faa\u0fab\3\2\2\2\u0fab\u0fad\3\2\2\2\u0fac\u0fae"+
		"\5\u01d2\u00ea\2\u0fad\u0fac\3\2\2\2\u0fad\u0fae\3\2\2\2\u0fae\u0fb1\3"+
		"\2\2\2\u0faf\u0fb1\3\2\2\2\u0fb0\u0fa5\3\2\2\2\u0fb0\u0faf\3\2\2\2\u0fb1"+
		"\u01cb\3\2\2\2\u0fb2\u0fb6\6\u00e7M\2\u0fb3\u0fb4\7\u01e0\2\2\u0fb4\u0fb5"+
		"\7\u02b5\2\2\u0fb5\u0fb7\5\u01f6\u00fc\2\u0fb6\u0fb3\3\2\2\2\u0fb6\u0fb7"+
		"\3\2\2\2\u0fb7\u0fba\3\2\2\2\u0fb8\u0fba\3\2\2\2\u0fb9\u0fb2\3\2\2\2\u0fb9"+
		"\u0fb8\3\2\2\2\u0fba\u01cd\3\2\2\2\u0fbb\u0fbe\7\u0261\2\2\u0fbc\u0fbf"+
		"\5\u01ee\u00f8\2\u0fbd\u0fbf\t\60\2\2\u0fbe\u0fbc\3\2\2\2\u0fbe\u0fbd"+
		"\3\2\2\2\u0fbf\u01cf\3\2\2\2\u0fc0\u0fc9\7\u02ac\2\2\u0fc1\u0fc2\7\u00d2"+
		"\2\2\u0fc2\u0fca\5\u0408\u0205\2\u0fc3\u0fc4\7\u00d5\2\2\u0fc4\u0fca\5"+
		"\u0408\u0205\2\u0fc5\u0fc6\7\u00d1\2\2\u0fc6\u0fca\5\u0408\u0205\2\u0fc7"+
		"\u0fc8\7\u00d6\2\2\u0fc8\u0fca\5\u0408\u0205\2\u0fc9\u0fc1\3\2\2\2\u0fc9"+
		"\u0fc3\3\2\2\2\u0fc9\u0fc5\3\2\2\2\u0fc9";
	private static final String _serializedATNSegment2 =
		"\u0fc7\3\2\2\2\u0fca\u0fcb\3\2\2\2\u0fcb\u0fc9\3\2\2\2\u0fcb\u0fcc\3\2"+
		"\2\2\u0fcc\u01d1\3\2\2\2\u0fcd\u0fce\7\3\2\2\u0fce\u0fe8\t\61\2\2\u0fcf"+
		"\u0fd0\7\u00fd\2\2\u0fd0\u0fd6\7\u01f4\2\2\u0fd1\u0fd2\7\u0211\2\2\u0fd2"+
		"\u0fd3\5\u040a\u0206\2\u0fd3\u0fd4\7s\2\2\u0fd4\u0fd7\3\2\2\2\u0fd5\u0fd7"+
		"\t\62\2\2\u0fd6\u0fd1\3\2\2\2\u0fd6\u0fd5\3\2\2\2\u0fd6\u0fd7\3\2\2\2"+
		"\u0fd7\u0fe8\3\2\2\2\u0fd8\u0fd9\7\u00fd\2\2\u0fd9\u0fdc\7\u02e3\2\2\u0fda"+
		"\u0fdd\5\u040a\u0206\2\u0fdb\u0fdd\7\u01e0\2\2\u0fdc\u0fda\3\2\2\2\u0fdc"+
		"\u0fdb\3\2\2\2\u0fdd\u0fe8\3\2\2\2\u0fde\u0fdf\7\u00fd\2\2\u0fdf\u0fe5"+
		"\7\u02e4\2\2\u0fe0\u0fe1\7\u0211\2\2\u0fe1\u0fe2\5\u040a\u0206\2\u0fe2"+
		"\u0fe3\7s\2\2\u0fe3\u0fe6\3\2\2\2\u0fe4\u0fe6\7\u01e0\2\2\u0fe5\u0fe0"+
		"\3\2\2\2\u0fe5\u0fe4\3\2\2\2\u0fe5\u0fe6\3\2\2\2\u0fe6\u0fe8\3\2\2\2\u0fe7"+
		"\u0fcd\3\2\2\2\u0fe7\u0fcf\3\2\2\2\u0fe7\u0fd8\3\2\2\2\u0fe7\u0fde\3\2"+
		"\2\2\u0fe8\u01d3\3\2\2\2\u0fe9\u0fea\7\u01e9\2\2\u0fea\u0fed\7\u016e\2"+
		"\2\u0feb\u0fec\6\u00ebN\2\u0fec\u0fee\5\u0376\u01bc\2\u0fed\u0feb\3\2"+
		"\2\2\u0fed\u0fee\3\2\2\2\u0fee\u0fef\3\2\2\2\u0fef\u0ff0\5\u0392\u01ca"+
		"\2\u0ff0\u01d5\3\2\2\2\u0ff1\u101a\7\u0201\2\2\u0ff2\u0ff3\6\u00ecO\2"+
		"\u0ff3\u0ff4\5\u01e8\u00f5\2\u0ff4\u0ff5\7\u028f\2\2\u0ff5\u0ff9\5\u0392"+
		"\u01ca\2\u0ff6\u0ff7\7\u02ac\2\2\u0ff7\u0ff8\7\u02b6\2\2\u0ff8\u0ffa\7"+
		"\u024a\2\2\u0ff9\u0ff6\3\2\2\2\u0ff9\u0ffa\3\2\2\2\u0ffa\u101b\3\2\2\2"+
		"\u0ffb\u1001\5\u01e8\u00f5\2\u0ffc\u0ffe\7\u01ad\2\2\u0ffd\u0fff\7\u0106"+
		"\2\2\u0ffe\u0ffd\3\2\2\2\u0ffe\u0fff\3\2\2\2\u0fff\u1001\3\2\2\2\u1000"+
		"\u0ffb\3\2\2\2\u1000\u0ffc\3\2\2\2\u1001\u1002\3\2\2\2\u1002\u1004\7\u0245"+
		"\2\2\u1003\u1005\5\u01e4\u00f3\2\u1004\u1003\3\2\2\2\u1004\u1005\3\2\2"+
		"\2\u1005\u1006\3\2\2\2\u1006\u1007\5\u01ec\u00f7\2\u1007\u1008\7\u028f"+
		"\2\2\u1008\u100a\5\u01d8\u00ed\2\u1009\u100b\5\u01dc\u00ef\2\u100a\u1009"+
		"\3\2\2\2\u100a\u100b\3\2\2\2\u100b\u100d\3\2\2\2\u100c\u100e\5\u01da\u00ee"+
		"\2\u100d\u100c\3\2\2\2\u100d\u100e\3\2\2\2\u100e\u101b\3\2\2\2\u100f\u1010"+
		"\6\u00ecP\2\u1010\u1011\7\u010b\2\2\u1011\u1012\7\u0245\2\2\u1012\u1013"+
		"\5\u0398\u01cd\2\u1013\u1014\7\u028f\2\2\u1014\u1018\5\u01d8\u00ed\2\u1015"+
		"\u1016\7\u02ac\2\2\u1016\u1017\7\u0201\2\2\u1017\u1019\7\u024a\2\2\u1018"+
		"\u1015\3\2\2\2\u1018\u1019\3\2\2\2\u1019\u101b\3\2\2\2\u101a\u0ff2\3\2"+
		"\2\2\u101a\u1000\3\2\2\2\u101a\u100f\3\2\2\2\u101b\u01d7\3\2\2\2\u101c"+
		"\u101d\6\u00edQ\2\u101d\u1021\5\u0394\u01cb\2\u101e\u101f\6\u00edR\2\u101f"+
		"\u1021\5\u0392\u01ca\2\u1020\u101c\3\2\2\2\u1020\u101e\3\2\2\2\u1021\u01d9"+
		"\3\2\2\2\u1022\u1023\6\u00eeS\2\u1023\u1025\7\u02ac\2\2\u1024\u1026\5"+
		"\u01f2\u00fa\2\u1025\u1024\3\2\2\2\u1026\u1027\3\2\2\2\u1027\u1025\3\2"+
		"\2\2\u1027\u1028\3\2\2\2\u1028\u102e\3\2\2\2\u1029\u102a\6\u00eeT\2\u102a"+
		"\u102b\7\u02ac\2\2\u102b\u102c\7\u0201\2\2\u102c\u102e\7\u024a\2\2\u102d"+
		"\u1022\3\2\2\2\u102d\u1029\3\2\2\2\u102e\u01db\3\2\2\2\u102f\u1030\6\u00ef"+
		"U\2\u1030\u1031\5\u01ce\u00e8\2\u1031\u01dd\3\2\2\2\u1032\u1033\7\u025e"+
		"\2\2\u1033\u1034\7\u016e\2\2\u1034\u1035\5\u0398\u01cd\2\u1035\u1036\7"+
		"\u028f\2\2\u1036\u103e\5\u0398\u01cd\2\u1037\u1038\7\u0198\2\2\u1038\u1039"+
		"\5\u0398\u01cd\2\u1039\u103a\7\u028f\2\2\u103a\u103b\5\u0398\u01cd\2\u103b"+
		"\u103d\3\2\2\2\u103c\u1037\3\2\2\2\u103d\u1040\3\2\2\2\u103e\u103c\3\2"+
		"\2\2\u103e\u103f\3\2\2\2\u103f\u01df\3\2\2\2\u1040\u103e\3\2\2\2\u1041"+
		"\u1064\7\u0265\2\2\u1042\u1043\6\u00f1V\2\u1043\u1044\5\u01e8\u00f5\2"+
		"\u1044\u1045\7\u01fd\2\2\u1045\u1046\5\u0392\u01ca\2\u1046\u1065\3\2\2"+
		"\2\u1047\u1048\5\u01e8\u00f5\2\u1048\u1049\5\u01e2\u00f2\2\u1049\u104a"+
		"\7\u01fd\2\2\u104a\u104b\5\u0392\u01ca\2\u104b\u1065\3\2\2\2\u104c\u104e"+
		"\7\u01ad\2\2\u104d\u104f\7\u0106\2\2\u104e\u104d\3\2\2\2\u104e\u104f\3"+
		"\2\2\2\u104f\u105b\3\2\2\2\u1050\u1051\6\u00f1W\2\u1051\u1053\7\u0245"+
		"\2\2\u1052\u1054\5\u01e4\u00f3\2\u1053\u1052\3\2\2\2\u1053\u1054\3\2\2"+
		"\2\u1054\u1055\3\2\2\2\u1055\u105c\5\u01ec\u00f7\2\u1056\u1057\7\u0198"+
		"\2\2\u1057\u1058\7\u0201\2\2\u1058\u1059\7\u024a\2\2\u1059\u105a\7\u01fd"+
		"\2\2\u105a\u105c\5\u0392\u01ca\2\u105b\u1050\3\2\2\2\u105b\u1056\3\2\2"+
		"\2\u105c\u1065\3\2\2\2\u105d\u105e\6\u00f1X\2\u105e\u105f\7\u010b\2\2"+
		"\u105f\u1060\7\u0245\2\2\u1060\u1061\5\u0398\u01cd\2\u1061\u1062\7\u01fd"+
		"\2\2\u1062\u1063\5\u0392\u01ca\2\u1063\u1065\3\2\2\2\u1064\u1042\3\2\2"+
		"\2\u1064\u1047\3\2\2\2\u1064\u104c\3\2\2\2\u1064\u105d\3\2\2\2\u1065\u01e1"+
		"\3\2\2\2\u1066\u1067\6\u00f2Y\2\u1067\u1069\7\u0245\2\2\u1068\u106a\5"+
		"\u01e4\u00f3\2\u1069\u1068\3\2\2\2\u1069\u106a\3\2\2\2\u106a\u106b\3\2"+
		"\2\2\u106b\u1075\5\u01ec\u00f7\2\u106c\u1072\6\u00f2Z\2\u106d\u106f\7"+
		"\u0245\2\2\u106e\u1070\5\u01e4\u00f3\2\u106f\u106e\3\2\2\2\u106f\u1070"+
		"\3\2\2\2\u1070\u1071\3\2\2\2\u1071\u1073\5\u01ec\u00f7\2\u1072\u106d\3"+
		"\2\2\2\u1072\u1073\3\2\2\2\u1073\u1075\3\2\2\2\u1074\u1066\3\2\2\2\u1074"+
		"\u106c\3\2\2\2\u1075\u01e3\3\2\2\2\u1076\u1077\t\63\2\2\u1077\u01e5\3"+
		"\2\2\2\u1078\u1079\7\u026d\2\2\u1079\u107c\7\u00fd\2\2\u107a\u107b\7\u01fb"+
		"\2\2\u107b\u107d\5\u0398\u01cd\2\u107c\u107a\3\2\2\2\u107c\u107d\3\2\2"+
		"\2\u107d\u107e\3\2\2\2\u107e\u108b\5\u0434\u021b\2\u107f\u1080\7\u00fd"+
		"\2\2\u1080\u1081\7\u019b\2\2\u1081\u1082\5\u0418\u020d\2\u1082\u1083\7"+
		"\u019c\2\2\u1083\u108c\3\2\2\2\u1084\u1085\6\u00f4[\2\u1085\u1086\7\u00f5"+
		"\2\2\u1086\u1087\7\u019b\2\2\u1087\u1088\5\u0418\u020d\2\u1088\u1089\7"+
		"\u019c\2\2\u1089\u108c\3\2\2\2\u108a\u108c\5\u0418\u020d\2\u108b\u107f"+
		"\3\2\2\2\u108b\u1084\3\2\2\2\u108b\u108a\3\2\2\2\u108c\u01e7\3\2\2\2\u108d"+
		"\u1092\5\u01ea\u00f6\2\u108e\u108f\7\u0198\2\2\u108f\u1091\5\u01ea\u00f6"+
		"\2\u1090\u108e\3\2\2\2\u1091\u1094\3\2\2\2\u1092\u1090\3\2\2\2\u1092\u1093"+
		"\3\2\2\2\u1093\u01e9\3\2\2\2\u1094\u1092\3\2\2\2\u1095\u10a0\6\u00f6\\"+
		"\2\u1096\u1098\5\u042e\u0218\2\u1097\u1099\5\u03a8\u01d5\2\u1098\u1097"+
		"\3\2\2\2\u1098\u1099\3\2\2\2\u1099\u10a1\3\2\2\2\u109a\u109e\5\u042e\u0218"+
		"\2\u109b\u109f\7\u01a3\2\2\u109c\u109d\7\u01a2\2\2\u109d\u109f\5\u042c"+
		"\u0217\2\u109e\u109b\3\2\2\2\u109e\u109c\3\2\2\2\u109f\u10a1\3\2\2\2\u10a0"+
		"\u1096\3\2\2\2\u10a0\u109a\3\2\2\2\u10a1\u10bf\3\2\2\2\u10a2\u10a4\t\64"+
		"\2\2\u10a3\u10a5\5\u03a8\u01d5\2\u10a4\u10a3\3\2\2\2\u10a4\u10a5\3\2\2"+
		"\2\u10a5\u10bf\3\2\2\2\u10a6\u10bf\t\65\2\2\u10a7\u10a8\7\u0201\2\2\u10a8"+
		"\u10bf\7\u024a\2\2\u10a9\u10aa\7\u026f\2\2\u10aa\u10bf\7\u01d6\2\2\u10ab"+
		"\u10af\7\u01cd\2\2\u10ac\u10ad\7\u0159\2\2\u10ad\u10b0\7\u0156\2\2\u10ae"+
		"\u10b0\t\66\2\2\u10af\u10ac\3\2\2\2\u10af\u10ae\3\2\2\2\u10af\u10b0\3"+
		"\2\2\2\u10b0\u10bf\3\2\2\2\u10b1\u10b2\7\u0226\2\2\u10b2\u10bf\7\u0156"+
		"\2\2\u10b3\u10b4\7\u011d\2\2\u10b4\u10bf\t\67\2\2\u10b5\u10b6\7\u026f"+
		"\2\2\u10b6\u10bf\7\u0171\2\2\u10b7\u10b9\7\u01ae\2\2\u10b8\u10ba\7\u012b"+
		"\2\2\u10b9\u10b8\3\2\2\2\u10b9\u10ba\3\2\2\2\u10ba\u10bf\3\2\2\2\u10bb"+
		"\u10bc\6\u00f6]\2\u10bc\u10bd\t8\2\2\u10bd\u10bf\7\u02b5\2\2\u10be\u1095"+
		"\3\2\2\2\u10be\u10a2\3\2\2\2\u10be\u10a6\3\2\2\2\u10be\u10a7\3\2\2\2\u10be"+
		"\u10a9\3\2\2\2\u10be\u10ab\3\2\2\2\u10be\u10b1\3\2\2\2\u10be\u10b3\3\2"+
		"\2\2\u10be\u10b5\3\2\2\2\u10be\u10b7\3\2\2\2\u10be\u10bb\3\2\2\2\u10bf"+
		"\u01eb\3\2\2\2\u10c0\u10c3\7\u018b\2\2\u10c1\u10c2\7\u0197\2\2\u10c2\u10c4"+
		"\7\u018b\2\2\u10c3\u10c1\3\2\2\2\u10c3\u10c4\3\2\2\2\u10c4\u10cc\3\2\2"+
		"\2\u10c5\u10c8\5\u03fc\u01ff\2\u10c6\u10c7\7\u0197\2\2\u10c7\u10c9\7\u018b"+
		"\2\2\u10c8\u10c6\3\2\2\2\u10c8\u10c9\3\2\2\2\u10c9\u10cc\3\2\2\2\u10ca"+
		"\u10cc\5\u03e2\u01f2\2\u10cb\u10c0\3\2\2\2\u10cb\u10c5\3\2\2\2\u10cb\u10ca"+
		"\3\2\2\2\u10cc\u01ed\3\2\2\2\u10cd\u10d4\5\u01f0\u00f9\2\u10ce\u10d0\7"+
		"\u01b0\2\2\u10cf\u10ce\3\2\2\2\u10cf\u10d0\3\2\2\2\u10d0\u10d1\3\2\2\2"+
		"\u10d1\u10d3\5\u01f0\u00f9\2\u10d2\u10cf\3\2\2\2\u10d3\u10d6\3\2\2\2\u10d4"+
		"\u10d2\3\2\2\2\u10d4\u10d5\3\2\2\2\u10d5\u01ef\3\2\2\2\u10d6\u10d4\3\2"+
		"\2\2\u10d7\u10d8\7T\2\2\u10d8\u10de\5\u0418\u020d\2\u10d9\u10da\7\u00ac"+
		"\2\2\u10da\u10de\5\u0418\u020d\2\u10db\u10dc\7\u014e\2\2\u10dc\u10de\5"+
		"\u0418\u020d\2\u10dd\u10d7\3\2\2\2\u10dd\u10d9\3\2\2\2\u10dd\u10db\3\2"+
		"\2\2\u10de\u01f1\3\2\2\2\u10df\u10e0\7\u0201\2\2\u10e0\u10ea\7\u024a\2"+
		"\2\u10e1\u10e2\7\u00d2\2\2\u10e2\u10ea\5\u0408\u0205\2\u10e3\u10e4\7\u00d5"+
		"\2\2\u10e4\u10ea\5\u0408\u0205\2\u10e5\u10e6\7\u00d1\2\2\u10e6\u10ea\5"+
		"\u0408\u0205\2\u10e7\u10e8\7\u00d6\2\2\u10e8\u10ea\5\u0408\u0205\2\u10e9"+
		"\u10df\3\2\2\2\u10e9\u10e1\3\2\2\2\u10e9\u10e3\3\2\2\2\u10e9\u10e5\3\2"+
		"\2\2\u10e9\u10e7\3\2\2\2\u10ea\u01f3\3\2\2\2\u10eb\u10ec\7\u026d\2\2\u10ec"+
		"\u10ed\7\u02b5\2\2\u10ed\u1103\5\u01f6\u00fc\2\u10ee\u10ef\7\u026d\2\2"+
		"\u10ef\u10f0\7\u02b5\2\2\u10f0\u1103\t9\2\2\u10f1\u10f2\7\u026d\2\2\u10f2"+
		"\u10f3\7\u01e0\2\2\u10f3\u10f7\7\u02b5\2\2\u10f4\u10f8\5\u01f6\u00fc\2"+
		"\u10f5\u10f8\7\u00f1\2\2\u10f6\u10f8\7\u01ad\2\2\u10f7\u10f4\3\2\2\2\u10f7"+
		"\u10f5\3\2\2\2\u10f7\u10f6\3\2\2\2\u10f8\u10f9\3\2\2\2\u10f9\u10fa\7\u028f"+
		"\2\2\u10fa\u1103\5\u01f6\u00fc\2\u10fb\u10fc\7\u026d\2\2\u10fc\u10fd\7"+
		"\u02b5\2\2\u10fd\u1100\7\u01ad\2\2\u10fe\u10ff\7\u02b9\2\2\u10ff\u1101"+
		"\5\u01f6\u00fc\2\u1100\u10fe\3\2\2\2\u1100\u1101\3\2\2\2\u1101\u1103\3"+
		"\2\2\2\u1102\u10eb\3\2\2\2\u1102\u10ee\3\2\2\2\u1102\u10f1\3\2\2\2\u1102"+
		"\u10fb\3\2\2\2\u1103\u01f5\3\2\2\2\u1104\u1109\5\u01f8\u00fd\2\u1105\u1106"+
		"\7\u0198\2\2\u1106\u1108\5\u01f8\u00fd\2\u1107\u1105\3\2\2\2\u1108\u110b"+
		"\3\2\2\2\u1109\u1107\3\2\2\2\u1109\u110a\3\2\2\2\u110a\u01f7\3\2\2\2\u110b"+
		"\u1109\3\2\2\2\u110c\u110f\5\u042e\u0218\2\u110d\u110e\7C\2\2\u110e\u1110"+
		"\5\u042c\u0217\2\u110f\u110d\3\2\2\2\u110f\u1110\3\2\2\2\u1110\u01f9\3"+
		"\2\2\2\u1111\u1113\7A\2\2\u1112\u1114\5\u03a0\u01d1\2\u1113\u1112\3\2"+
		"\2\2\u1113\u1114\3\2\2\2\u1114\u1115\3\2\2\2\u1115\u1116\7\u0289\2\2\u1116"+
		"\u114b\5\u03e4\u01f3\2\u1117\u1118\7\u01c5\2\2\u1118\u1119\7\u0289\2\2"+
		"\u1119\u111d\5\u03e4\u01f3\2\u111a\u111c\5\u01fe\u0100\2\u111b\u111a\3"+
		"\2\2\2\u111c\u111f\3\2\2\2\u111d\u111b\3\2\2\2\u111d\u111e\3\2\2\2\u111e"+
		"\u114b\3\2\2\2\u111f\u111d\3\2\2\2\u1120\u1121\7\13\2\2\u1121\u1122\7"+
		"\u0289\2\2\u1122\u1124\5\u03e4\u01f3\2\u1123\u1125\t:\2\2\u1124\u1123"+
		"\3\2\2\2\u1124\u1125\3\2\2\2\u1125\u114b\3\2\2\2\u1126\u1128\7\u0248\2"+
		"\2\u1127\u1129\5\u03a0\u01d1\2\u1128\u1127\3\2\2\2\u1128\u1129\3\2\2\2"+
		"\u1129\u112a\3\2\2\2\u112a\u112b\7\u0289\2\2\u112b\u112e\5\u03e4\u01f3"+
		"\2\u112c\u112d\6\u00fe^\2\u112d\u112f\5\u01fc\u00ff\2\u112e\u112c\3\2"+
		"\2\2\u112e\u112f\3\2\2\2\u112f\u114b\3\2\2\2\u1130\u1132\7\'\2\2\u1131"+
		"\u1133\5\u03a0\u01d1\2\u1132\u1131\3\2\2\2\u1132\u1133\3\2\2\2\u1133\u1134"+
		"\3\2\2\2\u1134\u1135\7\u0289\2\2\u1135\u1139\5\u03e4\u01f3\2\u1136\u1138"+
		"\5\u0200\u0101\2\u1137\u1136\3\2\2\2\u1138\u113b\3\2\2\2\u1139\u1137\3"+
		"\2\2\2\u1139\u113a\3\2\2\2\u113a\u114b\3\2\2\2\u113b\u1139\3\2\2\2\u113c"+
		"\u113d\6\u00fe_\2\u113d\u113e\7\6\2\2\u113e\u113f\7\u0289\2\2\u113f\u1140"+
		"\5\u03e4\u01f3\2\u1140\u1141\7\u028f\2\2\u1141\u1142\5\u041a\u020e\2\u1142"+
		"\u114b\3\2\2\2\u1143\u1144\6\u00fe`\2\u1144\u1145\7)\2\2\u1145\u1146\7"+
		"\u0289\2\2\u1146\u1147\5\u03e4\u01f3\2\u1147\u1148\7\u01fd\2\2\u1148\u1149"+
		"\5\u041a\u020e\2\u1149\u114b\3\2\2\2\u114a\u1111\3\2\2\2\u114a\u1117\3"+
		"\2\2\2\u114a\u1120\3\2\2\2\u114a\u1126\3\2\2\2\u114a\u1130\3\2\2\2\u114a"+
		"\u113c\3\2\2\2\u114a\u1143\3\2\2\2\u114b\u01fb\3\2\2\2\u114c\u114d\7\u0299"+
		"\2\2\u114d\u114e\7\u02c4\2\2\u114e\u114f\7\u0245\2\2\u114f\u1153\5\u03fe"+
		"\u0200\2\u1150\u1151\7\u02ac\2\2\u1151\u1152\7\u017e\2\2\u1152\u1154\7"+
		"\u02c5\2\2\u1153\u1150\3\2\2\2\u1153\u1154\3\2\2\2\u1154\u115a\3\2\2\2"+
		"\u1155\u1156\7\u01e9\2\2\u1156\u1157\7\u02c4\2\2\u1157\u1158\7\u0245\2"+
		"\2\u1158\u115a\5\u03fe\u0200\2\u1159\u114c\3\2\2\2\u1159\u1155\3\2\2\2"+
		"\u115a\u01fd\3\2\2\2\u115b\u115c\7\u01fb\2\2\u115c\u115f\7\67\2\2\u115d"+
		"\u115f\t;\2\2\u115e\u115b\3\2\2\2\u115e\u115d\3\2\2\2\u115f\u01ff\3\2"+
		"\2\2\u1160\u1161\t<\2\2\u1161\u0201\3\2\2\2\u1162\u1163\7\33\2\2\u1163"+
		"\u1164\7\u0100\2\2\u1164\u1165\5\u03fc\u01ff\2\u1165\u1166\7\61\2\2\u1166"+
		"\u1167\5\u0416\u020c\2\u1167\u1179\3\2\2\2\u1168\u1169\7\33\2\2\u1169"+
		"\u116a\7\u02ba\2\2\u116a\u1179\5\u041e\u0210\2\u116b\u116c\7\66\2\2\u116c"+
		"\u116d\7\u0100\2\2\u116d\u1179\5\u03f2\u01fa\2\u116e\u116f\7\66\2\2\u116f"+
		"\u1170\7\u02ba\2\2\u1170\u1175\5\u03f4\u01fb\2\u1171\u1172\7\u0198\2\2"+
		"\u1172\u1174\5\u03f4\u01fb\2\u1173\u1171\3\2\2\2\u1174\u1177\3\2\2\2\u1175"+
		"\u1173\3\2\2\2\u1175\u1176\3\2\2\2\u1176\u1179\3\2\2\2\u1177\u1175\3\2"+
		"\2\2\u1178\u1162\3\2\2\2\u1178\u1168\3\2\2\2\u1178\u116b\3\2\2\2\u1178"+
		"\u116e\3\2\2\2\u1179\u0203\3\2\2\2\u117a\u118e\7\u026d\2\2\u117b\u117d"+
		"\5\u0436\u021c\2\u117c\u117b\3\2\2\2\u117c\u117d\3\2\2\2\u117d\u117e\3"+
		"\2\2\2\u117e\u117f\7\u015d\2\2\u117f\u118f\5\u017c\u00bf\2\u1180\u1182"+
		"\7\u00f6\2\2\u1181\u1180\3\2\2\2\u1181\u1182\3\2\2\2\u1182\u1183\3\2\2"+
		"\2\u1183\u1186\5\u0206\u0104\2\u1184\u1185\7\u0198\2\2\u1185\u1187\5\u020e"+
		"\u0108\2\u1186\u1184\3\2\2\2\u1186\u1187\3\2\2\2\u1187\u118f\3\2\2\2\u1188"+
		"\u1189\5\u0436\u021c\2\u1189\u118c\5\u020a\u0106\2\u118a\u118b\7\u0198"+
		"\2\2\u118b\u118d\5\u020e\u0108\2\u118c\u118a\3\2\2\2\u118c\u118d\3\2\2"+
		"\2\u118d\u118f\3\2\2\2\u118e\u117c\3\2\2\2\u118e\u1181\3\2\2\2\u118e\u1188"+
		"\3\2\2\2\u118f\u0205\3\2\2\2\u1190\u1191\5\u02a4\u0153\2\u1191\u1192\5"+
		"\u0434\u021b\2\u1192\u1193\5\u020c\u0107\2\u1193\u11ab\3\2\2\2\u1194\u11ab"+
		"\5\u0388\u01c5\2\u1195\u1196\5\u02a0\u0151\2\u1196\u1197\5\u0434\u021b"+
		"\2\u1197\u1198\5\u0260\u0131\2\u1198\u11ab\3\2\2\2\u1199\u119a\5\u0208"+
		"\u0105\2\u119a\u119b\5\u0434\u021b\2\u119b\u119c\5\u020c\u0107\2\u119c"+
		"\u11ab\3\2\2\2\u119d\u11a8\7\u00e8\2\2\u119e\u119f\5\u0434\u021b\2\u119f"+
		"\u11a0\5\u0260\u0131\2\u11a0\u11a9\3\2\2\2\u11a1\u11a4\5\u034e\u01a8\2"+
		"\u11a2\u11a3\7\u01c6\2\2\u11a3\u11a5\5\u0350\u01a9\2\u11a4\u11a2\3\2\2"+
		"\2\u11a4\u11a5\3\2\2\2\u11a5\u11a9\3\2\2\2\u11a6\u11a7\6\u0104a\2\u11a7"+
		"\u11a9\7\u01e0\2\2\u11a8\u119e\3\2\2\2\u11a8\u11a1\3\2\2\2\u11a8\u11a6"+
		"\3\2\2\2\u11a9\u11ab\3\2\2\2\u11aa\u1190\3\2\2\2\u11aa\u1194\3\2\2\2\u11aa"+
		"\u1195\3\2\2\2\u11aa\u1199\3\2\2\2\u11aa\u119d\3\2\2\2\u11ab\u0207\3\2"+
		"\2\2\u11ac\u11ae\7\u01a4\2\2\u11ad\u11af\5\u043a\u021e\2\u11ae\u11ad\3"+
		"\2\2\2\u11ae\u11af\3\2\2\2\u11af\u11b0\3\2\2\2\u11b0\u11b1\5\u02a4\u0153"+
		"\2\u11b1\u0209\3\2\2\2\u11b2\u11b3\5\u02a4\u0153\2\u11b3\u11b4\5\u0434"+
		"\u021b\2\u11b4\u11b5\5\u020c\u0107\2\u11b5\u020b\3\2\2\2\u11b6\u11bb\5"+
		"\u0260\u0131\2\u11b7\u11bb\t=\2\2\u11b8\u11b9\6\u0107b\2\u11b9\u11bb\t"+
		">\2\2\u11ba\u11b6\3\2\2\2\u11ba\u11b7\3\2\2\2\u11ba\u11b8\3\2\2\2\u11bb"+
		"\u020d\3\2\2\2\u11bc\u11c1\5\u0210\u0109\2\u11bd\u11be\7\u0198\2\2\u11be"+
		"\u11c0\5\u0210\u0109\2\u11bf\u11bd\3\2\2\2\u11c0\u11c3\3\2\2\2\u11c1\u11bf"+
		"\3\2\2\2\u11c1\u11c2\3\2\2\2\u11c2\u020f\3\2\2\2\u11c3\u11c1\3\2\2\2\u11c4"+
		"\u11c5\5\u0436\u021c\2\u11c5\u11c6\5\u02a4\u0153\2\u11c6\u11c7\5\u0434"+
		"\u021b\2\u11c7\u11c8\5\u020c\u0107\2\u11c8\u11cb\3\2\2\2\u11c9\u11cb\5"+
		"\u0206\u0104\2\u11ca\u11c4\3\2\2\2\u11ca\u11c9\3\2\2\2\u11cb\u0211\3\2"+
		"\2\2\u11cc\u12af\7\u026f\2\2\u11cd\u11ce\6\u010ac\2\u11ce\u12b0\7D\2\2"+
		"\u11cf\u11d1\7\u01d6\2\2\u11d0\u11d2\5\u039c\u01cf\2\u11d1\u11d0\3\2\2"+
		"\2\u11d1\u11d2\3\2\2\2\u11d2\u12b0\3\2\2\2\u11d3\u11d5\5\u0214\u010b\2"+
		"\u11d4\u11d3\3\2\2\2\u11d4\u11d5\3\2\2\2\u11d5\u11d6\3\2\2\2\u11d6\u11d8"+
		"\7\u0156\2\2\u11d7\u11d9\5\u021a\u010e\2\u11d8\u11d7\3\2\2\2\u11d8\u11d9"+
		"\3\2\2\2\u11d9\u11db\3\2\2\2\u11da\u11dc\5\u039c\u01cf\2\u11db\u11da\3"+
		"\2\2\2\u11db\u11dc\3\2\2\2\u11dc\u12b0\3\2\2\2\u11dd\u11df\7\u0092\2\2"+
		"\u11de\u11dd\3\2\2\2\u11de\u11df\3\2\2\2\u11df\u11e0\3\2\2\2\u11e0\u11e2"+
		"\7\u015e\2\2\u11e1\u11e3\5\u021a\u010e\2\u11e2\u11e1\3\2\2\2\u11e2\u11e3"+
		"\3\2\2\2\u11e3\u11e5\3\2\2\2\u11e4\u11e6\5\u039c\u01cf\2\u11e5\u11e4\3"+
		"\2\2\2\u11e5\u11e6\3\2\2\2\u11e6\u12b0\3\2\2\2\u11e7\u11e9\7\u0088\2\2"+
		"\u11e8\u11ea\5\u021a\u010e\2\u11e9\u11e8\3\2\2\2\u11e9\u11ea\3\2\2\2\u11ea"+
		"\u11ec\3\2\2\2\u11eb\u11ed\5\u039c\u01cf\2\u11ec\u11eb\3\2\2\2\u11ec\u11ed"+
		"\3\2\2\2\u11ed\u12b0\3\2\2\2\u11ee\u11ef\7\u0289\2\2\u11ef\u11f1\7\u0149"+
		"\2\2\u11f0\u11f2\5\u021a\u010e\2\u11f1\u11f0\3\2\2\2\u11f1\u11f2\3\2\2"+
		"\2\u11f2\u11f4\3\2\2\2\u11f3\u11f5\5\u039c\u01cf\2\u11f4\u11f3\3\2\2\2"+
		"\u11f4\u11f5\3\2\2\2\u11f5\u12b0\3\2\2\2\u11f6\u11f7\7\36\2\2\u11f7\u11f9"+
		"\7\u0156\2\2\u11f8\u11fa\5\u021a\u010e\2\u11f9\u11f8\3\2\2\2\u11f9\u11fa"+
		"\3\2\2\2\u11fa\u11fc\3\2\2\2\u11fb\u11fd\5\u039c\u01cf\2\u11fc\u11fb\3"+
		"\2\2\2\u11fc\u11fd\3\2\2\2\u11fd\u12b0\3\2\2\2\u11fe\u11ff\6\u010ad\2"+
		"\u11ff\u12b0\7\u0100\2\2\u1200\u1201\6\u010ae\2\u1201\u12b0\7\u0101\2"+
		"\2\u1202\u1205\7\u0082\2\2\u1203\u1206\5\u03da\u01ee\2\u1204\u1206\7\u01ad"+
		"\2\2\u1205\u1203\3\2\2\2\u1205\u1204\3\2\2\2\u1206\u1207\3\2\2\2\u1207"+
		"\u12b0\t?\2\2\u1208\u120a\5\u0214\u010b\2\u1209\u1208\3\2\2\2\u1209\u120a"+
		"\3\2\2\2\u120a\u120b\3\2\2\2\u120b\u120c\7\\\2\2\u120c\u120d\t@\2\2\u120d"+
		"\u120f\5\u03e2\u01f2\2\u120e\u1210\5\u021a\u010e\2\u120f\u120e\3\2\2\2"+
		"\u120f\u1210\3\2\2\2\u1210\u1212\3\2\2\2\u1211\u1213\5\u039c\u01cf\2\u1212"+
		"\u1211\3\2\2\2\u1212\u1213\3\2\2\2\u1213\u12b0\3\2\2\2\u1214\u1215\t+"+
		"\2\2\u1215\u12b0\7\u00b9\2\2\u1216\u121d\7/\2\2\u1217\u121e\7\u009f\2"+
		"\2\u1218\u1219\7\u0149\2\2\u1219\u121b\5\u0216\u010c\2\u121a\u121c\5\u02c0"+
		"\u0161\2\u121b\u121a\3\2\2\2\u121b\u121c\3\2\2\2\u121c\u121e\3\2\2\2\u121d"+
		"\u1217\3\2\2\2\u121d\u1218\3\2\2\2\u121e\u12b0\3\2\2\2\u121f\u1220\tA"+
		"\2\2\u1220\u1223\7\u0088\2\2\u1221\u1222\7\u0214\2\2\u1222\u1224\5\u0418"+
		"\u020d\2\u1223\u1221\3\2\2\2\u1223\u1224\3\2\2\2\u1224\u1227\3\2\2\2\u1225"+
		"\u1226\7\u01fd\2\2\u1226\u1228\5\u040c\u0207\2\u1227\u1225\3\2\2\2\u1227"+
		"\u1228\3\2\2\2\u1228\u122a\3\2\2\2\u1229\u122b\5\u00f8}\2\u122a\u1229"+
		"\3\2\2\2\u122a\u122b\3\2\2\2\u122b\u122d\3\2\2\2\u122c\u122e\5\u02c0\u0161"+
		"\2\u122d\u122c\3\2\2\2\u122d\u122e\3\2\2\2\u122e\u12b0\3\2\2\2\u122f\u1230"+
		"\6\u010af\2\u1230\u1232\7\u008c\2\2\u1231\u122f\3\2\2\2\u1231\u1232\3"+
		"\2\2\2\u1232\u1233\3\2\2\2\u1233\u1234\tB\2\2\u1234\u1235\5\u0218\u010d"+
		"\2\u1235\u1237\5\u03e2\u01f2\2\u1236\u1238\5\u021a\u010e\2\u1237\u1236"+
		"\3\2\2\2\u1237\u1238\3\2\2\2\u1238\u123a\3\2\2\2\u1239\u123b\5\u013a\u009e"+
		"\2\u123a\u1239\3\2\2\2\u123a\u123b\3\2\2\2\u123b\u12b0\3\2\2\2\u123c\u123e"+
		"\7\u014a\2\2\u123d\u123c\3\2\2\2\u123d\u123e\3\2\2\2\u123e\u123f\3\2\2"+
		"\2\u123f\u12b0\7\u0083\2\2\u1240\u1241\7\u01cc\2\2\u1241\u1242\7\u019b"+
		"\2\2\u1242\u1243\7\u018b\2\2\u1243\u1244\7\u019c\2\2\u1244\u12b0\tC\2"+
		"\2\u1245\u1247\7\u0173\2\2\u1246\u1248\5\u00f8}\2\u1247\u1246\3\2\2\2"+
		"\u1247\u1248\3\2\2\2\u1248\u12b0\3\2\2\2\u1249\u124b\7\u0085\2\2\u124a"+
		"\u124c\5\u00f8}\2\u124b\u124a\3\2\2\2\u124b\u124c\3\2\2\2\u124c\u12b0"+
		"\3\2\2\2\u124d\u12b0\7\u010a\2\2\u124e\u1257\7\u0109\2\2\u124f\u1254\5"+
		"\u021c\u010f\2\u1250\u1251\7\u0198\2\2\u1251\u1253\5\u021c\u010f\2\u1252"+
		"\u1250\3\2\2\2\u1253\u1256\3\2\2\2\u1254\u1252\3\2\2\2\u1254\u1255\3\2"+
		"\2\2\u1255\u1258\3\2\2\2\u1256\u1254\3\2\2\2\u1257\u124f\3\2\2\2\u1257"+
		"\u1258\3\2\2\2\u1258\u125c\3\2\2\2\u1259\u125a\7\u01fb\2\2\u125a\u125b"+
		"\7\u010d\2\2\u125b\u125d\7\u017e\2\2\u125c\u1259\3\2\2\2\u125c\u125d\3"+
		"\2\2\2\u125d\u125f\3\2\2\2\u125e\u1260\5\u00f8}\2\u125f\u125e\3\2\2\2"+
		"\u125f\u1260\3\2\2\2\u1260\u12b0\3\2\2\2\u1261\u1263\5\u0436\u021c\2\u1262"+
		"\u1261\3\2\2\2\u1262\u1263\3\2\2\2\u1263\u1264\3\2\2\2\u1264\u1266\tD"+
		"\2\2\u1265\u1267\5\u039c\u01cf\2\u1266\u1265\3\2\2\2\u1266\u1267\3\2\2"+
		"\2\u1267\u12b0\3\2\2\2\u1268\u126a\7\u0092\2\2\u1269\u1268\3\2\2\2\u1269"+
		"\u126a\3\2\2\2\u126a\u126b\3\2\2\2\u126b\u12b0\7\u0108\2\2\u126c\u126e"+
		"\5\u02b0\u0159\2\u126d\u126f\5\u039c\u01cf\2\u126e\u126d\3\2\2\2\u126e"+
		"\u126f\3\2\2\2\u126f\u12b0\3\2\2\2\u1270\u1272\7Y\2\2\u1271\u1273\5\u039c"+
		"\u01cf\2\u1272\u1271\3\2\2\2\u1272\u1273\3\2\2\2\u1273\u12b0\3\2\2\2\u1274"+
		"\u1275\6\u010ag\2\u1275\u12b0\7j\2\2\u1276\u12b0\7\u0106\2\2\u1277\u127a"+
		"\7\u009c\2\2\u1278\u1279\7\u01fb\2\2\u1279\u127b\5\u0398\u01cd\2\u127a"+
		"\u1278\3\2\2\2\u127a\u127b\3\2\2\2\u127b\u12b0\3\2\2\2\u127c\u127d\6\u010a"+
		"h\2\u127d\u127e\7\u009c\2\2\u127e\u127f\7\u01fb\2\2\u127f\u1280\5\u0398"+
		"\u01cd\2\u1280\u1281\7\u029c\2\2\u1281\u1282\5\u0392\u01ca\2\u1282\u12b0"+
		"\3\2\2\2\u1283\u1284\7\u00bb\2\2\u1284\u12b0\7\u0149\2\2\u1285\u129a\7"+
		"\u01cd\2\2\u1286\u1288\7\u01d5\2\2\u1287\u1289\5\u0378\u01bd\2\u1288\u1287"+
		"\3\2\2\2\u1288\u1289\3\2\2\2\u1289\u128a\3\2\2\2\u128a\u129b\5\u03b6\u01dc"+
		"\2\u128b\u128c\7\u0087\2\2\u128c\u129b\5\u03d2\u01ea\2\u128d\u128e\7\u0166"+
		"\2\2\u128e\u129b\5\u03be\u01e0\2\u128f\u1290\7\u0254\2\2\u1290\u129b\5"+
		"\u03ba\u01de\2\u1291\u1292\7\u0289\2\2\u1292\u129b\5\u03e2\u01f2\2\u1293"+
		"\u1294\7\u0291\2\2\u1294\u129b\5\u03c2\u01e2\2\u1295\u1296\7\u0171\2\2"+
		"\u1296\u129b\5\u03c6\u01e4\2\u1297\u1298\6\u010ai\2\u1298\u1299\7\u016e"+
		"\2\2\u1299\u129b\5\u0398\u01cd\2\u129a\u1286\3\2\2\2\u129a\u128b\3\2\2"+
		"\2\u129a\u128d\3\2\2\2\u129a\u128f\3\2\2\2\u129a\u1291\3\2\2\2\u129a\u1293"+
		"\3\2\2\2\u129a\u1295\3\2\2\2\u129a\u1297\3\2\2\2\u129b\u12b0\3\2\2\2\u129c"+
		"\u129d\7\u0254\2\2\u129d\u129f\7\u0149\2\2\u129e\u12a0\5\u039c\u01cf\2"+
		"\u129f\u129e\3\2\2\2\u129f\u12a0\3\2\2\2\u12a0\u12b0\3\2\2\2\u12a1\u12a2"+
		"\7\u0166\2\2\u12a2\u12a4\7\u0149\2\2\u12a3\u12a5\5\u039c\u01cf\2\u12a4"+
		"\u12a3\3\2\2\2\u12a4\u12a5\3\2\2\2\u12a5\u12b0\3\2\2\2\u12a6\u12a7\7\u0254"+
		"\2\2\u12a7\u12a8\7X\2\2\u12a8\u12b0\5\u03ba\u01de\2\u12a9\u12aa\7\u0166"+
		"\2\2\u12aa\u12ab\7X\2\2\u12ab\u12b0\5\u03be\u01e0\2\u12ac\u12ad\6\u010a"+
		"j\2\u12ad\u12ae\7\u00a8\2\2\u12ae\u12b0\7\u0149\2\2\u12af\u11cd\3\2\2"+
		"\2\u12af\u11cf\3\2\2\2\u12af\u11d4\3\2\2\2\u12af\u11de\3\2\2\2\u12af\u11e7"+
		"\3\2\2\2\u12af\u11ee\3\2\2\2\u12af\u11f6\3\2\2\2\u12af\u11fe\3\2\2\2\u12af"+
		"\u1200\3\2\2\2\u12af\u1202\3\2\2\2\u12af\u1209\3\2\2\2\u12af\u1214\3\2"+
		"\2\2\u12af\u1216\3\2\2\2\u12af\u121f\3\2\2\2\u12af\u1231\3\2\2\2\u12af"+
		"\u123d\3\2\2\2\u12af\u1240\3\2\2\2\u12af\u1245\3\2\2\2\u12af\u1249\3\2"+
		"\2\2\u12af\u124d\3\2\2\2\u12af\u124e\3\2\2\2\u12af\u1262\3\2\2\2\u12af"+
		"\u1269\3\2\2\2\u12af\u126c\3\2\2\2\u12af\u1270\3\2\2\2\u12af\u1274\3\2"+
		"\2\2\u12af\u1276\3\2\2\2\u12af\u1277\3\2\2\2\u12af\u127c\3\2\2\2\u12af"+
		"\u1283\3\2\2\2\u12af\u1285\3\2\2\2\u12af\u129c\3\2\2\2\u12af\u12a1\3\2"+
		"\2\2\u12af\u12a6\3\2\2\2\u12af\u12a9\3\2\2\2\u12af\u12ac\3\2\2\2\u12b0"+
		"\u0213\3\2\2\2\u12b1\u12b8\7\u0092\2\2\u12b2\u12b3\6\u010bk\2\u12b3\u12b5"+
		"\7\u008c\2\2\u12b4\u12b6\7\u0092\2\2\u12b5\u12b4\3\2\2\2\u12b5\u12b6\3"+
		"\2\2\2\u12b6\u12b8\3\2\2\2\u12b7\u12b1\3\2\2\2\u12b7\u12b2\3\2\2\2\u12b8"+
		"\u0215\3\2\2\2\u12b9\u12bb\6\u010cl\2\u12ba\u12bc\7\u023e\2\2\u12bb\u12ba"+
		"\3\2\2\2\u12bb\u12bc\3\2\2\2\u12bc\u12bf\3\2\2\2\u12bd\u12bf\3\2\2\2\u12be"+
		"\u12b9\3\2\2\2\u12be\u12bd\3\2\2\2\u12bf\u0217\3\2\2\2\u12c0\u12c1\t@"+
		"\2\2\u12c1\u0219\3\2\2\2\u12c2\u12c3\5\u0218\u010d\2\u12c3\u12c4\5\u03fc"+
		"\u01ff\2\u12c4\u021b\3\2\2\2\u12c5\u12c6\7K\2\2\u12c6\u12cd\7\u00a9\2"+
		"\2\u12c7\u12c8\7i\2\2\u12c8\u12cd\7\u0154\2\2\u12c9\u12ca\7\u00f9\2\2"+
		"\u12ca\u12cd\7\u008e\2\2\u12cb\u12cd\tE\2\2\u12cc\u12c5\3\2\2\2\u12cc"+
		"\u12c7\3\2\2\2\u12cc\u12c9\3\2\2\2\u12cc\u12cb\3\2\2\2\u12cd\u021d\3\2"+
		"\2\2\u12ce\u12cf\7I\2\2\u12cf\u12f4\5\u041a\u020e\2\u12d0\u12d1\7\t\2"+
		"\2\u12d1\u12d2\7\u020b\2\2\u12d2\u12d3\5\u0220\u0111\2\u12d3\u12d6\7\u0214"+
		"\2\2\u12d4\u12d7\5\u03fc\u01ff\2\u12d5\u12d7\7\u01e0\2\2\u12d6\u12d4\3"+
		"\2\2\2\u12d6\u12d5\3\2\2\2\u12d7\u12f4\3\2\2\2\u12d8\u12da\7\24\2\2\u12d9"+
		"\u12db\5\u03a0\u01d1\2\u12da\u12d9\3\2\2\2\u12da\u12db\3\2\2\2\u12db\u12e5"+
		"\3\2\2\2\u12dc\u12e6\5\u0232\u011a\2\u12dd\u12e2\5\u022e\u0118\2\u12de"+
		"\u12df\7\u0198\2\2\u12df\u12e1\5\u022e\u0118\2\u12e0\u12de\3\2\2\2\u12e1"+
		"\u12e4\3\2\2\2\u12e2\u12e0\3\2\2\2\u12e2\u12e3\3\2\2\2\u12e3\u12e6\3\2"+
		"\2\2\u12e4\u12e2\3\2\2\2\u12e5\u12dc\3\2\2\2\u12e5\u12dd\3\2\2\2\u12e6"+
		"\u12f4\3\2\2\2\u12e7\u12e9\7\u021c\2\2\u12e8\u12ea\tF\2\2\u12e9\u12e8"+
		"\3\2\2\2\u12e9\u12ea\3\2\2\2\u12ea\u12eb\3\2\2\2\u12eb\u12f4\5\u0260\u0131"+
		"\2\u12ec\u12ed\7\u0224\2\2\u12ed\u12ee\7\u020b\2\2\u12ee\u12ef\7\u0212"+
		"\2\2\u12ef\u12f0\7\t\2\2\u12f0\u12f4\5\u0236\u011c\2\u12f1\u12f2\6\u0110"+
		"m\2\u12f2\u12f4\7:\2\2\u12f3\u12ce\3\2\2\2\u12f3\u12d0\3\2\2\2\u12f3\u12d8"+
		"\3\2\2\2\u12f3\u12e7\3\2\2\2\u12f3\u12ec\3\2\2\2\u12f3\u12f1\3\2\2\2\u12f4"+
		"\u021f\3\2\2\2\u12f5\u12f8\5\u0222\u0112\2\u12f6\u12f8\5\u0226\u0114\2"+
		"\u12f7\u12f5\3\2\2\2\u12f7\u12f6\3\2\2\2\u12f8\u0221\3\2\2\2\u12f9\u12fe"+
		"\5\u0224\u0113\2\u12fa\u12fb\7\u0198\2\2\u12fb\u12fd\5\u0224\u0113\2\u12fc"+
		"\u12fa\3\2\2\2\u12fd\u1300\3\2\2\2\u12fe\u12fc\3\2\2\2\u12fe\u12ff\3\2"+
		"\2\2\u12ff\u0223\3\2\2\2\u1300\u12fe\3\2\2\2\u1301\u1303\5\u03e2\u01f2"+
		"\2\u1302\u1304\5\u0228\u0115\2\u1303\u1302\3\2\2\2\u1303\u1304\3\2\2\2"+
		"\u1304\u0225\3\2\2\2\u1305\u1306\5\u03e2\u01f2\2\u1306\u1307\7\"\2\2\u1307"+
		"\u1308\7\u019b\2\2\u1308\u1309\5\66\34\2\u1309\u130b\7\u019c\2\2\u130a"+
		"\u130c\5\u0228\u0115\2\u130b\u130a\3\2\2\2\u130b\u130c\3\2\2\2\u130c\u0227"+
		"\3\2\2\2\u130d\u130e\5\u016a\u00b6\2\u130e\u1310\7\u019b\2\2\u130f\u1311"+
		"\5\u022c\u0117\2\u1310\u130f\3\2\2\2\u1310\u1311\3\2\2\2\u1311\u1312\3"+
		"\2\2\2\u1312\u1313\7\u019c\2\2\u1313\u0229\3\2\2\2\u1314\u1317\5\u03fc"+
		"\u01ff\2\u1315\u1317\7\u0253\2\2\u1316\u1314\3\2\2\2\u1316\u1315\3\2\2"+
		"\2\u1317\u022b\3\2\2\2\u1318\u131d\5\u022a\u0116\2\u1319\u131a\7\u0198"+
		"\2\2\u131a\u131c\5\u022a\u0116\2\u131b\u1319\3\2\2\2\u131c\u131f\3\2\2"+
		"\2\u131d\u131b\3\2\2\2\u131d\u131e\3\2\2\2\u131e\u022d\3\2\2\2\u131f\u131d"+
		"\3\2\2\2\u1320\u1330\tG\2\2\u1321\u1323\5\u0230\u0119\2\u1322\u1321\3"+
		"\2\2\2\u1322\u1323\3\2\2\2\u1323\u1324\3\2\2\2\u1324\u1330\7\u00b9\2\2"+
		"\u1325\u1326\7\u0115\2\2\u1326\u1328\7\u00b9\2\2\u1327\u1329\5\u02c0\u0161"+
		"\2\u1328\u1327\3\2\2\2\u1328\u1329\3\2\2\2\u1329\u1330\3\2\2\2\u132a\u132b"+
		"\6\u0118n\2\u132b\u132c\7\u010d\2\2\u132c\u1330\7\t\2\2\u132d\u132e\6"+
		"\u0118o\2\u132e\u1330\7\u0249\2\2\u132f\u1320\3\2\2\2\u132f\u1322\3\2"+
		"\2\2\u132f\u1325\3\2\2\2\u132f\u132a\3\2\2\2\u132f\u132d\3\2\2\2\u1330"+
		"\u022f\3\2\2\2\u1331\u1332\tH\2\2\u1332\u0231\3\2\2\2\u1333\u133b\t\22"+
		"\2\2\u1334\u1335\7\u02ac\2\2\u1335\u1336\7\u0258\2\2\u1336\u133c\7\u0226"+
		"\2\2\u1337\u1339\5\u03fe\u0200\2\u1338\u133a\5\u0234\u011b\2\u1339\u1338"+
		"\3\2\2\2\u1339\u133a\3\2\2\2\u133a\u133c\3\2\2\2\u133b\u1334\3\2\2\2\u133b"+
		"\u1337\3\2\2\2\u133b\u133c\3\2\2\2\u133c\u0233\3\2\2\2\u133d\u133e\6\u011b"+
		"p\2\u133e\u133f\7\u01fb\2\2\u133f\u1344\7\u008b\2\2\u1340\u1341\7\u02ac"+
		"\2\2\u1341\u1342\7\u0258\2\2\u1342\u1344\7\u0226\2\2\u1343\u133d\3\2\2"+
		"\2\u1343\u1340\3\2\2\2\u1344\u0235\3\2\2\2\u1345\u1346\5\u03e2\u01f2\2"+
		"\u1346\u1348\5\u023c\u011f\2\u1347\u1349\5\u0228\u0115\2\u1348\u1347\3"+
		"\2\2\2\u1348\u1349\3\2\2\2\u1349\u134c\3\2\2\2\u134a\u134b\7\u020a\2\2"+
		"\u134b\u134d\7\u00b1\2\2\u134c\u134a\3\2\2\2\u134c\u134d\3\2\2\2\u134d"+
		"\u1350\3\2\2\2\u134e\u1350\5\u0238\u011d\2\u134f\u1345\3\2\2\2\u134f\u134e"+
		"\3\2\2\2\u1350\u0237\3\2\2\2\u1351\u1356\5\u023a\u011e\2\u1352\u1353\7"+
		"\u0198\2\2\u1353\u1355\5\u023a\u011e\2\u1354\u1352\3\2\2\2\u1355\u1358"+
		"\3\2\2\2\u1356\u1354\3\2\2\2\u1356\u1357\3\2\2\2\u1357\u0239\3\2\2\2\u1358"+
		"\u1356\3\2\2\2\u1359\u135b\5\u03e2\u01f2\2\u135a\u135c\5\u0228\u0115\2"+
		"\u135b\u135a\3\2\2\2\u135b\u135c\3\2\2\2\u135c\u135f\3\2\2\2\u135d\u135e"+
		"\7\u020a\2\2\u135e\u1360\7\u00b1\2\2\u135f\u135d\3\2\2\2\u135f\u1360\3"+
		"\2\2\2\u1360\u023b\3\2\2\2\u1361\u1362\6\u011fq\2\u1362\u1363\7\"\2\2"+
		"\u1363\u1364\7\u019b\2\2\u1364\u1365\5\66\34\2\u1365\u1366\7\u019c\2\2"+
		"\u1366\u023d\3\2\2\2\u1367\u136c\5\u0240\u0121\2\u1368\u136c\5\u024a\u0126"+
		"\2\u1369\u136c\5\u024c\u0127\2\u136a\u136c\5\u0250\u0129\2\u136b\u1367"+
		"\3\2\2\2\u136b\u1368\3\2\2\2\u136b\u1369\3\2\2\2\u136b\u136a\3\2\2\2\u136c"+
		"\u023f\3\2\2\2\u136d\u136e\7\u01cd\2\2\u136e\u136f\7\u02e7\2\2\u136f\u1370"+
		"\7\u0202\2\2\u1370\u1371\5\u03fc\u01ff\2\u1371\u1373\7\u0164\2\2\u1372"+
		"\u1374\5\u0434\u021b\2\u1373\u1372\3\2\2\2\u1373\u1374\3\2\2\2\u1374\u1375"+
		"\3\2\2\2\u1375\u1377\tI\2\2\u1376\u1378\5\u0242\u0122\2\u1377\u1376\3"+
		"\2\2\2\u1377\u1378\3\2\2\2\u1378\u137a\3\2\2\2\u1379\u137b\5\u0246\u0124"+
		"\2\u137a\u1379\3\2\2\2\u137a\u137b\3\2\2\2\u137b\u137d\3\2\2\2\u137c\u137e"+
		"\5\u0248\u0125\2\u137d\u137c\3\2\2\2\u137d\u137e\3\2\2\2\u137e\u0241\3"+
		"\2\2\2\u137f\u1381\7\u02e9\2\2\u1380\u1382\5\u0434\u021b\2\u1381\u1380"+
		"\3\2\2\2\u1381\u1382\3\2\2\2\u1382\u1383\3\2\2\2\u1383\u138a\5\u0244\u0123"+
		"\2\u1384\u1386\7\u0198\2\2\u1385\u1384\3\2\2\2\u1385\u1386\3\2\2\2\u1386"+
		"\u1387\3\2\2\2\u1387\u1389\5\u0244\u0123\2\u1388\u1385\3\2\2\2\u1389\u138c"+
		"\3\2\2\2\u138a\u1388\3\2\2\2\u138a\u138b\3\2\2\2\u138b\u0243\3\2\2\2\u138c"+
		"\u138a\3\2\2\2\u138d\u1390\7\u017e\2\2\u138e\u138f\7\u018a\2\2\u138f\u1391"+
		"\7\u017e\2\2\u1390\u138e\3\2\2\2\u1390\u1391\3\2\2\2\u1391\u0245\3\2\2"+
		"\2\u1392\u1394\7\u02e6\2\2\u1393\u1395\5\u0434\u021b\2\u1394\u1393\3\2"+
		"\2\2\u1394\u1395\3\2\2\2\u1395\u1396\3\2\2\2\u1396\u1397\7\u017e\2\2\u1397"+
		"\u0247\3\2\2\2\u1398\u1399\tJ\2\2\u1399\u0249\3\2\2\2\u139a\u139b\7\u01ae"+
		"\2\2\u139b\u139c\7\u02e7\2\2\u139c\u139d\7\u0202\2\2\u139d\u139f\5\u03f6"+
		"\u01fc\2\u139e\u13a0\5\u0242\u0122\2\u139f\u139e\3\2\2\2\u139f\u13a0\3"+
		"\2\2\2\u13a0\u13a2\3\2\2\2\u13a1\u13a3\5\u0246\u0124\2\u13a2\u13a1\3\2"+
		"\2\2\u13a2\u13a3\3\2\2\2\u13a3\u13a5\3\2\2\2\u13a4\u13a6\5\u0248\u0125"+
		"\2\u13a5\u13a4\3\2\2\2\u13a5\u13a6\3\2\2\2\u13a6\u13a8\3\2\2\2\u13a7\u13a9"+
		"\7\u01f9\2\2\u13a8\u13a7\3\2\2\2\u13a8\u13a9\3\2\2\2\u13a9\u024b\3\2\2"+
		"\2\u13aa\u13ab\7\u026d\2\2\u13ab\u13ac\7\u02e7\2\2\u13ac\u13ad\7\u0202"+
		"\2\2\u13ad\u13b0\5\u03fc\u01ff\2\u13ae\u13af\7\u01fb\2\2\u13af\u13b1\5"+
		"\u024e\u0128\2\u13b0\u13ae\3\2\2\2\u13b0\u13b1\3\2\2\2\u13b1\u024d\3\2"+
		"\2\2\u13b2\u13b9\5\u040a\u0206\2\u13b3\u13b5\7\u0198\2\2\u13b4\u13b3\3"+
		"\2\2\2\u13b4\u13b5\3\2\2\2\u13b5\u13b6\3\2\2\2\u13b6\u13b8\5\u040a\u0206"+
		"\2\u13b7\u13b4\3\2\2\2\u13b8\u13bb\3\2\2\2\u13b9\u13b7\3\2\2\2\u13b9\u13ba"+
		"\3\2\2\2\u13ba\u024f\3\2\2\2\u13bb\u13b9\3\2\2\2\u13bc\u13bd\7\u01e9\2"+
		"\2\u13bd\u13be\7\u02e7\2\2\u13be\u13bf\7\u0202\2\2\u13bf\u13c1\5\u03f6"+
		"\u01fc\2\u13c0\u13c2\7\u01f9\2\2\u13c1\u13c0\3\2\2\2\u13c1\u13c2\3\2\2"+
		"\2\u13c2\u0251\3\2\2\2\u13c3\u13ca\5\u0254\u012b\2\u13c4\u13ca\5\u0256"+
		"\u012c\2\u13c5\u13ca\5\u025a\u012e\2\u13c6\u13ca\5\u025c\u012f\2\u13c7"+
		"\u13c8\6\u012ar\2\u13c8\u13ca\5\u025e\u0130\2\u13c9\u13c3\3\2\2\2\u13c9"+
		"\u13c4\3\2\2\2\u13c9\u13c5\3\2\2\2\u13c9\u13c6\3\2\2\2\u13c9\u13c7\3\2"+
		"\2\2\u13ca\u0253\3\2\2\2\u13cb\u13cc\tK\2\2\u13cc\u13cf\5\u03e2\u01f2"+
		"\2\u13cd\u13d0\5\u0418\u020d\2\u13ce\u13d0\5\u03aa\u01d6\2\u13cf\u13cd"+
		"\3\2\2\2\u13cf\u13ce\3\2\2\2\u13cf\u13d0\3\2\2\2\u13d0\u0255\3\2\2\2\u13d1"+
		"\u13da\tK\2\2\u13d2\u13d3\6\u012cs\2\u13d3\u13db\7\u008c\2\2\u13d4\u13d5"+
		"\6\u012ct\2\u13d5\u13db\7\u00fc\2\2\u13d6\u13d7\6\u012cu\2\u13d7\u13d8"+
		"\7\26\2\2\u13d8\u13d9\7\u0181\2\2\u13d9\u13db\5\u042c\u0217\2\u13da\u13d2"+
		"\3\2\2\2\u13da\u13d4\3\2\2\2\u13da\u13d6\3\2\2\2\u13da\u13db\3\2\2\2\u13db"+
		"\u13dc\3\2\2\2\u13dc\u13dd\5\u0258\u012d\2\u13dd\u0257\3\2\2\2\u13de\u13eb"+
		"\5\u00e8u\2\u13df\u13e4\6\u012dv\2\u13e0\u13e5\5\u00bc_\2\u13e1\u13e5"+
		"\5\u00c8e\2\u13e2\u13e5\5\u00e6t\2\u13e3\u13e5\5\u0172\u00ba\2\u13e4\u13e0"+
		"\3\2\2\2\u13e4\u13e1\3\2\2\2\u13e4\u13e2\3\2\2\2\u13e4\u13e3\3\2\2\2\u13e5"+
		"\u13eb\3\2\2\2\u13e6\u13e7\6\u012dw\2\u13e7\u13e8\7\u01fb\2\2\u13e8\u13e9"+
		"\7d\2\2\u13e9\u13eb\5\u040a\u0206\2\u13ea\u13de\3\2\2\2\u13ea\u13df\3"+
		"\2\2\2\u13ea\u13e6\3\2\2\2\u13eb\u0259\3\2\2\2\u13ec\u13ed\7\31\2\2\u13ed"+
		"\u13ee\5\u042c\u0217\2\u13ee\u025b\3\2\2\2\u13ef\u13f0\7\u029b\2\2\u13f0"+
		"\u13f1\5\u03fc\u01ff\2\u13f1\u025d\3\2\2\2\u13f2\u13f3\7\u02ec\2\2\u13f3"+
		"\u025f\3\2\2\2\u13f4\u13f5\b\u0131\1\2\u13f5\u13fb\5\u0262\u0132\2\u13f6"+
		"\u13f8\7\u0217\2\2\u13f7\u13f9\5\u02b2\u015a\2\u13f8\u13f7\3\2\2\2\u13f8"+
		"\u13f9\3\2\2\2\u13f9\u13fa\3\2\2\2\u13fa\u13fc\tL\2\2\u13fb\u13f6\3\2"+
		"\2\2\u13fb\u13fc\3\2\2\2\u13fc\u1400\3\2\2\2\u13fd\u13fe\7\u023f\2\2\u13fe"+
		"\u1400\5\u0260\u0131\6\u13ff\u13f4\3\2\2\2\u13ff\u13fd\3\2\2\2\u1400\u140c"+
		"\3\2\2\2\u1401\u1402\f\5\2\2\u1402\u1403\tM\2\2\u1403\u140b\5\u0260\u0131"+
		"\6\u1404\u1405\f\4\2\2\u1405\u1406\7\u02b1\2\2\u1406\u140b\5\u0260\u0131"+
		"\5\u1407\u1408\f\3\2\2\u1408\u1409\tN\2\2\u1409\u140b\5\u0260\u0131\4"+
		"\u140a\u1401\3\2\2\2\u140a\u1404\3\2\2\2\u140a\u1407\3\2\2\2\u140b\u140e"+
		"\3\2\2\2\u140c\u140a\3\2\2\2\u140c\u140d\3\2\2\2\u140d\u0261\3\2\2\2\u140e"+
		"\u140c\3\2\2\2\u140f\u1410\b\u0132\1\2\u1410\u1411\5\u0266\u0134\2\u1411"+
		"\u1425\3\2\2\2\u1412\u1413\f\5\2\2\u1413\u1415\7\u0217\2\2\u1414\u1416"+
		"\5\u02b2\u015a\2\u1415\u1414\3\2\2\2\u1415\u1416\3\2\2\2\u1416\u1417\3"+
		"\2\2\2\u1417\u1424\7\u0242\2\2\u1418\u1419\f\4\2\2\u1419\u141a\5\u0264"+
		"\u0133\2\u141a\u141b\5\u0266\u0134\2\u141b\u1424\3\2\2\2\u141c\u141d\f"+
		"\3\2\2\u141d\u141e\5\u0264\u0133\2\u141e\u141f\tO\2\2\u141f\u1420\7\u019b"+
		"\2\2\u1420\u1421\5\u00f4{\2\u1421\u1422\7\u019c\2\2\u1422\u1424\3\2\2"+
		"\2\u1423\u1412\3\2\2\2\u1423\u1418\3\2\2\2\u1423\u141c\3\2\2\2\u1424\u1427"+
		"\3\2\2\2\u1425\u1423\3\2\2\2\u1425\u1426\3\2\2\2\u1426\u0263\3\2\2\2\u1427"+
		"\u1425\3\2\2\2\u1428\u1429\tP\2\2\u1429\u0265\3\2\2\2\u142a\u1432\5\u026a"+
		"\u0136\2\u142b\u142d\5\u02b2\u015a\2\u142c\u142b\3\2\2\2\u142c\u142d\3"+
		"\2\2\2\u142d\u142e\3\2\2\2\u142e\u1433\5\u0268\u0135\2\u142f\u1430\7\u013b"+
		"\2\2\u1430\u1431\7\u0220\2\2\u1431\u1433\5\u026a\u0136\2\u1432\u142c\3"+
		"\2\2\2\u1432\u142f\3\2\2\2\u1432\u1433\3\2\2\2\u1433\u0267\3\2\2\2\u1434"+
		"\u143a\7\u0214\2\2\u1435\u143b\5\u00f4{\2\u1436\u1437\7\u019b\2\2\u1437"+
		"\u1438\5\u02ae\u0158\2\u1438\u1439\7\u019c\2\2\u1439\u143b\3\2\2\2\u143a"+
		"\u1435\3\2\2\2\u143a\u1436\3\2\2\2\u143b\u144a\3\2\2\2\u143c\u143d\7\u01b5"+
		"\2\2\u143d\u143e\5\u026a\u0136\2\u143e\u143f\7\u01b0\2\2\u143f\u1440\5"+
		"\u0266\u0134\2\u1440\u144a\3\2\2\2\u1441\u1442\7\u0220\2\2\u1442\u1445"+
		"\5\u026c\u0137\2\u1443\u1444\7\u0086\2\2\u1444\u1446\5\u026c\u0137\2\u1445"+
		"\u1443\3\2\2\2\u1445\u1446\3\2\2\2\u1446\u144a\3\2\2\2\u1447\u1448\7\u025c"+
		"\2\2\u1448\u144a\5\u026a\u0136\2\u1449\u1434\3\2\2\2\u1449\u143c\3\2\2"+
		"\2\u1449\u1441\3\2\2\2\u1449\u1447\3\2\2\2\u144a\u0269\3\2\2\2\u144b\u144c"+
		"\b\u0136\1\2\u144c\u144d\5\u026c\u0137\2\u144d\u1468\3\2\2\2\u144e\u144f"+
		"\f\t\2\2\u144f\u1450\7\u0194\2\2\u1450\u1467\5\u026a\u0136\n\u1451\u1452"+
		"\f\b\2\2\u1452\u1453\tQ\2\2\u1453\u1467\5\u026a\u0136\t\u1454\u1455\f"+
		"\7\2\2\u1455\u1456\tR\2\2\u1456\u1467\5\u026a\u0136\b\u1457\u1458\f\5"+
		"\2\2\u1458\u1459\tS\2\2\u1459\u1467\5\u026a\u0136\6\u145a\u145b\f\4\2"+
		"\2\u145b\u145c\7\u0193\2\2\u145c\u1467\5\u026a\u0136\5\u145d\u145e\f\3"+
		"\2\2\u145e\u145f\7\u0196\2\2\u145f\u1467\5\u026a\u0136\4\u1460\u1461\f"+
		"\6\2\2\u1461\u1462\tR\2\2\u1462\u1463\7\u0211\2\2\u1463\u1464\5\u0260"+
		"\u0131\2\u1464\u1465\5\u02b6\u015c\2\u1465\u1467\3\2\2\2\u1466\u144e\3"+
		"\2\2\2\u1466\u1451\3\2\2\2\u1466\u1454\3\2\2\2\u1466\u1457\3\2\2\2\u1466"+
		"\u145a\3\2\2\2\u1466\u145d\3\2\2\2\u1466\u1460\3\2\2\2\u1467\u146a\3\2"+
		"\2\2\u1468\u1466\3\2\2\2\u1468\u1469\3\2\2\2\u1469\u026b\3\2\2\2\u146a"+
		"\u1468\3\2\2\2\u146b\u146c\b\u0137\1\2\u146c\u14cf\5\u029e\u0150\2\u146d"+
		"\u146f\5\u03aa\u01d6\2\u146e\u1470\5\u026e\u0138\2\u146f\u146e\3\2\2\2"+
		"\u146f\u1470\3\2\2\2\u1470\u14cf\3\2\2\2\u1471\u14cf\5\u0286\u0144\2\u1472"+
		"\u14cf\5\u0298\u014d\2\u1473\u14cf\5\u0410\u0209\2\u1474\u14cf\7\u01a6"+
		"\2\2\u1475\u14cf\5\u0270\u0139\2\u1476\u1477\6\u0137\u0085\2\u1477\u14cf"+
		"\5\u0272\u013a\2\u1478\u1479\6\u0137\u0086\2\u1479\u14cf\5\u0274\u013b"+
		"\2\u147a\u147b\tT\2\2\u147b\u14cf\5\u026c\u0137\20\u147c\u147d\5\u02b4"+
		"\u015b\2\u147d\u147e\5\u026c\u0137\17\u147e\u14cf\3\2\2\2\u147f\u1481"+
		"\7\u012f\2\2\u1480\u147f\3\2\2\2\u1480\u1481\3\2\2\2\u1481\u1482\3\2\2"+
		"\2\u1482\u1483\7\u019b\2\2\u1483\u1484\5\u02ae\u0158\2\u1484\u1485\7\u019c"+
		"\2\2\u1485\u14cf\3\2\2\2\u1486\u1488\7\u01f2\2\2\u1487\u1486\3\2\2\2\u1487"+
		"\u1488\3\2\2\2\u1488\u1489\3\2\2\2\u1489\u14cf\5\u00f4{\2\u148a\u148b"+
		"\7\u019d\2\2\u148b\u148c\5\u03fc\u01ff\2\u148c\u148d\5\u0260\u0131\2\u148d"+
		"\u148e\7\u019e\2\2\u148e\u14cf\3\2\2\2\u148f\u1490\7\u022f\2\2\u1490\u1491"+
		"\5\u0280\u0141\2\u1491\u1492\7>\2\2\u1492\u1493\7\u019b\2\2\u1493\u1494"+
		"\5\u026a\u0136\2\u1494\u1495\5\u0284\u0143\2\u1495\u1496\7\u019c\2\2\u1496"+
		"\u14cf\3\2\2\2\u1497\u1498\7\u01b7\2\2\u1498\u14cf\5\u026c\u0137\n\u1499"+
		"\u149a\7\u01c2\2\2\u149a\u149b\7\u019b\2\2\u149b\u149c\5\u0260\u0131\2"+
		"\u149c\u149d\7\u01b1\2\2\u149d\u149e\5\u02ac\u0157\2\u149e\u149f\7\u019c"+
		"\2\2\u149f\u14cf\3\2\2\2\u14a0\u14a2\7\u01c1\2\2\u14a1\u14a3\5\u0260\u0131"+
		"\2\u14a2\u14a1\3\2\2\2\u14a2\u14a3\3\2\2\2\u14a3\u14a7\3\2\2\2\u14a4\u14a5"+
		"\5\u02a6\u0154\2\u14a5\u14a6\5\u02a8\u0155\2\u14a6\u14a8\3\2\2\2\u14a7"+
		"\u14a4\3\2\2\2\u14a8\u14a9\3\2\2\2\u14a9\u14a7\3\2\2\2\u14a9\u14aa\3\2"+
		"\2\2\u14aa\u14ac\3\2\2\2\u14ab\u14ad\5\u02aa\u0156\2\u14ac\u14ab\3\2\2"+
		"\2\u14ac\u14ad\3\2\2\2\u14ad\u14ae\3\2\2\2\u14ae\u14af\7\22\2\2\u14af"+
		"\u14cf\3\2\2\2\u14b0\u14b1\7\u01cb\2\2\u14b1\u14b2\7\u019b\2\2\u14b2\u14b3"+
		"\5\u0260\u0131\2\u14b3\u14b4\7\u0198\2\2\u14b4\u14b5\5\u02ac\u0157\2\u14b5"+
		"\u14b6\7\u019c\2\2\u14b6\u14cf\3\2\2\2\u14b7\u14b8\7\u01cb\2\2\u14b8\u14b9"+
		"\7\u019b\2\2\u14b9\u14ba\5\u0260\u0131\2\u14ba\u14bb\7\u029c\2\2\u14bb"+
		"\u14bc\5\u034e\u01a8\2\u14bc\u14bd\7\u019c\2\2\u14bd\u14cf\3\2\2\2\u14be"+
		"\u14bf\7\u01e0\2\2\u14bf\u14c0\7\u019b\2\2\u14c0\u14c1\5\u0404\u0203\2"+
		"\u14c1\u14c2\7\u019c\2\2\u14c2\u14cf\3\2\2\2\u14c3\u14c4\7\u02a1\2\2\u14c4"+
		"\u14c5\7\u019b\2\2\u14c5\u14c6\5\u0404\u0203\2\u14c6\u14c7\7\u019c\2\2"+
		"\u14c7\u14cf\3\2\2\2\u14c8\u14c9\7\u0211\2\2\u14c9\u14ca\5\u0260\u0131"+
		"\2\u14ca\u14cb\5\u02b6\u015c\2\u14cb\u14cc\7\u0189\2\2\u14cc\u14cd\5\u0260"+
		"\u0131\2\u14cd\u14cf\3\2\2\2\u14ce\u146b\3\2\2\2\u14ce\u146d\3\2\2\2\u14ce"+
		"\u1471\3\2\2\2\u14ce\u1472\3\2\2\2\u14ce\u1473\3\2\2\2\u14ce\u1474\3\2"+
		"\2\2\u14ce\u1475\3\2\2\2\u14ce\u1476\3\2\2\2\u14ce\u1478\3\2\2\2\u14ce"+
		"\u147a\3\2\2\2\u14ce\u147c\3\2\2\2\u14ce\u1480\3\2\2\2\u14ce\u1487\3\2"+
		"\2\2\u14ce\u148a\3\2\2\2\u14ce\u148f\3\2\2\2\u14ce\u1497\3\2\2\2\u14ce"+
		"\u1499\3\2\2\2\u14ce\u14a0\3\2\2\2\u14ce\u14b0\3\2\2\2\u14ce\u14b7\3\2"+
		"\2\2\u14ce\u14be\3\2\2\2\u14ce\u14c3\3\2\2\2\u14ce\u14c8\3\2\2\2\u14cf"+
		"\u14d8\3\2\2\2\u14d0\u14d1\f\21\2\2\u14d1\u14d2\7\u017d\2\2\u14d2\u14d7"+
		"\5\u026c\u0137\22\u14d3\u14d4\f\27\2\2\u14d4\u14d5\7\u01c6\2\2\u14d5\u14d7"+
		"\5\u042c\u0217\2\u14d6\u14d0\3\2\2\2\u14d6\u14d3\3\2\2\2\u14d7\u14da\3"+
		"\2\2\2\u14d8\u14d6\3\2\2\2\u14d8\u14d9\3\2\2\2\u14d9\u026d\3\2\2\2\u14da"+
		"\u14d8\3\2\2\2\u14db\u14dc\6\u0138\u0089\2\u14dc\u14dd\7\u01a0\2\2\u14dd"+
		"\u14e2\5\u0416\u020c\2\u14de\u14df\6\u0138\u008a\2\u14df\u14e0\7\u01a1"+
		"\2\2\u14e0\u14e2\5\u0416\u020c\2\u14e1\u14db\3\2\2\2\u14e1\u14de\3\2\2"+
		"\2\u14e2\u026f\3\2\2\2\u14e3\u14e4\7H\2\2\u14e4\u14e6\7\u019b\2\2\u14e5"+
		"\u14e7\7\u01e6\2\2\u14e6\u14e5\3\2\2\2\u14e6\u14e7\3\2\2\2\u14e7\u14e8"+
		"\3\2\2\2\u14e8\u14e9\5\u027e\u0140\2\u14e9\u14ec\7\u019c\2\2\u14ea\u14eb"+
		"\6\u0139\u008b\2\u14eb\u14ed\5\u0276\u013c\2\u14ec\u14ea\3\2\2\2\u14ec"+
		"\u14ed\3\2\2\2\u14ed\u1567\3\2\2\2\u14ee\u14ef\tU\2\2\u14ef\u14f0\7\u019b"+
		"\2\2\u14f0\u14f1\5\u027e\u0140\2\u14f1\u14f4\7\u019c\2\2\u14f2\u14f3\6"+
		"\u0139\u008c\2\u14f3\u14f5\5\u0276\u013c\2\u14f4\u14f2\3\2\2\2\u14f4\u14f5"+
		"\3\2\2\2\u14f5\u1567\3\2\2\2\u14f6\u14f7\6\u0139\u008d\2\u14f7\u1567\5"+
		"\u027c\u013f\2\u14f8\u14f9\7\u01cc\2\2\u14f9\u14fb\7\u019b\2\2\u14fa\u14fc"+
		"\7\u01ad\2\2\u14fb\u14fa\3\2\2\2\u14fb\u14fc\3\2\2\2\u14fc\u14fd\3\2\2"+
		"\2\u14fd\u14fe\7\u018b\2\2\u14fe\u1501\7\u019c\2\2\u14ff\u1500\6\u0139"+
		"\u008e\2\u1500\u1502\5\u0276\u013c\2\u1501\u14ff\3\2\2\2\u1501\u1502\3"+
		"\2\2\2\u1502\u1567\3\2\2\2\u1503\u1504\7\u01cc\2\2\u1504\u150c\7\u019b"+
		"\2\2\u1505\u1507\7\u01ad\2\2\u1506\u1505\3\2\2\2\u1506\u1507\3\2\2\2\u1507"+
		"\u1508\3\2\2\2\u1508\u150d\7\u018b\2\2\u1509\u150d\5\u027e\u0140\2\u150a"+
		"\u150b\7\u01e6\2\2\u150b\u150d\5\u02ae\u0158\2\u150c\u1506\3\2\2\2\u150c"+
		"\u1509\3\2\2\2\u150c\u150a\3\2\2\2\u150d\u150e\3\2\2\2\u150e\u1511\7\u019c"+
		"\2\2\u150f\u1510\6\u0139\u008f\2\u1510\u1512\5\u0276\u013c\2\u1511\u150f"+
		"\3\2\2\2\u1511\u1512\3\2\2\2\u1512\u1567\3\2\2\2\u1513\u1514\7\u0238\2"+
		"\2\u1514\u1516\7\u019b\2\2\u1515\u1517\7\u01e6\2\2\u1516\u1515\3\2\2\2"+
		"\u1516\u1517\3\2\2\2\u1517\u1518\3\2\2\2\u1518\u1519\5\u027e\u0140\2\u1519"+
		"\u151c\7\u019c\2\2\u151a\u151b\6\u0139\u0090\2\u151b\u151d\5\u0276\u013c"+
		"\2\u151c\u151a\3\2\2\2\u151c\u151d\3\2\2\2\u151d\u1567\3\2\2\2\u151e\u151f"+
		"\7\u0230\2\2\u151f\u1521\7\u019b\2\2\u1520\u1522\7\u01e6\2\2\u1521\u1520"+
		"\3\2\2\2\u1521\u1522\3\2\2\2\u1522\u1523\3\2\2\2\u1523\u1524\5\u027e\u0140"+
		"\2\u1524\u1527\7\u019c\2\2\u1525\u1526\6\u0139\u0091\2\u1526\u1528\5\u0276"+
		"\u013c\2\u1527\u1525\3\2\2\2\u1527\u1528\3\2\2\2\u1528\u1567\3\2\2\2\u1529"+
		"\u152a\7\u0280\2\2\u152a\u152b\7\u019b\2\2\u152b\u152c\5\u027e\u0140\2"+
		"\u152c\u152f\7\u019c\2\2\u152d\u152e\6\u0139\u0092\2\u152e\u1530\5\u0276"+
		"\u013c\2\u152f\u152d\3\2\2\2\u152f\u1530\3\2\2\2\u1530\u1567\3\2\2\2\u1531"+
		"\u1532\7\u02a4\2\2\u1532\u1533\7\u019b\2\2\u1533\u1534\5\u027e\u0140\2"+
		"\u1534\u1537\7\u019c\2\2\u1535\u1536\6\u0139\u0093\2\u1536\u1538\5\u0276"+
		"\u013c\2\u1537\u1535\3\2\2\2\u1537\u1538\3\2\2\2\u1538\u1567\3\2\2\2\u1539"+
		"\u153a\7\u027d\2\2\u153a\u153b\7\u019b\2\2\u153b\u153c\5\u027e\u0140\2"+
		"\u153c\u153f\7\u019c\2\2\u153d\u153e\6\u0139\u0094\2\u153e\u1540\5\u0276"+
		"\u013c\2\u153f\u153d\3\2\2\2\u153f\u1540\3\2\2\2\u1540\u1567\3\2\2\2\u1541"+
		"\u1542\7\u02a7\2\2\u1542\u1543\7\u019b\2\2\u1543\u1544\5\u027e\u0140\2"+
		"\u1544\u1547\7\u019c\2\2\u1545\u1546\6\u0139\u0095\2\u1546\u1548\5\u0276"+
		"\u013c\2\u1547\u1545\3\2\2\2\u1547\u1548\3\2\2\2\u1548\u1567\3\2\2\2\u1549"+
		"\u154a\7\u0285\2\2\u154a\u154c\7\u019b\2\2\u154b\u154d\7\u01e6\2\2\u154c"+
		"\u154b\3\2\2\2\u154c\u154d\3\2\2\2\u154d\u154e\3\2\2\2\u154e\u154f\5\u027e"+
		"\u0140\2\u154f\u1552\7\u019c\2\2\u1550\u1551\6\u0139\u0096\2\u1551\u1553"+
		"\5\u0276\u013c\2\u1552\u1550\3\2\2\2\u1552\u1553\3\2\2\2\u1553\u1567\3"+
		"\2\2\2\u1554\u1555\7\u0203\2\2\u1555\u1557\7\u019b\2\2\u1556\u1558\7\u01e6"+
		"\2\2\u1557\u1556\3\2\2\2\u1557\u1558\3\2\2\2\u1558\u1559\3\2\2\2\u1559"+
		"\u155b\5\u02ae\u0158\2\u155a\u155c\5\u0124\u0093\2\u155b\u155a\3\2\2\2"+
		"\u155b\u155c\3\2\2\2\u155c\u155f\3\2\2\2\u155d\u155e\7\u026a\2\2\u155e"+
		"\u1560\5\u0418\u020d\2\u155f\u155d\3\2\2\2\u155f\u1560\3\2\2\2\u1560\u1561"+
		"\3\2\2\2\u1561\u1564\7\u019c\2\2\u1562\u1563\6\u0139\u0097\2\u1563\u1565"+
		"\5\u0276\u013c\2\u1564\u1562\3\2\2\2\u1564\u1565\3\2\2\2\u1565\u1567\3"+
		"\2\2\2\u1566\u14e3\3\2\2\2\u1566\u14ee\3\2\2\2\u1566\u14f6\3\2\2\2\u1566"+
		"\u14f8\3\2\2\2\u1566\u1503\3\2\2\2\u1566\u1513\3\2\2\2\u1566\u151e\3\2"+
		"\2\2\u1566\u1529\3\2\2\2\u1566\u1531\3\2\2\2\u1566\u1539\3\2\2\2\u1566"+
		"\u1541\3\2\2\2\u1566\u1549\3\2\2\2\u1566\u1554\3\2\2\2\u1567\u0271\3\2"+
		"\2\2\u1568\u1569\7\u02c2\2\2\u1569\u156a\7\u019b\2\2\u156a\u156b\5\u02ae"+
		"\u0158\2\u156b\u156c\7\u019c\2\2\u156c\u0273\3\2\2\2\u156d\u156e\tV\2"+
		"\2\u156e\u156f\5\u0432\u021a\2\u156f\u1570\5\u0276\u013c\2\u1570\u159c"+
		"\3\2\2\2\u1571\u1572\7\u02d2\2\2\u1572\u1573\7\u019b\2\2\u1573\u1574\5"+
		"\u026c\u0137\2\u1574\u1575\7\u019c\2\2\u1575\u1576\5\u0276\u013c\2\u1576"+
		"\u159c\3\2\2\2\u1577\u1578\tW\2\2\u1578\u1579\7\u019b\2\2\u1579\u157b"+
		"\5\u0260\u0131\2\u157a\u157c\5\u0278\u013d\2\u157b\u157a\3\2\2\2\u157b"+
		"\u157c\3\2\2\2\u157c\u157d\3\2\2\2\u157d\u157f\7\u019c\2\2\u157e\u1580"+
		"\5\u027a\u013e\2\u157f\u157e\3\2\2\2\u157f\u1580\3\2\2\2\u1580\u1581\3"+
		"\2\2\2\u1581\u1582\5\u0276\u013c\2\u1582\u159c\3\2\2\2\u1583\u1584\tX"+
		"\2\2\u1584\u1585\7\u019b\2\2\u1585\u1586\5\u0260\u0131\2\u1586\u1588\7"+
		"\u019c\2\2\u1587\u1589\5\u027a\u013e\2\u1588\u1587\3\2\2\2\u1588\u1589"+
		"\3\2\2\2\u1589\u158a\3\2\2\2\u158a\u158b\5\u0276\u013c\2\u158b\u159c\3"+
		"\2\2\2\u158c\u158d\7\u02d1\2\2\u158d\u158e\7\u019b\2\2\u158e\u158f\5\u0260"+
		"\u0131\2\u158f\u1590\7\u0198\2\2\u1590\u1591\5\u026c\u0137\2\u1591\u1594"+
		"\7\u019c\2\2\u1592\u1593\7\u01fd\2\2\u1593\u1595\tY\2\2\u1594\u1592\3"+
		"\2\2\2\u1594\u1595\3\2\2\2\u1595\u1597\3\2\2\2\u1596\u1598\5\u027a\u013e"+
		"\2\u1597\u1596\3\2\2\2\u1597\u1598\3\2\2\2\u1598\u1599\3\2\2\2\u1599\u159a"+
		"\5\u0276\u013c\2\u159a\u159c\3\2\2\2\u159b\u156d\3\2\2\2\u159b\u1571\3"+
		"\2\2\2\u159b\u1577\3\2\2\2\u159b\u1583\3\2\2\2\u159b\u158c\3\2\2\2\u159c"+
		"\u0275\3\2\2\2\u159d\u15a0\7\u02d5\2\2\u159e\u15a1\5\u03f8\u01fd\2\u159f"+
		"\u15a1\5\u010a\u0086\2\u15a0\u159e\3\2\2\2\u15a0\u159f\3\2\2\2\u15a1\u0277"+
		"\3\2\2\2\u15a2\u15a5\7\u0198\2\2\u15a3\u15a6\5\u040c\u0207\2\u15a4\u15a6"+
		"\7\u01a6\2\2\u15a5\u15a3\3\2\2\2\u15a5\u15a4\3\2\2\2\u15a6\u15a9\3\2\2"+
		"\2\u15a7\u15a8\7\u0198\2\2\u15a8\u15aa\5\u0260\u0131\2\u15a9\u15a7\3\2"+
		"\2\2\u15a9\u15aa\3\2\2\2\u15aa\u0279\3\2\2\2\u15ab\u15ac\tZ\2\2\u15ac"+
		"\u15ad\7\u02d3\2\2\u15ad\u027b\3\2\2\2\u15ae\u15af\7\u02bd\2\2\u15af\u15b0"+
		"\7\u019b\2\2\u15b0\u15b1\5\u027e\u0140\2\u15b1\u15b3\7\u019c\2\2\u15b2"+
		"\u15b4\5\u0276\u013c\2\u15b3\u15b2\3\2\2\2\u15b3\u15b4\3\2\2\2\u15b4\u15bf"+
		"\3\2\2\2\u15b5\u15b6\7\u02bc\2\2\u15b6\u15b7\7\u019b\2\2\u15b7\u15b8\5"+
		"\u027e\u0140\2\u15b8\u15b9\7\u0198\2\2\u15b9\u15ba\5\u027e\u0140\2\u15ba"+
		"\u15bc\7\u019c\2\2\u15bb\u15bd\5\u0276\u013c\2\u15bc\u15bb\3\2\2\2\u15bc"+
		"\u15bd\3\2\2\2\u15bd\u15bf\3\2\2\2\u15be\u15ae\3\2\2\2\u15be\u15b5\3\2"+
		"\2\2\u15bf\u027d\3\2\2\2\u15c0\u15c2\7\u01ad\2\2\u15c1\u15c0\3\2\2\2\u15c1"+
		"\u15c2\3\2\2\2\u15c2\u15c3\3\2\2\2\u15c3\u15c4\5\u0260\u0131\2\u15c4\u027f"+
		"\3\2\2\2\u15c5\u15cb\5\u0282\u0142\2\u15c6\u15c7\7\u019b\2\2\u15c7\u15c8"+
		"\5\u0282\u0142\2\u15c8\u15c9\7\u019c\2\2\u15c9\u15cb\3\2\2\2\u15ca\u15c5"+
		"\3\2\2\2\u15ca\u15c6\3\2\2\2\u15cb\u0281\3\2\2\2\u15cc\u15d1\5\u0404\u0203"+
		"\2\u15cd\u15ce\7\u0198\2\2\u15ce\u15d0\5\u0404\u0203\2\u15cf\u15cd\3\2"+
		"\2\2\u15d0\u15d3\3\2\2\2\u15d1\u15cf\3\2\2\2\u15d1\u15d2\3\2\2\2\u15d2"+
		"\u0283\3\2\2\2\u15d3\u15d1\3\2\2\2\u15d4\u15d5\7\u0214\2\2\u15d5\u15d6"+
		"\7M\2\2\u15d6\u15e3\7\u00e0\2\2\u15d7\u15d8\7\u0214\2\2\u15d8\u15d9\7"+
		"\u023b\2\2\u15d9\u15da\7\34\2\2\u15da\u15dc\7\u00e0\2\2\u15db\u15d7\3"+
		"\2\2\2\u15db\u15dc\3\2\2\2\u15dc\u15e0\3\2\2\2\u15dd\u15de\7\u02ac\2\2"+
		"\u15de\u15df\7\u010d\2\2\u15df\u15e1\7\u008a\2\2\u15e0\u15dd\3\2\2\2\u15e0"+
		"\u15e1\3\2\2\2\u15e1\u15e3\3\2\2\2\u15e2\u15d4\3\2\2\2\u15e2\u15db\3\2"+
		"\2\2\u15e3\u0285\3\2\2\2\u15e4\u15e5\7\u01c4\2\2\u15e5\u15e6\7\u019b\2"+
		"\2\u15e6\u15e9\5\u02ae\u0158\2\u15e7\u15e8\7\u029c\2\2\u15e8\u15ea\5\u034e"+
		"\u01a8\2\u15e9\u15e7\3\2\2\2\u15e9\u15ea\3\2\2\2\u15ea\u15eb\3\2\2\2\u15eb"+
		"\u15ec\7\u019c\2\2\u15ec\u1727\3\2\2\2\u15ed\u15ef\7\u01d2\2\2\u15ee\u15f0"+
		"\5\u0432\u021a\2\u15ef\u15ee\3\2\2\2\u15ef\u15f0\3\2\2\2\u15f0\u1727\3"+
		"\2\2\2\u15f1\u15f2\7r\2\2\u15f2\u15f3\7\u019b\2\2\u15f3\u15f4\5\u0260"+
		"\u0131\2\u15f4\u15f5\7\u019c\2\2\u15f5\u1727\3\2\2\2\u15f6\u15f7\7s\2"+
		"\2\u15f7\u15f8\7\u019b\2\2\u15f8\u15f9\5\u0260\u0131\2\u15f9\u15fa\7\u019c"+
		"\2\2\u15fa\u1727\3\2\2\2\u15fb\u15fc\7\u00a0\2\2\u15fc\u15fd\7\u019b\2"+
		"\2\u15fd\u15fe\5\u0260\u0131\2\u15fe\u15ff\7\u019c\2\2\u15ff\u1727\3\2"+
		"\2\2\u1600\u1601\7\u0210\2\2\u1601\u1602\7\u019b\2\2\u1602\u1603\5\u0260"+
		"\u0131\2\u1603\u1604\7\u0198\2\2\u1604\u1605\5\u0260\u0131\2\u1605\u1606"+
		"\7\u0198\2\2\u1606\u1607\5\u0260\u0131\2\u1607\u1608\7\u0198\2\2\u1608"+
		"\u1609\5\u0260\u0131\2\u1609\u160a\7\u019c\2\2\u160a\u1727\3\2\2\2\u160b"+
		"\u160c\7\u0211\2\2\u160c\u160d\7\u019b\2\2\u160d\u1610\5\u0260\u0131\2"+
		"\u160e\u160f\7\u0198\2\2\u160f\u1611\5\u0260\u0131\2\u1610\u160e\3\2\2"+
		"\2\u1611\u1612\3\2\2\2\u1612\u1610\3\2\2\2\u1612\u1613\3\2\2\2\u1613\u1614"+
		"\3\2\2\2\u1614\u1615\7\u019c\2\2\u1615\u1727\3\2\2\2\u1616\u1617\7\u021f"+
		"\2\2\u1617\u1618\7\u019b\2\2\u1618\u1619\5\u0260\u0131\2\u1619\u161a\7"+
		"\u0198\2\2\u161a\u161b\5\u0260\u0131\2\u161b\u161c\7\u019c\2\2\u161c\u1727"+
		"\3\2\2\2\u161d\u161e\7\u00dd\2\2\u161e\u161f\7\u019b\2\2\u161f\u1620\5"+
		"\u0260\u0131\2\u1620\u1621\7\u019c\2\2\u1621\u1727\3\2\2\2\u1622\u1623"+
		"\7\u00e1\2\2\u1623\u1624\7\u019b\2\2\u1624\u1625\5\u0260\u0131\2\u1625"+
		"\u1626\7\u019c\2\2\u1626\u1727\3\2\2\2\u1627\u1628\7\u0266\2\2\u1628\u1629"+
		"\7\u019b\2\2\u1629\u162a\5\u0260\u0131\2\u162a\u162b\7\u0198\2\2\u162b"+
		"\u162c\5\u0260\u0131\2\u162c\u162d\7\u019c\2\2\u162d\u1727\3\2\2\2\u162e"+
		"\u162f\7\u0133\2\2\u162f\u1630\7\u019b\2\2\u1630\u1631\5\u0260\u0131\2"+
		"\u1631\u1632\7\u019c\2\2\u1632\u1727\3\2\2\2\u1633\u1634\7\u0162\2\2\u1634"+
		"\u1635\7\u019b\2\2\u1635\u1636\5\u0260\u0131\2\u1636\u1637\7\u019c\2\2"+
		"\u1637\u1727\3\2\2\2\u1638\u1639\7\u015f\2\2\u1639\u163a\7\u019b\2\2\u163a"+
		"\u163d\5\u0260\u0131\2\u163b\u163c\7\u0198\2\2\u163c\u163e\5\u0260\u0131"+
		"\2\u163d\u163b\3\2\2\2\u163d\u163e\3\2\2\2\u163e\u163f\3\2\2\2\u163f\u1640"+
		"\7\u019c\2\2\u1640\u1727\3\2\2\2\u1641\u1727\5\u0294\u014b\2\u1642\u1643"+
		"\7\u016e\2\2\u1643\u1727\5\u0432\u021a\2\u1644\u1645\7\u02a1\2\2\u1645"+
		"\u1646\7\u019b\2\2\u1646\u1647\5\u0260\u0131\2\u1647\u1648\7\u019c\2\2"+
		"\u1648\u1727\3\2\2\2\u1649\u164a\7\u017b\2\2\u164a\u164b\7\u019b\2\2\u164b"+
		"\u164c\5\u0260\u0131\2\u164c\u164d\7\u019c\2\2\u164d\u1727\3\2\2\2\u164e"+
		"\u164f\t[\2\2\u164f\u1650\7\u019b\2\2\u1650\u1651\5\u0260\u0131\2\u1651"+
		"\u1657\7\u0198\2\2\u1652\u1658\5\u0260\u0131\2\u1653\u1654\7\u0211\2\2"+
		"\u1654\u1655\5\u0260\u0131\2\u1655\u1656\5\u02b6\u015c\2\u1656\u1658\3"+
		"\2\2\2\u1657\u1652\3\2\2\2\u1657\u1653\3\2\2\2\u1658\u1659\3\2\2\2\u1659"+
		"\u165a\7\u019c\2\2\u165a\u1727\3\2\2\2\u165b\u165d\7\u01cf\2\2\u165c\u165e"+
		"\5\u0432\u021a\2\u165d\u165c\3\2\2\2\u165d\u165e\3\2\2\2\u165e\u1727\3"+
		"\2\2\2\u165f\u1661\7\u01d4\2\2\u1660\u1662\5\u028a\u0146\2\u1661\u1660"+
		"\3\2\2\2\u1661\u1662\3\2\2\2\u1662\u1727\3\2\2\2\u1663\u1664\t\\\2\2\u1664"+
		"\u1665\7\u019b\2\2\u1665\u1666\5\u0260\u0131\2\u1666\u1667\7\u0198\2\2"+
		"\u1667\u1668\7\u0211\2\2\u1668\u1669\5\u0260\u0131\2\u1669\u166a\5\u02b6"+
		"\u015c\2\u166a\u166b\7\u019c\2\2\u166b\u1727\3\2\2\2\u166c\u166d\7\u01f5"+
		"\2\2\u166d\u166e\7\u019b\2\2\u166e\u166f\5\u02b6\u015c\2\u166f\u1670\7"+
		"\u01fd\2\2\u1670\u1671\5\u0260\u0131\2\u1671\u1672\7\u019c\2\2\u1672\u1727"+
		"\3\2\2\2\u1673\u1674\7\u009b\2\2\u1674\u1675\7\u019b\2\2\u1675\u1676\5"+
		"\u0292\u014a\2\u1676\u1677\7\u0198\2\2\u1677\u1678\5\u0260\u0131\2\u1678"+
		"\u1679\7\u019c\2\2\u1679\u1727\3\2\2\2\u167a\u167c\7\u0240\2\2\u167b\u167d"+
		"\5\u028a\u0146\2\u167c\u167b\3\2\2\2\u167c\u167d\3\2\2\2\u167d\u1727\3"+
		"\2\2\2\u167e\u167f\7\u0251\2\2\u167f\u1680\7\u019b\2\2\u1680\u1681\5\u026a"+
		"\u0136\2\u1681\u1682\7\u0214\2\2\u1682\u1683\5\u0260\u0131\2\u1683\u1684"+
		"\7\u019c\2\2\u1684\u1727\3\2\2\2\u1685\u1727\5\u0296\u014c\2\u1686\u1688"+
		"\7\u0286\2\2\u1687\u1689\5\u028a\u0146\2\u1688\u1687\3\2\2\2\u1688\u1689"+
		"\3\2\2\2\u1689\u1727\3\2\2\2\u168a\u168b\t]\2\2\u168b\u168c\7\u019b\2"+
		"\2\u168c\u168d\5\u02b8\u015d\2\u168d\u168e\7\u0198\2\2\u168e\u168f\5\u0260"+
		"\u0131\2\u168f\u1690\7\u0198\2\2\u1690\u1691\5\u0260\u0131\2\u1691\u1692"+
		"\7\u019c\2\2\u1692\u1727\3\2\2\2\u1693\u1695\7\u029d\2\2\u1694\u1696\5"+
		"\u0432\u021a\2\u1695\u1694\3\2\2\2\u1695\u1696\3\2\2\2\u1696\u1727\3\2"+
		"\2\2\u1697\u1699\7\u029f\2\2\u1698\u169a\5\u028a\u0146\2\u1699\u1698\3"+
		"\2\2\2\u1699\u169a\3\2\2\2\u169a\u1727\3\2\2\2\u169b\u169d\7\u029e\2\2"+
		"\u169c\u169e\5\u028a\u0146\2\u169d\u169c\3\2\2\2\u169d\u169e\3\2\2\2\u169e"+
		"\u1727\3\2\2\2\u169f\u16a0\7\4\2\2\u16a0\u16a1\7\u019b\2\2\u16a1\u16a2"+
		"\5\u0260\u0131\2\u16a2\u16a3\7\u019c\2\2\u16a3\u1727\3\2\2\2\u16a4\u16a5"+
		"\7\n\2\2\u16a5\u16a6\7\u019b\2\2\u16a6\u16a7\5\u0260\u0131\2\u16a7\u16a8"+
		"\7\u019c\2\2\u16a8\u1727\3\2\2\2\u16a9\u16aa\7W\2\2\u16aa\u1727\5\u02ba"+
		"\u015e\2\u16ab\u16ac\7Y\2\2\u16ac\u16ad\7\u019b\2\2\u16ad\u16ae\5\u0260"+
		"\u0131\2\u16ae\u16af\7\u019c\2\2\u16af\u1727\3\2\2\2\u16b0\u16b1\7\u01d5"+
		"\2\2\u16b1\u1727\5\u0432\u021a\2\u16b2\u16b3\7\u0209\2\2\u16b3\u16b4\7"+
		"\u019b\2\2\u16b4\u16b5\5\u0260\u0131\2\u16b5\u16b6\7\u0198\2\2\u16b6\u16b7"+
		"\5\u0260\u0131\2\u16b7\u16b8\7\u0198\2\2\u16b8\u16b9\5\u0260\u0131\2\u16b9"+
		"\u16ba\7\u019c\2\2\u16ba\u1727\3\2\2\2\u16bb\u16bc\7\26\2\2\u16bc\u16bd"+
		"\7\u019b\2\2\u16bd\u16be\5\u0260\u0131\2\u16be\u16bf\7\u0198\2\2\u16bf"+
		"\u16c2\5\u0260\u0131\2\u16c0\u16c1\7\u0198\2\2\u16c1\u16c3\5\u0260\u0131"+
		"\2\u16c2\u16c0\3\2\2\2\u16c2\u16c3\3\2\2\2\u16c3\u16c4\3\2\2\2\u16c4\u16c5"+
		"\7\u019c\2\2\u16c5\u1727\3\2\2\2\u16c6\u16c7\7\u00db\2\2\u16c7\u16c8\7"+
		"\u019b\2\2\u16c8\u16c9\5\u0260\u0131\2\u16c9\u16ca\7\u019c\2\2\u16ca\u1727"+
		"\3\2\2\2\u16cb\u16cc\7\u023a\2\2\u16cc\u16cd\7\u019b\2\2\u16cd\u16ce\5"+
		"\u0260\u0131\2\u16ce\u16cf\7\u0198\2\2\u16cf\u16d0\5\u0260\u0131\2\u16d0"+
		"\u16d1\7\u019c\2\2\u16d1\u1727\3\2\2\2\u16d2\u16d3\6\u0144\u0098\2\u16d3"+
		"\u16d4\7\u00f5\2\2\u16d4\u16d5\7\u019b\2\2\u16d5\u16d6\5\u041a\u020e\2"+
		"\u16d6\u16d7\7\u019c\2\2\u16d7\u1727\3\2\2\2\u16d8\u16d9\6\u0144\u0099"+
		"\2\u16d9\u16da\7\u00fd\2\2\u16da\u16db\7\u019b\2\2\u16db\u16dc\5\u0260"+
		"\u0131\2\u16dc\u16dd\7\u019c\2\2\u16dd\u1727\3\2\2\2\u16de\u16df\7\u010c"+
		"\2\2\u16df\u16e0\7\u019b\2\2\u16e0\u16e1\5\u0260\u0131\2\u16e1\u16e2\7"+
		"\u019c\2\2\u16e2\u1727\3\2\2\2\u16e3\u16e4\7\u025f\2\2\u16e4\u16e5\7\u019b"+
		"\2\2\u16e5\u16e6\5\u0260\u0131\2\u16e6\u16e7\7\u0198\2\2\u16e7\u16e8\5"+
		"\u0260\u0131\2\u16e8\u16e9\7\u019c\2\2\u16e9\u1727\3\2\2\2\u16ea\u16eb"+
		"\7\u0260\2\2\u16eb\u16ec\7\u019b\2\2\u16ec\u16ed\5\u0260\u0131\2\u16ed"+
		"\u16ee\7\u0198\2\2\u16ee\u16ef\5\u0260\u0131\2\u16ef\u16f0\7\u0198\2\2"+
		"\u16f0\u16f1\5\u0260\u0131\2\u16f1\u16f2\7\u019c\2\2\u16f2\u1727\3\2\2"+
		"\2\u16f3\u16f4\7\u0128\2\2\u16f4\u16f5\7\u019b\2\2\u16f5\u16f6\5\u0260"+
		"\u0131\2\u16f6\u16f7\7\u019c\2\2\u16f7\u1727\3\2\2\2\u16f8\u16f9\7\u012d"+
		"\2\2\u16f9\u1727\5\u0432\u021a\2\u16fa\u16fb\7\64\2\2\u16fb\u16fc\7\u019b"+
		"\2\2\u16fc\u16fd\5\u0260\u0131\2\u16fd\u16fe\7\u0198\2\2\u16fe\u16ff\5"+
		"\u0260\u0131\2\u16ff\u1700\7\u019c\2\2\u1700\u1727\3\2\2\2\u1701\u1702"+
		"\7\u0175\2\2\u1702\u1703\7\u019b\2\2\u1703\u1706\5\u0260\u0131\2\u1704"+
		"\u1705\7\u0198\2\2\u1705\u1707\5\u0260\u0131\2\u1706\u1704\3\2\2\2\u1706"+
		"\u1707\3\2\2\2\u1707\u1708\3\2\2\2\u1708\u1709\7\u019c\2\2\u1709\u1727"+
		"\3\2\2\2\u170a\u170b\6\u0144\u009a\2\u170b\u170c\7\u0177\2\2\u170c\u170d"+
		"\7\u019b\2\2\u170d\u1721\5\u0260\u0131\2\u170e\u170f\7\u01b1\2\2\u170f"+
		"\u1710\7\u01c4\2\2\u1710\u1712\5\u034a\u01a6\2\u1711\u170e\3\2\2\2\u1711"+
		"\u1712\3\2\2\2\u1712\u1715\3\2\2\2\u1713\u1714\6\u0144\u009b\2\u1714\u1716"+
		"\5\u028e\u0148\2\u1715\u1713\3\2\2\2\u1715\u1716\3\2\2\2\u1716\u1722\3"+
		"\2\2\2\u1717\u1718\7\u01b1\2\2\u1718\u1719\7\u01b7\2\2\u1719\u1722\5\u034a"+
		"\u01a6\2\u171a\u171b\7\u0198\2\2\u171b\u171c\5\u0408\u0205\2\u171c\u171d"+
		"\7\u0198\2\2\u171d\u171e\5\u0408\u0205\2\u171e\u171f\7\u0198\2\2\u171f"+
		"\u1720\5\u0408\u0205\2\u1720\u1722\3\2\2\2\u1721\u1711\3\2\2\2\u1721\u1717"+
		"\3\2\2\2\u1721\u171a\3\2\2\2\u1722\u1723\3\2\2\2\u1723\u1724\7\u019c\2"+
		"\2\u1724\u1727\3\2\2\2\u1725\u1727\5\u0288\u0145\2\u1726\u15e4\3\2\2\2"+
		"\u1726\u15ed\3\2\2\2\u1726\u15f1\3\2\2\2\u1726\u15f6\3\2\2\2\u1726\u15fb"+
		"\3\2\2\2\u1726\u1600\3\2\2\2\u1726\u160b\3\2\2\2\u1726\u1616\3\2\2\2\u1726"+
		"\u161d\3\2\2\2\u1726\u1622\3\2\2\2\u1726\u1627\3\2\2\2\u1726\u162e\3\2"+
		"\2\2\u1726\u1633\3\2\2\2\u1726\u1638\3\2\2\2\u1726\u1641\3\2\2\2\u1726"+
		"\u1642\3\2\2\2\u1726\u1644\3\2\2\2\u1726\u1649\3\2\2\2\u1726\u164e\3\2"+
		"\2\2\u1726\u165b\3\2\2\2\u1726\u165f\3\2\2\2\u1726\u1663\3\2\2\2\u1726"+
		"\u166c\3\2\2\2\u1726\u1673\3\2\2\2\u1726\u167a\3\2\2\2\u1726\u167e\3\2"+
		"\2\2\u1726\u1685\3\2\2\2\u1726\u1686\3\2\2\2\u1726\u168a\3\2\2\2\u1726"+
		"\u1693\3\2\2\2\u1726\u1697\3\2\2\2\u1726\u169b\3\2\2\2\u1726\u169f\3\2"+
		"\2\2\u1726\u16a4\3\2\2\2\u1726\u16a9\3\2\2\2\u1726\u16ab\3\2\2\2\u1726"+
		"\u16b0\3\2\2\2\u1726\u16b2\3\2\2\2\u1726\u16bb\3\2\2\2\u1726\u16c6\3\2"+
		"\2\2\u1726\u16cb\3\2\2\2\u1726\u16d2\3\2\2\2\u1726\u16d8\3\2\2\2\u1726"+
		"\u16de\3\2\2\2\u1726\u16e3\3\2\2\2\u1726\u16ea\3\2\2\2\u1726\u16f3\3\2"+
		"\2\2\u1726\u16f8\3\2\2\2\u1726\u16fa\3\2\2\2\u1726\u1701\3\2\2\2\u1726"+
		"\u170a\3\2\2\2\u1726\u1725\3\2\2\2\u1727\u0287\3\2\2\2\u1728\u1729\6\u0145"+
		"\u009c\2\u1729\u172a\7\17\2\2\u172a\u172b\7\u019b\2\2\u172b\u172c\5\u0260"+
		"\u0131\2\u172c\u172d\7\u0198\2\2\u172d\u172e\5\u0260\u0131\2\u172e\u172f"+
		"\7\u019c\2\2\u172f\u1748\3\2\2\2\u1730\u1731\7\u009a\2\2\u1731\u1733\7"+
		"\u019b\2\2\u1732\u1734\5\u02ae\u0158\2\u1733\u1732\3\2\2\2\u1733\u1734"+
		"\3\2\2\2\u1734\u1735\3\2\2\2\u1735\u1748\7\u019c\2\2\u1736\u1737\7\u00b4"+
		"\2\2\u1737\u1748\5\u02ba\u015e\2\u1738\u1739\7\u00e2\2\2\u1739\u1748\5"+
		"\u02ba\u015e\2\u173a\u173b\7\u00e3\2\2\u173b\u1748\5\u02ba\u015e\2\u173c"+
		"\u173d\7\u00e4\2\2\u173d\u1748\5\u02ba\u015e\2\u173e\u173f\7\u0102\2\2"+
		"\u173f\u1740\7\u019b\2\2\u1740\u1741\5\u0260\u0131\2\u1741\u1742\7\u0198"+
		"\2\2\u1742\u1743\5\u0260\u0131\2\u1743\u1744\7\u019c\2\2\u1744\u1748\3"+
		"\2\2\2\u1745\u1746\7\u0103\2\2\u1746\u1748\5\u02ba\u015e\2\u1747\u1728"+
		"\3\2\2\2\u1747\u1730\3\2\2\2\u1747\u1736\3\2\2\2\u1747\u1738\3\2\2\2\u1747"+
		"\u173a\3\2\2\2\u1747\u173c\3\2\2\2\u1747\u173e\3\2\2\2\u1747\u1745\3\2"+
		"\2\2\u1748\u0289\3\2\2\2\u1749\u174b\7\u019b\2\2\u174a\u174c\5\u028c\u0147"+
		"\2\u174b\u174a\3\2\2\2\u174b\u174c\3\2\2\2\u174c\u174d\3\2\2\2\u174d\u174e"+
		"\7\u019c\2\2\u174e\u028b\3\2\2\2\u174f\u1750\6\u0147\u009d\2\u1750\u1751"+
		"\7\u017e\2\2\u1751\u028d\3\2\2\2\u1752\u175f\7\u00b3\2\2\u1753\u1754\5"+
		"\u040a\u0206\2\u1754\u1755\7\u018a\2\2\u1755\u1756\5\u040a\u0206\2\u1756"+
		"\u1760\3\2\2\2\u1757\u175c\5\u0290\u0149\2\u1758\u1759\7\u0198\2\2\u1759"+
		"\u175b\5\u0290\u0149\2\u175a\u1758\3\2\2\2\u175b\u175e\3\2\2\2\u175c\u175a"+
		"\3\2\2\2\u175c\u175d\3\2\2\2\u175d\u1760\3\2\2\2\u175e\u175c\3\2\2\2\u175f"+
		"\u1753\3\2\2\2\u175f\u1757\3\2\2\2\u1760\u028f\3\2\2\2\u1761\u1767\5\u040a"+
		"\u0206\2\u1762\u1764\t \2\2\u1763\u1765\7\u0128\2\2\u1764\u1763\3\2\2"+
		"\2\u1764\u1765\3\2\2\2\u1765\u1768\3\2\2\2\u1766\u1768\7\u0128\2\2\u1767"+
		"\u1762\3\2\2\2\u1767\u1766\3\2\2\2\u1767\u1768\3\2\2\2\u1768\u0291\3\2"+
		"\2\2\u1769\u176a\t^\2\2\u176a\u0293\3\2\2\2\u176b\u176c\7\u0292\2\2\u176c"+
		"\u1784\7\u019b\2\2\u176d\u1770\5\u0260\u0131\2\u176e\u176f\7\u01fd\2\2"+
		"\u176f\u1771\5\u0260\u0131\2\u1770\u176e\3\2\2\2\u1770\u1771\3\2\2\2\u1771"+
		"\u1785\3\2\2\2\u1772\u1774\7\u021d\2\2\u1773\u1775\5\u0260\u0131\2\u1774"+
		"\u1773\3\2\2\2\u1774\u1775\3\2\2\2\u1775\u1776\3\2\2\2\u1776\u1777\7\u01fd"+
		"\2\2\u1777\u1785\5\u0260\u0131\2\u1778\u177a\7\u0290\2\2\u1779\u177b\5"+
		"\u0260\u0131\2\u177a\u1779\3\2\2\2\u177a\u177b\3\2\2\2\u177b\u177c\3\2"+
		"\2\2\u177c\u177d\7\u01fd\2\2\u177d\u1785\5\u0260\u0131\2\u177e\u1780\7"+
		"\u01bd\2\2\u177f\u1781\5\u0260\u0131\2\u1780\u177f\3\2\2\2\u1780\u1781"+
		"\3\2\2\2\u1781\u1782\3\2\2\2\u1782\u1783\7\u01fd\2\2\u1783\u1785\5\u0260"+
		"\u0131\2\u1784\u176d\3\2\2\2\u1784\u1772\3\2\2\2\u1784\u1778\3\2\2\2\u1784"+
		"\u177e\3\2\2\2\u1785\u1786\3\2\2\2\u1786\u1787\7\u019c\2\2\u1787\u0295"+
		"\3\2\2\2\u1788\u1789\7\u0284\2\2\u1789\u178a\7\u019b\2\2\u178a\u1797\5"+
		"\u0260\u0131\2\u178b\u178c\7\u0198\2\2\u178c\u178f\5\u0260\u0131\2\u178d"+
		"\u178e\7\u0198\2\2\u178e\u1790\5\u0260\u0131\2\u178f\u178d\3\2\2\2\u178f"+
		"\u1790\3\2\2\2\u1790\u1798\3\2\2\2\u1791\u1792\7\u01fd\2\2\u1792\u1795"+
		"\5\u0260\u0131\2\u1793\u1794\7\u01fb\2\2\u1794\u1796\5\u0260\u0131\2\u1795"+
		"\u1793\3\2\2\2\u1795\u1796\3\2\2\2\u1796\u1798\3\2\2\2\u1797\u178b\3\2"+
		"\2\2\u1797\u1791\3\2\2\2\u1798\u1799\3\2\2\2\u1799\u179a\7\u019c\2\2\u179a"+
		"\u0297\3\2\2\2\u179b\u179c\5\u03fa\u01fe\2\u179c\u179e\7\u019b\2\2\u179d"+
		"\u179f\5\u029a\u014e\2\u179e\u179d\3\2\2\2\u179e\u179f\3\2\2\2\u179f\u17a0"+
		"\3\2\2\2\u17a0\u17a1\7\u019c\2\2\u17a1\u17aa\3\2\2\2\u17a2\u17a3\5\u0402"+
		"\u0202\2\u17a3\u17a5\7\u019b\2\2\u17a4\u17a6\5\u02ae\u0158\2\u17a5\u17a4"+
		"\3\2\2\2\u17a5\u17a6\3\2\2\2\u17a6\u17a7\3\2\2\2\u17a7\u17a8\7\u019c\2"+
		"\2\u17a8\u17aa\3\2\2\2\u17a9\u179b\3\2\2\2\u17a9\u17a2\3\2\2\2\u17aa\u0299"+
		"\3\2\2\2\u17ab\u17b0\5\u029c\u014f\2\u17ac\u17ad\7\u0198\2\2\u17ad\u17af"+
		"\5\u029c\u014f\2\u17ae\u17ac\3\2\2\2\u17af\u17b2\3\2\2\2\u17b0\u17ae\3"+
		"\2\2\2\u17b0\u17b1\3\2\2\2\u17b1\u029b\3\2\2\2\u17b2\u17b0\3\2\2\2\u17b3"+
		"\u17b5\5\u0260\u0131\2\u17b4\u17b6\5\u0138\u009d\2\u17b5\u17b4\3\2\2\2"+
		"\u17b5\u17b6\3\2\2\2\u17b6\u029d\3\2\2\2\u17b7\u17ba\5\u02a0\u0151\2\u17b8"+
		"\u17b9\7\u0182\2\2\u17b9\u17bb\5\u0260\u0131\2\u17ba\u17b8\3\2\2\2\u17ba"+
		"\u17bb\3\2\2\2\u17bb\u17be\3\2\2\2\u17bc\u17be\5\u02a2\u0152\2\u17bd\u17b7"+
		"\3\2\2\2\u17bd\u17bc\3\2\2\2\u17be\u029f\3\2\2\2\u17bf\u17c0\7\u01a2\2"+
		"\2\u17c0\u17c3\5\u042c\u0217\2\u17c1\u17c3\7\u01a3\2\2\u17c2\u17bf\3\2"+
		"\2\2\u17c2\u17c1\3\2\2\2\u17c3\u02a1\3\2\2\2\u17c4\u17c6\7\u01a4\2\2\u17c5"+
		"\u17c7\5\u0438\u021d\2\u17c6\u17c5\3\2\2\2\u17c6\u17c7\3\2\2\2\u17c7\u17c8"+
		"\3\2\2\2\u17c8\u17ca\5\u042c\u0217\2\u17c9\u17cb\5\u0406\u0204\2\u17ca"+
		"\u17c9\3\2\2\2\u17ca\u17cb\3\2\2\2\u17cb\u02a3\3\2\2\2\u17cc\u17ce\5\u03fc"+
		"\u01ff\2\u17cd\u17cf\5\u0406\u0204\2\u17ce\u17cd\3\2\2\2\u17ce\u17cf\3"+
		"\2\2\2\u17cf\u17d3\3\2\2\2\u17d0\u17d1\7\u01e0\2\2\u17d1\u17d3\5\u0406"+
		"\u0204\2\u17d2\u17cc\3\2\2\2\u17d2\u17d0\3\2\2\2\u17d3\u02a5\3\2\2\2\u17d4"+
		"\u17d5\7\u02a9\2\2\u17d5\u17d6\5\u0260\u0131\2\u17d6\u02a7\3\2\2\2\u17d7"+
		"\u17d8\7\u028b\2\2\u17d8\u17d9\5\u0260\u0131\2\u17d9\u02a9\3\2\2\2\u17da"+
		"\u17db\7\u01ec\2\2\u17db\u17dc\5\u0260\u0131\2\u17dc\u02ab\3\2\2\2\u17dd"+
		"\u17df\7\u01b7\2\2\u17de\u17e0\5\u0340\u01a1\2\u17df\u17de\3\2\2\2\u17df"+
		"\u17e0\3\2\2\2\u17e0\u1804\3\2\2\2\u17e1\u17e3\7\u01c4\2\2\u17e2\u17e4"+
		"\5\u0340\u01a1\2\u17e3\u17e2\3\2\2\2\u17e3\u17e4\3\2\2\2\u17e4\u17e6\3"+
		"\2\2\2\u17e5\u17e7\5\u0344\u01a3\2\u17e6\u17e5\3\2\2\2\u17e6\u17e7\3\2"+
		"\2\2\u17e7\u1804\3\2\2\2\u17e8\u17ea\5\u033a\u019e\2\u17e9\u17eb\5\u0340"+
		"\u01a1\2\u17ea\u17e9\3\2\2\2\u17ea\u17eb\3\2\2\2\u17eb\u1804\3\2\2\2\u17ec"+
		"\u17ee\7.\2\2\u17ed\u17ef\7\u0213\2\2\u17ee\u17ed\3\2\2\2\u17ee\u17ef"+
		"\3\2\2\2\u17ef\u1804\3\2\2\2\u17f0\u17f2\7\u0298\2\2\u17f1\u17f3\7\u0213"+
		"\2\2\u17f2\u17f1\3\2\2\2\u17f2\u17f3\3\2\2\2\u17f3\u1804\3\2\2\2\u17f4"+
		"\u1804\7r\2\2\u17f5\u17f7\7\u0162\2\2\u17f6\u17f8\5\u034c\u01a7\2\u17f7"+
		"\u17f6\3\2\2\2\u17f7\u17f8\3\2\2\2\u17f8\u1804\3\2\2\2\u17f9\u17fb\7q"+
		"\2\2\u17fa\u17fc\5\u034c\u01a7\2\u17fb\u17fa\3\2\2\2\u17fb\u17fc\3\2\2"+
		"\2\u17fc\u1804\3\2\2\2\u17fd\u17ff\7\u01de\2\2\u17fe\u1800\5\u0428\u0215"+
		"\2\u17ff\u17fe\3\2\2\2\u17ff\u1800\3\2\2\2\u1800\u1804\3\2\2\2\u1801\u1802"+
		"\6\u0157\u009e\2\u1802\u1804\7\u00ae\2\2\u1803\u17dd\3\2\2\2\u1803\u17e1"+
		"\3\2\2\2\u1803\u17e8\3\2\2\2\u1803\u17ec\3\2\2\2\u1803\u17f0\3\2\2\2\u1803"+
		"\u17f4\3\2\2\2\u1803\u17f5\3\2\2\2\u1803\u17f9\3\2\2\2\u1803\u17fd\3\2"+
		"\2\2\u1803\u1801\3\2\2\2\u1804\u02ad\3\2\2\2\u1805\u180a\5\u0260\u0131"+
		"\2\u1806\u1807\7\u0198\2\2\u1807\u1809\5\u0260\u0131\2\u1808\u1806\3\2"+
		"\2\2\u1809\u180c\3\2\2\2\u180a\u1808\3\2\2\2\u180a\u180b\3\2\2\2\u180b"+
		"\u02af\3\2\2\2\u180c\u180a\3\2\2\2\u180d\u180e\7\u01c4\2\2\u180e\u1811"+
		"\7\u026d\2\2\u180f\u1811\7\n\2\2\u1810\u180d\3\2\2\2\u1810\u180f\3\2\2"+
		"\2\u1811\u02b1\3\2\2\2\u1812\u1813\t_\2\2\u1813\u02b3\3\2\2\2\u1814\u1815"+
		"\t`\2\2\u1815\u02b5\3\2\2\2\u1816\u1819\5\u02b8\u015d\2\u1817\u1819\t"+
		"a\2\2\u1818\u1816\3\2\2\2\u1818\u1817\3\2\2\2\u1819\u02b7\3\2\2\2\u181a"+
		"\u181b\tb\2\2\u181b\u02b9\3\2\2\2\u181c\u181d\7\u019b\2\2\u181d\u181e"+
		"\5\u02ae\u0158\2\u181e\u181f\7\u019c\2\2\u181f\u02bb\3\2\2\2\u1820\u1825"+
		"\5\u02be\u0160\2\u1821\u1822\7\u0198\2\2\u1822\u1824\5\u02be\u0160\2\u1823"+
		"\u1821\3\2\2\2\u1824\u1827\3\2\2\2\u1825\u1823\3\2\2\2\u1825\u1826\3\2"+
		"\2\2\u1826\u02bd\3\2\2\2\u1827\u1825\3\2\2\2\u1828\u182a\5\u0260\u0131"+
		"\2\u1829\u182b\5\u0126\u0094\2\u182a\u1829\3\2\2\2\u182a\u182b\3\2\2\2"+
		"\u182b\u02bf\3\2\2\2\u182c\u182d\6\u0161\u009f\2\u182d\u182e\7\u01fb\2"+
		"\2\u182e\u182f\7S\2\2\u182f\u1830\5\u041c\u020f\2\u1830\u02c1\3\2\2\2"+
		"\u1831\u183f\5\4\3\2\u1832\u183f\5\u02c4\u0163\2\u1833\u183f\5\u02c6\u0164"+
		"\2\u1834\u183f\5\u02ce\u0168\2\u1835\u183f\5\u02d2\u016a\2\u1836\u183f"+
		"\5\u02d4\u016b\2\u1837\u183f\5\u02da\u016e\2\u1838\u183f\5\u02dc\u016f"+
		"\2\u1839\u183f\5\u02f8\u017d\2\u183a\u183f\5\u02f6\u017c\2\u183b\u183f"+
		"\5\u030a\u0186\2\u183c\u183f\5\u030e\u0188\2\u183d\u183f\5\u030c\u0187"+
		"\2\u183e\u1831\3\2\2\2\u183e\u1832\3\2\2\2\u183e\u1833\3\2\2\2\u183e\u1834"+
		"\3\2\2\2\u183e\u1835\3\2\2\2\u183e\u1836\3\2\2\2\u183e\u1837\3\2\2\2\u183e"+
		"\u1838\3\2\2\2\u183e\u1839\3\2\2\2\u183e\u183a\3\2\2\2\u183e\u183b\3\2"+
		"\2\2\u183e\u183c\3\2\2\2\u183e\u183d\3\2\2\2\u183f\u02c3\3\2\2\2\u1840"+
		"\u1841\7\u0264\2\2\u1841\u1842\5\u0260\u0131\2\u1842\u02c5\3\2\2\2\u1843"+
		"\u1844\7\u0209\2\2\u1844\u1845\5\u02c8\u0165\2\u1845\u1846\7\22\2\2\u1846"+
		"\u1847\7\u0209\2\2\u1847\u02c7\3\2\2\2\u1848\u1849\5\u0260\u0131\2\u1849"+
		"\u184e\5\u02ca\u0166\2\u184a\u184b\7\u01ed\2\2\u184b\u184f\5\u02c8\u0165"+
		"\2\u184c\u184d\7\u01ec\2\2\u184d\u184f\5\u02cc\u0167\2\u184e\u184a\3\2"+
		"\2\2\u184e\u184c\3\2\2\2\u184e\u184f\3\2\2\2\u184f\u02c9\3\2\2\2\u1850"+
		"\u1851\7\u028b\2\2\u1851\u1852\5\u02cc\u0167\2\u1852\u02cb\3\2\2\2\u1853"+
		"\u1854\5\u02c2\u0162\2\u1854\u1855\7\u0199\2\2\u1855\u1857\3\2\2\2\u1856"+
		"\u1853\3\2\2\2\u1857\u1858\3\2\2\2\u1858\u1856\3\2\2\2\u1858\u1859\3\2"+
		"\2\2\u1859\u02cd\3\2\2\2\u185a\u185c\7\u01c1\2\2\u185b\u185d\5\u0260\u0131"+
		"\2\u185c\u185b\3\2\2\2\u185c\u185d\3\2\2\2\u185d\u1861\3\2\2\2\u185e\u185f"+
		"\5\u02a6\u0154\2\u185f\u1860\5\u02ca\u0166\2\u1860\u1862\3\2\2\2\u1861"+
		"\u185e\3\2\2\2\u1862\u1863\3\2\2\2\u1863\u1861\3\2\2\2\u1863\u1864\3\2"+
		"\2\2\u1864\u1866\3\2\2\2\u1865\u1867\5\u02d0\u0169\2\u1866\u1865\3\2\2"+
		"\2\u1866\u1867\3\2\2\2\u1867\u1868\3\2\2\2\u1868\u1869\7\22\2\2\u1869"+
		"\u186a\7\u01c1\2\2\u186a\u02cf\3\2\2\2\u186b\u186c\7\u01ec\2\2\u186c\u186d"+
		"\5\u02cc\u0167\2\u186d\u02d1\3\2\2\2\u186e\u186f\5\u02d6\u016c\2\u186f"+
		"\u1871\5\u02d8\u016d\2\u1870\u1872\5\u03ec\u01f7\2\u1871\u1870\3\2\2\2"+
		"\u1871\u1872\3\2\2\2\u1872\u02d3\3\2\2\2\u1873\u1874\5\u02d8\u016d\2\u1874"+
		"\u02d5\3\2\2\2\u1875\u1876\5\u03ea\u01f6\2\u1876\u1877\7\u019a\2\2\u1877"+
		"\u02d7\3\2\2\2\u1878\u187a\7\7\2\2\u1879\u187b\5\u02e4\u0173\2\u187a\u1879"+
		"\3\2\2\2\u187a\u187b\3\2\2\2\u187b\u187d\3\2\2\2\u187c\u187e\5\u02cc\u0167"+
		"\2\u187d\u187c\3\2\2\2\u187d\u187e\3\2\2\2\u187e\u187f\3\2\2\2\u187f\u1880"+
		"\7\22\2\2\u1880\u02d9\3\2\2\2\u1881\u1882\5\u02d6\u016c\2\u1882\u1884"+
		"\5\u02dc\u016f\2\u1883\u1885\5\u03ec\u01f7\2\u1884\u1883\3\2\2\2\u1884"+
		"\u1885\3\2\2\2\u1885\u02db\3\2\2\2\u1886\u188a\5\u02de\u0170\2\u1887\u188a"+
		"\5\u02e0\u0171\2\u1888\u188a\5\u02e2\u0172\2\u1889\u1886\3\2\2\2\u1889"+
		"\u1887\3\2\2\2\u1889\u1888\3\2\2\2\u188a\u02dd\3\2\2\2\u188b\u188c\7\u022b"+
		"\2\2\u188c\u188d\5\u02cc\u0167\2\u188d\u188e\7\22\2\2\u188e\u188f\7\u022b"+
		"\2\2\u188f\u02df\3\2\2\2\u1890\u1891\7\u02ab\2\2\u1891\u1892\5\u0260\u0131"+
		"\2\u1892\u1893\7\21\2\2\u1893\u1894\5\u02cc\u0167\2\u1894\u1895\7\22\2"+
		"\2\u1895\u1896\7\u02ab\2\2\u1896\u02e1\3\2\2\2\u1897\u1898\7\u025f\2\2"+
		"\u1898\u1899\5\u02cc\u0167\2\u1899\u189a\7\u016c\2\2\u189a\u189b\5\u0260"+
		"\u0131\2\u189b\u189c\7\22\2\2\u189c\u189d\7\u025f\2\2\u189d\u02e3\3\2"+
		"\2\2\u189e\u189f\5\u02e6\u0174\2\u189f\u18a0\7\u0199\2\2\u18a0\u18a2\3"+
		"\2\2\2\u18a1\u189e\3\2\2\2\u18a2\u18a3\3\2\2\2\u18a3\u18a1\3\2\2\2\u18a3"+
		"\u18a4\3\2\2\2\u18a4\u02e5\3\2\2\2\u18a5\u18aa\5\u02e8\u0175\2\u18a6\u18aa"+
		"\5\u02ea\u0176\2\u18a7\u18aa\5\u02f0\u0179\2\u18a8\u18aa\5\u02f4\u017b"+
		"\2\u18a9\u18a5\3\2\2\2\u18a9\u18a6\3\2\2\2\u18a9\u18a7\3\2\2\2\u18a9\u18a8"+
		"\3\2\2\2\u18aa\u02e7\3\2\2\2\u18ab\u18ac\7\u01df\2\2\u18ac\u18ad\5\u03fe"+
		"\u0200\2\u18ad\u18b0\5\u0338\u019d\2\u18ae\u18af\7\u01c6\2\2\u18af\u18b1"+
		"\5\u0350\u01a9\2\u18b0\u18ae\3\2\2\2\u18b0\u18b1\3\2\2\2\u18b1\u18b4\3"+
		"\2\2\2\u18b2\u18b3\7\u01e0\2\2\u18b3\u18b5\5\u0260\u0131\2\u18b4\u18b2"+
		"\3\2\2\2\u18b4\u18b5\3\2\2\2\u18b5\u02e9\3\2\2\2\u18b6\u18b7\7\u01df\2"+
		"\2\u18b7\u18b8\5\u03fc\u01ff\2\u18b8\u18b9\7\u01c8\2\2\u18b9\u18ba\7\u01fb"+
		"\2\2\u18ba\u18bb\5\u02ec\u0177\2\u18bb\u02eb\3\2\2\2\u18bc\u18bf\5\u0408"+
		"\u0205\2\u18bd\u18bf\5\u02ee\u0178\2\u18be\u18bc\3\2\2\2\u18be\u18bd\3"+
		"\2\2\2\u18bf\u02ed\3\2\2\2\u18c0\u18c2\7\u0275\2\2\u18c1\u18c3\7\u0172"+
		"\2\2\u18c2\u18c1\3\2\2\2\u18c2\u18c3\3\2\2\2\u18c3\u18c4\3\2\2\2\u18c4"+
		"\u18c5\5\u041a\u020e\2\u18c5\u02ef\3\2\2\2\u18c6\u18c7\7\u01df\2\2\u18c7"+
		"\u18c8\tc\2\2\u18c8\u18c9\7\30\2\2\u18c9\u18ca\7\u01fb\2\2\u18ca\u18cf"+
		"\5\u02f2\u017a\2\u18cb\u18cc\7\u0198\2\2\u18cc\u18ce\5\u02f2\u017a\2\u18cd"+
		"\u18cb\3\2\2\2\u18ce\u18d1\3\2\2\2\u18cf\u18cd\3\2\2\2\u18cf\u18d0\3\2"+
		"\2\2\u18d0\u18d2\3\2\2\2\u18d1\u18cf\3\2\2\2\u18d2\u18d3\5\u02c2\u0162"+
		"\2\u18d3\u02f1\3\2\2\2\u18d4\u18dc\5\u02ec\u0177\2\u18d5\u18dc\5\u03fc"+
		"\u01ff\2\u18d6\u18dc\7\u0276\2\2\u18d7\u18d8\5\u02b2\u015a\2\u18d8\u18d9"+
		"\7\u0090\2\2\u18d9\u18dc\3\2\2\2\u18da\u18dc\7\u0274\2\2\u18db\u18d4\3"+
		"\2\2\2\u18db\u18d5\3\2\2\2\u18db\u18d6\3\2\2\2\u18db\u18d7\3\2\2\2\u18db"+
		"\u18da\3\2\2\2\u18dc\u02f3\3\2\2\2\u18dd\u18de\7\u01df\2\2\u18de\u18df"+
		"\5\u03fc\u01ff\2\u18df\u18e0\7\u01d3\2\2\u18e0\u18e1\7\u01fb\2\2\u18e1"+
		"\u18e2\5\u00e8u\2\u18e2\u02f5\3\2\2\2\u18e3\u18e4\7\u0218\2\2\u18e4\u18e5"+
		"\5\u03ec\u01f7\2\u18e5\u02f7\3\2\2\2\u18e6\u18e7\7\u021e\2\2\u18e7\u18e8"+
		"\5\u03ec\u01f7\2\u18e8\u02f9\3\2\2\2\u18e9\u18ed\7\u01ff\2\2\u18ea\u18ee"+
		"\7m\2\2\u18eb\u18ec\6\u017e\u00a0\2\u18ec\u18ee\7\u0144\2\2\u18ed\u18ea"+
		"\3\2\2\2\u18ed\u18eb\3\2\2\2\u18ed\u18ee\3\2\2\2\u18ee\u18ef\3\2\2\2\u18ef"+
		"\u1902\7x\2\2\u18f0\u18f5\5\u02fe\u0180\2\u18f1\u18f2\7\u0198\2\2\u18f2"+
		"\u18f4\5\u02fe\u0180\2\u18f3\u18f1\3\2\2\2\u18f4\u18f7\3\2\2\2\u18f5\u18f3"+
		"\3\2\2\2\u18f5\u18f6\3\2\2\2\u18f6\u1903\3\2\2\2\u18f7\u18f5\3\2\2\2\u18f8"+
		"\u18f9\7\u01c8\2\2\u18f9\u18fa\5\u02fc\u017f\2\u18fa\u18ff\5\u0300\u0181"+
		"\2\u18fb\u18fc\7\u0198\2\2\u18fc\u18fe\5\u0300\u0181\2\u18fd\u18fb\3\2"+
		"\2\2\u18fe\u1901\3\2\2\2\u18ff\u18fd\3\2\2\2\u18ff\u1900\3\2\2\2\u1900"+
		"\u1903\3\2\2\2\u1901\u18ff\3\2\2\2\u1902\u18f0\3\2\2\2\u1902\u18f8\3\2"+
		"\2\2\u1903\u02fb\3\2\2\2\u1904\u1908\5\u0410\u0209\2\u1905\u1908\5\u029e"+
		"\u0150\2\u1906\u1908\5\u0402\u0202\2\u1907\u1904\3\2\2\2\u1907\u1905\3"+
		"\2\2\2\u1907\u1906\3\2\2\2\u1908\u02fd\3\2\2\2\u1909\u190c\5\u029e\u0150"+
		"\2\u190a\u190c\5\u03fc\u01ff\2\u190b\u1909\3\2\2\2\u190b\u190a\3\2\2\2"+
		"\u190c\u190d\3\2\2\2\u190d\u190e\7\u0181\2\2\u190e\u190f\td\2\2\u190f"+
		"\u02ff\3\2\2\2\u1910\u1913\5\u029e\u0150\2\u1911\u1913\5\u03fc\u01ff\2"+
		"\u1912\u1910\3\2\2\2\u1912\u1911\3\2\2\2\u1913\u1914\3\2\2\2\u1914\u1917"+
		"\7\u0181\2\2\u1915\u1918\5\u0302\u0182\2\u1916\u1918\7\u0126\2\2\u1917"+
		"\u1915\3\2\2\2\u1917\u1916\3\2\2\2\u1918\u0301\3\2\2\2\u1919\u191a\te"+
		"\2\2\u191a\u0303\3\2\2\2\u191b\u191e\7\u0270\2\2\u191c\u191f\5\u03fc\u01ff"+
		"\2\u191d\u191f\5\u02ee\u0178\2\u191e\u191c\3\2\2\2\u191e\u191d\3\2\2\2"+
		"\u191f\u1929\3\2\2\2\u1920\u1921\7\u026d\2\2\u1921\u1926\5\u0308\u0185"+
		"\2\u1922\u1923\7\u0198\2\2\u1923\u1925\5\u0308\u0185\2\u1924\u1922\3\2"+
		"\2\2\u1925\u1928\3\2\2\2\u1926\u1924\3\2\2\2\u1926\u1927\3\2\2\2\u1927"+
		"\u192a\3\2\2\2\u1928\u1926\3\2\2\2\u1929\u1920\3\2\2\2\u1929\u192a\3\2"+
		"\2\2\u192a\u0305\3\2\2\2\u192b\u1931\7\u0262\2\2\u192c\u192e\7\u0275\2"+
		"\2\u192d\u192f\7\u0172\2\2\u192e\u192d\3\2\2\2\u192e\u192f\3\2\2\2\u192f"+
		"\u1930\3\2\2\2\u1930\u1932\5\u042c\u0217\2\u1931\u192c\3\2\2\2\u1931\u1932"+
		"\3\2\2\2\u1932\u193c\3\2\2\2\u1933\u1934\7\u026d\2\2\u1934\u1939\5\u0308"+
		"\u0185\2\u1935\u1936\7\u0198\2\2\u1936\u1938\5\u0308\u0185\2\u1937\u1935"+
		"\3\2\2\2\u1938\u193b\3\2\2\2\u1939\u1937\3\2\2\2\u1939\u193a\3\2\2\2\u193a"+
		"\u193d\3\2\2\2\u193b\u1939\3\2\2\2\u193c\u1933\3\2\2\2\u193c\u193d\3\2"+
		"\2\2\u193d\u0307\3\2\2\2\u193e\u193f\5\u0302\u0182\2\u193f\u1940\7\u0181"+
		"\2\2\u1940\u1941\5\u02fc\u017f\2\u1941\u0309\3\2\2\2\u1942\u1943\7\36"+
		"\2\2\u1943\u1944\5\u03fc\u01ff\2\u1944\u030b\3\2\2\2\u1945\u1946\7\f\2"+
		"\2\u1946\u1947\5\u03fc\u01ff\2\u1947\u030d\3\2\2\2\u1948\u1949\7\u01f7"+
		"\2\2\u1949\u194a\5\u03fc\u01ff\2\u194a\u194b\7\u0212\2\2\u194b\u194c\5"+
		"\u03fe\u0200\2\u194c\u030f\3\2\2\2\u194d\u194e\7C\2\2\u194e\u195b\5\u0260"+
		"\u0131\2\u194f\u1950\7\u0089\2\2\u1950\u1951\5\u0260\u0131\2\u1951\u1954"+
		"\5\u02b6\u015c\2\u1952\u1953\7\u0145\2\2\u1953\u1955\5\u0260\u0131\2\u1954"+
		"\u1952\3\2\2\2\u1954\u1955\3\2\2\2\u1955\u1958\3\2\2\2\u1956\u1957\7\u0080"+
		"\2\2\u1957\u1959\5\u0260\u0131\2\u1958\u1956\3\2\2\2\u1958\u1959\3\2\2"+
		"\2\u1959\u195b\3\2\2\2\u195a\u194d\3\2\2\2\u195a\u194f\3\2\2\2\u195b\u0311"+
		"\3\2\2\2\u195c\u195d\6\u018a\u00a1\2\u195d\u1961\5\u03fc\u01ff\2\u195e"+
		"\u195f\6\u018a\u00a2\2\u195f\u1961\5\u03a4\u01d3\2\u1960\u195c\3\2\2\2"+
		"\u1960\u195e\3\2\2\2\u1961\u1962\3\2\2\2\u1962\u1964\5\u031a\u018e\2\u1963"+
		"\u1965\5\u0314\u018b\2\u1964\u1963\3\2\2\2\u1964\u1965\3\2\2\2\u1965\u0313"+
		"\3\2\2\2\u1966\u1969\5\u0316\u018c\2\u1967\u1969\5\u0320\u0191\2\u1968"+
		"\u1966\3\2\2\2\u1968\u1967\3\2\2\2\u1969\u0315\3\2\2\2\u196a\u196b\7\u01c5"+
		"\2\2\u196b\u196c\7\u019b\2\2\u196c\u196d\5\u0260\u0131\2\u196d\u196e\7"+
		"\u019c\2\2\u196e\u0317\3\2\2\2\u196f\u1971\t&\2\2\u1970\u1972\5j\66\2"+
		"\u1971\u1970\3\2\2\2\u1971\u1972\3\2\2\2\u1972\u1973\3\2\2\2\u1973\u1977"+
		"\5\u0324\u0193\2\u1974\u1976\5\u032a\u0196\2\u1975\u1974\3\2\2\2\u1976"+
		"\u1979\3\2\2\2\u1977\u1975\3\2\2\2\u1977\u1978\3\2\2\2\u1978\u19c2\3\2"+
		"\2\2\u1979\u1977\3\2\2\2\u197a\u197c\7\u01fe\2\2\u197b\u197d\5\u016a\u00b6"+
		"\2\u197c\u197b\3\2\2\2\u197c\u197d\3\2\2\2\u197d\u197f\3\2\2\2\u197e\u1980"+
		"\5\u03ae\u01d8\2\u197f\u197e\3\2\2\2\u197f\u1980\3\2\2\2\u1980\u1981\3"+
		"\2\2\2\u1981\u1985\5\u0324\u0193\2\u1982\u1984\5\u0332\u019a\2\u1983\u1982"+
		"\3\2\2\2\u1984\u1987\3\2\2\2\u1985\u1983\3\2\2\2\u1985\u1986\3\2\2\2\u1986"+
		"\u19c2\3\2\2\2\u1987\u1985\3\2\2\2\u1988\u198a\7\u0272\2\2\u1989\u198b"+
		"\5\u016a\u00b6\2\u198a\u1989\3\2\2\2\u198a\u198b\3\2\2\2\u198b\u198d\3"+
		"\2\2\2\u198c\u198e\5\u03ae\u01d8\2\u198d\u198c\3\2\2\2\u198d\u198e\3\2"+
		"\2\2\u198e\u198f\3\2\2\2\u198f\u1993\5\u0324\u0193\2\u1990\u1992\5\u0334"+
		"\u019b\2\u1991\u1990\3\2\2\2\u1992\u1995\3\2\2\2\u1993\u1991\3\2\2\2\u1993"+
		"\u1994\3\2\2\2\u1994\u19c2\3\2\2\2\u1995\u1993\3\2\2\2\u1996\u1998\7\u01c9"+
		"\2\2\u1997\u1999\5\u03fc\u01ff\2\u1998\u1997\3\2\2\2\u1998\u1999\3\2\2"+
		"\2\u1999\u199b\3\2\2\2\u199a\u1996\3\2\2\2\u199a\u199b\3\2\2\2\u199b\u19bf"+
		"\3\2\2\2\u199c\u199d\7\u0253\2\2\u199d\u199f\7\u021b\2\2\u199e\u19a0\5"+
		"j\66\2\u199f\u199e\3\2\2\2\u199f\u19a0\3\2\2\2\u19a0\u19a1\3\2\2\2\u19a1"+
		"\u19a5\5\u0324\u0193\2\u19a2\u19a4\5\u032a\u0196\2\u19a3\u19a2\3\2\2\2"+
		"\u19a4\u19a7\3\2\2\2\u19a5\u19a3\3\2\2\2\u19a5\u19a6\3\2\2\2\u19a6\u19c0"+
		"\3\2\2\2\u19a7\u19a5\3\2\2\2\u19a8\u19aa\7\u0296\2\2\u19a9\u19ab\5\u016a"+
		"\u00b6\2\u19aa\u19a9\3\2\2\2\u19aa\u19ab\3\2\2\2\u19ab\u19ad\3\2\2\2\u19ac"+
		"\u19ae\5j\66\2\u19ad\u19ac\3\2\2\2\u19ad\u19ae\3\2\2\2\u19ae\u19af\3\2"+
		"\2\2\u19af\u19b3\5\u0324\u0193\2\u19b0\u19b2\5\u032a\u0196\2\u19b1\u19b0"+
		"\3\2\2\2\u19b2\u19b5\3\2\2\2\u19b3\u19b1\3\2\2\2\u19b3\u19b4\3\2\2\2\u19b4"+
		"\u19c0\3\2\2\2\u19b5\u19b3\3\2\2\2\u19b6\u19b7\7\u01fa\2\2\u19b7\u19b9"+
		"\7\u021b\2\2\u19b8\u19ba\5\u03ae\u01d8\2\u19b9\u19b8\3\2\2\2\u19b9\u19ba"+
		"\3\2\2\2\u19ba\u19bb\3\2\2\2\u19bb\u19bc\5\u0324\u0193\2\u19bc\u19bd\5"+
		"\u0320\u0191\2\u19bd\u19c0\3\2\2\2\u19be\u19c0\5\u0316\u018c\2\u19bf\u199c"+
		"\3\2\2\2\u19bf\u19a8\3\2\2\2\u19bf\u19b6\3\2\2\2\u19bf\u19be\3\2\2\2\u19c0"+
		"\u19c2\3\2\2\2\u19c1\u196f\3\2\2\2\u19c1\u197a\3\2\2\2\u19c1\u1988\3\2"+
		"\2\2\u19c1\u199a\3\2\2\2\u19c2\u0319\3\2\2\2\u19c3\u19ea\5\u0338\u019d"+
		"\2\u19c4\u19c6\5\u031c\u018f\2\u19c5\u19c4\3\2\2\2\u19c6\u19c9\3\2\2\2"+
		"\u19c7\u19c5\3\2\2\2\u19c7\u19c8\3\2\2\2\u19c8\u19eb\3\2\2\2\u19c9\u19c7"+
		"\3\2\2\2\u19ca\u19cd\6\u018e\u00a3\2\u19cb\u19cc\7\u01c6\2\2\u19cc\u19ce"+
		"\5\u0350\u01a9\2\u19cd\u19cb\3\2\2\2\u19cd\u19ce\3\2\2\2\u19ce\u19d1\3"+
		"\2\2\2\u19cf\u19d0\7\u0200\2\2\u19d0\u19d2\7\5\2\2\u19d1\u19cf\3\2\2\2"+
		"\u19d1\u19d2\3\2\2\2\u19d2\u19d3\3\2\2\2\u19d3\u19d4\7\u01b1\2\2\u19d4"+
		"\u19d5\7\u019b\2\2\u19d5\u19d6\5\u0260\u0131\2\u19d6\u19d8\7\u019c\2\2"+
		"\u19d7\u19d9\tf\2\2\u19d8\u19d7\3\2\2\2\u19d8\u19d9\3\2\2\2\u19d9\u19e8"+
		"\3\2\2\2\u19da\u19de\6\u018e\u00a4\2\u19db\u19dd\5\u031e\u0190\2\u19dc"+
		"\u19db\3\2\2\2\u19dd\u19e0\3\2\2\2\u19de\u19dc\3\2\2\2\u19de\u19df\3\2"+
		"\2\2\u19df\u19e9\3\2\2\2\u19e0\u19de\3\2\2\2\u19e1\u19e5\6\u018e\u00a5"+
		"\2\u19e2\u19e4\5\u031c\u018f\2\u19e3\u19e2\3\2\2\2\u19e4\u19e7\3\2\2\2"+
		"\u19e5\u19e3\3\2\2\2\u19e5\u19e6\3\2\2\2\u19e6\u19e9\3\2\2\2\u19e7\u19e5"+
		"\3\2\2\2\u19e8\u19da\3\2\2\2\u19e8\u19e1\3\2\2\2\u19e9\u19eb\3\2\2\2\u19ea"+
		"\u19c7\3\2\2\2\u19ea\u19ca\3\2\2\2\u19eb\u031b\3\2\2\2\u19ec\u19ee\7\u023f"+
		"\2\2\u19ed\u19ec\3\2\2\2\u19ed\u19ee\3\2\2\2\u19ee\u19ef\3\2\2\2\u19ef"+
		"\u1a16\5\u0424\u0213\2\u19f0\u19f6\7\u01e0\2\2\u19f1\u19f7\5\u0412\u020a"+
		"\2\u19f2\u19f4\7\u0240\2\2\u19f3\u19f5\5\u028a\u0146\2\u19f4\u19f3\3\2"+
		"\2\2\u19f4\u19f5\3\2\2\2\u19f5\u19f7\3\2\2\2\u19f6\u19f1\3\2\2\2\u19f6"+
		"\u19f2\3\2\2\2\u19f7\u1a16\3\2\2\2\u19f8\u19f9\7\u0245\2\2\u19f9\u19fa"+
		"\7\u0299\2\2\u19fa\u19fc\7\u0240\2\2\u19fb\u19fd\5\u028a\u0146\2\u19fc"+
		"\u19fb\3\2\2\2\u19fc\u19fd\3\2\2\2\u19fd\u1a16\3\2\2\2\u19fe\u1a16\7E"+
		"\2\2\u19ff\u1a00\7\u0134\2\2\u1a00\u1a01\7\u01e0\2\2\u1a01\u1a16\7\u0172"+
		"\2\2\u1a02\u1a04\7\u0296\2\2\u1a03\u1a05\7\u021b\2\2\u1a04\u1a03\3\2\2"+
		"\2\u1a04\u1a05\3\2\2\2\u1a05\u1a16\3\2\2\2\u1a06\u1a08\7\u0253\2\2\u1a07"+
		"\u1a06\3\2\2\2\u1a07\u1a08\3\2\2\2\u1a08\u1a09\3\2\2\2\u1a09\u1a16\7\u021b"+
		"\2\2\u1a0a\u1a0b\7\r\2\2\u1a0b\u1a16\5\u041a\u020e\2\u1a0c\u1a0d\7\u01c6"+
		"\2\2\u1a0d\u1a16\5\u0350\u01a9\2\u1a0e\u1a0f\7[\2\2\u1a0f\u1a16\tg\2\2"+
		"\u1a10\u1a11\7\u014a\2\2\u1a11\u1a16\th\2\2\u1a12\u1a13\6\u018f\u00a6"+
		"\2\u1a13\u1a14\7\u02e5\2\2\u1a14\u1a16\5\u040e\u0208\2\u1a15\u19ed\3\2"+
		"\2\2\u1a15\u19f0\3\2\2\2\u1a15\u19f8\3\2\2\2\u1a15\u19fe\3\2\2\2\u1a15"+
		"\u19ff\3\2\2\2\u1a15\u1a02\3\2\2\2\u1a15\u1a07\3\2\2\2\u1a15\u1a0a\3\2"+
		"\2\2\u1a15\u1a0c\3\2\2\2\u1a15\u1a0e\3\2\2\2\u1a15\u1a10\3\2\2\2\u1a15"+
		"\u1a12\3\2\2\2\u1a16\u031d\3\2\2\2\u1a17\u1a19\7\u0296\2\2\u1a18\u1a1a"+
		"\7\u021b\2\2\u1a19\u1a18\3\2\2\2\u1a19\u1a1a\3\2\2\2\u1a1a\u1a26\3\2\2"+
		"\2\u1a1b\u1a1c\7\r\2\2\u1a1c\u1a26\5\u0418\u020d\2\u1a1d\u1a1f\5\u02b2"+
		"\u015a\2\u1a1e\u1a1d\3\2\2\2\u1a1e\u1a1f\3\2\2\2\u1a1f\u1a20\3\2\2\2\u1a20"+
		"\u1a26\7\u0242\2\2\u1a21\u1a23\7\u0253\2\2\u1a22\u1a21\3\2\2\2\u1a22\u1a23"+
		"\3\2\2\2\u1a23\u1a24\3\2\2\2\u1a24\u1a26\7\u021b\2\2\u1a25\u1a17\3\2\2"+
		"\2\u1a25\u1a1b\3\2\2\2\u1a25\u1a1e\3\2\2\2\u1a25\u1a22\3\2\2\2\u1a26\u031f"+
		"\3\2\2\2\u1a27\u1a28\7\u025b\2\2\u1a28\u1a2a\5\u03e2\u01f2\2\u1a29\u1a2b"+
		"\5\u0400\u0201\2\u1a2a\u1a29\3\2\2\2\u1a2a\u1a2b\3\2\2\2\u1a2b\u1a2e\3"+
		"\2\2\2\u1a2c\u1a2d\7\u022f\2\2\u1a2d\u1a2f\ti\2\2\u1a2e\u1a2c\3\2\2\2"+
		"\u1a2e\u1a2f\3\2\2\2\u1a2f\u1a40\3\2\2\2\u1a30\u1a31\7\u0245\2\2\u1a31"+
		"\u1a32\7\u0299\2\2\u1a32\u1a36\5\u0322\u0192\2\u1a33\u1a34\7\u0245\2\2"+
		"\u1a34\u1a35\7\u01e2\2\2\u1a35\u1a37\5\u0322\u0192\2\u1a36\u1a33\3\2\2"+
		"\2\u1a36\u1a37\3\2\2\2\u1a37\u1a41\3\2\2\2\u1a38\u1a39\7\u0245\2\2\u1a39"+
		"\u1a3a\7\u01e2\2\2\u1a3a\u1a3e\5\u0322\u0192\2\u1a3b\u1a3c\7\u0245\2\2"+
		"\u1a3c\u1a3d\7\u0299\2\2\u1a3d\u1a3f\5\u0322\u0192\2\u1a3e\u1a3b\3\2\2"+
		"\2\u1a3e\u1a3f\3\2\2\2\u1a3f\u1a41\3\2\2\2\u1a40\u1a30\3\2\2\2\u1a40\u1a38"+
		"\3\2\2\2\u1a40\u1a41\3\2\2\2\u1a41\u0321\3\2\2\2\u1a42\u1a48\t\4\2\2\u1a43"+
		"\u1a44\7\u026d\2\2\u1a44\u1a48\5\u0424\u0213\2\u1a45\u1a46\7\35\2\2\u1a46"+
		"\u1a48\7;\2\2\u1a47\u1a42\3\2\2\2\u1a47\u1a43\3\2\2\2\u1a47\u1a45\3\2"+
		"\2\2\u1a48\u0323\3\2\2\2\u1a49\u1a4a\7\u019b\2\2\u1a4a\u1a4f\5\u0326\u0194"+
		"\2\u1a4b\u1a4c\7\u0198\2\2\u1a4c\u1a4e\5\u0326\u0194\2\u1a4d\u1a4b\3\2"+
		"\2\2\u1a4e\u1a51\3\2\2\2\u1a4f\u1a4d\3\2\2\2\u1a4f\u1a50\3\2\2\2\u1a50"+
		"\u1a52\3\2\2\2\u1a51\u1a4f\3\2\2\2\u1a52\u1a53\7\u019c\2\2\u1a53\u0325"+
		"\3\2\2\2\u1a54\u1a56\5\u03fc\u01ff\2\u1a55\u1a57\5\u0340\u01a1\2\u1a56"+
		"\u1a55\3\2\2\2\u1a56\u1a57\3\2\2\2\u1a57\u1a59\3\2\2\2\u1a58\u1a5a\5\u0126"+
		"\u0094\2\u1a59\u1a58\3\2\2\2\u1a59\u1a5a\3\2\2\2\u1a5a\u0327\3\2\2\2\u1a5b"+
		"\u1a5c\tj\2\2\u1a5c\u0329\3\2\2\2\u1a5d\u1a60\5\u032c\u0197\2\u1a5e\u1a60"+
		"\5\u0330\u0199\2\u1a5f\u1a5d\3\2\2\2\u1a5f\u1a5e\3\2\2\2\u1a60\u032b\3"+
		"\2\2\2\u1a61\u1a63\7\u00af\2\2\u1a62\u1a64\7\u0181\2\2\u1a63\u1a62\3\2"+
		"\2\2\u1a63\u1a64\3\2\2\2\u1a64\u1a65\3\2\2\2\u1a65\u1a6c\5\u0408\u0205"+
		"\2\u1a66\u1a67\6\u0197\u00a7\2\u1a67\u1a68\7\r\2\2\u1a68\u1a6c\5\u041a"+
		"\u020e\2\u1a69\u1a6a\6\u0197\u00a8\2\u1a6a\u1a6c\5\u032e\u0198\2\u1a6b"+
		"\u1a61\3\2\2\2\u1a6b\u1a66\3\2\2\2\u1a6b\u1a69\3\2\2\2\u1a6c\u032d\3\2"+
		"\2\2\u1a6d\u1a6e\tk\2\2\u1a6e\u032f\3\2\2\2\u1a6f\u1a70\tl\2\2\u1a70\u1a71"+
		"\5\u0328\u0195\2\u1a71\u0331\3\2\2\2\u1a72\u1a77\5\u032c\u0197\2\u1a73"+
		"\u1a74\7\u02ac\2\2\u1a74\u1a75\7!\2\2\u1a75\u1a77\5\u03fc\u01ff\2\u1a76"+
		"\u1a72\3\2\2\2\u1a76\u1a73\3\2\2\2\u1a77\u0333\3\2\2\2\u1a78\u1a79\5\u032c"+
		"\u0197\2\u1a79\u0335\3\2\2\2\u1a7a\u1a7b\5\u0338\u019d\2\u1a7b\u1a7c\7"+
		"\2\2\3\u1a7c\u0337\3\2\2\2\u1a7d\u1a7f\tm\2\2\u1a7e\u1a80\5\u0340\u01a1"+
		"\2\u1a7f\u1a7e\3\2\2\2\u1a7f\u1a80\3\2\2\2\u1a80\u1a82\3\2\2\2\u1a81\u1a83"+
		"\5\u0342\u01a2\2\u1a82\u1a81\3\2\2\2\u1a82\u1a83\3\2\2\2\u1a83\u1b11\3"+
		"\2\2\2\u1a84\u1a8a\7\u025a\2\2\u1a85\u1a87\7\u01e8\2\2\u1a86\u1a88\7\u0252"+
		"\2\2\u1a87\u1a86\3\2\2\2\u1a87\u1a88\3\2\2\2\u1a88\u1a8a\3\2\2\2\u1a89"+
		"\u1a84\3\2\2\2\u1a89\u1a85\3\2\2\2\u1a8a\u1a8c\3\2\2\2\u1a8b\u1a8d\5\u042a"+
		"\u0216\2\u1a8c\u1a8b\3\2\2\2\u1a8c\u1a8d\3\2\2\2\u1a8d\u1a8f\3\2\2\2\u1a8e"+
		"\u1a90\5\u0342\u01a2\2\u1a8f\u1a8e\3\2\2\2\u1a8f\u1a90\3\2\2\2\u1a90\u1b11"+
		"\3\2\2\2\u1a91\u1a93\tn\2\2\u1a92\u1a94\5\u0428\u0215\2\u1a93\u1a92\3"+
		"\2\2\2\u1a93\u1a94\3\2\2\2\u1a94\u1a96\3\2\2\2\u1a95\u1a97\5\u0342\u01a2"+
		"\2\u1a96\u1a95\3\2\2\2\u1a96\u1a97\3\2\2\2\u1a97\u1b11\3\2\2\2\u1a98\u1a9a"+
		"\7J\2\2\u1a99\u1a9b\5\u0340\u01a1\2\u1a9a\u1a99\3\2\2\2\u1a9a\u1a9b\3"+
		"\2\2\2\u1a9b\u1b11\3\2\2\2\u1a9c\u1b11\to\2\2\u1a9d\u1a9f\7\u01c4\2\2"+
		"\u1a9e\u1aa0\5\u0340\u01a1\2\u1a9f\u1a9e\3\2\2\2\u1a9f\u1aa0\3\2\2\2\u1aa0"+
		"\u1aa2\3\2\2\2\u1aa1\u1aa3\5\u0344\u01a3\2\u1aa2\u1aa1\3\2\2\2\u1aa2\u1aa3"+
		"\3\2\2\2\u1aa3\u1b11\3\2\2\2\u1aa4\u1aa6\5\u033a\u019e\2\u1aa5\u1aa7\5"+
		"\u0340\u01a1\2\u1aa6\u1aa5\3\2\2\2\u1aa6\u1aa7\3\2\2\2\u1aa7\u1aa9\3\2"+
		"\2\2\u1aa8\u1aaa\7\u01b7\2\2\u1aa9\u1aa8\3\2\2\2\u1aa9\u1aaa\3\2\2\2\u1aaa"+
		"\u1b11\3\2\2\2\u1aab\u1aad\7\u01b7\2\2\u1aac\u1aae\5\u0340\u01a1\2\u1aad"+
		"\u1aac\3\2\2\2\u1aad\u1aae\3\2\2\2\u1aae\u1b11\3\2\2\2\u1aaf\u1ab0\7\u01c4"+
		"\2\2\u1ab0\u1ab3\7\u02a5\2\2\u1ab1\u1ab3\7\u02a3\2\2\u1ab2\u1aaf\3\2\2"+
		"\2\u1ab2\u1ab1\3\2\2\2\u1ab3\u1ab4\3\2\2\2\u1ab4\u1ab6\5\u0340\u01a1\2"+
		"\u1ab5\u1ab7\5\u0344\u01a3\2\u1ab6\u1ab5\3\2\2\2\u1ab6\u1ab7\3\2\2\2\u1ab7"+
		"\u1b11\3\2\2\2\u1ab8\u1ab9\7\u00e9\2\2\u1ab9\u1ac3\7\u02a3\2\2\u1aba\u1ac3"+
		"\7\u00f3\2\2\u1abb\u1abc\7\u00ea\2\2\u1abc\u1ac3\7\u02a3\2\2\u1abd\u1abe"+
		"\7\u00e9\2\2\u1abe\u1abf\7\u01c4\2\2\u1abf\u1ac3\7\u02a5\2\2\u1ac0\u1ac1"+
		"\7\u00ea\2\2\u1ac1\u1ac3\7\u02a5\2\2\u1ac2\u1ab8\3\2\2\2\u1ac2\u1aba\3"+
		"\2\2\2\u1ac2\u1abb\3\2\2\2\u1ac2\u1abd\3\2\2\2\u1ac2\u1ac0\3\2\2\2\u1ac3"+
		"\u1ac4\3\2\2\2\u1ac4\u1ac6\5\u0340\u01a1\2\u1ac5\u1ac7\7\u01b7\2\2\u1ac6"+
		"\u1ac5\3\2\2\2\u1ac6\u1ac7\3\2\2\2\u1ac7\u1b11\3\2\2\2\u1ac8\u1ac9\7\u02a2"+
		"\2\2\u1ac9\u1b11\5\u0340\u01a1\2\u1aca\u1acc\7\u017b\2\2\u1acb\u1acd\5"+
		"\u0340\u01a1\2\u1acc\u1acb\3\2\2\2\u1acc\u1acd\3\2\2\2\u1acd\u1acf\3\2"+
		"\2\2\u1ace\u1ad0\5\u0342\u01a2\2\u1acf\u1ace\3\2\2\2\u1acf\u1ad0\3\2\2"+
		"\2\u1ad0\u1b11\3\2\2\2\u1ad1\u1b11\7r\2\2\u1ad2\u1ad4\7\u0162\2\2\u1ad3"+
		"\u1ad5\5\u034c\u01a7\2\u1ad4\u1ad3\3\2\2\2\u1ad4\u1ad5\3\2\2\2\u1ad5\u1b11"+
		"\3\2\2\2\u1ad6\u1ad8\7\u015f\2\2\u1ad7\u1ad9\5\u034c\u01a7\2\u1ad8\u1ad7"+
		"\3\2\2\2\u1ad8\u1ad9\3\2\2\2\u1ad9\u1b11\3\2\2\2\u1ada\u1adc\7q\2\2\u1adb"+
		"\u1add\5\u034c\u01a7\2\u1adc\u1adb\3\2\2\2\u1adc\u1add\3\2\2\2\u1add\u1b11"+
		"\3\2\2\2\u1ade\u1b11\7\u028c\2\2\u1adf\u1ae1\7\u01bc\2\2\u1ae0\u1ae2\5"+
		"\u0340\u01a1\2\u1ae1\u1ae0\3\2\2\2\u1ae1\u1ae2\3\2\2\2\u1ae2\u1b11\3\2"+
		"\2\2\u1ae3\u1b11\tp\2\2\u1ae4\u1ae5\7\u022a\2\2\u1ae5\u1b11\7\u02a2\2"+
		"\2\u1ae6\u1aea\7\u022a\2\2\u1ae7\u1ae8\7\u01c4\2\2\u1ae8\u1aeb\7\u02a5"+
		"\2\2\u1ae9\u1aeb\7\u02a3\2\2\u1aea\u1ae7\3\2\2\2\u1aea\u1ae9\3\2\2\2\u1aea"+
		"\u1aeb\3\2\2\2\u1aeb\u1aed\3\2\2\2\u1aec\u1aee\5\u0344\u01a3\2\u1aed\u1aec"+
		"\3\2\2\2\u1aed\u1aee\3\2\2\2\u1aee\u1b11\3\2\2\2\u1aef\u1af1\7\u028e\2"+
		"\2\u1af0\u1af2\5\u0344\u01a3\2\u1af1\u1af0\3\2\2\2\u1af1\u1af2\3\2\2\2"+
		"\u1af2\u1b11\3\2\2\2\u1af3\u1af5\7\u015b\2\2\u1af4\u1af6\5\u0340\u01a1"+
		"\2\u1af5\u1af4\3\2\2\2\u1af5\u1af6\3\2\2\2\u1af6\u1af8\3\2\2\2\u1af7\u1af9"+
		"\5\u0344\u01a3\2\u1af8\u1af7\3\2\2\2\u1af8\u1af9\3\2\2\2\u1af9\u1b11\3"+
		"\2\2\2\u1afa\u1afc\7\u0234\2\2\u1afb\u1afd\5\u0344\u01a3\2\u1afc\u1afb"+
		"\3\2\2\2\u1afc\u1afd\3\2\2\2\u1afd\u1b11\3\2\2\2\u1afe\u1b00\7\u0228\2"+
		"\2\u1aff\u1b01\5\u0344\u01a3\2\u1b00\u1aff\3\2\2\2\u1b00\u1b01\3\2\2\2"+
		"\u1b01\u1b11\3\2\2\2\u1b02\u1b03\7\u0081\2\2\u1b03\u1b05\5\u0414\u020b"+
		"\2\u1b04\u1b06\5\u0344\u01a3\2\u1b05\u1b04\3\2\2\2\u1b05\u1b06\3\2\2\2"+
		"\u1b06\u1b11\3\2\2\2\u1b07\u1b08\7\u026d\2\2\u1b08\u1b0a\5\u0414\u020b"+
		"\2\u1b09\u1b0b\5\u0344\u01a3\2\u1b0a\u1b09\3\2\2\2\u1b0a\u1b0b\3\2\2\2"+
		"\u1b0b\u1b11\3\2\2\2\u1b0c\u1b11\7\u0134\2\2\u1b0d\u1b0e\6\u019d\u00a9"+
		"\2\u1b0e\u1b11\7\u00ae\2\2\u1b0f\u1b11\tq\2\2\u1b10\u1a7d\3\2\2\2\u1b10"+
		"\u1a89\3\2\2\2\u1b10\u1a91\3\2\2\2\u1b10\u1a98\3\2\2\2\u1b10\u1a9c\3\2"+
		"\2\2\u1b10\u1a9d\3\2\2\2\u1b10\u1aa4\3\2\2\2\u1b10\u1aab\3\2\2\2\u1b10"+
		"\u1ab2\3\2\2\2\u1b10\u1ac2\3\2\2\2\u1b10\u1ac8\3\2\2\2\u1b10\u1aca\3\2"+
		"\2\2\u1b10\u1ad1\3\2\2\2\u1b10\u1ad2\3\2\2\2\u1b10\u1ad6\3\2\2\2\u1b10"+
		"\u1ada\3\2\2\2\u1b10\u1ade\3\2\2\2\u1b10\u1adf\3\2\2\2\u1b10\u1ae3\3\2"+
		"\2\2\u1b10\u1ae4\3\2\2\2\u1b10\u1ae6\3\2\2\2\u1b10\u1aef\3\2\2\2\u1b10"+
		"\u1af3\3\2\2\2\u1b10\u1afa\3\2\2\2\u1b10\u1afe\3\2\2\2\u1b10\u1b02\3\2"+
		"\2\2\u1b10\u1b07\3\2\2\2\u1b10\u1b0c\3\2\2\2\u1b10\u1b0d\3\2\2\2\u1b10"+
		"\u1b0f\3\2\2\2\u1b11\u0339\3\2\2\2\u1b12\u1b16\7\u00ea\2\2\u1b13\u1b14"+
		"\7\u00e9\2\2\u1b14\u1b16\7\u01c4\2\2\u1b15\u1b12\3\2\2\2\u1b15\u1b13\3"+
		"\2\2\2\u1b16\u033b\3\2\2\2\u1b17\u1b18\7\u01c4\2\2\u1b18\u1b1b\7\u02a5"+
		"\2\2\u1b19\u1b1b\7\u02a3\2\2\u1b1a\u1b17\3\2\2\2\u1b1a\u1b19\3\2\2\2\u1b1b"+
		"\u033d\3\2\2\2\u1b1c\u1b1d\7\u00e9\2\2\u1b1d\u1b27\7\u02a3\2\2\u1b1e\u1b27"+
		"\7\u00f3\2\2\u1b1f\u1b20\7\u00ea\2\2\u1b20\u1b27\7\u02a3\2\2\u1b21\u1b22"+
		"\7\u00e9\2\2\u1b22\u1b23\7\u01c4\2\2\u1b23\u1b27\7\u02a5\2\2\u1b24\u1b25"+
		"\7\u00ea\2\2\u1b25\u1b27\7\u02a5\2\2\u1b26\u1b1c\3\2\2\2\u1b26\u1b1e\3"+
		"\2\2\2\u1b26\u1b1f\3\2\2\2\u1b26\u1b21\3\2\2\2\u1b26\u1b24\3\2\2\2\u1b27"+
		"\u033f\3\2\2\2\u1b28\u1b2b\7\u019b\2\2\u1b29\u1b2c\5\u040e\u0208\2\u1b2a"+
		"\u1b2c\7\u01a9\2\2\u1b2b\u1b29\3\2\2\2\u1b2b\u1b2a\3\2\2\2\u1b2c\u1b2d"+
		"\3\2\2\2\u1b2d\u1b2e\7\u019c\2\2\u1b2e\u0341\3\2\2\2\u1b2f\u1b31\tr\2"+
		"\2\u1b30\u1b2f\3\2\2\2\u1b31\u1b32\3\2\2\2\u1b32\u1b30\3\2\2\2\u1b32\u1b33"+
		"\3\2\2\2\u1b33\u0343\3\2\2\2\u1b34\u1b43\5\u0346\u01a4\2\u1b35\u1b43\5"+
		"\u0348\u01a5\2\u1b36\u1b43\7\b\2\2\u1b37\u1b38\5\u02b0\u0159\2\u1b38\u1b3a"+
		"\5\u034e\u01a8\2";
	private static final String _serializedATNSegment3 =
		"\u1b39\u1b3b\7\u01b7\2\2\u1b3a\u1b39\3\2\2\2\u1b3a\u1b3b\3\2\2\2\u1b3b"+
		"\u1b43\3\2\2\2\u1b3c\u1b40\7\u01b7\2\2\u1b3d\u1b3e\5\u02b0\u0159\2\u1b3e"+
		"\u1b3f\5\u034e\u01a8\2\u1b3f\u1b41\3\2\2\2\u1b40\u1b3d\3\2\2\2\u1b40\u1b41"+
		"\3\2\2\2\u1b41\u1b43\3\2\2\2\u1b42\u1b34\3\2\2\2\u1b42\u1b35\3\2\2\2\u1b42"+
		"\u1b36\3\2\2\2\u1b42\u1b37\3\2\2\2\u1b42\u1b3c\3\2\2\2\u1b43\u0345\3\2"+
		"\2\2\u1b44\u1b46\7\4\2\2\u1b45\u1b47\7\u01b7\2\2\u1b46\u1b45\3\2\2\2\u1b46"+
		"\u1b47\3\2\2\2\u1b47\u1b4c\3\2\2\2\u1b48\u1b49\6\u01a4\u00aa\2\u1b49\u1b4a"+
		"\7\u01b7\2\2\u1b4a\u1b4c\7\4\2\2\u1b4b\u1b44\3\2\2\2\u1b4b\u1b48\3\2\2"+
		"\2\u1b4c\u0347\3\2\2\2\u1b4d\u1b4f\7\65\2\2\u1b4e\u1b50\7\u01b7\2\2\u1b4f"+
		"\u1b4e\3\2\2\2\u1b4f\u1b50\3\2\2\2\u1b50\u1b55\3\2\2\2\u1b51\u1b52\6\u01a5"+
		"\u00ab\2\u1b52\u1b53\7\u01b7\2\2\u1b53\u1b55\7\65\2\2\u1b54\u1b4d\3\2"+
		"\2\2\u1b54\u1b51\3\2\2\2\u1b55\u0349\3\2\2\2\u1b56\u1b57\7\u019b\2\2\u1b57"+
		"\u1b58\5\u040a\u0206\2\u1b58\u1b59\7\u019c\2\2\u1b59\u034b\3\2\2\2\u1b5a"+
		"\u1b5b\6\u01a7\u00ac\2\u1b5b\u1b5c\7\u019b\2\2\u1b5c\u1b5d\7\u017e\2\2"+
		"\u1b5d\u1b5e\7\u019c\2\2\u1b5e\u034d\3\2\2\2\u1b5f\u1b64\5\u042c\u0217"+
		"\2\u1b60\u1b64\7\u01b7\2\2\u1b61\u1b62\6\u01a8\u00ad\2\u1b62\u1b64\7\u01e0"+
		"\2\2\u1b63\u1b5f\3\2\2\2\u1b63\u1b60\3\2\2\2\u1b63\u1b61\3\2\2\2\u1b64"+
		"\u034f\3\2\2\2\u1b65\u1b69\5\u042c\u0217\2\u1b66\u1b67\6\u01a9\u00ae\2"+
		"\u1b67\u1b69\7\u01e0\2\2\u1b68\u1b65\3\2\2\2\u1b68\u1b66\3\2\2\2\u1b69"+
		"\u0351\3\2\2\2\u1b6a\u1b71\5\u0356\u01ac\2\u1b6b\u1b6d\7\u0198\2\2\u1b6c"+
		"\u1b6b\3\2\2\2\u1b6c\u1b6d\3\2\2\2\u1b6d\u1b6e\3\2\2\2\u1b6e\u1b70\5\u0356"+
		"\u01ac\2\u1b6f\u1b6c\3\2\2\2\u1b70\u1b73\3\2\2\2\u1b71\u1b6f\3\2\2\2\u1b71"+
		"\u1b72\3\2\2\2\u1b72\u0353\3\2\2\2\u1b73\u1b71\3\2\2\2\u1b74\u1b76\5\u0356"+
		"\u01ac\2\u1b75\u1b74\3\2\2\2\u1b76\u1b77\3\2\2\2\u1b77\u1b75\3\2\2\2\u1b77"+
		"\u1b78\3\2\2\2\u1b78\u0355\3\2\2\2\u1b79\u1b7b\7\u0082\2\2\u1b7a\u1b7c"+
		"\7\u0181\2\2\u1b7b\u1b7a\3\2\2\2\u1b7b\u1b7c\3\2\2\2\u1b7c\u1b7d\3\2\2"+
		"\2\u1b7d\u1bf9\5\u03da\u01ee\2\u1b7e\u1b7f\6\u01ac\u00af\2\u1b7f\u1b81"+
		"\7\u0164\2\2\u1b80\u1b82\7\u0181\2\2\u1b81\u1b80\3\2\2\2\u1b81\u1b82\3"+
		"\2\2\2\u1b82\u1b83\3\2\2\2\u1b83\u1bf9\5\u03da\u01ee\2\u1b84\u1b86\7\u00ba"+
		"\2\2\u1b85\u1b87\7\u0181\2\2\u1b86\u1b85\3\2\2\2\u1b86\u1b87\3\2\2\2\u1b87"+
		"\u1b88\3\2\2\2\u1b88\u1bf9\5\u040c\u0207\2\u1b89\u1b8b\7\u00de\2\2\u1b8a"+
		"\u1b8c\7\u0181\2\2\u1b8b\u1b8a\3\2\2\2\u1b8b\u1b8c\3\2\2\2\u1b8c\u1b8d"+
		"\3\2\2\2\u1b8d\u1bf9\5\u040c\u0207\2\u1b8e\u1b90\7G\2\2\u1b8f\u1b91\7"+
		"\u0181\2\2\u1b90\u1b8f\3\2\2\2\u1b90\u1b91\3\2\2\2\u1b91\u1b92\3\2\2\2"+
		"\u1b92\u1bf9\5\u0408\u0205\2\u1b93\u1b95\7\u00fd\2\2\u1b94\u1b96\7\u0181"+
		"\2\2\u1b95\u1b94\3\2\2\2\u1b95\u1b96\3\2\2\2\u1b96\u1b97\3\2\2\2\u1b97"+
		"\u1bf9\5\u0418\u020d\2\u1b98\u1b9a\7\r\2\2\u1b99\u1b9b\7\u0181\2\2\u1b9a"+
		"\u1b99\3\2\2\2\u1b9a\u1b9b\3\2\2\2\u1b9b\u1b9c\3\2\2\2\u1b9c\u1bf9\5\u0418"+
		"\u020d\2\u1b9d\u1b9e\6\u01ac\u00b0\2\u1b9e\u1ba0\7a\2\2\u1b9f\u1ba1\7"+
		"\u0181\2\2\u1ba0\u1b9f\3\2\2\2\u1ba0\u1ba1\3\2\2\2\u1ba1\u1ba2\3\2\2\2"+
		"\u1ba2\u1bf9\5\u0418\u020d\2\u1ba3\u1ba4\6\u01ac\u00b1\2\u1ba4\u1ba6\7"+
		"b\2\2\u1ba5\u1ba7\7\u0181\2\2\u1ba6\u1ba5\3\2\2\2\u1ba6\u1ba7\3\2\2\2"+
		"\u1ba7\u1ba8\3\2\2\2\u1ba8\u1bf9\5\u0418\u020d\2\u1ba9\u1bab\7E\2\2\u1baa"+
		"\u1bac\7\u0181\2\2\u1bab\u1baa\3\2\2\2\u1bab\u1bac\3\2\2\2\u1bac\u1bad"+
		"\3\2\2\2\u1bad\u1bf9\5\u040c\u0207\2\u1bae\u1bb0\7\u00f8\2\2\u1baf\u1bb1"+
		"\7\u0181\2\2\u1bb0\u1baf\3\2\2\2\u1bb0\u1bb1\3\2\2\2\u1bb1\u1bb2\3\2\2"+
		"\2\u1bb2\u1bf9\5\u0358\u01ad\2\u1bb3\u1bb4\6\u01ac\u00b2\2\u1bb4\u1bb6"+
		"\ts\2\2\u1bb5\u1bb7\7\u0181\2\2\u1bb6\u1bb5\3\2\2\2\u1bb6\u1bb7\3\2\2"+
		"\2\u1bb7\u1bb8\3\2\2\2\u1bb8\u1bf9\5\u0358\u01ad\2\u1bb9\u1bbb\tt\2\2"+
		"\u1bba\u1bbc\7\u0181\2\2\u1bbb\u1bba\3\2\2\2\u1bbb\u1bbc\3\2\2\2\u1bbc"+
		"\u1bbd\3\2\2\2\u1bbd\u1bf9\5\u0408\u0205\2\u1bbe\u1bc0\7v\2\2\u1bbf\u1bc1"+
		"\7\u0181\2\2\u1bc0\u1bbf\3\2\2\2\u1bc0\u1bc1\3\2\2\2\u1bc1\u1bc2\3\2\2"+
		"\2\u1bc2\u1bf9\5\u0408\u0205\2\u1bc3\u1bc5\7\u012e\2\2\u1bc4\u1bc6\7\u0181"+
		"\2\2\u1bc5\u1bc4\3\2\2\2\u1bc5\u1bc6\3\2\2\2\u1bc6\u1bc7\3\2\2\2\u1bc7"+
		"\u1bf9\tu\2\2\u1bc8\u1bca\7\u0295\2\2\u1bc9\u1bcb\7\u0181\2\2\u1bca\u1bc9"+
		"\3\2\2\2\u1bca\u1bcb\3\2\2\2\u1bcb\u1bcc\3\2\2\2\u1bcc\u1bcd\7\u019b\2"+
		"\2\u1bcd\u1bce\5\u03e4\u01f3\2\u1bce\u1bcf\7\u019c\2\2\u1bcf\u1bf9\3\2"+
		"\2\2\u1bd0\u1bf9\5\u035c\u01af\2\u1bd1\u1bf9\5\u035a\u01ae\2\u1bd2\u1bd4"+
		"\7\u00ad\2\2\u1bd3\u1bd5\7\u0181\2\2\u1bd4\u1bd3\3\2\2\2\u1bd4\u1bd5\3"+
		"\2\2\2\u1bd5\u1bd6\3\2\2\2\u1bd6\u1bf9\tv\2\2\u1bd7\u1bd8\7o\2\2\u1bd8"+
		"\u1bda\7y\2\2\u1bd9\u1bdb\7\u0181\2\2\u1bda\u1bd9\3\2\2\2\u1bda\u1bdb"+
		"\3\2\2\2\u1bdb\u1bdc\3\2\2\2\u1bdc\u1bf9\5\u0418\u020d\2\u1bdd\u1bde\7"+
		"\u020b\2\2\u1bde\u1be0\7y\2\2\u1bdf\u1be1\7\u0181\2\2\u1be0\u1bdf\3\2"+
		"\2\2\u1be0\u1be1\3\2\2\2\u1be1\u1be2\3\2\2\2\u1be2\u1bf9\5\u0418\u020d"+
		"\2\u1be3\u1be9\7\u0158\2\2\u1be4\u1be6\6\u01ac\u00b3\2\u1be5\u1be7\7\u0181"+
		"\2\2\u1be6\u1be5\3\2\2\2\u1be6\u1be7\3\2\2\2\u1be7\u1bea\3\2\2\2\u1be8"+
		"\u1bea\3\2\2\2\u1be9\u1be4\3\2\2\2\u1be9\u1be8\3\2\2\2\u1bea\u1beb\3\2"+
		"\2\2\u1beb\u1bf9\5\u03fc\u01ff\2\u1bec\u1bed\7\u014a\2\2\u1bed\u1bf9\t"+
		"w\2\2\u1bee\u1bf0\7d\2\2\u1bef\u1bf1\7\u0181\2\2\u1bf0\u1bef\3\2\2\2\u1bf0"+
		"\u1bf1\3\2\2\2\u1bf1\u1bf2\3\2\2\2\u1bf2\u1bf9\5\u0418\u020d\2\u1bf3\u1bf5"+
		"\7\u00af\2\2\u1bf4\u1bf6\7\u0181\2\2\u1bf5\u1bf4\3\2\2\2\u1bf5\u1bf6\3"+
		"\2\2\2\u1bf6\u1bf7\3\2\2\2\u1bf7\u1bf9\5\u0408\u0205\2\u1bf8\u1b79\3\2"+
		"\2\2\u1bf8\u1b7e\3\2\2\2\u1bf8\u1b84\3\2\2\2\u1bf8\u1b89\3\2\2\2\u1bf8"+
		"\u1b8e\3\2\2\2\u1bf8\u1b93\3\2\2\2\u1bf8\u1b98\3\2\2\2\u1bf8\u1b9d\3\2"+
		"\2\2\u1bf8\u1ba3\3\2\2\2\u1bf8\u1ba9\3\2\2\2\u1bf8\u1bae\3\2\2\2\u1bf8"+
		"\u1bb3\3\2\2\2\u1bf8\u1bb9\3\2\2\2\u1bf8\u1bbe\3\2\2\2\u1bf8\u1bc3\3\2"+
		"\2\2\u1bf8\u1bc8\3\2\2\2\u1bf8\u1bd0\3\2\2\2\u1bf8\u1bd1\3\2\2\2\u1bf8"+
		"\u1bd2\3\2\2\2\u1bf8\u1bd7\3\2\2\2\u1bf8\u1bdd\3\2\2\2\u1bf8\u1be3\3\2"+
		"\2\2\u1bf8\u1bec\3\2\2\2\u1bf8\u1bee\3\2\2\2\u1bf8\u1bf3\3\2\2\2\u1bf9"+
		"\u0357\3\2\2\2\u1bfa\u1bfd\5\u0408\u0205\2\u1bfb\u1bfd\7\u01e0\2\2\u1bfc"+
		"\u1bfa\3\2\2\2\u1bfc\u1bfb\3\2\2\2\u1bfd\u0359\3\2\2\2\u1bfe\u1c00\7\u01e0"+
		"\2\2\u1bff\u1bfe\3\2\2\2\u1bff\u1c00\3\2\2\2\u1c00\u1c01\3\2\2\2\u1c01"+
		"\u1c03\7\u01c6\2\2\u1c02\u1c04\7\u0181\2\2\u1c03\u1c02\3\2\2\2\u1c03\u1c04"+
		"\3\2\2\2\u1c04\u1c05\3\2\2\2\u1c05\u1c06\5\u0350\u01a9\2\u1c06\u035b\3"+
		"\2\2\2\u1c07\u1c09\7\u01e0\2\2\u1c08\u1c07\3\2\2\2\u1c08\u1c09\3\2\2\2"+
		"\u1c09\u1c0a\3\2\2\2\u1c0a\u1c0c\5\u02b0\u0159\2\u1c0b\u1c0d\7\u0181\2"+
		"\2\u1c0c\u1c0b\3\2\2\2\u1c0c\u1c0d\3\2\2\2\u1c0d\u1c0e\3\2\2\2\u1c0e\u1c0f"+
		"\5\u034e\u01a8\2\u1c0f\u035d\3\2\2\2\u1c10\u1c11\6\u01b0\u00b4\2\u1c11"+
		"\u1c12\7\"\2\2\u1c12\u1c13\7\u01be\2\2\u1c13\u1c16\5\u0360\u01b1\2\u1c14"+
		"\u1c15\7\u00fc\2\2\u1c15\u1c17\5\u040a\u0206\2\u1c16\u1c14\3\2\2\2\u1c16"+
		"\u1c17\3\2\2\2\u1c17\u1c19\3\2\2\2\u1c18\u1c1a\5\u0362\u01b2\2\u1c19\u1c18"+
		"\3\2\2\2\u1c19\u1c1a\3\2\2\2\u1c1a\u1c1c\3\2\2\2\u1c1b\u1c1d\5\u0366\u01b4"+
		"\2\u1c1c\u1c1b\3\2\2\2\u1c1c\u1c1d\3\2\2\2\u1c1d\u035f\3\2\2\2\u1c1e\u1c20"+
		"\7\u0222\2\2\u1c1f\u1c1e\3\2\2\2\u1c1f\u1c20\3\2\2\2\u1c20\u1c21\3\2\2"+
		"\2\u1c21\u1c23\7\u021b\2\2\u1c22\u1c24\5\u0364\u01b3\2\u1c23\u1c22\3\2"+
		"\2\2\u1c23\u1c24\3\2\2\2\u1c24\u1c25\3\2\2\2\u1c25\u1c27\7\u019b\2\2\u1c26"+
		"\u1c28\5\u03fe\u0200\2\u1c27\u1c26\3\2\2\2\u1c27\u1c28\3\2\2\2\u1c28\u1c29"+
		"\3\2\2\2\u1c29\u1c41\7\u019c\2\2\u1c2a\u1c2c\7\u0222\2\2\u1c2b\u1c2a\3"+
		"\2\2\2\u1c2b\u1c2c\3\2\2\2\u1c2c\u1c2d\3\2\2\2\u1c2d\u1c2e\7\u009e\2\2"+
		"\u1c2e\u1c2f\7\u019b\2\2\u1c2f\u1c30\5\u026a\u0136\2\u1c30\u1c31\7\u019c"+
		"\2\2\u1c31\u1c41\3\2\2\2\u1c32\u1c3e\tx\2\2\u1c33\u1c34\7\u019b\2\2\u1c34"+
		"\u1c35\5\u026a\u0136\2\u1c35\u1c36\7\u019c\2\2\u1c36\u1c3f\3\2\2\2\u1c37"+
		"\u1c38\6\u01b1\u00b5\2\u1c38\u1c39\7\\\2\2\u1c39\u1c3b\7\u019b\2\2\u1c3a"+
		"\u1c3c\5\u03fe\u0200\2\u1c3b\u1c3a\3\2\2\2\u1c3b\u1c3c\3\2\2\2\u1c3c\u1c3d"+
		"\3\2\2\2\u1c3d\u1c3f\7\u019c\2\2\u1c3e\u1c33\3\2\2\2\u1c3e\u1c37\3\2\2"+
		"\2\u1c3f\u1c41\3\2\2\2\u1c40\u1c1f\3\2\2\2\u1c40\u1c2b\3\2\2\2\u1c40\u1c32"+
		"\3\2\2\2\u1c41\u0361\3\2\2\2\u1c42\u1c43\7\u014f\2\2\u1c43\u1c45\7\u01be"+
		"\2\2\u1c44\u1c46\7\u0222\2\2\u1c45\u1c44\3\2\2\2\u1c45\u1c46\3\2\2\2\u1c46"+
		"\u1c51\3\2\2\2\u1c47\u1c48\7\u009e\2\2\u1c48\u1c49\7\u019b\2\2\u1c49\u1c4a"+
		"\5\u026a\u0136\2\u1c4a\u1c4b\7\u019c\2\2\u1c4b\u1c52\3\2\2\2\u1c4c\u1c4e"+
		"\7\u021b\2\2\u1c4d\u1c4f\5\u0364\u01b3\2\u1c4e\u1c4d\3\2\2\2\u1c4e\u1c4f"+
		"\3\2\2\2\u1c4f\u1c50\3\2\2\2\u1c50\u1c52\5\u0400\u0201\2\u1c51\u1c47\3"+
		"\2\2\2\u1c51\u1c4c\3\2\2\2\u1c52\u1c55\3\2\2\2\u1c53\u1c54\7\u0150\2\2"+
		"\u1c54\u1c56\5\u040a\u0206\2\u1c55\u1c53\3\2\2\2\u1c55\u1c56\3\2\2\2\u1c56"+
		"\u0363\3\2\2\2\u1c57\u1c58\6\u01b3\u00b6\2\u1c58\u1c59\7@\2\2\u1c59\u1c5a"+
		"\7\u0181\2\2\u1c5a\u1c5b\5\u040a\u0206\2\u1c5b\u0365\3\2\2\2\u1c5c\u1c5d"+
		"\7\u019b\2\2\u1c5d\u1c62\5\u0368\u01b5\2\u1c5e\u1c5f\7\u0198\2\2\u1c5f"+
		"\u1c61\5\u0368\u01b5\2\u1c60\u1c5e\3\2\2\2\u1c61\u1c64\3\2\2\2\u1c62\u1c60"+
		"\3\2\2\2\u1c62\u1c63\3\2\2\2\u1c63\u1c65\3\2\2\2\u1c64\u1c62\3\2\2\2\u1c65"+
		"\u1c66\7\u019c\2\2\u1c66\u0367\3\2\2\2\u1c67\u1c68\7\"\2\2\u1c68\u1c73"+
		"\5\u03fc\u01ff\2\u1c69\u1c6a\7\u02a1\2\2\u1c6a\u1c6b\7\u00b2\2\2\u1c6b"+
		"\u1c6e\7\u015c\2\2\u1c6c\u1c6f\5\u0370\u01b9\2\u1c6d\u1c6f\7\u0231\2\2"+
		"\u1c6e\u1c6c\3\2\2\2\u1c6e\u1c6d\3\2\2\2\u1c6f\u1c74\3\2\2\2\u1c70\u1c71"+
		"\7\u02a1\2\2\u1c71\u1c72\7\u0214\2\2\u1c72\u1c74\5\u036a\u01b6\2\u1c73"+
		"\u1c69\3\2\2\2\u1c73\u1c70\3\2\2\2\u1c73\u1c74\3\2\2\2\u1c74\u1c78\3\2"+
		"\2\2\u1c75\u1c77\5\u036c\u01b7\2\u1c76\u1c75\3\2\2\2\u1c77\u1c7a\3\2\2"+
		"\2\u1c78\u1c76\3\2\2\2\u1c78\u1c79\3\2\2\2\u1c79\u1c86\3\2\2\2\u1c7a\u1c78"+
		"\3\2\2\2\u1c7b\u1c7c\7\u019b\2\2\u1c7c\u1c81\5\u036e\u01b8\2\u1c7d\u1c7e"+
		"\7\u0198\2\2\u1c7e\u1c80\5\u036e\u01b8\2\u1c7f\u1c7d\3\2\2\2\u1c80\u1c83"+
		"\3\2\2\2\u1c81\u1c7f\3\2\2\2\u1c81\u1c82\3\2\2\2\u1c82\u1c84\3\2\2\2\u1c83"+
		"\u1c81\3\2\2\2\u1c84\u1c85\7\u019c\2\2\u1c85\u1c87\3\2\2\2\u1c86\u1c7b"+
		"\3\2\2\2\u1c86\u1c87\3\2\2\2\u1c87\u0369\3\2\2\2\u1c88\u1c95\5\u0370\u01b9"+
		"\2\u1c89\u1c8a\7\u019b\2\2\u1c8a\u1c8f\5\u0370\u01b9\2\u1c8b\u1c8c\7\u0198"+
		"\2\2\u1c8c\u1c8e\5\u0370\u01b9\2\u1c8d\u1c8b\3\2\2\2\u1c8e\u1c91\3\2\2"+
		"\2\u1c8f\u1c8d\3\2\2\2\u1c8f\u1c90\3\2\2\2\u1c90\u1c92\3\2\2\2\u1c91\u1c8f"+
		"\3\2\2\2\u1c92\u1c93\7\u019c\2\2\u1c93\u1c95\3\2\2\2\u1c94\u1c88\3\2\2"+
		"\2\u1c94\u1c89\3\2\2\2\u1c95\u036b\3\2\2\2\u1c96\u1c98\7\u0158\2\2\u1c97"+
		"\u1c99\7\u0181\2\2\u1c98\u1c97\3\2\2\2\u1c98\u1c99\3\2\2\2\u1c99\u1c9a"+
		"\3\2\2\2\u1c9a\u1cb9\5\u03fc\u01ff\2\u1c9b\u1c9d\7\u014a\2\2\u1c9c\u1c9b"+
		"\3\2\2\2\u1c9c\u1c9d\3\2\2\2\u1c9d\u1c9e\3\2\2\2\u1c9e\u1ca0\7\u0082\2"+
		"\2\u1c9f\u1ca1\7\u0181\2\2\u1ca0\u1c9f\3\2\2\2\u1ca0\u1ca1\3\2\2\2\u1ca1"+
		"\u1ca2\3\2\2\2\u1ca2\u1cb9\5\u03da\u01ee\2\u1ca3\u1ca5\7\u00f0\2\2\u1ca4"+
		"\u1ca6\7\u0181\2\2\u1ca5\u1ca4\3\2\2\2\u1ca5\u1ca6\3\2\2\2\u1ca6\u1ca7"+
		"\3\2\2\2\u1ca7\u1cb9\5\u040a\u0206\2\u1ca8\u1caa\ty\2\2\u1ca9\u1cab\7"+
		"\u0181\2\2\u1caa\u1ca9\3\2\2\2\u1caa\u1cab\3\2\2\2\u1cab\u1cac\3\2\2\2"+
		"\u1cac\u1cb9\5\u040a\u0206\2\u1cad\u1cae\tz\2\2\u1cae\u1cb0\7y\2\2\u1caf"+
		"\u1cb1\7\u0181\2\2\u1cb0\u1caf\3\2\2\2\u1cb0\u1cb1\3\2\2\2\u1cb1\u1cb2"+
		"\3\2\2\2\u1cb2\u1cb9\5\u041a\u020e\2\u1cb3\u1cb5\7\r\2\2\u1cb4\u1cb6\7"+
		"\u0181\2\2\u1cb5\u1cb4\3\2\2\2\u1cb5\u1cb6\3\2\2\2\u1cb6\u1cb7\3\2\2\2"+
		"\u1cb7\u1cb9\5\u041a\u020e\2\u1cb8\u1c96\3\2\2\2\u1cb8\u1c9c\3\2\2\2\u1cb8"+
		"\u1ca3\3\2\2\2\u1cb8\u1ca8\3\2\2\2\u1cb8\u1cad\3\2\2\2\u1cb8\u1cb3\3\2"+
		"\2\2\u1cb9\u036d\3\2\2\2\u1cba\u1cbb\7\u014f\2\2\u1cbb\u1cbf\5\u042c\u0217"+
		"\2\u1cbc\u1cbe\5\u036c\u01b7\2\u1cbd\u1cbc\3\2\2\2\u1cbe\u1cc1\3\2\2\2"+
		"\u1cbf\u1cbd\3\2\2\2\u1cbf\u1cc0\3\2\2\2\u1cc0\u036f\3\2\2\2\u1cc1\u1cbf"+
		"\3\2\2\2\u1cc2\u1cc3\7\u019b\2\2\u1cc3\u1cc8\5\u0372\u01ba\2\u1cc4\u1cc5"+
		"\7\u0198\2\2\u1cc5\u1cc7\5\u0372\u01ba\2\u1cc6\u1cc4\3\2\2\2\u1cc7\u1cca"+
		"\3\2\2\2\u1cc8\u1cc6\3\2\2\2\u1cc8\u1cc9\3\2\2\2\u1cc9\u1ccb\3\2\2\2\u1cca"+
		"\u1cc8\3\2\2\2\u1ccb\u1ccc\7\u019c\2\2\u1ccc\u0371\3\2\2\2\u1ccd\u1cd0"+
		"\5\u026a\u0136\2\u1cce\u1cd0\7\u0231\2\2\u1ccf\u1ccd\3\2\2\2\u1ccf\u1cce"+
		"\3\2\2\2\u1cd0\u0373\3\2\2\2\u1cd1\u1cd2\7u\2\2\u1cd2\u1cd3\7\u0181\2"+
		"\2\u1cd3\u1cd4\5\u0398\u01cd\2\u1cd4\u0375\3\2\2\2\u1cd5\u1cd6\7\u0209"+
		"\2\2\u1cd6\u1cd7\7\u01f2\2\2\u1cd7\u0377\3\2\2\2\u1cd8\u1cd9\7\u0209\2"+
		"\2\u1cd9\u1cda\5\u02b2\u015a\2\u1cda\u1cdb\7\u01f2\2\2\u1cdb\u0379\3\2"+
		"\2\2\u1cdc\u1cde\t{\2\2\u1cdd\u1cdc\3\2\2\2\u1cdd\u1cde\3\2\2\2\u1cde"+
		"\u1cdf\3\2\2\2\u1cdf\u1ce0\5\u037c\u01bf\2\u1ce0\u037b\3\2\2\2\u1ce1\u1ce2"+
		"\5\u03e8\u01f5\2\u1ce2\u1ce3\5\u037e\u01c0\2\u1ce3\u037d\3\2\2\2\u1ce4"+
		"\u1ce7\5\u0338\u019d\2\u1ce5\u1ce6\7\u01c6\2\2\u1ce6\u1ce8\5\u0350\u01a9"+
		"\2\u1ce7\u1ce5\3\2\2\2\u1ce7\u1ce8\3\2\2\2\u1ce8\u037f\3\2\2\2\u1ce9\u1cea"+
		"\7\u019b\2\2\u1cea\u1ceb\5\u03b6\u01dc\2\u1ceb\u1cec\7\u0198\2\2\u1cec"+
		"\u1ced\5\u03b6\u01dc\2\u1ced\u1cee\7\u019c\2\2\u1cee\u0381\3\2\2\2\u1cef"+
		"\u1cf4\5\u03c6\u01e4\2\u1cf0\u1cf1\7\u0198\2\2\u1cf1\u1cf3\5\u03c6\u01e4"+
		"\2\u1cf2\u1cf0\3\2\2\2\u1cf3\u1cf6\3\2\2\2\u1cf4\u1cf2\3\2\2\2\u1cf4\u1cf5"+
		"\3\2\2\2\u1cf5\u0383\3\2\2\2\u1cf6\u1cf4\3\2\2\2\u1cf7\u1cfc\5\u0386\u01c4"+
		"\2\u1cf8\u1cf9\7\u0198\2\2\u1cf9\u1cfb\5\u0386\u01c4\2\u1cfa\u1cf8\3\2"+
		"\2\2\u1cfb\u1cfe\3\2\2\2\u1cfc\u1cfa\3\2\2\2\u1cfc\u1cfd\3\2\2\2\u1cfd"+
		"\u0385\3\2\2\2\u1cfe\u1cfc\3\2\2\2\u1cff\u1d00\5\u03aa\u01d6\2\u1d00\u1d03"+
		"\7\u0181\2\2\u1d01\u1d04\5\u0260\u0131\2\u1d02\u1d04\7\u01e0\2\2\u1d03"+
		"\u1d01\3\2\2\2\u1d03\u1d02\3\2\2\2\u1d04\u0387\3\2\2\2\u1d05\u1d06\5\u02b0"+
		"\u0159\2\u1d06\u1d07\5\u034e\u01a8\2\u1d07\u0389\3\2\2\2\u1d08\u1d0a\7"+
		"\\\2\2\u1d09\u1d0b\5\u038c\u01c7\2\u1d0a\u1d09\3\2\2\2\u1d0b\u1d0c\3\2"+
		"\2\2\u1d0c\u1d0a\3\2\2\2\u1d0c\u1d0d\3\2\2\2\u1d0d\u038b\3\2\2\2\u1d0e"+
		"\u1d0f\7\u028a\2\2\u1d0f\u1d10\7\u01be\2\2\u1d10\u1d1b\5\u0418\u020d\2"+
		"\u1d11\u1d13\7\u024b\2\2\u1d12\u1d11\3\2\2\2\u1d12\u1d13\3\2\2\2\u1d13"+
		"\u1d14\3\2\2\2\u1d14\u1d15\7\u01ee\2\2\u1d15\u1d16\7\u01be\2\2\u1d16\u1d1b"+
		"\5\u0418\u020d\2\u1d17\u1d18\7\u01f0\2\2\u1d18\u1d19\7\u01be\2\2\u1d19"+
		"\u1d1b\5\u0418\u020d\2\u1d1a\u1d0e\3\2\2\2\u1d1a\u1d12\3\2\2\2\u1d1a\u1d17"+
		"\3\2\2\2\u1d1b\u038d\3\2\2\2\u1d1c\u1d1e\7\u0223\2\2\u1d1d\u1d1f\5\u0390"+
		"\u01c9\2\u1d1e\u1d1d\3\2\2\2\u1d1f\u1d20\3\2\2\2\u1d20\u1d1e\3\2\2\2\u1d20"+
		"\u1d21\3\2\2\2\u1d21\u038f\3\2\2\2\u1d22\u1d23\t|\2\2\u1d23\u1d24\7\u01be"+
		"\2\2\u1d24\u1d25\5\u0418\u020d\2\u1d25\u0391\3\2\2\2\u1d26\u1d2b\5\u0398"+
		"\u01cd\2\u1d27\u1d28\7\u0198\2\2\u1d28\u1d2a\5\u0398\u01cd\2\u1d29\u1d27"+
		"\3\2\2\2\u1d2a\u1d2d\3\2\2\2\u1d2b\u1d29\3\2\2\2\u1d2b\u1d2c\3\2\2\2\u1d2c"+
		"\u0393\3\2\2\2\u1d2d\u1d2b\3\2\2\2\u1d2e\u1d33\5\u0396\u01cc\2\u1d2f\u1d30"+
		"\7\u0198\2\2\u1d30\u1d32\5\u0396\u01cc\2\u1d31\u1d2f\3\2\2\2\u1d32\u1d35"+
		"\3\2\2\2\u1d33\u1d31\3\2\2\2\u1d33\u1d34\3\2\2\2\u1d34\u0395\3\2\2\2\u1d35"+
		"\u1d33\3\2\2\2\u1d36\u1d4b\5\u0398\u01cd\2\u1d37\u1d49\7\u00a1\2\2\u1d38"+
		"\u1d3b\7\u01be\2\2\u1d39\u1d3a\6\u01cc\u00b7\2\u1d3a\u1d3c\7\u00fd\2\2"+
		"\u1d3b\u1d39\3\2\2\2\u1d3b\u1d3c\3\2\2\2\u1d3c\u1d3d\3\2\2\2\u1d3d\u1d4a"+
		"\5\u0418\u020d\2\u1d3e\u1d3f\6\u01cc\u00b8\2\u1d3f\u1d40\7\u02ac\2\2\u1d40"+
		"\u1d47\5\u042c\u0217\2\u1d41\u1d45\7\u01b1\2\2\u1d42\u1d43\6\u01cc\u00b9"+
		"\2\u1d43\u1d45\7\u01be\2\2\u1d44\u1d41\3\2\2\2\u1d44\u1d42\3\2\2\2\u1d45"+
		"\u1d46\3\2\2\2\u1d46\u1d48\5\u0418\u020d\2\u1d47\u1d44\3\2\2\2\u1d47\u1d48"+
		"\3\2\2\2\u1d48\u1d4a\3\2\2\2\u1d49\u1d38\3\2\2\2\u1d49\u1d3e\3\2\2\2\u1d4a"+
		"\u1d4c\3\2\2\2\u1d4b\u1d37\3\2\2\2\u1d4b\u1d4c\3\2\2\2\u1d4c\u0397\3\2"+
		"\2\2\u1d4d\u1d51\5\u042c\u0217\2\u1d4e\u1d4f\7\u01a2\2\2\u1d4f\u1d52\5"+
		"\u042c\u0217\2\u1d50\u1d52\7\u01a3\2\2\u1d51\u1d4e\3\2\2\2\u1d51\u1d50"+
		"\3\2\2\2\u1d51\u1d52\3\2\2\2\u1d52\u1d58\3\2\2\2\u1d53\u1d55\7\u01d2\2"+
		"\2\u1d54\u1d56\5\u0432\u021a\2\u1d55\u1d54\3\2\2\2\u1d55\u1d56\3\2\2\2"+
		"\u1d56\u1d58\3\2\2\2\u1d57\u1d4d\3\2\2\2\u1d57\u1d53\3\2\2\2\u1d58\u0399"+
		"\3\2\2\2\u1d59\u1d5a\7\u0220\2\2\u1d5a\u1d5b\5\u0416\u020c\2\u1d5b\u039b"+
		"\3\2\2\2\u1d5c\u1d5f\5\u039a\u01ce\2\u1d5d\u1d5f\5\u013a\u009e\2\u1d5e"+
		"\u1d5c\3\2\2\2\u1d5e\u1d5d\3\2\2\2\u1d5f\u039d\3\2\2\2\u1d60\u1d61\6\u01d0"+
		"\u00ba\2\u1d61\u1d62\t}\2\2\u1d62\u039f\3\2\2\2\u1d63\u1d64\t~\2\2\u1d64"+
		"\u03a1\3\2\2\2\u1d65\u1d66\6\u01d2\u00bb\2\u1d66\u1d67\7\"\2\2\u1d67\u1d68"+
		"\5\u0400\u0201\2\u1d68\u03a3\3\2\2\2\u1d69\u1d6f\5\u0406\u0204\2\u1d6a"+
		"\u1d6c\5\u0402\u0202\2\u1d6b\u1d6d\5\u0406\u0204\2\u1d6c\u1d6b\3\2\2\2"+
		"\u1d6c\u1d6d\3\2\2\2\u1d6d\u1d6f\3\2\2\2\u1d6e\u1d69\3\2\2\2\u1d6e\u1d6a"+
		"\3\2\2\2\u1d6f\u03a5\3\2\2\2\u1d70\u1d71\5\u03fc\u01ff\2\u1d71\u03a7\3"+
		"\2\2\2\u1d72\u1d73\7\u019b\2\2\u1d73\u1d78\5\u03a6\u01d4\2\u1d74\u1d75"+
		"\7\u0198\2\2\u1d75\u1d77\5\u03a6\u01d4\2\u1d76\u1d74\3\2\2\2\u1d77\u1d7a"+
		"\3\2\2\2\u1d78\u1d76\3\2\2\2\u1d78\u1d79\3\2\2\2\u1d79\u1d7b\3\2\2\2\u1d7a"+
		"\u1d78\3\2\2\2\u1d7b\u1d7c\7\u019c\2\2\u1d7c\u03a9\3\2\2\2\u1d7d\u1d7e"+
		"\5\u03a4\u01d3\2\u1d7e\u03ab\3\2\2\2\u1d7f\u1d82\5\u03aa\u01d6\2\u1d80"+
		"\u1d82\5\u03b2\u01da\2\u1d81\u1d7f\3\2\2\2\u1d81\u1d80\3\2\2\2\u1d82\u03ad"+
		"\3\2\2\2\u1d83\u1d84\5\u03fc\u01ff\2\u1d84\u03af\3\2\2\2\u1d85\u1d86\5"+
		"\u03a4\u01d3\2\u1d86\u03b1\3\2\2\2\u1d87\u1d8e\5\u03fc\u01ff\2\u1d88\u1d89"+
		"\7\u0197\2\2\u1d89\u1d8f\7\u018b\2\2\u1d8a\u1d8b\5\u0406\u0204\2\u1d8b"+
		"\u1d8c\7\u0197\2\2\u1d8c\u1d8d\7\u018b\2\2\u1d8d\u1d8f\3\2\2\2\u1d8e\u1d88"+
		"\3\2\2\2\u1d8e\u1d8a\3\2\2\2\u1d8f\u03b3\3\2\2\2\u1d90\u1d91\5\u03fc\u01ff"+
		"\2\u1d91\u03b5\3\2\2\2\u1d92\u1d93\5\u03fc\u01ff\2\u1d93\u03b7\3\2\2\2"+
		"\u1d94\u1d95\5\u0402\u0202\2\u1d95\u03b9\3\2\2\2\u1d96\u1d97\5\u0402\u0202"+
		"\2\u1d97\u03bb\3\2\2\2\u1d98\u1d99\5\u0402\u0202\2\u1d99\u03bd\3\2\2\2"+
		"\u1d9a\u1d9b\5\u0402\u0202\2\u1d9b\u03bf\3\2\2\2\u1d9c\u1d9d\5\u0402\u0202"+
		"\2\u1d9d\u03c1\3\2\2\2\u1d9e\u1d9f\5\u0402\u0202\2\u1d9f\u03c3\3\2\2\2"+
		"\u1da0\u1da3\5\u0402\u0202\2\u1da1\u1da3\5\u0406\u0204\2\u1da2\u1da0\3"+
		"\2\2\2\u1da2\u1da1\3\2\2\2\u1da3\u03c5\3\2\2\2\u1da4\u1da7\5\u0402\u0202"+
		"\2\u1da5\u1da7\5\u0406\u0204\2\u1da6\u1da4\3\2\2\2\u1da6\u1da5\3\2\2\2"+
		"\u1da7\u03c7\3\2\2\2\u1da8\u1da9\5\u03fc\u01ff\2\u1da9\u03c9\3\2\2\2\u1daa"+
		"\u1dab\5\u03fc\u01ff\2\u1dab\u03cb\3\2\2\2\u1dac\u1dad\5\u03fc\u01ff\2"+
		"\u1dad\u03cd\3\2\2\2\u1dae\u1daf\5\u03fc\u01ff\2\u1daf\u03cf\3\2\2\2\u1db0"+
		"\u1db1\5\u0402\u0202\2\u1db1\u03d1\3\2\2\2\u1db2\u1db3\5\u0402\u0202\2"+
		"\u1db3\u03d3\3\2\2\2\u1db4\u1db5\5\u03fc\u01ff\2\u1db5\u03d5\3\2\2\2\u1db6"+
		"\u1db7\5\u042c\u0217\2\u1db7\u03d7\3\2\2\2\u1db8\u1db9\5\u042c\u0217\2"+
		"\u1db9\u03d9\3\2\2\2\u1dba\u1dbb\5\u042c\u0217\2\u1dbb\u03db\3\2\2\2\u1dbc"+
		"\u1dbf\5\u0402\u0202\2\u1dbd\u1dbf\5\u0406\u0204\2\u1dbe\u1dbc\3\2\2\2"+
		"\u1dbe\u1dbd\3\2\2\2\u1dbf\u03dd\3\2\2\2\u1dc0\u1dc1\5\u03fc\u01ff\2\u1dc1"+
		"\u1dc2\5\u0406\u0204\2\u1dc2\u03df\3\2\2\2\u1dc3\u1dcb\5\u03fc\u01ff\2"+
		"\u1dc4\u1dc5\7\u0197\2\2\u1dc5\u1dcc\7\u018b\2\2\u1dc6\u1dc9\5\u0406\u0204"+
		"\2\u1dc7\u1dc8\7\u0197\2\2\u1dc8\u1dca\7\u018b\2\2\u1dc9\u1dc7\3\2\2\2"+
		"\u1dc9\u1dca\3\2\2\2\u1dca\u1dcc\3\2\2\2\u1dcb\u1dc4\3\2\2\2\u1dcb\u1dc6"+
		"\3\2\2\2\u1dcb\u1dcc\3\2\2\2\u1dcc\u03e1\3\2\2\2\u1dcd\u1dd0\5\u0402\u0202"+
		"\2\u1dce\u1dd0\5\u0406\u0204\2\u1dcf\u1dcd\3\2\2\2\u1dcf\u1dce\3\2\2\2"+
		"\u1dd0\u03e3\3\2\2\2\u1dd1\u1dd6\5\u03e2\u01f2\2\u1dd2\u1dd3\7\u0198\2"+
		"\2\u1dd3\u1dd5\5\u03e2\u01f2\2\u1dd4\u1dd2\3\2\2\2\u1dd5\u1dd8\3\2\2\2"+
		"\u1dd6\u1dd4\3\2\2\2\u1dd6\u1dd7\3\2\2\2\u1dd7\u03e5\3\2\2\2\u1dd8\u1dd6"+
		"\3\2\2\2\u1dd9\u1dde\5\u03e0\u01f1\2\u1dda\u1ddb\7\u0198\2\2\u1ddb\u1ddd"+
		"\5\u03e0\u01f1\2\u1ddc\u1dda\3\2\2\2\u1ddd\u1de0\3\2\2\2\u1dde\u1ddc\3"+
		"\2\2\2\u1dde\u1ddf\3\2\2\2\u1ddf\u03e7\3\2\2\2\u1de0\u1dde\3\2\2\2\u1de1"+
		"\u1de2\5\u03fc\u01ff\2\u1de2\u03e9\3\2\2\2\u1de3\u1de6\5\u03fa\u01fe\2"+
		"\u1de4\u1de6\5\u043e\u0220\2\u1de5\u1de3\3\2\2\2\u1de5\u1de4\3\2\2\2\u1de6"+
		"\u03eb\3\2\2\2\u1de7\u1de8\5\u03ea\u01f6\2\u1de8\u03ed\3\2\2\2\u1de9\u1dec"+
		"\5\u03fa\u01fe\2\u1dea\u1dec\5\u0444\u0223\2\u1deb\u1de9\3\2\2\2\u1deb"+
		"\u1dea\3\2\2\2\u1dec\u03ef\3\2\2\2\u1ded\u1dee\5\u03ee\u01f8\2\u1dee\u03f1"+
		"\3\2\2\2\u1def\u1df0\5\u03fc\u01ff\2\u1df0\u03f3\3\2\2\2\u1df1\u1df2\5"+
		"\u0416\u020c\2\u1df2\u03f5\3\2\2\2\u1df3\u1df4\5\u03fc\u01ff\2\u1df4\u03f7"+
		"\3\2\2\2\u1df5\u1df6\5\u03fc\u01ff\2\u1df6\u03f9\3\2\2\2\u1df7\u1dfb\t"+
		"\177\2\2\u1df8\u1df9\6\u01fe\u00bc\2\u1df9\u1dfb\7\u02f7\2\2\u1dfa\u1df7"+
		"\3\2\2\2\u1dfa\u1df8\3\2\2\2\u1dfb\u03fb\3\2\2\2\u1dfc\u1dff\5\u03fa\u01fe"+
		"\2\u1dfd\u1dff\5\u043c\u021f\2\u1dfe\u1dfc\3\2\2\2\u1dfe\u1dfd\3\2\2\2"+
		"\u1dff\u03fd\3\2\2\2\u1e00\u1e05\5\u03fc\u01ff\2\u1e01\u1e02\7\u0198\2"+
		"\2\u1e02\u1e04\5\u03fc\u01ff\2\u1e03\u1e01\3\2\2\2\u1e04\u1e07\3\2\2\2"+
		"\u1e05\u1e03\3\2\2\2\u1e05\u1e06\3\2\2\2\u1e06\u03ff\3\2\2\2\u1e07\u1e05"+
		"\3\2\2\2\u1e08\u1e09\7\u019b\2\2\u1e09\u1e0a\5\u03fe\u0200\2\u1e0a\u1e0b"+
		"\7\u019c\2\2\u1e0b\u0401\3\2\2\2\u1e0c\u1e0e\5\u03fc\u01ff\2\u1e0d\u1e0f"+
		"\5\u0406\u0204\2\u1e0e\u1e0d\3\2\2\2\u1e0e\u1e0f\3\2\2\2\u1e0f\u0403\3"+
		"\2\2\2\u1e10\u1e15\5\u03fc\u01ff\2\u1e11\u1e13\5\u0406\u0204\2\u1e12\u1e14"+
		"\5\u0406\u0204\2\u1e13\u1e12\3\2\2\2\u1e13\u1e14\3\2\2\2\u1e14\u1e16\3"+
		"\2\2\2\u1e15\u1e11\3\2\2\2\u1e15\u1e16\3\2\2\2\u1e16\u1e1c\3\2\2\2\u1e17"+
		"\u1e18\6\u0203\u00bd\2\u1e18\u1e19\5\u0406\u0204\2\u1e19\u1e1a\5\u0406"+
		"\u0204\2\u1e1a\u1e1c\3\2\2\2\u1e1b\u1e10\3\2\2\2\u1e1b\u1e17\3\2\2\2\u1e1c"+
		"\u0405\3\2\2\2\u1e1d\u1e1e\7\u0197\2\2\u1e1e\u1e1f\5\u03fc\u01ff\2\u1e1f"+
		"\u0407\3\2\2\2\u1e20\u1e21\t\u0080\2\2\u1e21\u0409\3\2\2\2\u1e22\u1e23"+
		"\t\u0081\2\2\u1e23\u040b\3\2\2\2\u1e24\u1e25\t\u0082\2\2\u1e25\u040d\3"+
		"\2\2\2\u1e26\u1e27\t\u0083\2\2\u1e27\u040f\3\2\2\2\u1e28\u1e37\5\u041a"+
		"\u020e\2\u1e29\u1e37\5\u0420\u0211\2\u1e2a\u1e37\5\u0426\u0214\2\u1e2b"+
		"\u1e37\5\u0424\u0213\2\u1e2c\u1e37\5\u0422\u0212\2\u1e2d\u1e2f\7\u02f3"+
		"\2\2\u1e2e\u1e2d\3\2\2\2\u1e2e\u1e2f\3\2\2\2\u1e2f\u1e30\3\2\2\2\u1e30"+
		"\u1e37\7\u01a7\2\2\u1e31\u1e33\6\u0209\u00be\2\u1e32\u1e34\7\u02f3\2\2"+
		"\u1e33\u1e32\3\2\2\2\u1e33\u1e34\3\2\2\2\u1e34\u1e35\3\2\2\2\u1e35\u1e37"+
		"\7\u01a8\2\2\u1e36\u1e28\3\2\2\2\u1e36\u1e29\3\2\2\2\u1e36\u1e2a\3\2\2"+
		"\2\u1e36\u1e2b\3\2\2\2\u1e36\u1e2c\3\2\2\2\u1e36\u1e2e\3\2\2\2\u1e36\u1e31"+
		"\3\2\2\2\u1e37\u0411\3\2\2\2\u1e38\u1e3e\5\u0410\u0209\2\u1e39\u1e3a\7"+
		"\u0189\2\2\u1e3a\u1e3e\5\u0408\u0205\2\u1e3b\u1e3c\7\u018a\2\2\u1e3c\u1e3e"+
		"\5\u0408\u0205\2\u1e3d\u1e38\3\2\2\2\u1e3d\u1e39\3\2\2\2\u1e3d\u1e3b\3"+
		"\2\2\2\u1e3e\u0413\3\2\2\2\u1e3f\u1e40\7\u019b\2\2\u1e40\u1e45\5\u0418"+
		"\u020d\2\u1e41\u1e42\7\u0198\2\2\u1e42\u1e44\5\u0418\u020d\2\u1e43\u1e41"+
		"\3\2\2\2\u1e44\u1e47\3\2\2\2\u1e45\u1e43\3\2\2\2\u1e45\u1e46\3\2\2\2\u1e46"+
		"\u1e48\3\2\2\2\u1e47\u1e45\3\2\2\2\u1e48\u1e49\7\u019c\2\2\u1e49\u0415"+
		"\3\2\2\2\u1e4a\u1e4e\7\u02f8\2\2\u1e4b\u1e4c\6\u020c\u00bf\2\u1e4c\u1e4e"+
		"\7\u02f7\2\2\u1e4d\u1e4a\3\2\2\2\u1e4d\u1e4b\3\2\2\2\u1e4e\u0417\3\2\2"+
		"\2\u1e4f\u1e53\5\u0416\u020c\2\u1e50\u1e53\7\u01a7\2\2\u1e51\u1e53\7\u01a8"+
		"\2\2\u1e52\u1e4f\3\2\2\2\u1e52\u1e50\3\2\2\2\u1e52\u1e51\3\2\2\2\u1e53"+
		"\u0419\3\2\2\2\u1e54\u1e56\7\u02f3\2\2\u1e55\u1e54\3\2\2\2\u1e55\u1e56"+
		"\3\2\2\2\u1e56\u1e57\3\2\2\2\u1e57\u1e5a\5\u0416\u020c\2\u1e58\u1e5a\7"+
		"\u02f5\2\2\u1e59\u1e55\3\2\2\2\u1e59\u1e58\3\2\2\2\u1e5a\u1e5e\3\2\2\2"+
		"\u1e5b\u1e5d\5\u0416\u020c\2\u1e5c\u1e5b\3\2\2\2\u1e5d\u1e60\3\2\2\2\u1e5e"+
		"\u1e5c\3\2\2\2\u1e5e\u1e5f\3\2\2\2\u1e5f\u041b\3\2\2\2\u1e60\u1e5e\3\2"+
		"\2\2\u1e61\u1e62\5\u0416\u020c\2\u1e62\u1e63\6\u020f\u00c0\3\u1e63\u041d"+
		"\3\2\2\2\u1e64\u1e69\5\u0416\u020c\2\u1e65\u1e66\7\u0198\2\2\u1e66\u1e68"+
		"\5\u0416\u020c\2\u1e67\u1e65\3\2\2\2\u1e68\u1e6b\3\2\2\2\u1e69\u1e67\3"+
		"\2\2\2\u1e69\u1e6a\3\2\2\2\u1e6a\u041f\3\2\2\2\u1e6b\u1e69\3\2\2\2\u1e6c"+
		"\u1e6d\t\u0082\2\2\u1e6d\u0421\3\2\2\2\u1e6e\u1e6f\t\u0084\2\2\u1e6f\u0423"+
		"\3\2\2\2\u1e70\u1e71\t\u0085\2\2\u1e71\u0425\3\2\2\2\u1e72\u1e73\7r\2"+
		"\2\u1e73\u1e79\7\u02f8\2\2\u1e74\u1e75\7\u0162\2\2\u1e75\u1e79\7\u02f8"+
		"\2\2\u1e76\u1e77\7\u015f\2\2\u1e77\u1e79\7\u02f8\2\2\u1e78\u1e72\3\2\2"+
		"\2\u1e78\u1e74\3\2\2\2\u1e78\u1e76\3\2\2\2\u1e79\u0427\3\2\2\2\u1e7a\u1e7d"+
		"\5\u0340\u01a1\2\u1e7b\u1e7d\5\u042a\u0216\2\u1e7c\u1e7a\3\2\2\2\u1e7c"+
		"\u1e7b\3\2\2\2\u1e7d\u0429\3\2\2\2\u1e7e\u1e7f\7\u019b\2\2\u1e7f\u1e80"+
		"\7\u017e\2\2\u1e80\u1e81\7\u0198\2\2\u1e81\u1e82\7\u017e\2\2\u1e82\u1e83"+
		"\7\u019c\2\2\u1e83\u042b\3\2\2\2\u1e84\u1e87\7\u02f8\2\2\u1e85\u1e87\5"+
		"\u03fc\u01ff\2\u1e86\u1e84\3\2\2\2\u1e86\u1e85\3\2\2\2\u1e87\u042d\3\2"+
		"\2\2\u1e88\u1e8b\5\u03ee\u01f8\2\u1e89\u1e8b\5\u0416\u020c\2\u1e8a\u1e88"+
		"\3\2\2\2\u1e8a\u1e89\3\2\2\2\u1e8b\u042f\3\2\2\2\u1e8c\u1e8f\5\u040e\u0208"+
		"\2\u1e8d\u1e8f\5\u03fa\u01fe\2\u1e8e\u1e8c\3\2\2\2\u1e8e\u1e8d\3\2\2\2"+
		"\u1e8f\u0431\3\2\2\2\u1e90\u1e91\7\u019b\2\2\u1e91\u1e92\7\u019c\2\2\u1e92"+
		"\u0433\3\2\2\2\u1e93\u1e94\t\u0086\2\2\u1e94\u0435\3\2\2\2\u1e95\u1e96"+
		"\t\u0087\2\2\u1e96\u0437\3\2\2\2\u1e97\u1e98\7\u009d\2\2\u1e98\u1e9e\7"+
		"\u0197\2\2\u1e99\u1e9a\7\u00b6\2\2\u1e9a\u1e9e\7\u0197\2\2\u1e9b\u1e9c"+
		"\7\u0136\2\2\u1e9c\u1e9e\7\u0197\2\2\u1e9d\u1e97\3\2\2\2\u1e9d\u1e99\3"+
		"\2\2\2\u1e9d\u1e9b\3\2\2\2\u1e9e\u0439\3\2\2\2\u1e9f\u1ea0\7\u02b4\2\2"+
		"\u1ea0\u1eaa\7\u0197\2\2\u1ea1\u1ea2\7\u02c3\2\2\u1ea2\u1eaa\7\u0197\2"+
		"\2\u1ea3\u1ea4\7\u009d\2\2\u1ea4\u1eaa\7\u0197\2\2\u1ea5\u1ea6\7\u00b6"+
		"\2\2\u1ea6\u1eaa\7\u0197\2\2\u1ea7\u1ea8\7\u0136\2\2\u1ea8\u1eaa\7\u0197"+
		"\2\2\u1ea9\u1e9f\3\2\2\2\u1ea9\u1ea1\3\2\2\2\u1ea9\u1ea3\3\2\2\2\u1ea9"+
		"\u1ea5\3\2\2\2\u1ea9\u1ea7\3\2\2\2\u1eaa\u043b\3\2\2\2\u1eab\u1eb3\5\u043e"+
		"\u0220\2\u1eac\u1eb3\5\u0440\u0221\2\u1ead\u1eb3\7\23\2\2\u1eae\u1eaf"+
		"\6\u021f\u00c1\2\u1eaf\u1eb3\7:\2\2\u1eb0\u1eb1\6\u021f\u00c2\2\u1eb1"+
		"\u1eb3\7\u02ec\2\2\u1eb2\u1eab\3\2\2\2\u1eb2\u1eac\3\2\2\2\u1eb2\u1ead"+
		"\3\2\2\2\u1eb2\u1eae\3\2\2\2\u1eb2\u1eb0\3\2\2\2\u1eb3\u043d\3\2\2\2\u1eb4"+
		"\u1ebf\5\u0442\u0222\2\u1eb5\u1ebf\7\u0087\2\2\u1eb6\u1ebf\7\u0093\2\2"+
		"\u1eb7\u1ebf\7\u00f1\2\2\u1eb8\u1ebf\7\u0107\2\2\u1eb9\u1ebf\7\u010b\2"+
		"\2\u1eba\u1ebf\7\u011a\2\2\u1ebb\u1ebf\7\u011d\2\2\u1ebc\u1ebf\7\u02e7"+
		"\2\2\u1ebd\u1ebf\7\u0151\2\2\u1ebe\u1eb4\3\2\2\2\u1ebe\u1eb5\3\2\2\2\u1ebe"+
		"\u1eb6\3\2\2\2\u1ebe\u1eb7\3\2\2\2\u1ebe\u1eb8\3\2\2\2\u1ebe\u1eb9\3\2"+
		"\2\2\u1ebe\u1eba\3\2\2\2\u1ebe\u1ebb\3\2\2\2\u1ebe\u1ebc\3\2\2\2\u1ebe"+
		"\u1ebd\3\2\2\2\u1ebf\u043f\3\2\2\2\u1ec0\u1ec6\t\u0088\2\2\u1ec1\u1ec2"+
		"\6\u0221\u00c3\2\u1ec2\u1ec6\7:\2\2\u1ec3\u1ec4\6\u0221\u00c4\2\u1ec4"+
		"\u1ec6\7\u00a4\2\2\u1ec5\u1ec0\3\2\2\2\u1ec5\u1ec1\3\2\2\2\u1ec5\u1ec3"+
		"\3\2\2\2\u1ec6\u0441\3\2\2\2\u1ec7\u1ecf\t\u0089\2\2\u1ec8\u1ec9\6\u0222"+
		"\u00c5\2\u1ec9\u1ecf\7:\2\2\u1eca\u1ecb\6\u0222\u00c6\2\u1ecb\u1ecf\t"+
		"\u008a\2\2\u1ecc\u1ecd\6\u0222\u00c7\2\u1ecd\u1ecf\t\u008b\2\2\u1ece\u1ec7"+
		"\3\2\2\2\u1ece\u1ec8\3\2\2\2\u1ece\u1eca\3\2\2\2\u1ece\u1ecc\3\2\2\2\u1ecf"+
		"\u0443\3\2\2\2\u1ed0\u1ed3\5\u0442\u0222\2\u1ed1\u1ed3\5\u0440\u0221\2"+
		"\u1ed2\u1ed0\3\2\2\2\u1ed2\u1ed1\3\2\2\2\u1ed3\u0445\3\2\2\2\u0419\u0449"+
		"\u044d\u0450\u0452\u0478\u0480\u0485\u0494\u049b\u04a2\u04a5\u04ac\u04b1"+
		"\u04b4\u04b9\u04bf\u04c1\u04c5\u04c9\u04d2\u04d6\u04db\u04e0\u04e4\u04e8"+
		"\u04ec\u04f3\u04f7\u04fc\u0501\u0508\u050b\u0511\u0514\u051b\u0524\u0529"+
		"\u052e\u0536\u053c\u0540\u0545\u054e\u0554\u055a\u0560\u056b\u0571\u057a"+
		"\u0588\u058c\u0592\u0596\u059e\u05a2\u05a7\u05aa\u05b0\u05b6\u05bc\u05c0"+
		"\u05c5\u05c9\u05cd\u05d5\u05d7\u05de\u05e6\u05ee\u05f8\u0608\u0611\u0616"+
		"\u0622\u0627\u062b\u062f\u0633\u0638\u063c\u063e\u064a\u064f\u0655\u065e"+
		"\u0663\u0666\u066f\u0674\u0677\u067c\u0681\u0685\u068a\u068f\u0693\u0697"+
		"\u069b\u069f\u06a4\u06a9\u06ac\u06af\u06b2\u06b5\u06bc\u06c3\u06c7\u06dd"+
		"\u06e2\u06e8\u06ed\u06f1\u06f5\u06fc\u06ff\u0702\u0705\u070e\u0715\u071a"+
		"\u071d\u0720\u0726\u072a\u072f\u0732\u073f\u0742\u0748\u0756\u0759\u0761"+
		"\u0768\u0773\u0776\u077b\u078e\u0792\u0795\u0799\u079f\u07a9\u07b3\u07b6"+
		"\u07b9\u07be\u07c4\u07d2\u07d6\u07db\u07e0\u07e5\u07ea\u07ee\u07f2\u07f8"+
		"\u07fb\u080d\u0820\u082c\u082f\u0833\u0838\u083d\u0842\u0847\u084c\u0851"+
		"\u0855\u0859\u085f\u0865\u0868\u086c\u086f\u0872\u087b\u087e\u0893\u089e"+
		"\u08a7\u08aa\u08b0\u08b2\u08b6\u08be\u08cc\u08d4\u08da\u08dd\u08ee\u0900"+
		"\u0905\u090c\u0913\u091a\u0920\u0927\u092f\u0934\u0937\u093b\u093f\u0942"+
		"\u0947\u094d\u0951\u0955\u095c\u0961\u0964\u0969\u0970\u0974\u0979\u0982"+
		"\u098d\u0996\u09a3\u09a6\u09aa\u09b0\u09b8\u09bc\u09bf\u09c2\u09c5\u09c7"+
		"\u09cd\u09cf\u09de\u09e4\u09eb\u09ee\u09f0\u09f2\u09fc\u09fe\u0a02\u0a05"+
		"\u0a08\u0a0c\u0a12\u0a15\u0a1b\u0a1e\u0a27\u0a30\u0a34\u0a38\u0a3e\u0a43"+
		"\u0a48\u0a4d\u0a51\u0a5d\u0a60\u0a65\u0a6b\u0a6e\u0a71\u0a74\u0a77\u0a7e"+
		"\u0a89\u0a8c\u0a90\u0a94\u0a9a\u0a9f\u0aa3\u0aa8\u0aab\u0aaf\u0ab5\u0aba"+
		"\u0ac3\u0ac7\u0acb\u0ace\u0ad3\u0ad6\u0ad8\u0adc\u0adf\u0ae5\u0ae7\u0aee"+
		"\u0af2\u0af4\u0af9\u0afd\u0b01\u0b07\u0b0f\u0b14\u0b17\u0b1a\u0b1d\u0b20"+
		"\u0b24\u0b33\u0b37\u0b3d\u0b40\u0b43\u0b49\u0b4e\u0b52\u0b55\u0b5d\u0b5f"+
		"\u0b6c\u0b78\u0b7c\u0b7f\u0b82\u0b87\u0b8d\u0b9d\u0bb1\u0bba\u0bbe\u0bc5"+
		"\u0bca\u0bd3\u0bda\u0be5\u0bec\u0bf7\u0bfe\u0c02\u0c08\u0c0d\u0c12\u0c16"+
		"\u0c1c\u0c22\u0c24\u0c27\u0c2b\u0c36\u0c3b\u0c44\u0c4c\u0c51\u0c55\u0c5b"+
		"\u0c5e\u0c61\u0c65\u0c69\u0c74\u0c78\u0c7b\u0c7e\u0c83\u0c8b\u0c92\u0c99"+
		"\u0cad\u0cb9\u0cbe\u0cc5\u0cc9\u0ccd\u0ccf\u0cdd\u0ce2\u0ceb\u0cf1\u0cfa"+
		"\u0cfe\u0d02\u0d0e\u0d15\u0d1a\u0d1e\u0d22\u0d25\u0d2b\u0d2e\u0d31\u0d37"+
		"\u0d3e\u0d43\u0d47\u0d4a\u0d4d\u0d50\u0d52\u0d56\u0d5e\u0d66\u0d6d\u0d73"+
		"\u0d77\u0d7c\u0d7f\u0d82\u0d85\u0d87\u0d8c\u0d95\u0da2\u0da4\u0da8\u0dae"+
		"\u0db1\u0db4\u0dba\u0dc1\u0dc3\u0dcb\u0dd1\u0dd6\u0dd9\u0de0\u0de2\u0deb"+
		"\u0df4\u0dfd\u0e06\u0e0a\u0e11\u0e14\u0e16\u0e20\u0e2a\u0e31\u0e7a\u0e88"+
		"\u0e90\u0e93\u0e9f\u0ea4\u0eaa\u0eb1\u0eb8\u0ebf\u0ec6\u0ecd\u0ed4\u0ed7"+
		"\u0ede\u0ee6\u0eee\u0ef8\u0efe\u0f02\u0f06\u0f0b\u0f0e\u0f10\u0f19\u0f1f"+
		"\u0f26\u0f2b\u0f30\u0f35\u0f38\u0f3f\u0f4c\u0f52\u0f58\u0f5f\u0f67\u0f6d"+
		"\u0f6f\u0f7b\u0f81\u0f96\u0f98\u0f9f\u0fa7\u0faa\u0fad\u0fb0\u0fb6\u0fb9"+
		"\u0fbe\u0fc9\u0fcb\u0fd6\u0fdc\u0fe5\u0fe7\u0fed\u0ff9\u0ffe\u1000\u1004"+
		"\u100a\u100d\u1018\u101a\u1020\u1027\u102d\u103e\u104e\u1053\u105b\u1064"+
		"\u1069\u106f\u1072\u1074\u107c\u108b\u1092\u1098\u109e\u10a0\u10a4\u10af"+
		"\u10b9\u10be\u10c3\u10c8\u10cb\u10cf\u10d4\u10dd\u10e9\u10f7\u1100\u1102"+
		"\u1109\u110f\u1113\u111d\u1124\u1128\u112e\u1132\u1139\u114a\u1153\u1159"+
		"\u115e\u1175\u1178\u117c\u1181\u1186\u118c\u118e\u11a4\u11a8\u11aa\u11ae"+
		"\u11ba\u11c1\u11ca\u11d1\u11d4\u11d8\u11db\u11de\u11e2\u11e5\u11e9\u11ec"+
		"\u11f1\u11f4\u11f9\u11fc\u1205\u1209\u120f\u1212\u121b\u121d\u1223\u1227"+
		"\u122a\u122d\u1231\u1237\u123a\u123d\u1247\u124b\u1254\u1257\u125c\u125f"+
		"\u1262\u1266\u1269\u126e\u1272\u127a\u1288\u129a\u129f\u12a4\u12af\u12b5"+
		"\u12b7\u12bb\u12be\u12cc\u12d6\u12da\u12e2\u12e5\u12e9\u12f3\u12f7\u12fe"+
		"\u1303\u130b\u1310\u1316\u131d\u1322\u1328\u132f\u1339\u133b\u1343\u1348"+
		"\u134c\u134f\u1356\u135b\u135f\u136b\u1373\u1377\u137a\u137d\u1381\u1385"+
		"\u138a\u1390\u1394\u139f\u13a2\u13a5\u13a8\u13b0\u13b4\u13b9\u13c1\u13c9"+
		"\u13cf\u13da\u13e4\u13ea\u13f8\u13fb\u13ff\u140a\u140c\u1415\u1423\u1425"+
		"\u142c\u1432\u143a\u1445\u1449\u1466\u1468\u146f\u1480\u1487\u14a2\u14a9"+
		"\u14ac\u14ce\u14d6\u14d8\u14e1\u14e6\u14ec\u14f4\u14fb\u1501\u1506\u150c"+
		"\u1511\u1516\u151c\u1521\u1527\u152f\u1537\u153f\u1547\u154c\u1552\u1557"+
		"\u155b\u155f\u1564\u1566\u157b\u157f\u1588\u1594\u1597\u159b\u15a0\u15a5"+
		"\u15a9\u15b3\u15bc\u15be\u15c1\u15ca\u15d1\u15db\u15e0\u15e2\u15e9\u15ef"+
		"\u1612\u163d\u1657\u165d\u1661\u167c\u1688\u1695\u1699\u169d\u16c2\u1706"+
		"\u1711\u1715\u1721\u1726\u1733\u1747\u174b\u175c\u175f\u1764\u1767\u1770"+
		"\u1774\u177a\u1780\u1784\u178f\u1795\u1797\u179e\u17a5\u17a9\u17b0\u17b5"+
		"\u17ba\u17bd\u17c2\u17c6\u17ca\u17ce\u17d2\u17df\u17e3\u17e6\u17ea\u17ee"+
		"\u17f2\u17f7\u17fb\u17ff\u1803\u180a\u1810\u1818\u1825\u182a\u183e\u184e"+
		"\u1858\u185c\u1863\u1866\u1871\u187a\u187d\u1884\u1889\u18a3\u18a9\u18b0"+
		"\u18b4\u18be\u18c2\u18cf\u18db\u18ed\u18f5\u18ff\u1902\u1907\u190b\u1912"+
		"\u1917\u191e\u1926\u1929\u192e\u1931\u1939\u193c\u1954\u1958\u195a\u1960"+
		"\u1964\u1968\u1971\u1977\u197c\u197f\u1985\u198a\u198d\u1993\u1998\u199a"+
		"\u199f\u19a5\u19aa\u19ad\u19b3\u19b9\u19bf\u19c1\u19c7\u19cd\u19d1\u19d8"+
		"\u19de\u19e5\u19e8\u19ea\u19ed\u19f4\u19f6\u19fc\u1a04\u1a07\u1a15\u1a19"+
		"\u1a1e\u1a22\u1a25\u1a2a\u1a2e\u1a36\u1a3e\u1a40\u1a47\u1a4f\u1a56\u1a59"+
		"\u1a5f\u1a63\u1a6b\u1a76\u1a7f\u1a82\u1a87\u1a89\u1a8c\u1a8f\u1a93\u1a96"+
		"\u1a9a\u1a9f\u1aa2\u1aa6\u1aa9\u1aad\u1ab2\u1ab6\u1ac2\u1ac6\u1acc\u1acf"+
		"\u1ad4\u1ad8\u1adc\u1ae1\u1aea\u1aed\u1af1\u1af5\u1af8\u1afc\u1b00\u1b05"+
		"\u1b0a\u1b10\u1b15\u1b1a\u1b26\u1b2b\u1b32\u1b3a\u1b40\u1b42\u1b46\u1b4b"+
		"\u1b4f\u1b54\u1b63\u1b68\u1b6c\u1b71\u1b77\u1b7b\u1b81\u1b86\u1b8b\u1b90"+
		"\u1b95\u1b9a\u1ba0\u1ba6\u1bab\u1bb0\u1bb6\u1bbb\u1bc0\u1bc5\u1bca\u1bd4"+
		"\u1bda\u1be0\u1be6\u1be9\u1bf0\u1bf5\u1bf8\u1bfc\u1bff\u1c03\u1c08\u1c0c"+
		"\u1c16\u1c19\u1c1c\u1c1f\u1c23\u1c27\u1c2b\u1c3b\u1c3e\u1c40\u1c45\u1c4e"+
		"\u1c51\u1c55\u1c62\u1c6e\u1c73\u1c78\u1c81\u1c86\u1c8f\u1c94\u1c98\u1c9c"+
		"\u1ca0\u1ca5\u1caa\u1cb0\u1cb5\u1cb8\u1cbf\u1cc8\u1ccf\u1cdd\u1ce7\u1cf4"+
		"\u1cfc\u1d03\u1d0c\u1d12\u1d1a\u1d20\u1d2b\u1d33\u1d3b\u1d44\u1d47\u1d49"+
		"\u1d4b\u1d51\u1d55\u1d57\u1d5e\u1d6c\u1d6e\u1d78\u1d81\u1d8e\u1da2\u1da6"+
		"\u1dbe\u1dc9\u1dcb\u1dcf\u1dd6\u1dde\u1de5\u1deb\u1dfa\u1dfe\u1e05\u1e0e"+
		"\u1e13\u1e15\u1e1b\u1e2e\u1e33\u1e36\u1e3d\u1e45\u1e4d\u1e52\u1e55\u1e59"+
		"\u1e5e\u1e69\u1e78\u1e7c\u1e86\u1e8a\u1e8e\u1e9d\u1ea9\u1eb2\u1ebe\u1ec5"+
		"\u1ece\u1ed2";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}