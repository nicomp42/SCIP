/*
 * Bill Nicholson
 * nicholdw@ucmail.uc.edu
 */
package edu.nicholdw.PhD.CodeProject.ETL;

import java.io.File;
import java.io.IOException;
import java.util.List;

import edu.UC.PhD.CodeProject.nicholdw.CombinationLookupUpdateStep;
import edu.UC.PhD.CodeProject.nicholdw.DBJoinStep;
import edu.UC.PhD.CodeProject.nicholdw.DBLookupStep;
import edu.UC.PhD.CodeProject.nicholdw.DimLookupUpdateStep;
import edu.UC.PhD.CodeProject.nicholdw.OutputStep;
import edu.UC.PhD.CodeProject.nicholdw.TableInputStep;
import edu.UC.PhD.CodeProject.nicholdw.Utils;
import edu.UC.PhD.CodeProject.nicholdw.log.Log;
import edu.UC.PhD.CodeProject.nicholdw.schemaChangeImpactProject.SchemaChangeImpactProject;

/**
 * Convert XML files in the ETL step, generated by Pentaho, to CSV files.
 * These CSV files will be imported into the graph DB
 * @author nicomp
 */
public class ETLToCSV {
	private String pentahoProjectDirectory;
	/**
	 * Do both op-ids and ids-dwh layers of the ETL process
	 * @param scip The SchemaChangeImpactProject to be processed.
	 * @throws Exception if something goes wrong.
	 */
	public void convertETLToCSV(SchemaChangeImpactProject scip) throws Exception {
		String csv_path;

		pentahoProjectDirectory= scip.getPentahoProjectDirectory();
		//This is the location where csv files will be generated
		csv_path = Utils.formatPath(Utils.formatPath(scip.getFullProjectPath()) + SchemaChangeImpactProject.opsIdsSubdirectory); 				//"C:\\Users\\usplib\\workspace\\ImpactAssessmentProject\\csvfiles\\op-ids\\";
		deleteCSVFiles(csv_path);
		generateCsvData(csv_path);
		generateDimensionLookupUpdateStepCsvData(csv_path + "dimlookupupdate_steps.csv");

		csv_path = Utils.formatPath(Utils.formatPath(scip.getFullProjectPath()) + "/" + SchemaChangeImpactProject.idsDwhSubdirectory); 				// "C:\\Users\\usplib\\workspace\\ImpactAssessmentProject\\csvfiles\\ids-dwh\\";
		deleteCSVFiles(csv_path);
		generateCsvData(csv_path);
		generateDimensionLookupUpdateStepCsvData(csv_path + "dimlookupupdate_steps.csv");
	}
	public void deleteCSVFiles(String foldername) {
		File folder = new File(foldername);
		File[] listOfFiles = folder.listFiles();
		Log.logProgress("ETLToCSV.deleteCSVFiles(): Number of files to be deleted:" + listOfFiles.length + " from " + foldername);
		for (int i = 0; i < listOfFiles.length; i++) {
			if (listOfFiles[i].isFile()) {
				listOfFiles[i].delete();
			}
		}
	}
	// Contains method calls for parsing the ETL XML files and generating CSV. A separate CSV file is generated for each step type.
	public void generateCsvData(String csv_path) {
		generateOutputStepsCsvData(                Utils.formatPath(csv_path) + "output_steps.csv");
		generateInputStepsCsvData(                 Utils.formatPath(csv_path) + "input_steps.csv");
		generateDBLookupStepCsvData(               Utils.formatPath(csv_path) + "dblookup_steps.csv");
		generateDBJoinStepCsvData(                 Utils.formatPath(csv_path) + "dbjoin_steps.csv");
		generateDimensionLookupUpdateStepCsvData(  Utils.formatPath(csv_path) + "dimlookupupdate_steps.csv");
		generateCombinationLookupUpdateStepCsvData(Utils.formatPath(csv_path) + "comblookupupdate_steps.csv");
	}
	/***
	 * Parses XML and generate CSV for Output step types - Insert/Update and TableOutput.
	 * @param csvPath Where to put the CSV files
	 */
	public void generateOutputStepsCsvData(String csvPath){
		XMLParser xmlparser=new XMLParser();
		File folder = new File(pentahoProjectDirectory);
		File[] listOfFiles = folder.listFiles();
		for (int i = 0; i < listOfFiles.length; i++) {
			if (listOfFiles[i].isFile()) {
				List<OutputStep> outputSteps = xmlparser.parseXMLForOutputSteps(pentahoProjectDirectory+"/" + listOfFiles[i].getName());
				ETLExcelExporter.generateOutputStepsCsvFile(csvPath, outputSteps);
			}
		}
	}
	/***
	 * Generate CSV files from Pentaho Project XML files. You don't need a Pentaho project, just the location of the XML files
	 * Parses XML and generate CSV for Output step types - Insert/Update and TableOutput.
	 * @param csvPath Where to put the CSV files
	 * @param pentahoProjectDirectory Where to fund the Pentaho Project XML files
	 */
	public static void generateOutputStepsCsvData(String csvPath, String pentahoProjectDirectory){
		XMLParser xmlparser=new XMLParser();
		File folder = new File(pentahoProjectDirectory);
		File[] listOfFiles = folder.listFiles();
		for (int i = 0; i < listOfFiles.length; i++) {
			if (listOfFiles[i].isFile()) {
				List<OutputStep> outputSteps = xmlparser.parseXMLForOutputSteps(pentahoProjectDirectory+"/" + listOfFiles[i].getName());
				ETLExcelExporter.generateOutputStepsCsvFile(csvPath, outputSteps);
			}
		}
	}
	public void generateInputStepsCsvData(String csvPath, String pentahoProjectDirectory){
		XMLParser xmlparser=new XMLParser();
		File folder = new File(pentahoProjectDirectory);
		File[] listOfFiles = folder.listFiles();
		for (int i = 0; i < listOfFiles.length; i++) {
			if (listOfFiles[i].isFile()) {
				//One transformation can be read from multiple data sources
				List<TableInputStep> inputSteps = xmlparser.parseXMLForInputSteps(pentahoProjectDirectory+"/" + listOfFiles[i].getName());
				ETLExcelExporter.generateInputStepsCsvFile(csvPath, inputSteps);
			}
		}
	}
	public void generateInputStepsCsvData(String csvPath){
		XMLParser xmlparser=new XMLParser();
		File folder = new File(pentahoProjectDirectory);
		File[] listOfFiles = folder.listFiles();
		for (int i = 0; i < listOfFiles.length; i++) {
			if (listOfFiles[i].isFile()) {
				//One transformation can be read from multiple data sources
				List<TableInputStep> inputSteps = xmlparser.parseXMLForInputSteps(pentahoProjectDirectory+"/" + listOfFiles[i].getName());
				ETLExcelExporter.generateInputStepsCsvFile(csvPath, inputSteps);
			}
		}
	}
	public void generateDBLookupStepCsvData(String csvPath){
		XMLParser xmlparser=new XMLParser();
		File folder = new File(pentahoProjectDirectory);
		File[] listOfFiles = folder.listFiles();
		for (int i = 0; i < listOfFiles.length; i++) {
			if (listOfFiles[i].isFile()) {
				//One transformation can be reading from multiple data sources
				List<DBLookupStep> dblookupsteps= xmlparser.parseXMLForDBLookupSteps(pentahoProjectDirectory+"/" + listOfFiles[i].getName());
				ETLExcelExporter.generateDBLookupCsvFile(csvPath, dblookupsteps);
			}
		}
	}
	public void generateDimensionLookupUpdateStepCsvData(String csvPath){

		XMLParser xmlparser=new XMLParser();
		File folder = new File(pentahoProjectDirectory);
		File[] listOfFiles = folder.listFiles();
		for (int i = 0; i < listOfFiles.length; i++) {
			if (listOfFiles[i].isFile()) {
				List<DimLookupUpdateStep> dimlookupupdatesteps = xmlparser.parseXMLForDimLookupUpdateSteps(pentahoProjectDirectory + "/" + listOfFiles[i].getName());
				ETLExcelExporter.generateDimLookupUpdateCsvFile(csvPath, dimlookupupdatesteps);
			}
		}
	}
	public void generateCombinationLookupUpdateStepCsvData(String csvPath){

		XMLParser xmlparser=new XMLParser();
		File folder = new File(pentahoProjectDirectory);
		File[] listOfFiles = folder.listFiles();
		for (int i = 0; i < listOfFiles.length; i++) {
			if (listOfFiles[i].isFile()) {
//				System.out.println("**********File " + listOfFiles[i].getName());
				List<CombinationLookupUpdateStep> combinationlookupupdatesteps=
						xmlparser.parseXMLForCombinationLookupUpdateSteps(pentahoProjectDirectory + "/" + listOfFiles[i].getName());
				ETLExcelExporter.generateCombLookupUpdateCsvFile(csvPath, combinationlookupupdatesteps);

			}
		}
	}
	public void generateDBJoinStepCsvData(String csvPath){

		XMLParser xmlparser=new XMLParser();
		File folder = new File(pentahoProjectDirectory);
		File[] listOfFiles = folder.listFiles();
		for (int i = 0; i < listOfFiles.length; i++) {
			if (listOfFiles[i].isFile()) {
				System.out.println("**********File " + listOfFiles[i].getName());
				//One transformation can be reading from multiple data sources
				List<DBJoinStep> dbjoinsteps = xmlparser.parseXMLForDBJoinSteps(pentahoProjectDirectory + "/" + listOfFiles[i].getName());
				ETLExcelExporter.generateDBJoinCsvFile(csvPath, dbjoinsteps);
			}
		}
	}
}
